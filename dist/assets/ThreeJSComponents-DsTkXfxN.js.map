{"version":3,"file":"ThreeJSComponents-DsTkXfxN.js","sources":["../../src/components/Constellation/ThreeJSComponents.tsx"],"sourcesContent":["import { Canvas } from '@react-three/fiber';\r\nimport { OrbitControls, Stars } from '@react-three/drei';\r\nimport { NodesInstanced } from './NodesInstanced';\r\nimport { ConnectionsBatched } from './ConnectionsBatched';\r\nimport { InstancedMesh, Color } from 'three';\r\nimport * as THREE from 'three';\r\nimport { useThree } from '@react-three/fiber';\r\nimport { useState, useEffect, useMemo, MutableRefObject, useRef } from 'react';\r\n\r\n// Import node types from store or create interface\r\nimport { ConstellationNode, Connection, NodePositions } from '../../types';\r\n\r\n// Convert connection format from source/target to start/end\r\nconst convertConnections = (connections: Connection[]): { start: string; end: string }[] => {\r\n  return connections.map(conn => ({\r\n    start: conn.source,\r\n    end: conn.target\r\n  }));\r\n};\r\n\r\ninterface ThreeJSComponentsProps {\r\n  nodes: ConstellationNode[];\r\n  nodePositions: NodePositions;\r\n  connections: Connection[];\r\n  mappedConnections: { source: string; target: string }[];\r\n  instancedMeshRef: MutableRefObject<InstancedMesh>;\r\n  onWebGLContextCreated?: (renderer: THREE.WebGLRenderer) => void; // Callback when WebGL renderer is created\r\n  onWebGLError?: (error: Error) => void; // Callback for WebGL errors\r\n  isInitialChoicePhase: boolean;\r\n  positionSynchronizer: {\r\n    updatePositions: (time: number, isMinimap?: boolean) => { [key: string]: [number, number, number] };\r\n    getCurrentPositions: () => { [key: string]: [number, number, number] };\r\n  };\r\n}\r\n\r\n// WebGL error handler component\r\nconst WebGLErrorHandler = () => {\r\n  const { gl } = useThree();\r\n  const [hasError, setHasError] = useState(false);\r\n  \r\n  useEffect(() => {\r\n    if (!gl.domElement) return;\r\n    \r\n    // Handle WebGL context loss\r\n    const handleContextLost = (event: Event) => {\r\n      console.error(\"[ThreeJS] WebGL context lost\", event);\r\n      setHasError(true);\r\n      // Prevent the default behavior which would attempt automatic recovery\r\n      event.preventDefault();\r\n    };\r\n    \r\n    // Handle WebGL context restoration\r\n    const handleContextRestored = (event: Event) => {\r\n      console.log(\"[ThreeJS] WebGL context restored\", event);\r\n      setHasError(false);\r\n    };\r\n    \r\n    // Add event listeners to the canvas\r\n    gl.domElement.addEventListener('webglcontextlost', handleContextLost);\r\n    gl.domElement.addEventListener('webglcontextrestored', handleContextRestored);\r\n    \r\n    return () => {\r\n      // Clean up event listeners\r\n      gl.domElement.removeEventListener('webglcontextlost', handleContextLost);\r\n      gl.domElement.removeEventListener('webglcontextrestored', handleContextRestored);\r\n    };\r\n  }, [gl]);\r\n  \r\n  // Display error message when context is lost\r\n  if (hasError) {\r\n    return (\r\n      <group>\r\n        <mesh position={[0, 0, -5]}>\r\n          <planeGeometry args={[10, 2]} />\r\n          <meshBasicMaterial color=\"red\" transparent opacity={0.8} />\r\n        </mesh>\r\n      </group>\r\n    );\r\n  }\r\n  \r\n  return null;\r\n};\r\n\r\n// Simplified resource optimizer component - reduced logging and overhead\r\nconst ResourceOptimizer = () => {\r\n  const { gl } = useThree();\r\n  // Removed unused ref\r\n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\r\n  \r\n  useEffect(() => {\r\n    // Set WebGL parameters for better stability\r\n    try {\r\n      gl.getContext().getExtension('WEBGL_lose_context');\r\n    } catch (err) {\r\n      console.warn(\"[ThreeJS] Could not get WebGL extension:\", err);\r\n    }\r\n    \r\n    // Clear any existing interval to prevent duplicates\r\n    if (intervalRef.current) {\r\n      clearInterval(intervalRef.current);\r\n      intervalRef.current = null;\r\n    }\r\n    \r\n    // Return cleanup function without creating new interval -\r\n    // removed continuous memory monitoring to reduce overhead\r\n    return () => {\r\n      if (intervalRef.current) {\r\n        clearInterval(intervalRef.current);\r\n        intervalRef.current = null;\r\n      }\r\n    };\r\n  }, [gl]);\r\n  \r\n  return null;\r\n};\r\n\r\nconst ThreeJSComponents: React.FC<ThreeJSComponentsProps> = ({\r\n  nodes,\r\n  nodePositions,\r\n  connections,\r\n  mappedConnections,\r\n  instancedMeshRef,\r\n  onWebGLContextCreated,\r\n  onWebGLError,\r\n  isInitialChoicePhase,\r\n  positionSynchronizer,\r\n}) => {\r\n  // Memoize Canvas component to prevent unnecessary recreation\r\n  return useMemo(() => (\r\n    <Canvas\r\n      camera={{ \r\n        position: [0, 0, 70], // Move camera further back to push constellation away\r\n        fov: 45, // CRITICAL FIX: Wider field of view to see more nodes\r\n        near: 1, // CRITICAL FIX: Closer near plane\r\n        far: 200 // CRITICAL FIX: Further far plane\r\n      }}\r\n      gl={{\r\n        powerPreference: \"default\",\r\n        antialias: false,\r\n        precision: \"lowp\", // Use low precision to save resources and improve stability\r\n        logarithmicDepthBuffer: false,\r\n        stencil: false,\r\n        alpha: true,\r\n        preserveDrawingBuffer: true,\r\n        failIfMajorPerformanceCaveat: false // Don't fail on low-end hardware\r\n      }}\r\n      onCreated={({ gl }) => {\r\n        // Simplified logging\r\n        console.log(\"[ThreeJS] WebGL context created\");\r\n        \r\n        // Explicitly discard depth and stencil buffers to save memory\r\n        const context = gl.getContext();\r\n        if (context) {\r\n          context.pixelStorei(context.UNPACK_COLORSPACE_CONVERSION_WEBGL, context.NONE);\r\n        }\r\n\r\n        // Notify parent component about WebGL context creation\r\n        if (onWebGLContextCreated) {\r\n          onWebGLContextCreated(gl);\r\n        }\r\n        \r\n        // Add context loss handling with simplified error reporting\r\n        const canvas = gl.domElement;\r\n        canvas.addEventListener('webglcontextlost', (event) => {\r\n          console.error(\"[ThreeJS] WebGL context lost event triggered\");\r\n          \r\n          event.preventDefault();\r\n          if (onWebGLError) {\r\n            onWebGLError(new Error(\"WebGL context lost\"));\r\n          }\r\n        });\r\n        \r\n        canvas.addEventListener('webglcontextrestored', () => {\r\n          console.log(\"[ThreeJS] WebGL context restored\");\r\n        });\r\n      }}\r\n      performance={{ min: 0.5 }}\r\n      frameloop=\"demand\"\r\n      dpr={[0.5, 1.0]} // Lower resolution range for better stability\r\n    >\r\n      {/* Enhanced lighting setup for better visual effects */}\r\n      <color attach=\"background\" args={[0x020209]} />\r\n      <fog attach=\"fog\" args={[0x020209, 30, 80]} />\r\n      \r\n      {/* Stars background - further optimized with reduced count and adaptive visibility */}\r\n      <AdaptiveStars />\r\n      \r\n      {/* Ambient light for overall scene illumination */}\r\n      <ambientLight intensity={0.2} />\r\n      \r\n      {/* Main directional light */}\r\n      <directionalLight\r\n        position={[10, 10, 10]}\r\n        intensity={0.8}\r\n        color={new Color(0xffffff)}\r\n      />\r\n      \r\n      {/* Additional point lights for atmosphere */}\r\n      <pointLight\r\n        position={[0, 10, 0]}\r\n        intensity={0.5}\r\n        color={new Color(0x8866ff)}\r\n      />\r\n      <pointLight\r\n        position={[-10, -10, -10]}\r\n        intensity={0.3}\r\n        color={new Color(0x6688ff)}\r\n      />\r\n      \r\n      {/* Constellation components */}\r\n      {/* Explicitly pass separate refs to avoid sharing ref issues */}\r\n      <NodesInstanced\r\n        ref={instancedMeshRef}\r\n        nodes={nodes}\r\n        nodePositions={nodePositions}\r\n        connections={convertConnections(connections)}\r\n        isInitialChoicePhase={isInitialChoicePhase}\r\n        positionSynchronizer={positionSynchronizer}\r\n      />\r\n      <ConnectionsBatched\r\n        // No longer passing ref here since ConnectionsBatched doesn't use it\r\n        connections={mappedConnections}\r\n        nodePositions={nodePositions}\r\n        positionSynchronizer={positionSynchronizer}\r\n      />\r\n      \r\n      {/* Add WebGL error handler */}\r\n      <WebGLErrorHandler />\r\n      \r\n      {/* Add resource optimizer */}\r\n      <ResourceOptimizer />\r\n      \r\n      {/* Post-processing effects - disabled for stability */}\r\n      <OptimizedEffects />\r\n      \r\n      {/* Camera controls */}\r\n      <OrbitControls\r\n        enableDamping\r\n        dampingFactor={0.05}\r\n        rotateSpeed={0.5}\r\n        minDistance={50} // Increase minimum zoom distance for further back constellation\r\n        maxDistance={120} // Increase maximum zoom distance for further back constellation\r\n        enableZoom={true}\r\n        zoomSpeed={0.5} // Slower zoom for better control\r\n        enablePan={true}\r\n        panSpeed={0.5} // Slower pan for better control\r\n        maxPolarAngle={Math.PI} // Allow full vertical rotation\r\n        minPolarAngle={0} // Allow full vertical rotation\r\n      />\r\n    </Canvas>\r\n  ), [nodes, nodePositions, connections, mappedConnections, instancedMeshRef, isInitialChoicePhase, onWebGLContextCreated, onWebGLError, positionSynchronizer]);\r\n};\r\n\r\n// Simplified stars component with fixed parameters to reduce render overhead\r\nconst AdaptiveStars = () => {\r\n  // Fixed star count - prevents continuous re-rendering\r\n  const starCount = 1000;\r\n  \r\n  return (\r\n    <Stars\r\n      radius={50}\r\n      depth={25}\r\n      count={starCount}\r\n      factor={3}\r\n      saturation={0.2}\r\n      fade\r\n      speed={0.1} // Reduced animation speed\r\n    />\r\n  );\r\n};\r\n\r\n// Custom useRef implementation removed to avoid conflict with React's useRef\r\n\r\n// Simplified post-processing effects - completely disabled for stability\r\nconst OptimizedEffects = () => {\r\n  // Simply return null to disable all post-processing effects\r\n  return null;\r\n};\r\n\r\nexport default ThreeJSComponents;"],"names":["convertConnections","connections","conn","WebGLErrorHandler","gl","useThree","hasError","setHasError","useState","useEffect","handleContextLost","event","handleContextRestored","jsx","jsxs","ResourceOptimizer","intervalRef","useRef","err","ThreeJSComponents","nodes","nodePositions","mappedConnections","instancedMeshRef","onWebGLContextCreated","onWebGLError","isInitialChoicePhase","positionSynchronizer","useMemo","Canvas","context","canvas","AdaptiveStars","Color","NodesInstanced","ConnectionsBatched","OptimizedEffects","OrbitControls","Stars"],"mappings":"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"}