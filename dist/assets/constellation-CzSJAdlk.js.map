{"version":3,"file":"constellation-CzSJAdlk.js","sources":["../../node_modules/immer/dist/immer.mjs","../../node_modules/reselect/dist/reselect.mjs","../../node_modules/redux-thunk/dist/redux-thunk.mjs","../../node_modules/@reduxjs/toolkit/dist/redux-toolkit.modern.mjs","../../src/services/PathAnalyzer.ts","../../src/services/CharacterBleedService.ts","../../src/services/TransformationEngine.ts","../../src/services/ContentVariantService.ts","../../src/services/TransformationService.ts","../../src/store/slices/nodesSlice.ts","../../src/types/index.ts","../../src/store/slices/readerSlice.ts","../../src/store/slices/interfaceSlice.ts"],"sourcesContent":["// src/utils/env.ts\r\nvar NOTHING = Symbol.for(\"immer-nothing\");\r\nvar DRAFTABLE = Symbol.for(\"immer-draftable\");\r\nvar DRAFT_STATE = Symbol.for(\"immer-state\");\r\n\r\n// src/utils/errors.ts\r\nvar errors = process.env.NODE_ENV !== \"production\" ? [\r\n  // All error codes, starting by 0:\r\n  function(plugin) {\r\n    return `The plugin for '${plugin}' has not been loaded into Immer. To enable the plugin, import and call \\`enable${plugin}()\\` when initializing your application.`;\r\n  },\r\n  function(thing) {\r\n    return `produce can only be called on things that are draftable: plain objects, arrays, Map, Set or classes that are marked with '[immerable]: true'. Got '${thing}'`;\r\n  },\r\n  \"This object has been frozen and should not be mutated\",\r\n  function(data) {\r\n    return \"Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? \" + data;\r\n  },\r\n  \"An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.\",\r\n  \"Immer forbids circular references\",\r\n  \"The first or second argument to `produce` must be a function\",\r\n  \"The third argument to `produce` must be a function or undefined\",\r\n  \"First argument to `createDraft` must be a plain object, an array, or an immerable object\",\r\n  \"First argument to `finishDraft` must be a draft returned by `createDraft`\",\r\n  function(thing) {\r\n    return `'current' expects a draft, got: ${thing}`;\r\n  },\r\n  \"Object.defineProperty() cannot be used on an Immer draft\",\r\n  \"Object.setPrototypeOf() cannot be used on an Immer draft\",\r\n  \"Immer only supports deleting array indices\",\r\n  \"Immer only supports setting array indices and the 'length' property\",\r\n  function(thing) {\r\n    return `'original' expects a draft, got: ${thing}`;\r\n  }\r\n  // Note: if more errors are added, the errorOffset in Patches.ts should be increased\r\n  // See Patches.ts for additional errors\r\n] : [];\r\nfunction die(error, ...args) {\r\n  if (process.env.NODE_ENV !== \"production\") {\r\n    const e = errors[error];\r\n    const msg = typeof e === \"function\" ? e.apply(null, args) : e;\r\n    throw new Error(`[Immer] ${msg}`);\r\n  }\r\n  throw new Error(\r\n    `[Immer] minified error nr: ${error}. Full error at: https://bit.ly/3cXEKWf`\r\n  );\r\n}\r\n\r\n// src/utils/common.ts\r\nvar getPrototypeOf = Object.getPrototypeOf;\r\nfunction isDraft(value) {\r\n  return !!value && !!value[DRAFT_STATE];\r\n}\r\nfunction isDraftable(value) {\r\n  if (!value)\r\n    return false;\r\n  return isPlainObject(value) || Array.isArray(value) || !!value[DRAFTABLE] || !!value.constructor?.[DRAFTABLE] || isMap(value) || isSet(value);\r\n}\r\nvar objectCtorString = Object.prototype.constructor.toString();\r\nfunction isPlainObject(value) {\r\n  if (!value || typeof value !== \"object\")\r\n    return false;\r\n  const proto = getPrototypeOf(value);\r\n  if (proto === null) {\r\n    return true;\r\n  }\r\n  const Ctor = Object.hasOwnProperty.call(proto, \"constructor\") && proto.constructor;\r\n  if (Ctor === Object)\r\n    return true;\r\n  return typeof Ctor == \"function\" && Function.toString.call(Ctor) === objectCtorString;\r\n}\r\nfunction original(value) {\r\n  if (!isDraft(value))\r\n    die(15, value);\r\n  return value[DRAFT_STATE].base_;\r\n}\r\nfunction each(obj, iter) {\r\n  if (getArchtype(obj) === 0 /* Object */) {\r\n    Reflect.ownKeys(obj).forEach((key) => {\r\n      iter(key, obj[key], obj);\r\n    });\r\n  } else {\r\n    obj.forEach((entry, index) => iter(index, entry, obj));\r\n  }\r\n}\r\nfunction getArchtype(thing) {\r\n  const state = thing[DRAFT_STATE];\r\n  return state ? state.type_ : Array.isArray(thing) ? 1 /* Array */ : isMap(thing) ? 2 /* Map */ : isSet(thing) ? 3 /* Set */ : 0 /* Object */;\r\n}\r\nfunction has(thing, prop) {\r\n  return getArchtype(thing) === 2 /* Map */ ? thing.has(prop) : Object.prototype.hasOwnProperty.call(thing, prop);\r\n}\r\nfunction get(thing, prop) {\r\n  return getArchtype(thing) === 2 /* Map */ ? thing.get(prop) : thing[prop];\r\n}\r\nfunction set(thing, propOrOldValue, value) {\r\n  const t = getArchtype(thing);\r\n  if (t === 2 /* Map */)\r\n    thing.set(propOrOldValue, value);\r\n  else if (t === 3 /* Set */) {\r\n    thing.add(value);\r\n  } else\r\n    thing[propOrOldValue] = value;\r\n}\r\nfunction is(x, y) {\r\n  if (x === y) {\r\n    return x !== 0 || 1 / x === 1 / y;\r\n  } else {\r\n    return x !== x && y !== y;\r\n  }\r\n}\r\nfunction isMap(target) {\r\n  return target instanceof Map;\r\n}\r\nfunction isSet(target) {\r\n  return target instanceof Set;\r\n}\r\nfunction latest(state) {\r\n  return state.copy_ || state.base_;\r\n}\r\nfunction shallowCopy(base, strict) {\r\n  if (isMap(base)) {\r\n    return new Map(base);\r\n  }\r\n  if (isSet(base)) {\r\n    return new Set(base);\r\n  }\r\n  if (Array.isArray(base))\r\n    return Array.prototype.slice.call(base);\r\n  const isPlain = isPlainObject(base);\r\n  if (strict === true || strict === \"class_only\" && !isPlain) {\r\n    const descriptors = Object.getOwnPropertyDescriptors(base);\r\n    delete descriptors[DRAFT_STATE];\r\n    let keys = Reflect.ownKeys(descriptors);\r\n    for (let i = 0; i < keys.length; i++) {\r\n      const key = keys[i];\r\n      const desc = descriptors[key];\r\n      if (desc.writable === false) {\r\n        desc.writable = true;\r\n        desc.configurable = true;\r\n      }\r\n      if (desc.get || desc.set)\r\n        descriptors[key] = {\r\n          configurable: true,\r\n          writable: true,\r\n          // could live with !!desc.set as well here...\r\n          enumerable: desc.enumerable,\r\n          value: base[key]\r\n        };\r\n    }\r\n    return Object.create(getPrototypeOf(base), descriptors);\r\n  } else {\r\n    const proto = getPrototypeOf(base);\r\n    if (proto !== null && isPlain) {\r\n      return { ...base };\r\n    }\r\n    const obj = Object.create(proto);\r\n    return Object.assign(obj, base);\r\n  }\r\n}\r\nfunction freeze(obj, deep = false) {\r\n  if (isFrozen(obj) || isDraft(obj) || !isDraftable(obj))\r\n    return obj;\r\n  if (getArchtype(obj) > 1) {\r\n    obj.set = obj.add = obj.clear = obj.delete = dontMutateFrozenCollections;\r\n  }\r\n  Object.freeze(obj);\r\n  if (deep)\r\n    Object.entries(obj).forEach(([key, value]) => freeze(value, true));\r\n  return obj;\r\n}\r\nfunction dontMutateFrozenCollections() {\r\n  die(2);\r\n}\r\nfunction isFrozen(obj) {\r\n  return Object.isFrozen(obj);\r\n}\r\n\r\n// src/utils/plugins.ts\r\nvar plugins = {};\r\nfunction getPlugin(pluginKey) {\r\n  const plugin = plugins[pluginKey];\r\n  if (!plugin) {\r\n    die(0, pluginKey);\r\n  }\r\n  return plugin;\r\n}\r\nfunction loadPlugin(pluginKey, implementation) {\r\n  if (!plugins[pluginKey])\r\n    plugins[pluginKey] = implementation;\r\n}\r\n\r\n// src/core/scope.ts\r\nvar currentScope;\r\nfunction getCurrentScope() {\r\n  return currentScope;\r\n}\r\nfunction createScope(parent_, immer_) {\r\n  return {\r\n    drafts_: [],\r\n    parent_,\r\n    immer_,\r\n    // Whenever the modified draft contains a draft from another scope, we\r\n    // need to prevent auto-freezing so the unowned draft can be finalized.\r\n    canAutoFreeze_: true,\r\n    unfinalizedDrafts_: 0\r\n  };\r\n}\r\nfunction usePatchesInScope(scope, patchListener) {\r\n  if (patchListener) {\r\n    getPlugin(\"Patches\");\r\n    scope.patches_ = [];\r\n    scope.inversePatches_ = [];\r\n    scope.patchListener_ = patchListener;\r\n  }\r\n}\r\nfunction revokeScope(scope) {\r\n  leaveScope(scope);\r\n  scope.drafts_.forEach(revokeDraft);\r\n  scope.drafts_ = null;\r\n}\r\nfunction leaveScope(scope) {\r\n  if (scope === currentScope) {\r\n    currentScope = scope.parent_;\r\n  }\r\n}\r\nfunction enterScope(immer2) {\r\n  return currentScope = createScope(currentScope, immer2);\r\n}\r\nfunction revokeDraft(draft) {\r\n  const state = draft[DRAFT_STATE];\r\n  if (state.type_ === 0 /* Object */ || state.type_ === 1 /* Array */)\r\n    state.revoke_();\r\n  else\r\n    state.revoked_ = true;\r\n}\r\n\r\n// src/core/finalize.ts\r\nfunction processResult(result, scope) {\r\n  scope.unfinalizedDrafts_ = scope.drafts_.length;\r\n  const baseDraft = scope.drafts_[0];\r\n  const isReplaced = result !== void 0 && result !== baseDraft;\r\n  if (isReplaced) {\r\n    if (baseDraft[DRAFT_STATE].modified_) {\r\n      revokeScope(scope);\r\n      die(4);\r\n    }\r\n    if (isDraftable(result)) {\r\n      result = finalize(scope, result);\r\n      if (!scope.parent_)\r\n        maybeFreeze(scope, result);\r\n    }\r\n    if (scope.patches_) {\r\n      getPlugin(\"Patches\").generateReplacementPatches_(\r\n        baseDraft[DRAFT_STATE].base_,\r\n        result,\r\n        scope.patches_,\r\n        scope.inversePatches_\r\n      );\r\n    }\r\n  } else {\r\n    result = finalize(scope, baseDraft, []);\r\n  }\r\n  revokeScope(scope);\r\n  if (scope.patches_) {\r\n    scope.patchListener_(scope.patches_, scope.inversePatches_);\r\n  }\r\n  return result !== NOTHING ? result : void 0;\r\n}\r\nfunction finalize(rootScope, value, path) {\r\n  if (isFrozen(value))\r\n    return value;\r\n  const state = value[DRAFT_STATE];\r\n  if (!state) {\r\n    each(\r\n      value,\r\n      (key, childValue) => finalizeProperty(rootScope, state, value, key, childValue, path)\r\n    );\r\n    return value;\r\n  }\r\n  if (state.scope_ !== rootScope)\r\n    return value;\r\n  if (!state.modified_) {\r\n    maybeFreeze(rootScope, state.base_, true);\r\n    return state.base_;\r\n  }\r\n  if (!state.finalized_) {\r\n    state.finalized_ = true;\r\n    state.scope_.unfinalizedDrafts_--;\r\n    const result = state.copy_;\r\n    let resultEach = result;\r\n    let isSet2 = false;\r\n    if (state.type_ === 3 /* Set */) {\r\n      resultEach = new Set(result);\r\n      result.clear();\r\n      isSet2 = true;\r\n    }\r\n    each(\r\n      resultEach,\r\n      (key, childValue) => finalizeProperty(rootScope, state, result, key, childValue, path, isSet2)\r\n    );\r\n    maybeFreeze(rootScope, result, false);\r\n    if (path && rootScope.patches_) {\r\n      getPlugin(\"Patches\").generatePatches_(\r\n        state,\r\n        path,\r\n        rootScope.patches_,\r\n        rootScope.inversePatches_\r\n      );\r\n    }\r\n  }\r\n  return state.copy_;\r\n}\r\nfunction finalizeProperty(rootScope, parentState, targetObject, prop, childValue, rootPath, targetIsSet) {\r\n  if (process.env.NODE_ENV !== \"production\" && childValue === targetObject)\r\n    die(5);\r\n  if (isDraft(childValue)) {\r\n    const path = rootPath && parentState && parentState.type_ !== 3 /* Set */ && // Set objects are atomic since they have no keys.\r\n    !has(parentState.assigned_, prop) ? rootPath.concat(prop) : void 0;\r\n    const res = finalize(rootScope, childValue, path);\r\n    set(targetObject, prop, res);\r\n    if (isDraft(res)) {\r\n      rootScope.canAutoFreeze_ = false;\r\n    } else\r\n      return;\r\n  } else if (targetIsSet) {\r\n    targetObject.add(childValue);\r\n  }\r\n  if (isDraftable(childValue) && !isFrozen(childValue)) {\r\n    if (!rootScope.immer_.autoFreeze_ && rootScope.unfinalizedDrafts_ < 1) {\r\n      return;\r\n    }\r\n    finalize(rootScope, childValue);\r\n    if ((!parentState || !parentState.scope_.parent_) && typeof prop !== \"symbol\" && Object.prototype.propertyIsEnumerable.call(targetObject, prop))\r\n      maybeFreeze(rootScope, childValue);\r\n  }\r\n}\r\nfunction maybeFreeze(scope, value, deep = false) {\r\n  if (!scope.parent_ && scope.immer_.autoFreeze_ && scope.canAutoFreeze_) {\r\n    freeze(value, deep);\r\n  }\r\n}\r\n\r\n// src/core/proxy.ts\r\nfunction createProxyProxy(base, parent) {\r\n  const isArray = Array.isArray(base);\r\n  const state = {\r\n    type_: isArray ? 1 /* Array */ : 0 /* Object */,\r\n    // Track which produce call this is associated with.\r\n    scope_: parent ? parent.scope_ : getCurrentScope(),\r\n    // True for both shallow and deep changes.\r\n    modified_: false,\r\n    // Used during finalization.\r\n    finalized_: false,\r\n    // Track which properties have been assigned (true) or deleted (false).\r\n    assigned_: {},\r\n    // The parent draft state.\r\n    parent_: parent,\r\n    // The base state.\r\n    base_: base,\r\n    // The base proxy.\r\n    draft_: null,\r\n    // set below\r\n    // The base copy with any updated values.\r\n    copy_: null,\r\n    // Called by the `produce` function.\r\n    revoke_: null,\r\n    isManual_: false\r\n  };\r\n  let target = state;\r\n  let traps = objectTraps;\r\n  if (isArray) {\r\n    target = [state];\r\n    traps = arrayTraps;\r\n  }\r\n  const { revoke, proxy } = Proxy.revocable(target, traps);\r\n  state.draft_ = proxy;\r\n  state.revoke_ = revoke;\r\n  return proxy;\r\n}\r\nvar objectTraps = {\r\n  get(state, prop) {\r\n    if (prop === DRAFT_STATE)\r\n      return state;\r\n    const source = latest(state);\r\n    if (!has(source, prop)) {\r\n      return readPropFromProto(state, source, prop);\r\n    }\r\n    const value = source[prop];\r\n    if (state.finalized_ || !isDraftable(value)) {\r\n      return value;\r\n    }\r\n    if (value === peek(state.base_, prop)) {\r\n      prepareCopy(state);\r\n      return state.copy_[prop] = createProxy(value, state);\r\n    }\r\n    return value;\r\n  },\r\n  has(state, prop) {\r\n    return prop in latest(state);\r\n  },\r\n  ownKeys(state) {\r\n    return Reflect.ownKeys(latest(state));\r\n  },\r\n  set(state, prop, value) {\r\n    const desc = getDescriptorFromProto(latest(state), prop);\r\n    if (desc?.set) {\r\n      desc.set.call(state.draft_, value);\r\n      return true;\r\n    }\r\n    if (!state.modified_) {\r\n      const current2 = peek(latest(state), prop);\r\n      const currentState = current2?.[DRAFT_STATE];\r\n      if (currentState && currentState.base_ === value) {\r\n        state.copy_[prop] = value;\r\n        state.assigned_[prop] = false;\r\n        return true;\r\n      }\r\n      if (is(value, current2) && (value !== void 0 || has(state.base_, prop)))\r\n        return true;\r\n      prepareCopy(state);\r\n      markChanged(state);\r\n    }\r\n    if (state.copy_[prop] === value && // special case: handle new props with value 'undefined'\r\n    (value !== void 0 || prop in state.copy_) || // special case: NaN\r\n    Number.isNaN(value) && Number.isNaN(state.copy_[prop]))\r\n      return true;\r\n    state.copy_[prop] = value;\r\n    state.assigned_[prop] = true;\r\n    return true;\r\n  },\r\n  deleteProperty(state, prop) {\r\n    if (peek(state.base_, prop) !== void 0 || prop in state.base_) {\r\n      state.assigned_[prop] = false;\r\n      prepareCopy(state);\r\n      markChanged(state);\r\n    } else {\r\n      delete state.assigned_[prop];\r\n    }\r\n    if (state.copy_) {\r\n      delete state.copy_[prop];\r\n    }\r\n    return true;\r\n  },\r\n  // Note: We never coerce `desc.value` into an Immer draft, because we can't make\r\n  // the same guarantee in ES5 mode.\r\n  getOwnPropertyDescriptor(state, prop) {\r\n    const owner = latest(state);\r\n    const desc = Reflect.getOwnPropertyDescriptor(owner, prop);\r\n    if (!desc)\r\n      return desc;\r\n    return {\r\n      writable: true,\r\n      configurable: state.type_ !== 1 /* Array */ || prop !== \"length\",\r\n      enumerable: desc.enumerable,\r\n      value: owner[prop]\r\n    };\r\n  },\r\n  defineProperty() {\r\n    die(11);\r\n  },\r\n  getPrototypeOf(state) {\r\n    return getPrototypeOf(state.base_);\r\n  },\r\n  setPrototypeOf() {\r\n    die(12);\r\n  }\r\n};\r\nvar arrayTraps = {};\r\neach(objectTraps, (key, fn) => {\r\n  arrayTraps[key] = function() {\r\n    arguments[0] = arguments[0][0];\r\n    return fn.apply(this, arguments);\r\n  };\r\n});\r\narrayTraps.deleteProperty = function(state, prop) {\r\n  if (process.env.NODE_ENV !== \"production\" && isNaN(parseInt(prop)))\r\n    die(13);\r\n  return arrayTraps.set.call(this, state, prop, void 0);\r\n};\r\narrayTraps.set = function(state, prop, value) {\r\n  if (process.env.NODE_ENV !== \"production\" && prop !== \"length\" && isNaN(parseInt(prop)))\r\n    die(14);\r\n  return objectTraps.set.call(this, state[0], prop, value, state[0]);\r\n};\r\nfunction peek(draft, prop) {\r\n  const state = draft[DRAFT_STATE];\r\n  const source = state ? latest(state) : draft;\r\n  return source[prop];\r\n}\r\nfunction readPropFromProto(state, source, prop) {\r\n  const desc = getDescriptorFromProto(source, prop);\r\n  return desc ? `value` in desc ? desc.value : (\r\n    // This is a very special case, if the prop is a getter defined by the\r\n    // prototype, we should invoke it with the draft as context!\r\n    desc.get?.call(state.draft_)\r\n  ) : void 0;\r\n}\r\nfunction getDescriptorFromProto(source, prop) {\r\n  if (!(prop in source))\r\n    return void 0;\r\n  let proto = getPrototypeOf(source);\r\n  while (proto) {\r\n    const desc = Object.getOwnPropertyDescriptor(proto, prop);\r\n    if (desc)\r\n      return desc;\r\n    proto = getPrototypeOf(proto);\r\n  }\r\n  return void 0;\r\n}\r\nfunction markChanged(state) {\r\n  if (!state.modified_) {\r\n    state.modified_ = true;\r\n    if (state.parent_) {\r\n      markChanged(state.parent_);\r\n    }\r\n  }\r\n}\r\nfunction prepareCopy(state) {\r\n  if (!state.copy_) {\r\n    state.copy_ = shallowCopy(\r\n      state.base_,\r\n      state.scope_.immer_.useStrictShallowCopy_\r\n    );\r\n  }\r\n}\r\n\r\n// src/core/immerClass.ts\r\nvar Immer2 = class {\r\n  constructor(config) {\r\n    this.autoFreeze_ = true;\r\n    this.useStrictShallowCopy_ = false;\r\n    /**\r\n     * The `produce` function takes a value and a \"recipe function\" (whose\r\n     * return value often depends on the base state). The recipe function is\r\n     * free to mutate its first argument however it wants. All mutations are\r\n     * only ever applied to a __copy__ of the base state.\r\n     *\r\n     * Pass only a function to create a \"curried producer\" which relieves you\r\n     * from passing the recipe function every time.\r\n     *\r\n     * Only plain objects and arrays are made mutable. All other objects are\r\n     * considered uncopyable.\r\n     *\r\n     * Note: This function is __bound__ to its `Immer` instance.\r\n     *\r\n     * @param {any} base - the initial state\r\n     * @param {Function} recipe - function that receives a proxy of the base state as first argument and which can be freely modified\r\n     * @param {Function} patchListener - optional function that will be called with all the patches produced here\r\n     * @returns {any} a new state, or the initial state if nothing was modified\r\n     */\r\n    this.produce = (base, recipe, patchListener) => {\r\n      if (typeof base === \"function\" && typeof recipe !== \"function\") {\r\n        const defaultBase = recipe;\r\n        recipe = base;\r\n        const self = this;\r\n        return function curriedProduce(base2 = defaultBase, ...args) {\r\n          return self.produce(base2, (draft) => recipe.call(this, draft, ...args));\r\n        };\r\n      }\r\n      if (typeof recipe !== \"function\")\r\n        die(6);\r\n      if (patchListener !== void 0 && typeof patchListener !== \"function\")\r\n        die(7);\r\n      let result;\r\n      if (isDraftable(base)) {\r\n        const scope = enterScope(this);\r\n        const proxy = createProxy(base, void 0);\r\n        let hasError = true;\r\n        try {\r\n          result = recipe(proxy);\r\n          hasError = false;\r\n        } finally {\r\n          if (hasError)\r\n            revokeScope(scope);\r\n          else\r\n            leaveScope(scope);\r\n        }\r\n        usePatchesInScope(scope, patchListener);\r\n        return processResult(result, scope);\r\n      } else if (!base || typeof base !== \"object\") {\r\n        result = recipe(base);\r\n        if (result === void 0)\r\n          result = base;\r\n        if (result === NOTHING)\r\n          result = void 0;\r\n        if (this.autoFreeze_)\r\n          freeze(result, true);\r\n        if (patchListener) {\r\n          const p = [];\r\n          const ip = [];\r\n          getPlugin(\"Patches\").generateReplacementPatches_(base, result, p, ip);\r\n          patchListener(p, ip);\r\n        }\r\n        return result;\r\n      } else\r\n        die(1, base);\r\n    };\r\n    this.produceWithPatches = (base, recipe) => {\r\n      if (typeof base === \"function\") {\r\n        return (state, ...args) => this.produceWithPatches(state, (draft) => base(draft, ...args));\r\n      }\r\n      let patches, inversePatches;\r\n      const result = this.produce(base, recipe, (p, ip) => {\r\n        patches = p;\r\n        inversePatches = ip;\r\n      });\r\n      return [result, patches, inversePatches];\r\n    };\r\n    if (typeof config?.autoFreeze === \"boolean\")\r\n      this.setAutoFreeze(config.autoFreeze);\r\n    if (typeof config?.useStrictShallowCopy === \"boolean\")\r\n      this.setUseStrictShallowCopy(config.useStrictShallowCopy);\r\n  }\r\n  createDraft(base) {\r\n    if (!isDraftable(base))\r\n      die(8);\r\n    if (isDraft(base))\r\n      base = current(base);\r\n    const scope = enterScope(this);\r\n    const proxy = createProxy(base, void 0);\r\n    proxy[DRAFT_STATE].isManual_ = true;\r\n    leaveScope(scope);\r\n    return proxy;\r\n  }\r\n  finishDraft(draft, patchListener) {\r\n    const state = draft && draft[DRAFT_STATE];\r\n    if (!state || !state.isManual_)\r\n      die(9);\r\n    const { scope_: scope } = state;\r\n    usePatchesInScope(scope, patchListener);\r\n    return processResult(void 0, scope);\r\n  }\r\n  /**\r\n   * Pass true to automatically freeze all copies created by Immer.\r\n   *\r\n   * By default, auto-freezing is enabled.\r\n   */\r\n  setAutoFreeze(value) {\r\n    this.autoFreeze_ = value;\r\n  }\r\n  /**\r\n   * Pass true to enable strict shallow copy.\r\n   *\r\n   * By default, immer does not copy the object descriptors such as getter, setter and non-enumrable properties.\r\n   */\r\n  setUseStrictShallowCopy(value) {\r\n    this.useStrictShallowCopy_ = value;\r\n  }\r\n  applyPatches(base, patches) {\r\n    let i;\r\n    for (i = patches.length - 1; i >= 0; i--) {\r\n      const patch = patches[i];\r\n      if (patch.path.length === 0 && patch.op === \"replace\") {\r\n        base = patch.value;\r\n        break;\r\n      }\r\n    }\r\n    if (i > -1) {\r\n      patches = patches.slice(i + 1);\r\n    }\r\n    const applyPatchesImpl = getPlugin(\"Patches\").applyPatches_;\r\n    if (isDraft(base)) {\r\n      return applyPatchesImpl(base, patches);\r\n    }\r\n    return this.produce(\r\n      base,\r\n      (draft) => applyPatchesImpl(draft, patches)\r\n    );\r\n  }\r\n};\r\nfunction createProxy(value, parent) {\r\n  const draft = isMap(value) ? getPlugin(\"MapSet\").proxyMap_(value, parent) : isSet(value) ? getPlugin(\"MapSet\").proxySet_(value, parent) : createProxyProxy(value, parent);\r\n  const scope = parent ? parent.scope_ : getCurrentScope();\r\n  scope.drafts_.push(draft);\r\n  return draft;\r\n}\r\n\r\n// src/core/current.ts\r\nfunction current(value) {\r\n  if (!isDraft(value))\r\n    die(10, value);\r\n  return currentImpl(value);\r\n}\r\nfunction currentImpl(value) {\r\n  if (!isDraftable(value) || isFrozen(value))\r\n    return value;\r\n  const state = value[DRAFT_STATE];\r\n  let copy;\r\n  if (state) {\r\n    if (!state.modified_)\r\n      return state.base_;\r\n    state.finalized_ = true;\r\n    copy = shallowCopy(value, state.scope_.immer_.useStrictShallowCopy_);\r\n  } else {\r\n    copy = shallowCopy(value, true);\r\n  }\r\n  each(copy, (key, childValue) => {\r\n    set(copy, key, currentImpl(childValue));\r\n  });\r\n  if (state) {\r\n    state.finalized_ = false;\r\n  }\r\n  return copy;\r\n}\r\n\r\n// src/plugins/patches.ts\r\nfunction enablePatches() {\r\n  const errorOffset = 16;\r\n  if (process.env.NODE_ENV !== \"production\") {\r\n    errors.push(\r\n      'Sets cannot have \"replace\" patches.',\r\n      function(op) {\r\n        return \"Unsupported patch operation: \" + op;\r\n      },\r\n      function(path) {\r\n        return \"Cannot apply patch, path doesn't resolve: \" + path;\r\n      },\r\n      \"Patching reserved attributes like __proto__, prototype and constructor is not allowed\"\r\n    );\r\n  }\r\n  const REPLACE = \"replace\";\r\n  const ADD = \"add\";\r\n  const REMOVE = \"remove\";\r\n  function generatePatches_(state, basePath, patches, inversePatches) {\r\n    switch (state.type_) {\r\n      case 0 /* Object */:\r\n      case 2 /* Map */:\r\n        return generatePatchesFromAssigned(\r\n          state,\r\n          basePath,\r\n          patches,\r\n          inversePatches\r\n        );\r\n      case 1 /* Array */:\r\n        return generateArrayPatches(state, basePath, patches, inversePatches);\r\n      case 3 /* Set */:\r\n        return generateSetPatches(\r\n          state,\r\n          basePath,\r\n          patches,\r\n          inversePatches\r\n        );\r\n    }\r\n  }\r\n  function generateArrayPatches(state, basePath, patches, inversePatches) {\r\n    let { base_, assigned_ } = state;\r\n    let copy_ = state.copy_;\r\n    if (copy_.length < base_.length) {\r\n      ;\r\n      [base_, copy_] = [copy_, base_];\r\n      [patches, inversePatches] = [inversePatches, patches];\r\n    }\r\n    for (let i = 0; i < base_.length; i++) {\r\n      if (assigned_[i] && copy_[i] !== base_[i]) {\r\n        const path = basePath.concat([i]);\r\n        patches.push({\r\n          op: REPLACE,\r\n          path,\r\n          // Need to maybe clone it, as it can in fact be the original value\r\n          // due to the base/copy inversion at the start of this function\r\n          value: clonePatchValueIfNeeded(copy_[i])\r\n        });\r\n        inversePatches.push({\r\n          op: REPLACE,\r\n          path,\r\n          value: clonePatchValueIfNeeded(base_[i])\r\n        });\r\n      }\r\n    }\r\n    for (let i = base_.length; i < copy_.length; i++) {\r\n      const path = basePath.concat([i]);\r\n      patches.push({\r\n        op: ADD,\r\n        path,\r\n        // Need to maybe clone it, as it can in fact be the original value\r\n        // due to the base/copy inversion at the start of this function\r\n        value: clonePatchValueIfNeeded(copy_[i])\r\n      });\r\n    }\r\n    for (let i = copy_.length - 1; base_.length <= i; --i) {\r\n      const path = basePath.concat([i]);\r\n      inversePatches.push({\r\n        op: REMOVE,\r\n        path\r\n      });\r\n    }\r\n  }\r\n  function generatePatchesFromAssigned(state, basePath, patches, inversePatches) {\r\n    const { base_, copy_ } = state;\r\n    each(state.assigned_, (key, assignedValue) => {\r\n      const origValue = get(base_, key);\r\n      const value = get(copy_, key);\r\n      const op = !assignedValue ? REMOVE : has(base_, key) ? REPLACE : ADD;\r\n      if (origValue === value && op === REPLACE)\r\n        return;\r\n      const path = basePath.concat(key);\r\n      patches.push(op === REMOVE ? { op, path } : { op, path, value });\r\n      inversePatches.push(\r\n        op === ADD ? { op: REMOVE, path } : op === REMOVE ? { op: ADD, path, value: clonePatchValueIfNeeded(origValue) } : { op: REPLACE, path, value: clonePatchValueIfNeeded(origValue) }\r\n      );\r\n    });\r\n  }\r\n  function generateSetPatches(state, basePath, patches, inversePatches) {\r\n    let { base_, copy_ } = state;\r\n    let i = 0;\r\n    base_.forEach((value) => {\r\n      if (!copy_.has(value)) {\r\n        const path = basePath.concat([i]);\r\n        patches.push({\r\n          op: REMOVE,\r\n          path,\r\n          value\r\n        });\r\n        inversePatches.unshift({\r\n          op: ADD,\r\n          path,\r\n          value\r\n        });\r\n      }\r\n      i++;\r\n    });\r\n    i = 0;\r\n    copy_.forEach((value) => {\r\n      if (!base_.has(value)) {\r\n        const path = basePath.concat([i]);\r\n        patches.push({\r\n          op: ADD,\r\n          path,\r\n          value\r\n        });\r\n        inversePatches.unshift({\r\n          op: REMOVE,\r\n          path,\r\n          value\r\n        });\r\n      }\r\n      i++;\r\n    });\r\n  }\r\n  function generateReplacementPatches_(baseValue, replacement, patches, inversePatches) {\r\n    patches.push({\r\n      op: REPLACE,\r\n      path: [],\r\n      value: replacement === NOTHING ? void 0 : replacement\r\n    });\r\n    inversePatches.push({\r\n      op: REPLACE,\r\n      path: [],\r\n      value: baseValue\r\n    });\r\n  }\r\n  function applyPatches_(draft, patches) {\r\n    patches.forEach((patch) => {\r\n      const { path, op } = patch;\r\n      let base = draft;\r\n      for (let i = 0; i < path.length - 1; i++) {\r\n        const parentType = getArchtype(base);\r\n        let p = path[i];\r\n        if (typeof p !== \"string\" && typeof p !== \"number\") {\r\n          p = \"\" + p;\r\n        }\r\n        if ((parentType === 0 /* Object */ || parentType === 1 /* Array */) && (p === \"__proto__\" || p === \"constructor\"))\r\n          die(errorOffset + 3);\r\n        if (typeof base === \"function\" && p === \"prototype\")\r\n          die(errorOffset + 3);\r\n        base = get(base, p);\r\n        if (typeof base !== \"object\")\r\n          die(errorOffset + 2, path.join(\"/\"));\r\n      }\r\n      const type = getArchtype(base);\r\n      const value = deepClonePatchValue(patch.value);\r\n      const key = path[path.length - 1];\r\n      switch (op) {\r\n        case REPLACE:\r\n          switch (type) {\r\n            case 2 /* Map */:\r\n              return base.set(key, value);\r\n            case 3 /* Set */:\r\n              die(errorOffset);\r\n            default:\r\n              return base[key] = value;\r\n          }\r\n        case ADD:\r\n          switch (type) {\r\n            case 1 /* Array */:\r\n              return key === \"-\" ? base.push(value) : base.splice(key, 0, value);\r\n            case 2 /* Map */:\r\n              return base.set(key, value);\r\n            case 3 /* Set */:\r\n              return base.add(value);\r\n            default:\r\n              return base[key] = value;\r\n          }\r\n        case REMOVE:\r\n          switch (type) {\r\n            case 1 /* Array */:\r\n              return base.splice(key, 1);\r\n            case 2 /* Map */:\r\n              return base.delete(key);\r\n            case 3 /* Set */:\r\n              return base.delete(patch.value);\r\n            default:\r\n              return delete base[key];\r\n          }\r\n        default:\r\n          die(errorOffset + 1, op);\r\n      }\r\n    });\r\n    return draft;\r\n  }\r\n  function deepClonePatchValue(obj) {\r\n    if (!isDraftable(obj))\r\n      return obj;\r\n    if (Array.isArray(obj))\r\n      return obj.map(deepClonePatchValue);\r\n    if (isMap(obj))\r\n      return new Map(\r\n        Array.from(obj.entries()).map(([k, v]) => [k, deepClonePatchValue(v)])\r\n      );\r\n    if (isSet(obj))\r\n      return new Set(Array.from(obj).map(deepClonePatchValue));\r\n    const cloned = Object.create(getPrototypeOf(obj));\r\n    for (const key in obj)\r\n      cloned[key] = deepClonePatchValue(obj[key]);\r\n    if (has(obj, DRAFTABLE))\r\n      cloned[DRAFTABLE] = obj[DRAFTABLE];\r\n    return cloned;\r\n  }\r\n  function clonePatchValueIfNeeded(obj) {\r\n    if (isDraft(obj)) {\r\n      return deepClonePatchValue(obj);\r\n    } else\r\n      return obj;\r\n  }\r\n  loadPlugin(\"Patches\", {\r\n    applyPatches_,\r\n    generatePatches_,\r\n    generateReplacementPatches_\r\n  });\r\n}\r\n\r\n// src/plugins/mapset.ts\r\nfunction enableMapSet() {\r\n  class DraftMap extends Map {\r\n    constructor(target, parent) {\r\n      super();\r\n      this[DRAFT_STATE] = {\r\n        type_: 2 /* Map */,\r\n        parent_: parent,\r\n        scope_: parent ? parent.scope_ : getCurrentScope(),\r\n        modified_: false,\r\n        finalized_: false,\r\n        copy_: void 0,\r\n        assigned_: void 0,\r\n        base_: target,\r\n        draft_: this,\r\n        isManual_: false,\r\n        revoked_: false\r\n      };\r\n    }\r\n    get size() {\r\n      return latest(this[DRAFT_STATE]).size;\r\n    }\r\n    has(key) {\r\n      return latest(this[DRAFT_STATE]).has(key);\r\n    }\r\n    set(key, value) {\r\n      const state = this[DRAFT_STATE];\r\n      assertUnrevoked(state);\r\n      if (!latest(state).has(key) || latest(state).get(key) !== value) {\r\n        prepareMapCopy(state);\r\n        markChanged(state);\r\n        state.assigned_.set(key, true);\r\n        state.copy_.set(key, value);\r\n        state.assigned_.set(key, true);\r\n      }\r\n      return this;\r\n    }\r\n    delete(key) {\r\n      if (!this.has(key)) {\r\n        return false;\r\n      }\r\n      const state = this[DRAFT_STATE];\r\n      assertUnrevoked(state);\r\n      prepareMapCopy(state);\r\n      markChanged(state);\r\n      if (state.base_.has(key)) {\r\n        state.assigned_.set(key, false);\r\n      } else {\r\n        state.assigned_.delete(key);\r\n      }\r\n      state.copy_.delete(key);\r\n      return true;\r\n    }\r\n    clear() {\r\n      const state = this[DRAFT_STATE];\r\n      assertUnrevoked(state);\r\n      if (latest(state).size) {\r\n        prepareMapCopy(state);\r\n        markChanged(state);\r\n        state.assigned_ = /* @__PURE__ */ new Map();\r\n        each(state.base_, (key) => {\r\n          state.assigned_.set(key, false);\r\n        });\r\n        state.copy_.clear();\r\n      }\r\n    }\r\n    forEach(cb, thisArg) {\r\n      const state = this[DRAFT_STATE];\r\n      latest(state).forEach((_value, key, _map) => {\r\n        cb.call(thisArg, this.get(key), key, this);\r\n      });\r\n    }\r\n    get(key) {\r\n      const state = this[DRAFT_STATE];\r\n      assertUnrevoked(state);\r\n      const value = latest(state).get(key);\r\n      if (state.finalized_ || !isDraftable(value)) {\r\n        return value;\r\n      }\r\n      if (value !== state.base_.get(key)) {\r\n        return value;\r\n      }\r\n      const draft = createProxy(value, state);\r\n      prepareMapCopy(state);\r\n      state.copy_.set(key, draft);\r\n      return draft;\r\n    }\r\n    keys() {\r\n      return latest(this[DRAFT_STATE]).keys();\r\n    }\r\n    values() {\r\n      const iterator = this.keys();\r\n      return {\r\n        [Symbol.iterator]: () => this.values(),\r\n        next: () => {\r\n          const r = iterator.next();\r\n          if (r.done)\r\n            return r;\r\n          const value = this.get(r.value);\r\n          return {\r\n            done: false,\r\n            value\r\n          };\r\n        }\r\n      };\r\n    }\r\n    entries() {\r\n      const iterator = this.keys();\r\n      return {\r\n        [Symbol.iterator]: () => this.entries(),\r\n        next: () => {\r\n          const r = iterator.next();\r\n          if (r.done)\r\n            return r;\r\n          const value = this.get(r.value);\r\n          return {\r\n            done: false,\r\n            value: [r.value, value]\r\n          };\r\n        }\r\n      };\r\n    }\r\n    [(DRAFT_STATE, Symbol.iterator)]() {\r\n      return this.entries();\r\n    }\r\n  }\r\n  function proxyMap_(target, parent) {\r\n    return new DraftMap(target, parent);\r\n  }\r\n  function prepareMapCopy(state) {\r\n    if (!state.copy_) {\r\n      state.assigned_ = /* @__PURE__ */ new Map();\r\n      state.copy_ = new Map(state.base_);\r\n    }\r\n  }\r\n  class DraftSet extends Set {\r\n    constructor(target, parent) {\r\n      super();\r\n      this[DRAFT_STATE] = {\r\n        type_: 3 /* Set */,\r\n        parent_: parent,\r\n        scope_: parent ? parent.scope_ : getCurrentScope(),\r\n        modified_: false,\r\n        finalized_: false,\r\n        copy_: void 0,\r\n        base_: target,\r\n        draft_: this,\r\n        drafts_: /* @__PURE__ */ new Map(),\r\n        revoked_: false,\r\n        isManual_: false\r\n      };\r\n    }\r\n    get size() {\r\n      return latest(this[DRAFT_STATE]).size;\r\n    }\r\n    has(value) {\r\n      const state = this[DRAFT_STATE];\r\n      assertUnrevoked(state);\r\n      if (!state.copy_) {\r\n        return state.base_.has(value);\r\n      }\r\n      if (state.copy_.has(value))\r\n        return true;\r\n      if (state.drafts_.has(value) && state.copy_.has(state.drafts_.get(value)))\r\n        return true;\r\n      return false;\r\n    }\r\n    add(value) {\r\n      const state = this[DRAFT_STATE];\r\n      assertUnrevoked(state);\r\n      if (!this.has(value)) {\r\n        prepareSetCopy(state);\r\n        markChanged(state);\r\n        state.copy_.add(value);\r\n      }\r\n      return this;\r\n    }\r\n    delete(value) {\r\n      if (!this.has(value)) {\r\n        return false;\r\n      }\r\n      const state = this[DRAFT_STATE];\r\n      assertUnrevoked(state);\r\n      prepareSetCopy(state);\r\n      markChanged(state);\r\n      return state.copy_.delete(value) || (state.drafts_.has(value) ? state.copy_.delete(state.drafts_.get(value)) : (\r\n        /* istanbul ignore next */\r\n        false\r\n      ));\r\n    }\r\n    clear() {\r\n      const state = this[DRAFT_STATE];\r\n      assertUnrevoked(state);\r\n      if (latest(state).size) {\r\n        prepareSetCopy(state);\r\n        markChanged(state);\r\n        state.copy_.clear();\r\n      }\r\n    }\r\n    values() {\r\n      const state = this[DRAFT_STATE];\r\n      assertUnrevoked(state);\r\n      prepareSetCopy(state);\r\n      return state.copy_.values();\r\n    }\r\n    entries() {\r\n      const state = this[DRAFT_STATE];\r\n      assertUnrevoked(state);\r\n      prepareSetCopy(state);\r\n      return state.copy_.entries();\r\n    }\r\n    keys() {\r\n      return this.values();\r\n    }\r\n    [(DRAFT_STATE, Symbol.iterator)]() {\r\n      return this.values();\r\n    }\r\n    forEach(cb, thisArg) {\r\n      const iterator = this.values();\r\n      let result = iterator.next();\r\n      while (!result.done) {\r\n        cb.call(thisArg, result.value, result.value, this);\r\n        result = iterator.next();\r\n      }\r\n    }\r\n  }\r\n  function proxySet_(target, parent) {\r\n    return new DraftSet(target, parent);\r\n  }\r\n  function prepareSetCopy(state) {\r\n    if (!state.copy_) {\r\n      state.copy_ = /* @__PURE__ */ new Set();\r\n      state.base_.forEach((value) => {\r\n        if (isDraftable(value)) {\r\n          const draft = createProxy(value, state);\r\n          state.drafts_.set(value, draft);\r\n          state.copy_.add(draft);\r\n        } else {\r\n          state.copy_.add(value);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  function assertUnrevoked(state) {\r\n    if (state.revoked_)\r\n      die(3, JSON.stringify(latest(state)));\r\n  }\r\n  loadPlugin(\"MapSet\", { proxyMap_, proxySet_ });\r\n}\r\n\r\n// src/immer.ts\r\nvar immer = new Immer2();\r\nvar produce = immer.produce;\r\nvar produceWithPatches = immer.produceWithPatches.bind(\r\n  immer\r\n);\r\nvar setAutoFreeze = immer.setAutoFreeze.bind(immer);\r\nvar setUseStrictShallowCopy = immer.setUseStrictShallowCopy.bind(immer);\r\nvar applyPatches = immer.applyPatches.bind(immer);\r\nvar createDraft = immer.createDraft.bind(immer);\r\nvar finishDraft = immer.finishDraft.bind(immer);\r\nfunction castDraft(value) {\r\n  return value;\r\n}\r\nfunction castImmutable(value) {\r\n  return value;\r\n}\r\nexport {\r\n  Immer2 as Immer,\r\n  applyPatches,\r\n  castDraft,\r\n  castImmutable,\r\n  createDraft,\r\n  current,\r\n  enableMapSet,\r\n  enablePatches,\r\n  finishDraft,\r\n  freeze,\r\n  DRAFTABLE as immerable,\r\n  isDraft,\r\n  isDraftable,\r\n  NOTHING as nothing,\r\n  original,\r\n  produce,\r\n  produceWithPatches,\r\n  setAutoFreeze,\r\n  setUseStrictShallowCopy\r\n};\r\n//# sourceMappingURL=immer.mjs.map","// src/devModeChecks/identityFunctionCheck.ts\r\nvar runIdentityFunctionCheck = (resultFunc, inputSelectorsResults, outputSelectorResult) => {\r\n  if (inputSelectorsResults.length === 1 && inputSelectorsResults[0] === outputSelectorResult) {\r\n    let isInputSameAsOutput = false;\r\n    try {\r\n      const emptyObject = {};\r\n      if (resultFunc(emptyObject) === emptyObject)\r\n        isInputSameAsOutput = true;\r\n    } catch {\r\n    }\r\n    if (isInputSameAsOutput) {\r\n      let stack = void 0;\r\n      try {\r\n        throw new Error();\r\n      } catch (e) {\r\n        ;\r\n        ({ stack } = e);\r\n      }\r\n      console.warn(\r\n        \"The result function returned its own inputs without modification. e.g\\n`createSelector([state => state.todos], todos => todos)`\\nThis could lead to inefficient memoization and unnecessary re-renders.\\nEnsure transformation logic is in the result function, and extraction logic is in the input selectors.\",\r\n        { stack }\r\n      );\r\n    }\r\n  }\r\n};\r\n\r\n// src/devModeChecks/inputStabilityCheck.ts\r\nvar runInputStabilityCheck = (inputSelectorResultsObject, options, inputSelectorArgs) => {\r\n  const { memoize, memoizeOptions } = options;\r\n  const { inputSelectorResults, inputSelectorResultsCopy } = inputSelectorResultsObject;\r\n  const createAnEmptyObject = memoize(() => ({}), ...memoizeOptions);\r\n  const areInputSelectorResultsEqual = createAnEmptyObject.apply(null, inputSelectorResults) === createAnEmptyObject.apply(null, inputSelectorResultsCopy);\r\n  if (!areInputSelectorResultsEqual) {\r\n    let stack = void 0;\r\n    try {\r\n      throw new Error();\r\n    } catch (e) {\r\n      ;\r\n      ({ stack } = e);\r\n    }\r\n    console.warn(\r\n      \"An input selector returned a different result when passed same arguments.\\nThis means your output selector will likely run more frequently than intended.\\nAvoid returning a new reference inside your input selector, e.g.\\n`createSelector([state => state.todos.map(todo => todo.id)], todoIds => todoIds.length)`\",\r\n      {\r\n        arguments: inputSelectorArgs,\r\n        firstInputs: inputSelectorResults,\r\n        secondInputs: inputSelectorResultsCopy,\r\n        stack\r\n      }\r\n    );\r\n  }\r\n};\r\n\r\n// src/devModeChecks/setGlobalDevModeChecks.ts\r\nvar globalDevModeChecks = {\r\n  inputStabilityCheck: \"once\",\r\n  identityFunctionCheck: \"once\"\r\n};\r\nvar setGlobalDevModeChecks = (devModeChecks) => {\r\n  Object.assign(globalDevModeChecks, devModeChecks);\r\n};\r\n\r\n// src/utils.ts\r\nvar NOT_FOUND = /* @__PURE__ */ Symbol(\"NOT_FOUND\");\r\nfunction assertIsFunction(func, errorMessage = `expected a function, instead received ${typeof func}`) {\r\n  if (typeof func !== \"function\") {\r\n    throw new TypeError(errorMessage);\r\n  }\r\n}\r\nfunction assertIsObject(object, errorMessage = `expected an object, instead received ${typeof object}`) {\r\n  if (typeof object !== \"object\") {\r\n    throw new TypeError(errorMessage);\r\n  }\r\n}\r\nfunction assertIsArrayOfFunctions(array, errorMessage = `expected all items to be functions, instead received the following types: `) {\r\n  if (!array.every((item) => typeof item === \"function\")) {\r\n    const itemTypes = array.map(\r\n      (item) => typeof item === \"function\" ? `function ${item.name || \"unnamed\"}()` : typeof item\r\n    ).join(\", \");\r\n    throw new TypeError(`${errorMessage}[${itemTypes}]`);\r\n  }\r\n}\r\nvar ensureIsArray = (item) => {\r\n  return Array.isArray(item) ? item : [item];\r\n};\r\nfunction getDependencies(createSelectorArgs) {\r\n  const dependencies = Array.isArray(createSelectorArgs[0]) ? createSelectorArgs[0] : createSelectorArgs;\r\n  assertIsArrayOfFunctions(\r\n    dependencies,\r\n    `createSelector expects all input-selectors to be functions, but received the following types: `\r\n  );\r\n  return dependencies;\r\n}\r\nfunction collectInputSelectorResults(dependencies, inputSelectorArgs) {\r\n  const inputSelectorResults = [];\r\n  const { length } = dependencies;\r\n  for (let i = 0; i < length; i++) {\r\n    inputSelectorResults.push(dependencies[i].apply(null, inputSelectorArgs));\r\n  }\r\n  return inputSelectorResults;\r\n}\r\nvar getDevModeChecksExecutionInfo = (firstRun, devModeChecks) => {\r\n  const { identityFunctionCheck, inputStabilityCheck } = {\r\n    ...globalDevModeChecks,\r\n    ...devModeChecks\r\n  };\r\n  return {\r\n    identityFunctionCheck: {\r\n      shouldRun: identityFunctionCheck === \"always\" || identityFunctionCheck === \"once\" && firstRun,\r\n      run: runIdentityFunctionCheck\r\n    },\r\n    inputStabilityCheck: {\r\n      shouldRun: inputStabilityCheck === \"always\" || inputStabilityCheck === \"once\" && firstRun,\r\n      run: runInputStabilityCheck\r\n    }\r\n  };\r\n};\r\n\r\n// src/autotrackMemoize/autotracking.ts\r\nvar $REVISION = 0;\r\nvar CURRENT_TRACKER = null;\r\nvar Cell = class {\r\n  revision = $REVISION;\r\n  _value;\r\n  _lastValue;\r\n  _isEqual = tripleEq;\r\n  constructor(initialValue, isEqual = tripleEq) {\r\n    this._value = this._lastValue = initialValue;\r\n    this._isEqual = isEqual;\r\n  }\r\n  // Whenever a storage value is read, it'll add itself to the current tracker if\r\n  // one exists, entangling its state with that cache.\r\n  get value() {\r\n    CURRENT_TRACKER?.add(this);\r\n    return this._value;\r\n  }\r\n  // Whenever a storage value is updated, we bump the global revision clock,\r\n  // assign the revision for this storage to the new value, _and_ we schedule a\r\n  // rerender. This is important, and it's what makes autotracking  _pull_\r\n  // based. We don't actively tell the caches which depend on the storage that\r\n  // anything has happened. Instead, we recompute the caches when needed.\r\n  set value(newValue) {\r\n    if (this.value === newValue)\r\n      return;\r\n    this._value = newValue;\r\n    this.revision = ++$REVISION;\r\n  }\r\n};\r\nfunction tripleEq(a, b) {\r\n  return a === b;\r\n}\r\nvar TrackingCache = class {\r\n  _cachedValue;\r\n  _cachedRevision = -1;\r\n  _deps = [];\r\n  hits = 0;\r\n  fn;\r\n  constructor(fn) {\r\n    this.fn = fn;\r\n  }\r\n  clear() {\r\n    this._cachedValue = void 0;\r\n    this._cachedRevision = -1;\r\n    this._deps = [];\r\n    this.hits = 0;\r\n  }\r\n  get value() {\r\n    if (this.revision > this._cachedRevision) {\r\n      const { fn } = this;\r\n      const currentTracker = /* @__PURE__ */ new Set();\r\n      const prevTracker = CURRENT_TRACKER;\r\n      CURRENT_TRACKER = currentTracker;\r\n      this._cachedValue = fn();\r\n      CURRENT_TRACKER = prevTracker;\r\n      this.hits++;\r\n      this._deps = Array.from(currentTracker);\r\n      this._cachedRevision = this.revision;\r\n    }\r\n    CURRENT_TRACKER?.add(this);\r\n    return this._cachedValue;\r\n  }\r\n  get revision() {\r\n    return Math.max(...this._deps.map((d) => d.revision), 0);\r\n  }\r\n};\r\nfunction getValue(cell) {\r\n  if (!(cell instanceof Cell)) {\r\n    console.warn(\"Not a valid cell! \", cell);\r\n  }\r\n  return cell.value;\r\n}\r\nfunction setValue(storage, value) {\r\n  if (!(storage instanceof Cell)) {\r\n    throw new TypeError(\r\n      \"setValue must be passed a tracked store created with `createStorage`.\"\r\n    );\r\n  }\r\n  storage.value = storage._lastValue = value;\r\n}\r\nfunction createCell(initialValue, isEqual = tripleEq) {\r\n  return new Cell(initialValue, isEqual);\r\n}\r\nfunction createCache(fn) {\r\n  assertIsFunction(\r\n    fn,\r\n    \"the first parameter to `createCache` must be a function\"\r\n  );\r\n  return new TrackingCache(fn);\r\n}\r\n\r\n// src/autotrackMemoize/tracking.ts\r\nvar neverEq = (a, b) => false;\r\nfunction createTag() {\r\n  return createCell(null, neverEq);\r\n}\r\nfunction dirtyTag(tag, value) {\r\n  setValue(tag, value);\r\n}\r\nvar consumeCollection = (node) => {\r\n  let tag = node.collectionTag;\r\n  if (tag === null) {\r\n    tag = node.collectionTag = createTag();\r\n  }\r\n  getValue(tag);\r\n};\r\nvar dirtyCollection = (node) => {\r\n  const tag = node.collectionTag;\r\n  if (tag !== null) {\r\n    dirtyTag(tag, null);\r\n  }\r\n};\r\n\r\n// src/autotrackMemoize/proxy.ts\r\nvar REDUX_PROXY_LABEL = Symbol();\r\nvar nextId = 0;\r\nvar proto = Object.getPrototypeOf({});\r\nvar ObjectTreeNode = class {\r\n  constructor(value) {\r\n    this.value = value;\r\n    this.value = value;\r\n    this.tag.value = value;\r\n  }\r\n  proxy = new Proxy(this, objectProxyHandler);\r\n  tag = createTag();\r\n  tags = {};\r\n  children = {};\r\n  collectionTag = null;\r\n  id = nextId++;\r\n};\r\nvar objectProxyHandler = {\r\n  get(node, key) {\r\n    function calculateResult() {\r\n      const { value } = node;\r\n      const childValue = Reflect.get(value, key);\r\n      if (typeof key === \"symbol\") {\r\n        return childValue;\r\n      }\r\n      if (key in proto) {\r\n        return childValue;\r\n      }\r\n      if (typeof childValue === \"object\" && childValue !== null) {\r\n        let childNode = node.children[key];\r\n        if (childNode === void 0) {\r\n          childNode = node.children[key] = createNode(childValue);\r\n        }\r\n        if (childNode.tag) {\r\n          getValue(childNode.tag);\r\n        }\r\n        return childNode.proxy;\r\n      } else {\r\n        let tag = node.tags[key];\r\n        if (tag === void 0) {\r\n          tag = node.tags[key] = createTag();\r\n          tag.value = childValue;\r\n        }\r\n        getValue(tag);\r\n        return childValue;\r\n      }\r\n    }\r\n    const res = calculateResult();\r\n    return res;\r\n  },\r\n  ownKeys(node) {\r\n    consumeCollection(node);\r\n    return Reflect.ownKeys(node.value);\r\n  },\r\n  getOwnPropertyDescriptor(node, prop) {\r\n    return Reflect.getOwnPropertyDescriptor(node.value, prop);\r\n  },\r\n  has(node, prop) {\r\n    return Reflect.has(node.value, prop);\r\n  }\r\n};\r\nvar ArrayTreeNode = class {\r\n  constructor(value) {\r\n    this.value = value;\r\n    this.value = value;\r\n    this.tag.value = value;\r\n  }\r\n  proxy = new Proxy([this], arrayProxyHandler);\r\n  tag = createTag();\r\n  tags = {};\r\n  children = {};\r\n  collectionTag = null;\r\n  id = nextId++;\r\n};\r\nvar arrayProxyHandler = {\r\n  get([node], key) {\r\n    if (key === \"length\") {\r\n      consumeCollection(node);\r\n    }\r\n    return objectProxyHandler.get(node, key);\r\n  },\r\n  ownKeys([node]) {\r\n    return objectProxyHandler.ownKeys(node);\r\n  },\r\n  getOwnPropertyDescriptor([node], prop) {\r\n    return objectProxyHandler.getOwnPropertyDescriptor(node, prop);\r\n  },\r\n  has([node], prop) {\r\n    return objectProxyHandler.has(node, prop);\r\n  }\r\n};\r\nfunction createNode(value) {\r\n  if (Array.isArray(value)) {\r\n    return new ArrayTreeNode(value);\r\n  }\r\n  return new ObjectTreeNode(value);\r\n}\r\nfunction updateNode(node, newValue) {\r\n  const { value, tags, children } = node;\r\n  node.value = newValue;\r\n  if (Array.isArray(value) && Array.isArray(newValue) && value.length !== newValue.length) {\r\n    dirtyCollection(node);\r\n  } else {\r\n    if (value !== newValue) {\r\n      let oldKeysSize = 0;\r\n      let newKeysSize = 0;\r\n      let anyKeysAdded = false;\r\n      for (const _key in value) {\r\n        oldKeysSize++;\r\n      }\r\n      for (const key in newValue) {\r\n        newKeysSize++;\r\n        if (!(key in value)) {\r\n          anyKeysAdded = true;\r\n          break;\r\n        }\r\n      }\r\n      const isDifferent = anyKeysAdded || oldKeysSize !== newKeysSize;\r\n      if (isDifferent) {\r\n        dirtyCollection(node);\r\n      }\r\n    }\r\n  }\r\n  for (const key in tags) {\r\n    const childValue = value[key];\r\n    const newChildValue = newValue[key];\r\n    if (childValue !== newChildValue) {\r\n      dirtyCollection(node);\r\n      dirtyTag(tags[key], newChildValue);\r\n    }\r\n    if (typeof newChildValue === \"object\" && newChildValue !== null) {\r\n      delete tags[key];\r\n    }\r\n  }\r\n  for (const key in children) {\r\n    const childNode = children[key];\r\n    const newChildValue = newValue[key];\r\n    const childValue = childNode.value;\r\n    if (childValue === newChildValue) {\r\n      continue;\r\n    } else if (typeof newChildValue === \"object\" && newChildValue !== null) {\r\n      updateNode(childNode, newChildValue);\r\n    } else {\r\n      deleteNode(childNode);\r\n      delete children[key];\r\n    }\r\n  }\r\n}\r\nfunction deleteNode(node) {\r\n  if (node.tag) {\r\n    dirtyTag(node.tag, null);\r\n  }\r\n  dirtyCollection(node);\r\n  for (const key in node.tags) {\r\n    dirtyTag(node.tags[key], null);\r\n  }\r\n  for (const key in node.children) {\r\n    deleteNode(node.children[key]);\r\n  }\r\n}\r\n\r\n// src/lruMemoize.ts\r\nfunction createSingletonCache(equals) {\r\n  let entry;\r\n  return {\r\n    get(key) {\r\n      if (entry && equals(entry.key, key)) {\r\n        return entry.value;\r\n      }\r\n      return NOT_FOUND;\r\n    },\r\n    put(key, value) {\r\n      entry = { key, value };\r\n    },\r\n    getEntries() {\r\n      return entry ? [entry] : [];\r\n    },\r\n    clear() {\r\n      entry = void 0;\r\n    }\r\n  };\r\n}\r\nfunction createLruCache(maxSize, equals) {\r\n  let entries = [];\r\n  function get(key) {\r\n    const cacheIndex = entries.findIndex((entry) => equals(key, entry.key));\r\n    if (cacheIndex > -1) {\r\n      const entry = entries[cacheIndex];\r\n      if (cacheIndex > 0) {\r\n        entries.splice(cacheIndex, 1);\r\n        entries.unshift(entry);\r\n      }\r\n      return entry.value;\r\n    }\r\n    return NOT_FOUND;\r\n  }\r\n  function put(key, value) {\r\n    if (get(key) === NOT_FOUND) {\r\n      entries.unshift({ key, value });\r\n      if (entries.length > maxSize) {\r\n        entries.pop();\r\n      }\r\n    }\r\n  }\r\n  function getEntries() {\r\n    return entries;\r\n  }\r\n  function clear() {\r\n    entries = [];\r\n  }\r\n  return { get, put, getEntries, clear };\r\n}\r\nvar referenceEqualityCheck = (a, b) => a === b;\r\nfunction createCacheKeyComparator(equalityCheck) {\r\n  return function areArgumentsShallowlyEqual(prev, next) {\r\n    if (prev === null || next === null || prev.length !== next.length) {\r\n      return false;\r\n    }\r\n    const { length } = prev;\r\n    for (let i = 0; i < length; i++) {\r\n      if (!equalityCheck(prev[i], next[i])) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  };\r\n}\r\nfunction lruMemoize(func, equalityCheckOrOptions) {\r\n  const providedOptions = typeof equalityCheckOrOptions === \"object\" ? equalityCheckOrOptions : { equalityCheck: equalityCheckOrOptions };\r\n  const {\r\n    equalityCheck = referenceEqualityCheck,\r\n    maxSize = 1,\r\n    resultEqualityCheck\r\n  } = providedOptions;\r\n  const comparator = createCacheKeyComparator(equalityCheck);\r\n  let resultsCount = 0;\r\n  const cache = maxSize <= 1 ? createSingletonCache(comparator) : createLruCache(maxSize, comparator);\r\n  function memoized() {\r\n    let value = cache.get(arguments);\r\n    if (value === NOT_FOUND) {\r\n      value = func.apply(null, arguments);\r\n      resultsCount++;\r\n      if (resultEqualityCheck) {\r\n        const entries = cache.getEntries();\r\n        const matchingEntry = entries.find(\r\n          (entry) => resultEqualityCheck(entry.value, value)\r\n        );\r\n        if (matchingEntry) {\r\n          value = matchingEntry.value;\r\n          resultsCount !== 0 && resultsCount--;\r\n        }\r\n      }\r\n      cache.put(arguments, value);\r\n    }\r\n    return value;\r\n  }\r\n  memoized.clearCache = () => {\r\n    cache.clear();\r\n    memoized.resetResultsCount();\r\n  };\r\n  memoized.resultsCount = () => resultsCount;\r\n  memoized.resetResultsCount = () => {\r\n    resultsCount = 0;\r\n  };\r\n  return memoized;\r\n}\r\n\r\n// src/autotrackMemoize/autotrackMemoize.ts\r\nfunction autotrackMemoize(func) {\r\n  const node = createNode(\r\n    []\r\n  );\r\n  let lastArgs = null;\r\n  const shallowEqual = createCacheKeyComparator(referenceEqualityCheck);\r\n  const cache = createCache(() => {\r\n    const res = func.apply(null, node.proxy);\r\n    return res;\r\n  });\r\n  function memoized() {\r\n    if (!shallowEqual(lastArgs, arguments)) {\r\n      updateNode(node, arguments);\r\n      lastArgs = arguments;\r\n    }\r\n    return cache.value;\r\n  }\r\n  memoized.clearCache = () => {\r\n    return cache.clear();\r\n  };\r\n  return memoized;\r\n}\r\n\r\n// src/weakMapMemoize.ts\r\nvar StrongRef = class {\r\n  constructor(value) {\r\n    this.value = value;\r\n  }\r\n  deref() {\r\n    return this.value;\r\n  }\r\n};\r\nvar Ref = typeof WeakRef !== \"undefined\" ? WeakRef : StrongRef;\r\nvar UNTERMINATED = 0;\r\nvar TERMINATED = 1;\r\nfunction createCacheNode() {\r\n  return {\r\n    s: UNTERMINATED,\r\n    v: void 0,\r\n    o: null,\r\n    p: null\r\n  };\r\n}\r\nfunction weakMapMemoize(func, options = {}) {\r\n  let fnNode = createCacheNode();\r\n  const { resultEqualityCheck } = options;\r\n  let lastResult;\r\n  let resultsCount = 0;\r\n  function memoized() {\r\n    let cacheNode = fnNode;\r\n    const { length } = arguments;\r\n    for (let i = 0, l = length; i < l; i++) {\r\n      const arg = arguments[i];\r\n      if (typeof arg === \"function\" || typeof arg === \"object\" && arg !== null) {\r\n        let objectCache = cacheNode.o;\r\n        if (objectCache === null) {\r\n          cacheNode.o = objectCache = /* @__PURE__ */ new WeakMap();\r\n        }\r\n        const objectNode = objectCache.get(arg);\r\n        if (objectNode === void 0) {\r\n          cacheNode = createCacheNode();\r\n          objectCache.set(arg, cacheNode);\r\n        } else {\r\n          cacheNode = objectNode;\r\n        }\r\n      } else {\r\n        let primitiveCache = cacheNode.p;\r\n        if (primitiveCache === null) {\r\n          cacheNode.p = primitiveCache = /* @__PURE__ */ new Map();\r\n        }\r\n        const primitiveNode = primitiveCache.get(arg);\r\n        if (primitiveNode === void 0) {\r\n          cacheNode = createCacheNode();\r\n          primitiveCache.set(arg, cacheNode);\r\n        } else {\r\n          cacheNode = primitiveNode;\r\n        }\r\n      }\r\n    }\r\n    const terminatedNode = cacheNode;\r\n    let result;\r\n    if (cacheNode.s === TERMINATED) {\r\n      result = cacheNode.v;\r\n    } else {\r\n      result = func.apply(null, arguments);\r\n      resultsCount++;\r\n      if (resultEqualityCheck) {\r\n        const lastResultValue = lastResult?.deref?.() ?? lastResult;\r\n        if (lastResultValue != null && resultEqualityCheck(lastResultValue, result)) {\r\n          result = lastResultValue;\r\n          resultsCount !== 0 && resultsCount--;\r\n        }\r\n        const needsWeakRef = typeof result === \"object\" && result !== null || typeof result === \"function\";\r\n        lastResult = needsWeakRef ? new Ref(result) : result;\r\n      }\r\n    }\r\n    terminatedNode.s = TERMINATED;\r\n    terminatedNode.v = result;\r\n    return result;\r\n  }\r\n  memoized.clearCache = () => {\r\n    fnNode = createCacheNode();\r\n    memoized.resetResultsCount();\r\n  };\r\n  memoized.resultsCount = () => resultsCount;\r\n  memoized.resetResultsCount = () => {\r\n    resultsCount = 0;\r\n  };\r\n  return memoized;\r\n}\r\n\r\n// src/createSelectorCreator.ts\r\nfunction createSelectorCreator(memoizeOrOptions, ...memoizeOptionsFromArgs) {\r\n  const createSelectorCreatorOptions = typeof memoizeOrOptions === \"function\" ? {\r\n    memoize: memoizeOrOptions,\r\n    memoizeOptions: memoizeOptionsFromArgs\r\n  } : memoizeOrOptions;\r\n  const createSelector2 = (...createSelectorArgs) => {\r\n    let recomputations = 0;\r\n    let dependencyRecomputations = 0;\r\n    let lastResult;\r\n    let directlyPassedOptions = {};\r\n    let resultFunc = createSelectorArgs.pop();\r\n    if (typeof resultFunc === \"object\") {\r\n      directlyPassedOptions = resultFunc;\r\n      resultFunc = createSelectorArgs.pop();\r\n    }\r\n    assertIsFunction(\r\n      resultFunc,\r\n      `createSelector expects an output function after the inputs, but received: [${typeof resultFunc}]`\r\n    );\r\n    const combinedOptions = {\r\n      ...createSelectorCreatorOptions,\r\n      ...directlyPassedOptions\r\n    };\r\n    const {\r\n      memoize,\r\n      memoizeOptions = [],\r\n      argsMemoize = weakMapMemoize,\r\n      argsMemoizeOptions = [],\r\n      devModeChecks = {}\r\n    } = combinedOptions;\r\n    const finalMemoizeOptions = ensureIsArray(memoizeOptions);\r\n    const finalArgsMemoizeOptions = ensureIsArray(argsMemoizeOptions);\r\n    const dependencies = getDependencies(createSelectorArgs);\r\n    const memoizedResultFunc = memoize(function recomputationWrapper() {\r\n      recomputations++;\r\n      return resultFunc.apply(\r\n        null,\r\n        arguments\r\n      );\r\n    }, ...finalMemoizeOptions);\r\n    let firstRun = true;\r\n    const selector = argsMemoize(function dependenciesChecker() {\r\n      dependencyRecomputations++;\r\n      const inputSelectorResults = collectInputSelectorResults(\r\n        dependencies,\r\n        arguments\r\n      );\r\n      lastResult = memoizedResultFunc.apply(null, inputSelectorResults);\r\n      if (process.env.NODE_ENV !== \"production\") {\r\n        const { identityFunctionCheck, inputStabilityCheck } = getDevModeChecksExecutionInfo(firstRun, devModeChecks);\r\n        if (identityFunctionCheck.shouldRun) {\r\n          identityFunctionCheck.run(\r\n            resultFunc,\r\n            inputSelectorResults,\r\n            lastResult\r\n          );\r\n        }\r\n        if (inputStabilityCheck.shouldRun) {\r\n          const inputSelectorResultsCopy = collectInputSelectorResults(\r\n            dependencies,\r\n            arguments\r\n          );\r\n          inputStabilityCheck.run(\r\n            { inputSelectorResults, inputSelectorResultsCopy },\r\n            { memoize, memoizeOptions: finalMemoizeOptions },\r\n            arguments\r\n          );\r\n        }\r\n        if (firstRun)\r\n          firstRun = false;\r\n      }\r\n      return lastResult;\r\n    }, ...finalArgsMemoizeOptions);\r\n    return Object.assign(selector, {\r\n      resultFunc,\r\n      memoizedResultFunc,\r\n      dependencies,\r\n      dependencyRecomputations: () => dependencyRecomputations,\r\n      resetDependencyRecomputations: () => {\r\n        dependencyRecomputations = 0;\r\n      },\r\n      lastResult: () => lastResult,\r\n      recomputations: () => recomputations,\r\n      resetRecomputations: () => {\r\n        recomputations = 0;\r\n      },\r\n      memoize,\r\n      argsMemoize\r\n    });\r\n  };\r\n  Object.assign(createSelector2, {\r\n    withTypes: () => createSelector2\r\n  });\r\n  return createSelector2;\r\n}\r\nvar createSelector = /* @__PURE__ */ createSelectorCreator(weakMapMemoize);\r\n\r\n// src/createStructuredSelector.ts\r\nvar createStructuredSelector = Object.assign(\r\n  (inputSelectorsObject, selectorCreator = createSelector) => {\r\n    assertIsObject(\r\n      inputSelectorsObject,\r\n      `createStructuredSelector expects first argument to be an object where each property is a selector, instead received a ${typeof inputSelectorsObject}`\r\n    );\r\n    const inputSelectorKeys = Object.keys(inputSelectorsObject);\r\n    const dependencies = inputSelectorKeys.map(\r\n      (key) => inputSelectorsObject[key]\r\n    );\r\n    const structuredSelector = selectorCreator(\r\n      dependencies,\r\n      (...inputSelectorResults) => {\r\n        return inputSelectorResults.reduce((composition, value, index) => {\r\n          composition[inputSelectorKeys[index]] = value;\r\n          return composition;\r\n        }, {});\r\n      }\r\n    );\r\n    return structuredSelector;\r\n  },\r\n  { withTypes: () => createStructuredSelector }\r\n);\r\nexport {\r\n  createSelector,\r\n  createSelectorCreator,\r\n  createStructuredSelector,\r\n  lruMemoize,\r\n  referenceEqualityCheck,\r\n  setGlobalDevModeChecks,\r\n  autotrackMemoize as unstable_autotrackMemoize,\r\n  weakMapMemoize\r\n};\r\n//# sourceMappingURL=reselect.mjs.map","// src/index.ts\r\nfunction createThunkMiddleware(extraArgument) {\r\n  const middleware = ({ dispatch, getState }) => (next) => (action) => {\r\n    if (typeof action === \"function\") {\r\n      return action(dispatch, getState, extraArgument);\r\n    }\r\n    return next(action);\r\n  };\r\n  return middleware;\r\n}\r\nvar thunk = createThunkMiddleware();\r\nvar withExtraArgument = createThunkMiddleware;\r\nexport {\r\n  thunk,\r\n  withExtraArgument\r\n};\r\n","// src/index.ts\r\nexport * from \"redux\";\r\nimport { produce, current as current3, freeze, original as original2, isDraft as isDraft5 } from \"immer\";\r\nimport { createSelector, createSelectorCreator as createSelectorCreator2, lruMemoize, weakMapMemoize as weakMapMemoize2 } from \"reselect\";\r\n\r\n// src/createDraftSafeSelector.ts\r\nimport { current, isDraft } from \"immer\";\r\nimport { createSelectorCreator, weakMapMemoize } from \"reselect\";\r\nvar createDraftSafeSelectorCreator = (...args) => {\r\n  const createSelector2 = createSelectorCreator(...args);\r\n  const createDraftSafeSelector2 = Object.assign((...args2) => {\r\n    const selector = createSelector2(...args2);\r\n    const wrappedSelector = (value, ...rest) => selector(isDraft(value) ? current(value) : value, ...rest);\r\n    Object.assign(wrappedSelector, selector);\r\n    return wrappedSelector;\r\n  }, {\r\n    withTypes: () => createDraftSafeSelector2\r\n  });\r\n  return createDraftSafeSelector2;\r\n};\r\nvar createDraftSafeSelector = /* @__PURE__ */ createDraftSafeSelectorCreator(weakMapMemoize);\r\n\r\n// src/configureStore.ts\r\nimport { applyMiddleware, createStore, compose as compose2, combineReducers, isPlainObject as isPlainObject2 } from \"redux\";\r\n\r\n// src/devtoolsExtension.ts\r\nimport { compose } from \"redux\";\r\nvar composeWithDevTools = typeof window !== \"undefined\" && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ : function() {\r\n  if (arguments.length === 0) return void 0;\r\n  if (typeof arguments[0] === \"object\") return compose;\r\n  return compose.apply(null, arguments);\r\n};\r\nvar devToolsEnhancer = typeof window !== \"undefined\" && window.__REDUX_DEVTOOLS_EXTENSION__ ? window.__REDUX_DEVTOOLS_EXTENSION__ : function() {\r\n  return function(noop3) {\r\n    return noop3;\r\n  };\r\n};\r\n\r\n// src/getDefaultMiddleware.ts\r\nimport { thunk as thunkMiddleware, withExtraArgument } from \"redux-thunk\";\r\n\r\n// src/createAction.ts\r\nimport { isAction } from \"redux\";\r\n\r\n// src/tsHelpers.ts\r\nvar hasMatchFunction = (v) => {\r\n  return v && typeof v.match === \"function\";\r\n};\r\n\r\n// src/createAction.ts\r\nfunction createAction(type, prepareAction) {\r\n  function actionCreator(...args) {\r\n    if (prepareAction) {\r\n      let prepared = prepareAction(...args);\r\n      if (!prepared) {\r\n        throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(0) : \"prepareAction did not return an object\");\r\n      }\r\n      return {\r\n        type,\r\n        payload: prepared.payload,\r\n        ...\"meta\" in prepared && {\r\n          meta: prepared.meta\r\n        },\r\n        ...\"error\" in prepared && {\r\n          error: prepared.error\r\n        }\r\n      };\r\n    }\r\n    return {\r\n      type,\r\n      payload: args[0]\r\n    };\r\n  }\r\n  actionCreator.toString = () => `${type}`;\r\n  actionCreator.type = type;\r\n  actionCreator.match = (action) => isAction(action) && action.type === type;\r\n  return actionCreator;\r\n}\r\nfunction isActionCreator(action) {\r\n  return typeof action === \"function\" && \"type\" in action && // hasMatchFunction only wants Matchers but I don't see the point in rewriting it\r\n  hasMatchFunction(action);\r\n}\r\nfunction isFSA(action) {\r\n  return isAction(action) && Object.keys(action).every(isValidKey);\r\n}\r\nfunction isValidKey(key) {\r\n  return [\"type\", \"payload\", \"error\", \"meta\"].indexOf(key) > -1;\r\n}\r\n\r\n// src/actionCreatorInvariantMiddleware.ts\r\nfunction getMessage(type) {\r\n  const splitType = type ? `${type}`.split(\"/\") : [];\r\n  const actionName = splitType[splitType.length - 1] || \"actionCreator\";\r\n  return `Detected an action creator with type \"${type || \"unknown\"}\" being dispatched. \r\nMake sure you're calling the action creator before dispatching, i.e. \\`dispatch(${actionName}())\\` instead of \\`dispatch(${actionName})\\`. This is necessary even if the action has no payload.`;\r\n}\r\nfunction createActionCreatorInvariantMiddleware(options = {}) {\r\n  if (process.env.NODE_ENV === \"production\") {\r\n    return () => (next) => (action) => next(action);\r\n  }\r\n  const {\r\n    isActionCreator: isActionCreator2 = isActionCreator\r\n  } = options;\r\n  return () => (next) => (action) => {\r\n    if (isActionCreator2(action)) {\r\n      console.warn(getMessage(action.type));\r\n    }\r\n    return next(action);\r\n  };\r\n}\r\n\r\n// src/utils.ts\r\nimport { produce as createNextState, isDraftable } from \"immer\";\r\nfunction getTimeMeasureUtils(maxDelay, fnName) {\r\n  let elapsed = 0;\r\n  return {\r\n    measureTime(fn) {\r\n      const started = Date.now();\r\n      try {\r\n        return fn();\r\n      } finally {\r\n        const finished = Date.now();\r\n        elapsed += finished - started;\r\n      }\r\n    },\r\n    warnIfExceeded() {\r\n      if (elapsed > maxDelay) {\r\n        console.warn(`${fnName} took ${elapsed}ms, which is more than the warning threshold of ${maxDelay}ms. \r\nIf your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.\r\nIt is disabled in production builds, so you don't need to worry about that.`);\r\n      }\r\n    }\r\n  };\r\n}\r\nvar Tuple = class _Tuple extends Array {\r\n  constructor(...items) {\r\n    super(...items);\r\n    Object.setPrototypeOf(this, _Tuple.prototype);\r\n  }\r\n  static get [Symbol.species]() {\r\n    return _Tuple;\r\n  }\r\n  concat(...arr) {\r\n    return super.concat.apply(this, arr);\r\n  }\r\n  prepend(...arr) {\r\n    if (arr.length === 1 && Array.isArray(arr[0])) {\r\n      return new _Tuple(...arr[0].concat(this));\r\n    }\r\n    return new _Tuple(...arr.concat(this));\r\n  }\r\n};\r\nfunction freezeDraftable(val) {\r\n  return isDraftable(val) ? createNextState(val, () => {\r\n  }) : val;\r\n}\r\nfunction getOrInsertComputed(map, key, compute) {\r\n  if (map.has(key)) return map.get(key);\r\n  return map.set(key, compute(key)).get(key);\r\n}\r\n\r\n// src/immutableStateInvariantMiddleware.ts\r\nfunction isImmutableDefault(value) {\r\n  return typeof value !== \"object\" || value == null || Object.isFrozen(value);\r\n}\r\nfunction trackForMutations(isImmutable, ignorePaths, obj) {\r\n  const trackedProperties = trackProperties(isImmutable, ignorePaths, obj);\r\n  return {\r\n    detectMutations() {\r\n      return detectMutations(isImmutable, ignorePaths, trackedProperties, obj);\r\n    }\r\n  };\r\n}\r\nfunction trackProperties(isImmutable, ignorePaths = [], obj, path = \"\", checkedObjects = /* @__PURE__ */ new Set()) {\r\n  const tracked = {\r\n    value: obj\r\n  };\r\n  if (!isImmutable(obj) && !checkedObjects.has(obj)) {\r\n    checkedObjects.add(obj);\r\n    tracked.children = {};\r\n    for (const key in obj) {\r\n      const childPath = path ? path + \".\" + key : key;\r\n      if (ignorePaths.length && ignorePaths.indexOf(childPath) !== -1) {\r\n        continue;\r\n      }\r\n      tracked.children[key] = trackProperties(isImmutable, ignorePaths, obj[key], childPath);\r\n    }\r\n  }\r\n  return tracked;\r\n}\r\nfunction detectMutations(isImmutable, ignoredPaths = [], trackedProperty, obj, sameParentRef = false, path = \"\") {\r\n  const prevObj = trackedProperty ? trackedProperty.value : void 0;\r\n  const sameRef = prevObj === obj;\r\n  if (sameParentRef && !sameRef && !Number.isNaN(obj)) {\r\n    return {\r\n      wasMutated: true,\r\n      path\r\n    };\r\n  }\r\n  if (isImmutable(prevObj) || isImmutable(obj)) {\r\n    return {\r\n      wasMutated: false\r\n    };\r\n  }\r\n  const keysToDetect = {};\r\n  for (let key in trackedProperty.children) {\r\n    keysToDetect[key] = true;\r\n  }\r\n  for (let key in obj) {\r\n    keysToDetect[key] = true;\r\n  }\r\n  const hasIgnoredPaths = ignoredPaths.length > 0;\r\n  for (let key in keysToDetect) {\r\n    const nestedPath = path ? path + \".\" + key : key;\r\n    if (hasIgnoredPaths) {\r\n      const hasMatches = ignoredPaths.some((ignored) => {\r\n        if (ignored instanceof RegExp) {\r\n          return ignored.test(nestedPath);\r\n        }\r\n        return nestedPath === ignored;\r\n      });\r\n      if (hasMatches) {\r\n        continue;\r\n      }\r\n    }\r\n    const result = detectMutations(isImmutable, ignoredPaths, trackedProperty.children[key], obj[key], sameRef, nestedPath);\r\n    if (result.wasMutated) {\r\n      return result;\r\n    }\r\n  }\r\n  return {\r\n    wasMutated: false\r\n  };\r\n}\r\nfunction createImmutableStateInvariantMiddleware(options = {}) {\r\n  if (process.env.NODE_ENV === \"production\") {\r\n    return () => (next) => (action) => next(action);\r\n  } else {\r\n    let stringify2 = function(obj, serializer, indent, decycler) {\r\n      return JSON.stringify(obj, getSerialize2(serializer, decycler), indent);\r\n    }, getSerialize2 = function(serializer, decycler) {\r\n      let stack = [], keys = [];\r\n      if (!decycler) decycler = function(_, value) {\r\n        if (stack[0] === value) return \"[Circular ~]\";\r\n        return \"[Circular ~.\" + keys.slice(0, stack.indexOf(value)).join(\".\") + \"]\";\r\n      };\r\n      return function(key, value) {\r\n        if (stack.length > 0) {\r\n          var thisPos = stack.indexOf(this);\r\n          ~thisPos ? stack.splice(thisPos + 1) : stack.push(this);\r\n          ~thisPos ? keys.splice(thisPos, Infinity, key) : keys.push(key);\r\n          if (~stack.indexOf(value)) value = decycler.call(this, key, value);\r\n        } else stack.push(value);\r\n        return serializer == null ? value : serializer.call(this, key, value);\r\n      };\r\n    };\r\n    var stringify = stringify2, getSerialize = getSerialize2;\r\n    let {\r\n      isImmutable = isImmutableDefault,\r\n      ignoredPaths,\r\n      warnAfter = 32\r\n    } = options;\r\n    const track = trackForMutations.bind(null, isImmutable, ignoredPaths);\r\n    return ({\r\n      getState\r\n    }) => {\r\n      let state = getState();\r\n      let tracker = track(state);\r\n      let result;\r\n      return (next) => (action) => {\r\n        const measureUtils = getTimeMeasureUtils(warnAfter, \"ImmutableStateInvariantMiddleware\");\r\n        measureUtils.measureTime(() => {\r\n          state = getState();\r\n          result = tracker.detectMutations();\r\n          tracker = track(state);\r\n          if (result.wasMutated) {\r\n            throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(19) : `A state mutation was detected between dispatches, in the path '${result.path || \"\"}'.  This may cause incorrect behavior. (https://redux.js.org/style-guide/style-guide#do-not-mutate-state)`);\r\n          }\r\n        });\r\n        const dispatchedAction = next(action);\r\n        measureUtils.measureTime(() => {\r\n          state = getState();\r\n          result = tracker.detectMutations();\r\n          tracker = track(state);\r\n          if (result.wasMutated) {\r\n            throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(20) : `A state mutation was detected inside a dispatch, in the path: ${result.path || \"\"}. Take a look at the reducer(s) handling the action ${stringify2(action)}. (https://redux.js.org/style-guide/style-guide#do-not-mutate-state)`);\r\n          }\r\n        });\r\n        measureUtils.warnIfExceeded();\r\n        return dispatchedAction;\r\n      };\r\n    };\r\n  }\r\n}\r\n\r\n// src/serializableStateInvariantMiddleware.ts\r\nimport { isAction as isAction2, isPlainObject } from \"redux\";\r\nfunction isPlain(val) {\r\n  const type = typeof val;\r\n  return val == null || type === \"string\" || type === \"boolean\" || type === \"number\" || Array.isArray(val) || isPlainObject(val);\r\n}\r\nfunction findNonSerializableValue(value, path = \"\", isSerializable = isPlain, getEntries, ignoredPaths = [], cache) {\r\n  let foundNestedSerializable;\r\n  if (!isSerializable(value)) {\r\n    return {\r\n      keyPath: path || \"<root>\",\r\n      value\r\n    };\r\n  }\r\n  if (typeof value !== \"object\" || value === null) {\r\n    return false;\r\n  }\r\n  if (cache?.has(value)) return false;\r\n  const entries = getEntries != null ? getEntries(value) : Object.entries(value);\r\n  const hasIgnoredPaths = ignoredPaths.length > 0;\r\n  for (const [key, nestedValue] of entries) {\r\n    const nestedPath = path ? path + \".\" + key : key;\r\n    if (hasIgnoredPaths) {\r\n      const hasMatches = ignoredPaths.some((ignored) => {\r\n        if (ignored instanceof RegExp) {\r\n          return ignored.test(nestedPath);\r\n        }\r\n        return nestedPath === ignored;\r\n      });\r\n      if (hasMatches) {\r\n        continue;\r\n      }\r\n    }\r\n    if (!isSerializable(nestedValue)) {\r\n      return {\r\n        keyPath: nestedPath,\r\n        value: nestedValue\r\n      };\r\n    }\r\n    if (typeof nestedValue === \"object\") {\r\n      foundNestedSerializable = findNonSerializableValue(nestedValue, nestedPath, isSerializable, getEntries, ignoredPaths, cache);\r\n      if (foundNestedSerializable) {\r\n        return foundNestedSerializable;\r\n      }\r\n    }\r\n  }\r\n  if (cache && isNestedFrozen(value)) cache.add(value);\r\n  return false;\r\n}\r\nfunction isNestedFrozen(value) {\r\n  if (!Object.isFrozen(value)) return false;\r\n  for (const nestedValue of Object.values(value)) {\r\n    if (typeof nestedValue !== \"object\" || nestedValue === null) continue;\r\n    if (!isNestedFrozen(nestedValue)) return false;\r\n  }\r\n  return true;\r\n}\r\nfunction createSerializableStateInvariantMiddleware(options = {}) {\r\n  if (process.env.NODE_ENV === \"production\") {\r\n    return () => (next) => (action) => next(action);\r\n  } else {\r\n    const {\r\n      isSerializable = isPlain,\r\n      getEntries,\r\n      ignoredActions = [],\r\n      ignoredActionPaths = [\"meta.arg\", \"meta.baseQueryMeta\"],\r\n      ignoredPaths = [],\r\n      warnAfter = 32,\r\n      ignoreState = false,\r\n      ignoreActions = false,\r\n      disableCache = false\r\n    } = options;\r\n    const cache = !disableCache && WeakSet ? /* @__PURE__ */ new WeakSet() : void 0;\r\n    return (storeAPI) => (next) => (action) => {\r\n      if (!isAction2(action)) {\r\n        return next(action);\r\n      }\r\n      const result = next(action);\r\n      const measureUtils = getTimeMeasureUtils(warnAfter, \"SerializableStateInvariantMiddleware\");\r\n      if (!ignoreActions && !(ignoredActions.length && ignoredActions.indexOf(action.type) !== -1)) {\r\n        measureUtils.measureTime(() => {\r\n          const foundActionNonSerializableValue = findNonSerializableValue(action, \"\", isSerializable, getEntries, ignoredActionPaths, cache);\r\n          if (foundActionNonSerializableValue) {\r\n            const {\r\n              keyPath,\r\n              value\r\n            } = foundActionNonSerializableValue;\r\n            console.error(`A non-serializable value was detected in an action, in the path: \\`${keyPath}\\`. Value:`, value, \"\\nTake a look at the logic that dispatched this action: \", action, \"\\n(See https://redux.js.org/faq/actions#why-should-type-be-a-string-or-at-least-serializable-why-should-my-action-types-be-constants)\", \"\\n(To allow non-serializable values see: https://redux-toolkit.js.org/usage/usage-guide#working-with-non-serializable-data)\");\r\n          }\r\n        });\r\n      }\r\n      if (!ignoreState) {\r\n        measureUtils.measureTime(() => {\r\n          const state = storeAPI.getState();\r\n          const foundStateNonSerializableValue = findNonSerializableValue(state, \"\", isSerializable, getEntries, ignoredPaths, cache);\r\n          if (foundStateNonSerializableValue) {\r\n            const {\r\n              keyPath,\r\n              value\r\n            } = foundStateNonSerializableValue;\r\n            console.error(`A non-serializable value was detected in the state, in the path: \\`${keyPath}\\`. Value:`, value, `\r\nTake a look at the reducer(s) handling this action type: ${action.type}.\r\n(See https://redux.js.org/faq/organizing-state#can-i-put-functions-promises-or-other-non-serializable-items-in-my-store-state)`);\r\n          }\r\n        });\r\n        measureUtils.warnIfExceeded();\r\n      }\r\n      return result;\r\n    };\r\n  }\r\n}\r\n\r\n// src/getDefaultMiddleware.ts\r\nfunction isBoolean(x) {\r\n  return typeof x === \"boolean\";\r\n}\r\nvar buildGetDefaultMiddleware = () => function getDefaultMiddleware(options) {\r\n  const {\r\n    thunk = true,\r\n    immutableCheck = true,\r\n    serializableCheck = true,\r\n    actionCreatorCheck = true\r\n  } = options ?? {};\r\n  let middlewareArray = new Tuple();\r\n  if (thunk) {\r\n    if (isBoolean(thunk)) {\r\n      middlewareArray.push(thunkMiddleware);\r\n    } else {\r\n      middlewareArray.push(withExtraArgument(thunk.extraArgument));\r\n    }\r\n  }\r\n  if (process.env.NODE_ENV !== \"production\") {\r\n    if (immutableCheck) {\r\n      let immutableOptions = {};\r\n      if (!isBoolean(immutableCheck)) {\r\n        immutableOptions = immutableCheck;\r\n      }\r\n      middlewareArray.unshift(createImmutableStateInvariantMiddleware(immutableOptions));\r\n    }\r\n    if (serializableCheck) {\r\n      let serializableOptions = {};\r\n      if (!isBoolean(serializableCheck)) {\r\n        serializableOptions = serializableCheck;\r\n      }\r\n      middlewareArray.push(createSerializableStateInvariantMiddleware(serializableOptions));\r\n    }\r\n    if (actionCreatorCheck) {\r\n      let actionCreatorOptions = {};\r\n      if (!isBoolean(actionCreatorCheck)) {\r\n        actionCreatorOptions = actionCreatorCheck;\r\n      }\r\n      middlewareArray.unshift(createActionCreatorInvariantMiddleware(actionCreatorOptions));\r\n    }\r\n  }\r\n  return middlewareArray;\r\n};\r\n\r\n// src/autoBatchEnhancer.ts\r\nvar SHOULD_AUTOBATCH = \"RTK_autoBatch\";\r\nvar prepareAutoBatched = () => (payload) => ({\r\n  payload,\r\n  meta: {\r\n    [SHOULD_AUTOBATCH]: true\r\n  }\r\n});\r\nvar createQueueWithTimer = (timeout) => {\r\n  return (notify) => {\r\n    setTimeout(notify, timeout);\r\n  };\r\n};\r\nvar autoBatchEnhancer = (options = {\r\n  type: \"raf\"\r\n}) => (next) => (...args) => {\r\n  const store = next(...args);\r\n  let notifying = true;\r\n  let shouldNotifyAtEndOfTick = false;\r\n  let notificationQueued = false;\r\n  const listeners = /* @__PURE__ */ new Set();\r\n  const queueCallback = options.type === \"tick\" ? queueMicrotask : options.type === \"raf\" ? (\r\n    // requestAnimationFrame won't exist in SSR environments. Fall back to a vague approximation just to keep from erroring.\r\n    typeof window !== \"undefined\" && window.requestAnimationFrame ? window.requestAnimationFrame : createQueueWithTimer(10)\r\n  ) : options.type === \"callback\" ? options.queueNotification : createQueueWithTimer(options.timeout);\r\n  const notifyListeners = () => {\r\n    notificationQueued = false;\r\n    if (shouldNotifyAtEndOfTick) {\r\n      shouldNotifyAtEndOfTick = false;\r\n      listeners.forEach((l) => l());\r\n    }\r\n  };\r\n  return Object.assign({}, store, {\r\n    // Override the base `store.subscribe` method to keep original listeners\r\n    // from running if we're delaying notifications\r\n    subscribe(listener2) {\r\n      const wrappedListener = () => notifying && listener2();\r\n      const unsubscribe = store.subscribe(wrappedListener);\r\n      listeners.add(listener2);\r\n      return () => {\r\n        unsubscribe();\r\n        listeners.delete(listener2);\r\n      };\r\n    },\r\n    // Override the base `store.dispatch` method so that we can check actions\r\n    // for the `shouldAutoBatch` flag and determine if batching is active\r\n    dispatch(action) {\r\n      try {\r\n        notifying = !action?.meta?.[SHOULD_AUTOBATCH];\r\n        shouldNotifyAtEndOfTick = !notifying;\r\n        if (shouldNotifyAtEndOfTick) {\r\n          if (!notificationQueued) {\r\n            notificationQueued = true;\r\n            queueCallback(notifyListeners);\r\n          }\r\n        }\r\n        return store.dispatch(action);\r\n      } finally {\r\n        notifying = true;\r\n      }\r\n    }\r\n  });\r\n};\r\n\r\n// src/getDefaultEnhancers.ts\r\nvar buildGetDefaultEnhancers = (middlewareEnhancer) => function getDefaultEnhancers(options) {\r\n  const {\r\n    autoBatch = true\r\n  } = options ?? {};\r\n  let enhancerArray = new Tuple(middlewareEnhancer);\r\n  if (autoBatch) {\r\n    enhancerArray.push(autoBatchEnhancer(typeof autoBatch === \"object\" ? autoBatch : void 0));\r\n  }\r\n  return enhancerArray;\r\n};\r\n\r\n// src/configureStore.ts\r\nfunction configureStore(options) {\r\n  const getDefaultMiddleware = buildGetDefaultMiddleware();\r\n  const {\r\n    reducer = void 0,\r\n    middleware,\r\n    devTools = true,\r\n    duplicateMiddlewareCheck = true,\r\n    preloadedState = void 0,\r\n    enhancers = void 0\r\n  } = options || {};\r\n  let rootReducer;\r\n  if (typeof reducer === \"function\") {\r\n    rootReducer = reducer;\r\n  } else if (isPlainObject2(reducer)) {\r\n    rootReducer = combineReducers(reducer);\r\n  } else {\r\n    throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(1) : \"`reducer` is a required argument, and must be a function or an object of functions that can be passed to combineReducers\");\r\n  }\r\n  if (process.env.NODE_ENV !== \"production\" && middleware && typeof middleware !== \"function\") {\r\n    throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(2) : \"`middleware` field must be a callback\");\r\n  }\r\n  let finalMiddleware;\r\n  if (typeof middleware === \"function\") {\r\n    finalMiddleware = middleware(getDefaultMiddleware);\r\n    if (process.env.NODE_ENV !== \"production\" && !Array.isArray(finalMiddleware)) {\r\n      throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(3) : \"when using a middleware builder function, an array of middleware must be returned\");\r\n    }\r\n  } else {\r\n    finalMiddleware = getDefaultMiddleware();\r\n  }\r\n  if (process.env.NODE_ENV !== \"production\" && finalMiddleware.some((item) => typeof item !== \"function\")) {\r\n    throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(4) : \"each middleware provided to configureStore must be a function\");\r\n  }\r\n  if (process.env.NODE_ENV !== \"production\" && duplicateMiddlewareCheck) {\r\n    let middlewareReferences = /* @__PURE__ */ new Set();\r\n    finalMiddleware.forEach((middleware2) => {\r\n      if (middlewareReferences.has(middleware2)) {\r\n        throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(42) : \"Duplicate middleware references found when creating the store. Ensure that each middleware is only included once.\");\r\n      }\r\n      middlewareReferences.add(middleware2);\r\n    });\r\n  }\r\n  let finalCompose = compose2;\r\n  if (devTools) {\r\n    finalCompose = composeWithDevTools({\r\n      // Enable capture of stack traces for dispatched Redux actions\r\n      trace: process.env.NODE_ENV !== \"production\",\r\n      ...typeof devTools === \"object\" && devTools\r\n    });\r\n  }\r\n  const middlewareEnhancer = applyMiddleware(...finalMiddleware);\r\n  const getDefaultEnhancers = buildGetDefaultEnhancers(middlewareEnhancer);\r\n  if (process.env.NODE_ENV !== \"production\" && enhancers && typeof enhancers !== \"function\") {\r\n    throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(5) : \"`enhancers` field must be a callback\");\r\n  }\r\n  let storeEnhancers = typeof enhancers === \"function\" ? enhancers(getDefaultEnhancers) : getDefaultEnhancers();\r\n  if (process.env.NODE_ENV !== \"production\" && !Array.isArray(storeEnhancers)) {\r\n    throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(6) : \"`enhancers` callback must return an array\");\r\n  }\r\n  if (process.env.NODE_ENV !== \"production\" && storeEnhancers.some((item) => typeof item !== \"function\")) {\r\n    throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(7) : \"each enhancer provided to configureStore must be a function\");\r\n  }\r\n  if (process.env.NODE_ENV !== \"production\" && finalMiddleware.length && !storeEnhancers.includes(middlewareEnhancer)) {\r\n    console.error(\"middlewares were provided, but middleware enhancer was not included in final enhancers - make sure to call `getDefaultEnhancers`\");\r\n  }\r\n  const composedEnhancer = finalCompose(...storeEnhancers);\r\n  return createStore(rootReducer, preloadedState, composedEnhancer);\r\n}\r\n\r\n// src/createReducer.ts\r\nimport { produce as createNextState2, isDraft as isDraft2, isDraftable as isDraftable2 } from \"immer\";\r\n\r\n// src/mapBuilders.ts\r\nfunction executeReducerBuilderCallback(builderCallback) {\r\n  const actionsMap = {};\r\n  const actionMatchers = [];\r\n  let defaultCaseReducer;\r\n  const builder = {\r\n    addCase(typeOrActionCreator, reducer) {\r\n      if (process.env.NODE_ENV !== \"production\") {\r\n        if (actionMatchers.length > 0) {\r\n          throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(26) : \"`builder.addCase` should only be called before calling `builder.addMatcher`\");\r\n        }\r\n        if (defaultCaseReducer) {\r\n          throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(27) : \"`builder.addCase` should only be called before calling `builder.addDefaultCase`\");\r\n        }\r\n      }\r\n      const type = typeof typeOrActionCreator === \"string\" ? typeOrActionCreator : typeOrActionCreator.type;\r\n      if (!type) {\r\n        throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(28) : \"`builder.addCase` cannot be called with an empty action type\");\r\n      }\r\n      if (type in actionsMap) {\r\n        throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(29) : `\\`builder.addCase\\` cannot be called with two reducers for the same action type '${type}'`);\r\n      }\r\n      actionsMap[type] = reducer;\r\n      return builder;\r\n    },\r\n    addMatcher(matcher, reducer) {\r\n      if (process.env.NODE_ENV !== \"production\") {\r\n        if (defaultCaseReducer) {\r\n          throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(30) : \"`builder.addMatcher` should only be called before calling `builder.addDefaultCase`\");\r\n        }\r\n      }\r\n      actionMatchers.push({\r\n        matcher,\r\n        reducer\r\n      });\r\n      return builder;\r\n    },\r\n    addDefaultCase(reducer) {\r\n      if (process.env.NODE_ENV !== \"production\") {\r\n        if (defaultCaseReducer) {\r\n          throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(31) : \"`builder.addDefaultCase` can only be called once\");\r\n        }\r\n      }\r\n      defaultCaseReducer = reducer;\r\n      return builder;\r\n    }\r\n  };\r\n  builderCallback(builder);\r\n  return [actionsMap, actionMatchers, defaultCaseReducer];\r\n}\r\n\r\n// src/createReducer.ts\r\nfunction isStateFunction(x) {\r\n  return typeof x === \"function\";\r\n}\r\nfunction createReducer(initialState, mapOrBuilderCallback) {\r\n  if (process.env.NODE_ENV !== \"production\") {\r\n    if (typeof mapOrBuilderCallback === \"object\") {\r\n      throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(8) : \"The object notation for `createReducer` has been removed. Please use the 'builder callback' notation instead: https://redux-toolkit.js.org/api/createReducer\");\r\n    }\r\n  }\r\n  let [actionsMap, finalActionMatchers, finalDefaultCaseReducer] = executeReducerBuilderCallback(mapOrBuilderCallback);\r\n  let getInitialState;\r\n  if (isStateFunction(initialState)) {\r\n    getInitialState = () => freezeDraftable(initialState());\r\n  } else {\r\n    const frozenInitialState = freezeDraftable(initialState);\r\n    getInitialState = () => frozenInitialState;\r\n  }\r\n  function reducer(state = getInitialState(), action) {\r\n    let caseReducers = [actionsMap[action.type], ...finalActionMatchers.filter(({\r\n      matcher\r\n    }) => matcher(action)).map(({\r\n      reducer: reducer2\r\n    }) => reducer2)];\r\n    if (caseReducers.filter((cr) => !!cr).length === 0) {\r\n      caseReducers = [finalDefaultCaseReducer];\r\n    }\r\n    return caseReducers.reduce((previousState, caseReducer) => {\r\n      if (caseReducer) {\r\n        if (isDraft2(previousState)) {\r\n          const draft = previousState;\r\n          const result = caseReducer(draft, action);\r\n          if (result === void 0) {\r\n            return previousState;\r\n          }\r\n          return result;\r\n        } else if (!isDraftable2(previousState)) {\r\n          const result = caseReducer(previousState, action);\r\n          if (result === void 0) {\r\n            if (previousState === null) {\r\n              return previousState;\r\n            }\r\n            throw Error(\"A case reducer on a non-draftable value must not return undefined\");\r\n          }\r\n          return result;\r\n        } else {\r\n          return createNextState2(previousState, (draft) => {\r\n            return caseReducer(draft, action);\r\n          });\r\n        }\r\n      }\r\n      return previousState;\r\n    }, state);\r\n  }\r\n  reducer.getInitialState = getInitialState;\r\n  return reducer;\r\n}\r\n\r\n// src/matchers.ts\r\nvar matches = (matcher, action) => {\r\n  if (hasMatchFunction(matcher)) {\r\n    return matcher.match(action);\r\n  } else {\r\n    return matcher(action);\r\n  }\r\n};\r\nfunction isAnyOf(...matchers) {\r\n  return (action) => {\r\n    return matchers.some((matcher) => matches(matcher, action));\r\n  };\r\n}\r\nfunction isAllOf(...matchers) {\r\n  return (action) => {\r\n    return matchers.every((matcher) => matches(matcher, action));\r\n  };\r\n}\r\nfunction hasExpectedRequestMetadata(action, validStatus) {\r\n  if (!action || !action.meta) return false;\r\n  const hasValidRequestId = typeof action.meta.requestId === \"string\";\r\n  const hasValidRequestStatus = validStatus.indexOf(action.meta.requestStatus) > -1;\r\n  return hasValidRequestId && hasValidRequestStatus;\r\n}\r\nfunction isAsyncThunkArray(a) {\r\n  return typeof a[0] === \"function\" && \"pending\" in a[0] && \"fulfilled\" in a[0] && \"rejected\" in a[0];\r\n}\r\nfunction isPending(...asyncThunks) {\r\n  if (asyncThunks.length === 0) {\r\n    return (action) => hasExpectedRequestMetadata(action, [\"pending\"]);\r\n  }\r\n  if (!isAsyncThunkArray(asyncThunks)) {\r\n    return isPending()(asyncThunks[0]);\r\n  }\r\n  return isAnyOf(...asyncThunks.map((asyncThunk) => asyncThunk.pending));\r\n}\r\nfunction isRejected(...asyncThunks) {\r\n  if (asyncThunks.length === 0) {\r\n    return (action) => hasExpectedRequestMetadata(action, [\"rejected\"]);\r\n  }\r\n  if (!isAsyncThunkArray(asyncThunks)) {\r\n    return isRejected()(asyncThunks[0]);\r\n  }\r\n  return isAnyOf(...asyncThunks.map((asyncThunk) => asyncThunk.rejected));\r\n}\r\nfunction isRejectedWithValue(...asyncThunks) {\r\n  const hasFlag = (action) => {\r\n    return action && action.meta && action.meta.rejectedWithValue;\r\n  };\r\n  if (asyncThunks.length === 0) {\r\n    return isAllOf(isRejected(...asyncThunks), hasFlag);\r\n  }\r\n  if (!isAsyncThunkArray(asyncThunks)) {\r\n    return isRejectedWithValue()(asyncThunks[0]);\r\n  }\r\n  return isAllOf(isRejected(...asyncThunks), hasFlag);\r\n}\r\nfunction isFulfilled(...asyncThunks) {\r\n  if (asyncThunks.length === 0) {\r\n    return (action) => hasExpectedRequestMetadata(action, [\"fulfilled\"]);\r\n  }\r\n  if (!isAsyncThunkArray(asyncThunks)) {\r\n    return isFulfilled()(asyncThunks[0]);\r\n  }\r\n  return isAnyOf(...asyncThunks.map((asyncThunk) => asyncThunk.fulfilled));\r\n}\r\nfunction isAsyncThunkAction(...asyncThunks) {\r\n  if (asyncThunks.length === 0) {\r\n    return (action) => hasExpectedRequestMetadata(action, [\"pending\", \"fulfilled\", \"rejected\"]);\r\n  }\r\n  if (!isAsyncThunkArray(asyncThunks)) {\r\n    return isAsyncThunkAction()(asyncThunks[0]);\r\n  }\r\n  return isAnyOf(...asyncThunks.flatMap((asyncThunk) => [asyncThunk.pending, asyncThunk.rejected, asyncThunk.fulfilled]));\r\n}\r\n\r\n// src/nanoid.ts\r\nvar urlAlphabet = \"ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW\";\r\nvar nanoid = (size = 21) => {\r\n  let id = \"\";\r\n  let i = size;\r\n  while (i--) {\r\n    id += urlAlphabet[Math.random() * 64 | 0];\r\n  }\r\n  return id;\r\n};\r\n\r\n// src/createAsyncThunk.ts\r\nvar commonProperties = [\"name\", \"message\", \"stack\", \"code\"];\r\nvar RejectWithValue = class {\r\n  constructor(payload, meta) {\r\n    this.payload = payload;\r\n    this.meta = meta;\r\n  }\r\n  /*\r\n  type-only property to distinguish between RejectWithValue and FulfillWithMeta\r\n  does not exist at runtime\r\n  */\r\n  _type;\r\n};\r\nvar FulfillWithMeta = class {\r\n  constructor(payload, meta) {\r\n    this.payload = payload;\r\n    this.meta = meta;\r\n  }\r\n  /*\r\n  type-only property to distinguish between RejectWithValue and FulfillWithMeta\r\n  does not exist at runtime\r\n  */\r\n  _type;\r\n};\r\nvar miniSerializeError = (value) => {\r\n  if (typeof value === \"object\" && value !== null) {\r\n    const simpleError = {};\r\n    for (const property of commonProperties) {\r\n      if (typeof value[property] === \"string\") {\r\n        simpleError[property] = value[property];\r\n      }\r\n    }\r\n    return simpleError;\r\n  }\r\n  return {\r\n    message: String(value)\r\n  };\r\n};\r\nvar externalAbortMessage = \"External signal was aborted\";\r\nvar createAsyncThunk = /* @__PURE__ */ (() => {\r\n  function createAsyncThunk2(typePrefix, payloadCreator, options) {\r\n    const fulfilled = createAction(typePrefix + \"/fulfilled\", (payload, requestId, arg, meta) => ({\r\n      payload,\r\n      meta: {\r\n        ...meta || {},\r\n        arg,\r\n        requestId,\r\n        requestStatus: \"fulfilled\"\r\n      }\r\n    }));\r\n    const pending = createAction(typePrefix + \"/pending\", (requestId, arg, meta) => ({\r\n      payload: void 0,\r\n      meta: {\r\n        ...meta || {},\r\n        arg,\r\n        requestId,\r\n        requestStatus: \"pending\"\r\n      }\r\n    }));\r\n    const rejected = createAction(typePrefix + \"/rejected\", (error, requestId, arg, payload, meta) => ({\r\n      payload,\r\n      error: (options && options.serializeError || miniSerializeError)(error || \"Rejected\"),\r\n      meta: {\r\n        ...meta || {},\r\n        arg,\r\n        requestId,\r\n        rejectedWithValue: !!payload,\r\n        requestStatus: \"rejected\",\r\n        aborted: error?.name === \"AbortError\",\r\n        condition: error?.name === \"ConditionError\"\r\n      }\r\n    }));\r\n    function actionCreator(arg, {\r\n      signal\r\n    } = {}) {\r\n      return (dispatch, getState, extra) => {\r\n        const requestId = options?.idGenerator ? options.idGenerator(arg) : nanoid();\r\n        const abortController = new AbortController();\r\n        let abortHandler;\r\n        let abortReason;\r\n        function abort(reason) {\r\n          abortReason = reason;\r\n          abortController.abort();\r\n        }\r\n        if (signal) {\r\n          if (signal.aborted) {\r\n            abort(externalAbortMessage);\r\n          } else {\r\n            signal.addEventListener(\"abort\", () => abort(externalAbortMessage), {\r\n              once: true\r\n            });\r\n          }\r\n        }\r\n        const promise = async function() {\r\n          let finalAction;\r\n          try {\r\n            let conditionResult = options?.condition?.(arg, {\r\n              getState,\r\n              extra\r\n            });\r\n            if (isThenable(conditionResult)) {\r\n              conditionResult = await conditionResult;\r\n            }\r\n            if (conditionResult === false || abortController.signal.aborted) {\r\n              throw {\r\n                name: \"ConditionError\",\r\n                message: \"Aborted due to condition callback returning false.\"\r\n              };\r\n            }\r\n            const abortedPromise = new Promise((_, reject) => {\r\n              abortHandler = () => {\r\n                reject({\r\n                  name: \"AbortError\",\r\n                  message: abortReason || \"Aborted\"\r\n                });\r\n              };\r\n              abortController.signal.addEventListener(\"abort\", abortHandler);\r\n            });\r\n            dispatch(pending(requestId, arg, options?.getPendingMeta?.({\r\n              requestId,\r\n              arg\r\n            }, {\r\n              getState,\r\n              extra\r\n            })));\r\n            finalAction = await Promise.race([abortedPromise, Promise.resolve(payloadCreator(arg, {\r\n              dispatch,\r\n              getState,\r\n              extra,\r\n              requestId,\r\n              signal: abortController.signal,\r\n              abort,\r\n              rejectWithValue: (value, meta) => {\r\n                return new RejectWithValue(value, meta);\r\n              },\r\n              fulfillWithValue: (value, meta) => {\r\n                return new FulfillWithMeta(value, meta);\r\n              }\r\n            })).then((result) => {\r\n              if (result instanceof RejectWithValue) {\r\n                throw result;\r\n              }\r\n              if (result instanceof FulfillWithMeta) {\r\n                return fulfilled(result.payload, requestId, arg, result.meta);\r\n              }\r\n              return fulfilled(result, requestId, arg);\r\n            })]);\r\n          } catch (err) {\r\n            finalAction = err instanceof RejectWithValue ? rejected(null, requestId, arg, err.payload, err.meta) : rejected(err, requestId, arg);\r\n          } finally {\r\n            if (abortHandler) {\r\n              abortController.signal.removeEventListener(\"abort\", abortHandler);\r\n            }\r\n          }\r\n          const skipDispatch = options && !options.dispatchConditionRejection && rejected.match(finalAction) && finalAction.meta.condition;\r\n          if (!skipDispatch) {\r\n            dispatch(finalAction);\r\n          }\r\n          return finalAction;\r\n        }();\r\n        return Object.assign(promise, {\r\n          abort,\r\n          requestId,\r\n          arg,\r\n          unwrap() {\r\n            return promise.then(unwrapResult);\r\n          }\r\n        });\r\n      };\r\n    }\r\n    return Object.assign(actionCreator, {\r\n      pending,\r\n      rejected,\r\n      fulfilled,\r\n      settled: isAnyOf(rejected, fulfilled),\r\n      typePrefix\r\n    });\r\n  }\r\n  createAsyncThunk2.withTypes = () => createAsyncThunk2;\r\n  return createAsyncThunk2;\r\n})();\r\nfunction unwrapResult(action) {\r\n  if (action.meta && action.meta.rejectedWithValue) {\r\n    throw action.payload;\r\n  }\r\n  if (action.error) {\r\n    throw action.error;\r\n  }\r\n  return action.payload;\r\n}\r\nfunction isThenable(value) {\r\n  return value !== null && typeof value === \"object\" && typeof value.then === \"function\";\r\n}\r\n\r\n// src/createSlice.ts\r\nvar asyncThunkSymbol = /* @__PURE__ */ Symbol.for(\"rtk-slice-createasyncthunk\");\r\nvar asyncThunkCreator = {\r\n  [asyncThunkSymbol]: createAsyncThunk\r\n};\r\nvar ReducerType = /* @__PURE__ */ ((ReducerType2) => {\r\n  ReducerType2[\"reducer\"] = \"reducer\";\r\n  ReducerType2[\"reducerWithPrepare\"] = \"reducerWithPrepare\";\r\n  ReducerType2[\"asyncThunk\"] = \"asyncThunk\";\r\n  return ReducerType2;\r\n})(ReducerType || {});\r\nfunction getType(slice, actionKey) {\r\n  return `${slice}/${actionKey}`;\r\n}\r\nfunction buildCreateSlice({\r\n  creators\r\n} = {}) {\r\n  const cAT = creators?.asyncThunk?.[asyncThunkSymbol];\r\n  return function createSlice2(options) {\r\n    const {\r\n      name,\r\n      reducerPath = name\r\n    } = options;\r\n    if (!name) {\r\n      throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(11) : \"`name` is a required option for createSlice\");\r\n    }\r\n    if (typeof process !== \"undefined\" && process.env.NODE_ENV === \"development\") {\r\n      if (options.initialState === void 0) {\r\n        console.error(\"You must provide an `initialState` value that is not `undefined`. You may have misspelled `initialState`\");\r\n      }\r\n    }\r\n    const reducers = (typeof options.reducers === \"function\" ? options.reducers(buildReducerCreators()) : options.reducers) || {};\r\n    const reducerNames = Object.keys(reducers);\r\n    const context = {\r\n      sliceCaseReducersByName: {},\r\n      sliceCaseReducersByType: {},\r\n      actionCreators: {},\r\n      sliceMatchers: []\r\n    };\r\n    const contextMethods = {\r\n      addCase(typeOrActionCreator, reducer2) {\r\n        const type = typeof typeOrActionCreator === \"string\" ? typeOrActionCreator : typeOrActionCreator.type;\r\n        if (!type) {\r\n          throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(12) : \"`context.addCase` cannot be called with an empty action type\");\r\n        }\r\n        if (type in context.sliceCaseReducersByType) {\r\n          throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(13) : \"`context.addCase` cannot be called with two reducers for the same action type: \" + type);\r\n        }\r\n        context.sliceCaseReducersByType[type] = reducer2;\r\n        return contextMethods;\r\n      },\r\n      addMatcher(matcher, reducer2) {\r\n        context.sliceMatchers.push({\r\n          matcher,\r\n          reducer: reducer2\r\n        });\r\n        return contextMethods;\r\n      },\r\n      exposeAction(name2, actionCreator) {\r\n        context.actionCreators[name2] = actionCreator;\r\n        return contextMethods;\r\n      },\r\n      exposeCaseReducer(name2, reducer2) {\r\n        context.sliceCaseReducersByName[name2] = reducer2;\r\n        return contextMethods;\r\n      }\r\n    };\r\n    reducerNames.forEach((reducerName) => {\r\n      const reducerDefinition = reducers[reducerName];\r\n      const reducerDetails = {\r\n        reducerName,\r\n        type: getType(name, reducerName),\r\n        createNotation: typeof options.reducers === \"function\"\r\n      };\r\n      if (isAsyncThunkSliceReducerDefinition(reducerDefinition)) {\r\n        handleThunkCaseReducerDefinition(reducerDetails, reducerDefinition, contextMethods, cAT);\r\n      } else {\r\n        handleNormalReducerDefinition(reducerDetails, reducerDefinition, contextMethods);\r\n      }\r\n    });\r\n    function buildReducer() {\r\n      if (process.env.NODE_ENV !== \"production\") {\r\n        if (typeof options.extraReducers === \"object\") {\r\n          throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(14) : \"The object notation for `createSlice.extraReducers` has been removed. Please use the 'builder callback' notation instead: https://redux-toolkit.js.org/api/createSlice\");\r\n        }\r\n      }\r\n      const [extraReducers = {}, actionMatchers = [], defaultCaseReducer = void 0] = typeof options.extraReducers === \"function\" ? executeReducerBuilderCallback(options.extraReducers) : [options.extraReducers];\r\n      const finalCaseReducers = {\r\n        ...extraReducers,\r\n        ...context.sliceCaseReducersByType\r\n      };\r\n      return createReducer(options.initialState, (builder) => {\r\n        for (let key in finalCaseReducers) {\r\n          builder.addCase(key, finalCaseReducers[key]);\r\n        }\r\n        for (let sM of context.sliceMatchers) {\r\n          builder.addMatcher(sM.matcher, sM.reducer);\r\n        }\r\n        for (let m of actionMatchers) {\r\n          builder.addMatcher(m.matcher, m.reducer);\r\n        }\r\n        if (defaultCaseReducer) {\r\n          builder.addDefaultCase(defaultCaseReducer);\r\n        }\r\n      });\r\n    }\r\n    const selectSelf = (state) => state;\r\n    const injectedSelectorCache = /* @__PURE__ */ new Map();\r\n    const injectedStateCache = /* @__PURE__ */ new WeakMap();\r\n    let _reducer;\r\n    function reducer(state, action) {\r\n      if (!_reducer) _reducer = buildReducer();\r\n      return _reducer(state, action);\r\n    }\r\n    function getInitialState() {\r\n      if (!_reducer) _reducer = buildReducer();\r\n      return _reducer.getInitialState();\r\n    }\r\n    function makeSelectorProps(reducerPath2, injected = false) {\r\n      function selectSlice(state) {\r\n        let sliceState = state[reducerPath2];\r\n        if (typeof sliceState === \"undefined\") {\r\n          if (injected) {\r\n            sliceState = getOrInsertComputed(injectedStateCache, selectSlice, getInitialState);\r\n          } else if (process.env.NODE_ENV !== \"production\") {\r\n            throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(15) : \"selectSlice returned undefined for an uninjected slice reducer\");\r\n          }\r\n        }\r\n        return sliceState;\r\n      }\r\n      function getSelectors(selectState = selectSelf) {\r\n        const selectorCache = getOrInsertComputed(injectedSelectorCache, injected, () => /* @__PURE__ */ new WeakMap());\r\n        return getOrInsertComputed(selectorCache, selectState, () => {\r\n          const map = {};\r\n          for (const [name2, selector] of Object.entries(options.selectors ?? {})) {\r\n            map[name2] = wrapSelector(selector, selectState, () => getOrInsertComputed(injectedStateCache, selectState, getInitialState), injected);\r\n          }\r\n          return map;\r\n        });\r\n      }\r\n      return {\r\n        reducerPath: reducerPath2,\r\n        getSelectors,\r\n        get selectors() {\r\n          return getSelectors(selectSlice);\r\n        },\r\n        selectSlice\r\n      };\r\n    }\r\n    const slice = {\r\n      name,\r\n      reducer,\r\n      actions: context.actionCreators,\r\n      caseReducers: context.sliceCaseReducersByName,\r\n      getInitialState,\r\n      ...makeSelectorProps(reducerPath),\r\n      injectInto(injectable, {\r\n        reducerPath: pathOpt,\r\n        ...config\r\n      } = {}) {\r\n        const newReducerPath = pathOpt ?? reducerPath;\r\n        injectable.inject({\r\n          reducerPath: newReducerPath,\r\n          reducer\r\n        }, config);\r\n        return {\r\n          ...slice,\r\n          ...makeSelectorProps(newReducerPath, true)\r\n        };\r\n      }\r\n    };\r\n    return slice;\r\n  };\r\n}\r\nfunction wrapSelector(selector, selectState, getInitialState, injected) {\r\n  function wrapper(rootState, ...args) {\r\n    let sliceState = selectState(rootState);\r\n    if (typeof sliceState === \"undefined\") {\r\n      if (injected) {\r\n        sliceState = getInitialState();\r\n      } else if (process.env.NODE_ENV !== \"production\") {\r\n        throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(16) : \"selectState returned undefined for an uninjected slice reducer\");\r\n      }\r\n    }\r\n    return selector(sliceState, ...args);\r\n  }\r\n  wrapper.unwrapped = selector;\r\n  return wrapper;\r\n}\r\nvar createSlice = /* @__PURE__ */ buildCreateSlice();\r\nfunction buildReducerCreators() {\r\n  function asyncThunk(payloadCreator, config) {\r\n    return {\r\n      _reducerDefinitionType: \"asyncThunk\" /* asyncThunk */,\r\n      payloadCreator,\r\n      ...config\r\n    };\r\n  }\r\n  asyncThunk.withTypes = () => asyncThunk;\r\n  return {\r\n    reducer(caseReducer) {\r\n      return Object.assign({\r\n        // hack so the wrapping function has the same name as the original\r\n        // we need to create a wrapper so the `reducerDefinitionType` is not assigned to the original\r\n        [caseReducer.name](...args) {\r\n          return caseReducer(...args);\r\n        }\r\n      }[caseReducer.name], {\r\n        _reducerDefinitionType: \"reducer\" /* reducer */\r\n      });\r\n    },\r\n    preparedReducer(prepare, reducer) {\r\n      return {\r\n        _reducerDefinitionType: \"reducerWithPrepare\" /* reducerWithPrepare */,\r\n        prepare,\r\n        reducer\r\n      };\r\n    },\r\n    asyncThunk\r\n  };\r\n}\r\nfunction handleNormalReducerDefinition({\r\n  type,\r\n  reducerName,\r\n  createNotation\r\n}, maybeReducerWithPrepare, context) {\r\n  let caseReducer;\r\n  let prepareCallback;\r\n  if (\"reducer\" in maybeReducerWithPrepare) {\r\n    if (createNotation && !isCaseReducerWithPrepareDefinition(maybeReducerWithPrepare)) {\r\n      throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(17) : \"Please use the `create.preparedReducer` notation for prepared action creators with the `create` notation.\");\r\n    }\r\n    caseReducer = maybeReducerWithPrepare.reducer;\r\n    prepareCallback = maybeReducerWithPrepare.prepare;\r\n  } else {\r\n    caseReducer = maybeReducerWithPrepare;\r\n  }\r\n  context.addCase(type, caseReducer).exposeCaseReducer(reducerName, caseReducer).exposeAction(reducerName, prepareCallback ? createAction(type, prepareCallback) : createAction(type));\r\n}\r\nfunction isAsyncThunkSliceReducerDefinition(reducerDefinition) {\r\n  return reducerDefinition._reducerDefinitionType === \"asyncThunk\" /* asyncThunk */;\r\n}\r\nfunction isCaseReducerWithPrepareDefinition(reducerDefinition) {\r\n  return reducerDefinition._reducerDefinitionType === \"reducerWithPrepare\" /* reducerWithPrepare */;\r\n}\r\nfunction handleThunkCaseReducerDefinition({\r\n  type,\r\n  reducerName\r\n}, reducerDefinition, context, cAT) {\r\n  if (!cAT) {\r\n    throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(18) : \"Cannot use `create.asyncThunk` in the built-in `createSlice`. Use `buildCreateSlice({ creators: { asyncThunk: asyncThunkCreator } })` to create a customised version of `createSlice`.\");\r\n  }\r\n  const {\r\n    payloadCreator,\r\n    fulfilled,\r\n    pending,\r\n    rejected,\r\n    settled,\r\n    options\r\n  } = reducerDefinition;\r\n  const thunk = cAT(type, payloadCreator, options);\r\n  context.exposeAction(reducerName, thunk);\r\n  if (fulfilled) {\r\n    context.addCase(thunk.fulfilled, fulfilled);\r\n  }\r\n  if (pending) {\r\n    context.addCase(thunk.pending, pending);\r\n  }\r\n  if (rejected) {\r\n    context.addCase(thunk.rejected, rejected);\r\n  }\r\n  if (settled) {\r\n    context.addMatcher(thunk.settled, settled);\r\n  }\r\n  context.exposeCaseReducer(reducerName, {\r\n    fulfilled: fulfilled || noop,\r\n    pending: pending || noop,\r\n    rejected: rejected || noop,\r\n    settled: settled || noop\r\n  });\r\n}\r\nfunction noop() {\r\n}\r\n\r\n// src/entities/entity_state.ts\r\nfunction getInitialEntityState() {\r\n  return {\r\n    ids: [],\r\n    entities: {}\r\n  };\r\n}\r\nfunction createInitialStateFactory(stateAdapter) {\r\n  function getInitialState(additionalState = {}, entities) {\r\n    const state = Object.assign(getInitialEntityState(), additionalState);\r\n    return entities ? stateAdapter.setAll(state, entities) : state;\r\n  }\r\n  return {\r\n    getInitialState\r\n  };\r\n}\r\n\r\n// src/entities/state_selectors.ts\r\nfunction createSelectorsFactory() {\r\n  function getSelectors(selectState, options = {}) {\r\n    const {\r\n      createSelector: createSelector2 = createDraftSafeSelector\r\n    } = options;\r\n    const selectIds = (state) => state.ids;\r\n    const selectEntities = (state) => state.entities;\r\n    const selectAll = createSelector2(selectIds, selectEntities, (ids, entities) => ids.map((id) => entities[id]));\r\n    const selectId = (_, id) => id;\r\n    const selectById = (entities, id) => entities[id];\r\n    const selectTotal = createSelector2(selectIds, (ids) => ids.length);\r\n    if (!selectState) {\r\n      return {\r\n        selectIds,\r\n        selectEntities,\r\n        selectAll,\r\n        selectTotal,\r\n        selectById: createSelector2(selectEntities, selectId, selectById)\r\n      };\r\n    }\r\n    const selectGlobalizedEntities = createSelector2(selectState, selectEntities);\r\n    return {\r\n      selectIds: createSelector2(selectState, selectIds),\r\n      selectEntities: selectGlobalizedEntities,\r\n      selectAll: createSelector2(selectState, selectAll),\r\n      selectTotal: createSelector2(selectState, selectTotal),\r\n      selectById: createSelector2(selectGlobalizedEntities, selectId, selectById)\r\n    };\r\n  }\r\n  return {\r\n    getSelectors\r\n  };\r\n}\r\n\r\n// src/entities/state_adapter.ts\r\nimport { produce as createNextState3, isDraft as isDraft3 } from \"immer\";\r\nvar isDraftTyped = isDraft3;\r\nfunction createSingleArgumentStateOperator(mutator) {\r\n  const operator = createStateOperator((_, state) => mutator(state));\r\n  return function operation(state) {\r\n    return operator(state, void 0);\r\n  };\r\n}\r\nfunction createStateOperator(mutator) {\r\n  return function operation(state, arg) {\r\n    function isPayloadActionArgument(arg2) {\r\n      return isFSA(arg2);\r\n    }\r\n    const runMutator = (draft) => {\r\n      if (isPayloadActionArgument(arg)) {\r\n        mutator(arg.payload, draft);\r\n      } else {\r\n        mutator(arg, draft);\r\n      }\r\n    };\r\n    if (isDraftTyped(state)) {\r\n      runMutator(state);\r\n      return state;\r\n    }\r\n    return createNextState3(state, runMutator);\r\n  };\r\n}\r\n\r\n// src/entities/utils.ts\r\nimport { current as current2, isDraft as isDraft4 } from \"immer\";\r\nfunction selectIdValue(entity, selectId) {\r\n  const key = selectId(entity);\r\n  if (process.env.NODE_ENV !== \"production\" && key === void 0) {\r\n    console.warn(\"The entity passed to the `selectId` implementation returned undefined.\", \"You should probably provide your own `selectId` implementation.\", \"The entity that was passed:\", entity, \"The `selectId` implementation:\", selectId.toString());\r\n  }\r\n  return key;\r\n}\r\nfunction ensureEntitiesArray(entities) {\r\n  if (!Array.isArray(entities)) {\r\n    entities = Object.values(entities);\r\n  }\r\n  return entities;\r\n}\r\nfunction getCurrent(value) {\r\n  return isDraft4(value) ? current2(value) : value;\r\n}\r\nfunction splitAddedUpdatedEntities(newEntities, selectId, state) {\r\n  newEntities = ensureEntitiesArray(newEntities);\r\n  const existingIdsArray = getCurrent(state.ids);\r\n  const existingIds = new Set(existingIdsArray);\r\n  const added = [];\r\n  const addedIds = /* @__PURE__ */ new Set([]);\r\n  const updated = [];\r\n  for (const entity of newEntities) {\r\n    const id = selectIdValue(entity, selectId);\r\n    if (existingIds.has(id) || addedIds.has(id)) {\r\n      updated.push({\r\n        id,\r\n        changes: entity\r\n      });\r\n    } else {\r\n      addedIds.add(id);\r\n      added.push(entity);\r\n    }\r\n  }\r\n  return [added, updated, existingIdsArray];\r\n}\r\n\r\n// src/entities/unsorted_state_adapter.ts\r\nfunction createUnsortedStateAdapter(selectId) {\r\n  function addOneMutably(entity, state) {\r\n    const key = selectIdValue(entity, selectId);\r\n    if (key in state.entities) {\r\n      return;\r\n    }\r\n    state.ids.push(key);\r\n    state.entities[key] = entity;\r\n  }\r\n  function addManyMutably(newEntities, state) {\r\n    newEntities = ensureEntitiesArray(newEntities);\r\n    for (const entity of newEntities) {\r\n      addOneMutably(entity, state);\r\n    }\r\n  }\r\n  function setOneMutably(entity, state) {\r\n    const key = selectIdValue(entity, selectId);\r\n    if (!(key in state.entities)) {\r\n      state.ids.push(key);\r\n    }\r\n    ;\r\n    state.entities[key] = entity;\r\n  }\r\n  function setManyMutably(newEntities, state) {\r\n    newEntities = ensureEntitiesArray(newEntities);\r\n    for (const entity of newEntities) {\r\n      setOneMutably(entity, state);\r\n    }\r\n  }\r\n  function setAllMutably(newEntities, state) {\r\n    newEntities = ensureEntitiesArray(newEntities);\r\n    state.ids = [];\r\n    state.entities = {};\r\n    addManyMutably(newEntities, state);\r\n  }\r\n  function removeOneMutably(key, state) {\r\n    return removeManyMutably([key], state);\r\n  }\r\n  function removeManyMutably(keys, state) {\r\n    let didMutate = false;\r\n    keys.forEach((key) => {\r\n      if (key in state.entities) {\r\n        delete state.entities[key];\r\n        didMutate = true;\r\n      }\r\n    });\r\n    if (didMutate) {\r\n      state.ids = state.ids.filter((id) => id in state.entities);\r\n    }\r\n  }\r\n  function removeAllMutably(state) {\r\n    Object.assign(state, {\r\n      ids: [],\r\n      entities: {}\r\n    });\r\n  }\r\n  function takeNewKey(keys, update, state) {\r\n    const original3 = state.entities[update.id];\r\n    if (original3 === void 0) {\r\n      return false;\r\n    }\r\n    const updated = Object.assign({}, original3, update.changes);\r\n    const newKey = selectIdValue(updated, selectId);\r\n    const hasNewKey = newKey !== update.id;\r\n    if (hasNewKey) {\r\n      keys[update.id] = newKey;\r\n      delete state.entities[update.id];\r\n    }\r\n    ;\r\n    state.entities[newKey] = updated;\r\n    return hasNewKey;\r\n  }\r\n  function updateOneMutably(update, state) {\r\n    return updateManyMutably([update], state);\r\n  }\r\n  function updateManyMutably(updates, state) {\r\n    const newKeys = {};\r\n    const updatesPerEntity = {};\r\n    updates.forEach((update) => {\r\n      if (update.id in state.entities) {\r\n        updatesPerEntity[update.id] = {\r\n          id: update.id,\r\n          // Spreads ignore falsy values, so this works even if there isn't\r\n          // an existing update already at this key\r\n          changes: {\r\n            ...updatesPerEntity[update.id]?.changes,\r\n            ...update.changes\r\n          }\r\n        };\r\n      }\r\n    });\r\n    updates = Object.values(updatesPerEntity);\r\n    const didMutateEntities = updates.length > 0;\r\n    if (didMutateEntities) {\r\n      const didMutateIds = updates.filter((update) => takeNewKey(newKeys, update, state)).length > 0;\r\n      if (didMutateIds) {\r\n        state.ids = Object.values(state.entities).map((e) => selectIdValue(e, selectId));\r\n      }\r\n    }\r\n  }\r\n  function upsertOneMutably(entity, state) {\r\n    return upsertManyMutably([entity], state);\r\n  }\r\n  function upsertManyMutably(newEntities, state) {\r\n    const [added, updated] = splitAddedUpdatedEntities(newEntities, selectId, state);\r\n    addManyMutably(added, state);\r\n    updateManyMutably(updated, state);\r\n  }\r\n  return {\r\n    removeAll: createSingleArgumentStateOperator(removeAllMutably),\r\n    addOne: createStateOperator(addOneMutably),\r\n    addMany: createStateOperator(addManyMutably),\r\n    setOne: createStateOperator(setOneMutably),\r\n    setMany: createStateOperator(setManyMutably),\r\n    setAll: createStateOperator(setAllMutably),\r\n    updateOne: createStateOperator(updateOneMutably),\r\n    updateMany: createStateOperator(updateManyMutably),\r\n    upsertOne: createStateOperator(upsertOneMutably),\r\n    upsertMany: createStateOperator(upsertManyMutably),\r\n    removeOne: createStateOperator(removeOneMutably),\r\n    removeMany: createStateOperator(removeManyMutably)\r\n  };\r\n}\r\n\r\n// src/entities/sorted_state_adapter.ts\r\nfunction findInsertIndex(sortedItems, item, comparisonFunction) {\r\n  let lowIndex = 0;\r\n  let highIndex = sortedItems.length;\r\n  while (lowIndex < highIndex) {\r\n    let middleIndex = lowIndex + highIndex >>> 1;\r\n    const currentItem = sortedItems[middleIndex];\r\n    const res = comparisonFunction(item, currentItem);\r\n    if (res >= 0) {\r\n      lowIndex = middleIndex + 1;\r\n    } else {\r\n      highIndex = middleIndex;\r\n    }\r\n  }\r\n  return lowIndex;\r\n}\r\nfunction insert(sortedItems, item, comparisonFunction) {\r\n  const insertAtIndex = findInsertIndex(sortedItems, item, comparisonFunction);\r\n  sortedItems.splice(insertAtIndex, 0, item);\r\n  return sortedItems;\r\n}\r\nfunction createSortedStateAdapter(selectId, comparer) {\r\n  const {\r\n    removeOne,\r\n    removeMany,\r\n    removeAll\r\n  } = createUnsortedStateAdapter(selectId);\r\n  function addOneMutably(entity, state) {\r\n    return addManyMutably([entity], state);\r\n  }\r\n  function addManyMutably(newEntities, state, existingIds) {\r\n    newEntities = ensureEntitiesArray(newEntities);\r\n    const existingKeys = new Set(existingIds ?? getCurrent(state.ids));\r\n    const models = newEntities.filter((model) => !existingKeys.has(selectIdValue(model, selectId)));\r\n    if (models.length !== 0) {\r\n      mergeFunction(state, models);\r\n    }\r\n  }\r\n  function setOneMutably(entity, state) {\r\n    return setManyMutably([entity], state);\r\n  }\r\n  function setManyMutably(newEntities, state) {\r\n    newEntities = ensureEntitiesArray(newEntities);\r\n    if (newEntities.length !== 0) {\r\n      for (const item of newEntities) {\r\n        delete state.entities[selectId(item)];\r\n      }\r\n      mergeFunction(state, newEntities);\r\n    }\r\n  }\r\n  function setAllMutably(newEntities, state) {\r\n    newEntities = ensureEntitiesArray(newEntities);\r\n    state.entities = {};\r\n    state.ids = [];\r\n    addManyMutably(newEntities, state, []);\r\n  }\r\n  function updateOneMutably(update, state) {\r\n    return updateManyMutably([update], state);\r\n  }\r\n  function updateManyMutably(updates, state) {\r\n    let appliedUpdates = false;\r\n    let replacedIds = false;\r\n    for (let update of updates) {\r\n      const entity = state.entities[update.id];\r\n      if (!entity) {\r\n        continue;\r\n      }\r\n      appliedUpdates = true;\r\n      Object.assign(entity, update.changes);\r\n      const newId = selectId(entity);\r\n      if (update.id !== newId) {\r\n        replacedIds = true;\r\n        delete state.entities[update.id];\r\n        const oldIndex = state.ids.indexOf(update.id);\r\n        state.ids[oldIndex] = newId;\r\n        state.entities[newId] = entity;\r\n      }\r\n    }\r\n    if (appliedUpdates) {\r\n      mergeFunction(state, [], appliedUpdates, replacedIds);\r\n    }\r\n  }\r\n  function upsertOneMutably(entity, state) {\r\n    return upsertManyMutably([entity], state);\r\n  }\r\n  function upsertManyMutably(newEntities, state) {\r\n    const [added, updated, existingIdsArray] = splitAddedUpdatedEntities(newEntities, selectId, state);\r\n    if (added.length) {\r\n      addManyMutably(added, state, existingIdsArray);\r\n    }\r\n    if (updated.length) {\r\n      updateManyMutably(updated, state);\r\n    }\r\n  }\r\n  function areArraysEqual(a, b) {\r\n    if (a.length !== b.length) {\r\n      return false;\r\n    }\r\n    for (let i = 0; i < a.length; i++) {\r\n      if (a[i] === b[i]) {\r\n        continue;\r\n      }\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n  const mergeFunction = (state, addedItems, appliedUpdates, replacedIds) => {\r\n    const currentEntities = getCurrent(state.entities);\r\n    const currentIds = getCurrent(state.ids);\r\n    const stateEntities = state.entities;\r\n    let ids = currentIds;\r\n    if (replacedIds) {\r\n      ids = new Set(currentIds);\r\n    }\r\n    let sortedEntities = [];\r\n    for (const id of ids) {\r\n      const entity = currentEntities[id];\r\n      if (entity) {\r\n        sortedEntities.push(entity);\r\n      }\r\n    }\r\n    const wasPreviouslyEmpty = sortedEntities.length === 0;\r\n    for (const item of addedItems) {\r\n      stateEntities[selectId(item)] = item;\r\n      if (!wasPreviouslyEmpty) {\r\n        insert(sortedEntities, item, comparer);\r\n      }\r\n    }\r\n    if (wasPreviouslyEmpty) {\r\n      sortedEntities = addedItems.slice().sort(comparer);\r\n    } else if (appliedUpdates) {\r\n      sortedEntities.sort(comparer);\r\n    }\r\n    const newSortedIds = sortedEntities.map(selectId);\r\n    if (!areArraysEqual(currentIds, newSortedIds)) {\r\n      state.ids = newSortedIds;\r\n    }\r\n  };\r\n  return {\r\n    removeOne,\r\n    removeMany,\r\n    removeAll,\r\n    addOne: createStateOperator(addOneMutably),\r\n    updateOne: createStateOperator(updateOneMutably),\r\n    upsertOne: createStateOperator(upsertOneMutably),\r\n    setOne: createStateOperator(setOneMutably),\r\n    setMany: createStateOperator(setManyMutably),\r\n    setAll: createStateOperator(setAllMutably),\r\n    addMany: createStateOperator(addManyMutably),\r\n    updateMany: createStateOperator(updateManyMutably),\r\n    upsertMany: createStateOperator(upsertManyMutably)\r\n  };\r\n}\r\n\r\n// src/entities/create_adapter.ts\r\nfunction createEntityAdapter(options = {}) {\r\n  const {\r\n    selectId,\r\n    sortComparer\r\n  } = {\r\n    sortComparer: false,\r\n    selectId: (instance) => instance.id,\r\n    ...options\r\n  };\r\n  const stateAdapter = sortComparer ? createSortedStateAdapter(selectId, sortComparer) : createUnsortedStateAdapter(selectId);\r\n  const stateFactory = createInitialStateFactory(stateAdapter);\r\n  const selectorsFactory = createSelectorsFactory();\r\n  return {\r\n    selectId,\r\n    sortComparer,\r\n    ...stateFactory,\r\n    ...selectorsFactory,\r\n    ...stateAdapter\r\n  };\r\n}\r\n\r\n// src/listenerMiddleware/index.ts\r\nimport { isAction as isAction3 } from \"redux\";\r\n\r\n// src/listenerMiddleware/exceptions.ts\r\nvar task = \"task\";\r\nvar listener = \"listener\";\r\nvar completed = \"completed\";\r\nvar cancelled = \"cancelled\";\r\nvar taskCancelled = `task-${cancelled}`;\r\nvar taskCompleted = `task-${completed}`;\r\nvar listenerCancelled = `${listener}-${cancelled}`;\r\nvar listenerCompleted = `${listener}-${completed}`;\r\nvar TaskAbortError = class {\r\n  constructor(code) {\r\n    this.code = code;\r\n    this.message = `${task} ${cancelled} (reason: ${code})`;\r\n  }\r\n  name = \"TaskAbortError\";\r\n  message;\r\n};\r\n\r\n// src/listenerMiddleware/utils.ts\r\nvar assertFunction = (func, expected) => {\r\n  if (typeof func !== \"function\") {\r\n    throw new TypeError(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(32) : `${expected} is not a function`);\r\n  }\r\n};\r\nvar noop2 = () => {\r\n};\r\nvar catchRejection = (promise, onError = noop2) => {\r\n  promise.catch(onError);\r\n  return promise;\r\n};\r\nvar addAbortSignalListener = (abortSignal, callback) => {\r\n  abortSignal.addEventListener(\"abort\", callback, {\r\n    once: true\r\n  });\r\n  return () => abortSignal.removeEventListener(\"abort\", callback);\r\n};\r\nvar abortControllerWithReason = (abortController, reason) => {\r\n  const signal = abortController.signal;\r\n  if (signal.aborted) {\r\n    return;\r\n  }\r\n  if (!(\"reason\" in signal)) {\r\n    Object.defineProperty(signal, \"reason\", {\r\n      enumerable: true,\r\n      value: reason,\r\n      configurable: true,\r\n      writable: true\r\n    });\r\n  }\r\n  ;\r\n  abortController.abort(reason);\r\n};\r\n\r\n// src/listenerMiddleware/task.ts\r\nvar validateActive = (signal) => {\r\n  if (signal.aborted) {\r\n    const {\r\n      reason\r\n    } = signal;\r\n    throw new TaskAbortError(reason);\r\n  }\r\n};\r\nfunction raceWithSignal(signal, promise) {\r\n  let cleanup = noop2;\r\n  return new Promise((resolve, reject) => {\r\n    const notifyRejection = () => reject(new TaskAbortError(signal.reason));\r\n    if (signal.aborted) {\r\n      notifyRejection();\r\n      return;\r\n    }\r\n    cleanup = addAbortSignalListener(signal, notifyRejection);\r\n    promise.finally(() => cleanup()).then(resolve, reject);\r\n  }).finally(() => {\r\n    cleanup = noop2;\r\n  });\r\n}\r\nvar runTask = async (task2, cleanUp) => {\r\n  try {\r\n    await Promise.resolve();\r\n    const value = await task2();\r\n    return {\r\n      status: \"ok\",\r\n      value\r\n    };\r\n  } catch (error) {\r\n    return {\r\n      status: error instanceof TaskAbortError ? \"cancelled\" : \"rejected\",\r\n      error\r\n    };\r\n  } finally {\r\n    cleanUp?.();\r\n  }\r\n};\r\nvar createPause = (signal) => {\r\n  return (promise) => {\r\n    return catchRejection(raceWithSignal(signal, promise).then((output) => {\r\n      validateActive(signal);\r\n      return output;\r\n    }));\r\n  };\r\n};\r\nvar createDelay = (signal) => {\r\n  const pause = createPause(signal);\r\n  return (timeoutMs) => {\r\n    return pause(new Promise((resolve) => setTimeout(resolve, timeoutMs)));\r\n  };\r\n};\r\n\r\n// src/listenerMiddleware/index.ts\r\nvar {\r\n  assign\r\n} = Object;\r\nvar INTERNAL_NIL_TOKEN = {};\r\nvar alm = \"listenerMiddleware\";\r\nvar createFork = (parentAbortSignal, parentBlockingPromises) => {\r\n  const linkControllers = (controller) => addAbortSignalListener(parentAbortSignal, () => abortControllerWithReason(controller, parentAbortSignal.reason));\r\n  return (taskExecutor, opts) => {\r\n    assertFunction(taskExecutor, \"taskExecutor\");\r\n    const childAbortController = new AbortController();\r\n    linkControllers(childAbortController);\r\n    const result = runTask(async () => {\r\n      validateActive(parentAbortSignal);\r\n      validateActive(childAbortController.signal);\r\n      const result2 = await taskExecutor({\r\n        pause: createPause(childAbortController.signal),\r\n        delay: createDelay(childAbortController.signal),\r\n        signal: childAbortController.signal\r\n      });\r\n      validateActive(childAbortController.signal);\r\n      return result2;\r\n    }, () => abortControllerWithReason(childAbortController, taskCompleted));\r\n    if (opts?.autoJoin) {\r\n      parentBlockingPromises.push(result.catch(noop2));\r\n    }\r\n    return {\r\n      result: createPause(parentAbortSignal)(result),\r\n      cancel() {\r\n        abortControllerWithReason(childAbortController, taskCancelled);\r\n      }\r\n    };\r\n  };\r\n};\r\nvar createTakePattern = (startListening, signal) => {\r\n  const take = async (predicate, timeout) => {\r\n    validateActive(signal);\r\n    let unsubscribe = () => {\r\n    };\r\n    const tuplePromise = new Promise((resolve, reject) => {\r\n      let stopListening = startListening({\r\n        predicate,\r\n        effect: (action, listenerApi) => {\r\n          listenerApi.unsubscribe();\r\n          resolve([action, listenerApi.getState(), listenerApi.getOriginalState()]);\r\n        }\r\n      });\r\n      unsubscribe = () => {\r\n        stopListening();\r\n        reject();\r\n      };\r\n    });\r\n    const promises = [tuplePromise];\r\n    if (timeout != null) {\r\n      promises.push(new Promise((resolve) => setTimeout(resolve, timeout, null)));\r\n    }\r\n    try {\r\n      const output = await raceWithSignal(signal, Promise.race(promises));\r\n      validateActive(signal);\r\n      return output;\r\n    } finally {\r\n      unsubscribe();\r\n    }\r\n  };\r\n  return (predicate, timeout) => catchRejection(take(predicate, timeout));\r\n};\r\nvar getListenerEntryPropsFrom = (options) => {\r\n  let {\r\n    type,\r\n    actionCreator,\r\n    matcher,\r\n    predicate,\r\n    effect\r\n  } = options;\r\n  if (type) {\r\n    predicate = createAction(type).match;\r\n  } else if (actionCreator) {\r\n    type = actionCreator.type;\r\n    predicate = actionCreator.match;\r\n  } else if (matcher) {\r\n    predicate = matcher;\r\n  } else if (predicate) {\r\n  } else {\r\n    throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(21) : \"Creating or removing a listener requires one of the known fields for matching an action\");\r\n  }\r\n  assertFunction(effect, \"options.listener\");\r\n  return {\r\n    predicate,\r\n    type,\r\n    effect\r\n  };\r\n};\r\nvar createListenerEntry = /* @__PURE__ */ assign((options) => {\r\n  const {\r\n    type,\r\n    predicate,\r\n    effect\r\n  } = getListenerEntryPropsFrom(options);\r\n  const entry = {\r\n    id: nanoid(),\r\n    effect,\r\n    type,\r\n    predicate,\r\n    pending: /* @__PURE__ */ new Set(),\r\n    unsubscribe: () => {\r\n      throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(22) : \"Unsubscribe not initialized\");\r\n    }\r\n  };\r\n  return entry;\r\n}, {\r\n  withTypes: () => createListenerEntry\r\n});\r\nvar findListenerEntry = (listenerMap, options) => {\r\n  const {\r\n    type,\r\n    effect,\r\n    predicate\r\n  } = getListenerEntryPropsFrom(options);\r\n  return Array.from(listenerMap.values()).find((entry) => {\r\n    const matchPredicateOrType = typeof type === \"string\" ? entry.type === type : entry.predicate === predicate;\r\n    return matchPredicateOrType && entry.effect === effect;\r\n  });\r\n};\r\nvar cancelActiveListeners = (entry) => {\r\n  entry.pending.forEach((controller) => {\r\n    abortControllerWithReason(controller, listenerCancelled);\r\n  });\r\n};\r\nvar createClearListenerMiddleware = (listenerMap) => {\r\n  return () => {\r\n    listenerMap.forEach(cancelActiveListeners);\r\n    listenerMap.clear();\r\n  };\r\n};\r\nvar safelyNotifyError = (errorHandler, errorToNotify, errorInfo) => {\r\n  try {\r\n    errorHandler(errorToNotify, errorInfo);\r\n  } catch (errorHandlerError) {\r\n    setTimeout(() => {\r\n      throw errorHandlerError;\r\n    }, 0);\r\n  }\r\n};\r\nvar addListener = /* @__PURE__ */ assign(/* @__PURE__ */ createAction(`${alm}/add`), {\r\n  withTypes: () => addListener\r\n});\r\nvar clearAllListeners = /* @__PURE__ */ createAction(`${alm}/removeAll`);\r\nvar removeListener = /* @__PURE__ */ assign(/* @__PURE__ */ createAction(`${alm}/remove`), {\r\n  withTypes: () => removeListener\r\n});\r\nvar defaultErrorHandler = (...args) => {\r\n  console.error(`${alm}/error`, ...args);\r\n};\r\nvar createListenerMiddleware = (middlewareOptions = {}) => {\r\n  const listenerMap = /* @__PURE__ */ new Map();\r\n  const {\r\n    extra,\r\n    onError = defaultErrorHandler\r\n  } = middlewareOptions;\r\n  assertFunction(onError, \"onError\");\r\n  const insertEntry = (entry) => {\r\n    entry.unsubscribe = () => listenerMap.delete(entry.id);\r\n    listenerMap.set(entry.id, entry);\r\n    return (cancelOptions) => {\r\n      entry.unsubscribe();\r\n      if (cancelOptions?.cancelActive) {\r\n        cancelActiveListeners(entry);\r\n      }\r\n    };\r\n  };\r\n  const startListening = (options) => {\r\n    const entry = findListenerEntry(listenerMap, options) ?? createListenerEntry(options);\r\n    return insertEntry(entry);\r\n  };\r\n  assign(startListening, {\r\n    withTypes: () => startListening\r\n  });\r\n  const stopListening = (options) => {\r\n    const entry = findListenerEntry(listenerMap, options);\r\n    if (entry) {\r\n      entry.unsubscribe();\r\n      if (options.cancelActive) {\r\n        cancelActiveListeners(entry);\r\n      }\r\n    }\r\n    return !!entry;\r\n  };\r\n  assign(stopListening, {\r\n    withTypes: () => stopListening\r\n  });\r\n  const notifyListener = async (entry, action, api, getOriginalState) => {\r\n    const internalTaskController = new AbortController();\r\n    const take = createTakePattern(startListening, internalTaskController.signal);\r\n    const autoJoinPromises = [];\r\n    try {\r\n      entry.pending.add(internalTaskController);\r\n      await Promise.resolve(entry.effect(\r\n        action,\r\n        // Use assign() rather than ... to avoid extra helper functions added to bundle\r\n        assign({}, api, {\r\n          getOriginalState,\r\n          condition: (predicate, timeout) => take(predicate, timeout).then(Boolean),\r\n          take,\r\n          delay: createDelay(internalTaskController.signal),\r\n          pause: createPause(internalTaskController.signal),\r\n          extra,\r\n          signal: internalTaskController.signal,\r\n          fork: createFork(internalTaskController.signal, autoJoinPromises),\r\n          unsubscribe: entry.unsubscribe,\r\n          subscribe: () => {\r\n            listenerMap.set(entry.id, entry);\r\n          },\r\n          cancelActiveListeners: () => {\r\n            entry.pending.forEach((controller, _, set) => {\r\n              if (controller !== internalTaskController) {\r\n                abortControllerWithReason(controller, listenerCancelled);\r\n                set.delete(controller);\r\n              }\r\n            });\r\n          },\r\n          cancel: () => {\r\n            abortControllerWithReason(internalTaskController, listenerCancelled);\r\n            entry.pending.delete(internalTaskController);\r\n          },\r\n          throwIfCancelled: () => {\r\n            validateActive(internalTaskController.signal);\r\n          }\r\n        })\r\n      ));\r\n    } catch (listenerError) {\r\n      if (!(listenerError instanceof TaskAbortError)) {\r\n        safelyNotifyError(onError, listenerError, {\r\n          raisedBy: \"effect\"\r\n        });\r\n      }\r\n    } finally {\r\n      await Promise.all(autoJoinPromises);\r\n      abortControllerWithReason(internalTaskController, listenerCompleted);\r\n      entry.pending.delete(internalTaskController);\r\n    }\r\n  };\r\n  const clearListenerMiddleware = createClearListenerMiddleware(listenerMap);\r\n  const middleware = (api) => (next) => (action) => {\r\n    if (!isAction3(action)) {\r\n      return next(action);\r\n    }\r\n    if (addListener.match(action)) {\r\n      return startListening(action.payload);\r\n    }\r\n    if (clearAllListeners.match(action)) {\r\n      clearListenerMiddleware();\r\n      return;\r\n    }\r\n    if (removeListener.match(action)) {\r\n      return stopListening(action.payload);\r\n    }\r\n    let originalState = api.getState();\r\n    const getOriginalState = () => {\r\n      if (originalState === INTERNAL_NIL_TOKEN) {\r\n        throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(23) : `${alm}: getOriginalState can only be called synchronously`);\r\n      }\r\n      return originalState;\r\n    };\r\n    let result;\r\n    try {\r\n      result = next(action);\r\n      if (listenerMap.size > 0) {\r\n        const currentState = api.getState();\r\n        const listenerEntries = Array.from(listenerMap.values());\r\n        for (const entry of listenerEntries) {\r\n          let runListener = false;\r\n          try {\r\n            runListener = entry.predicate(action, currentState, originalState);\r\n          } catch (predicateError) {\r\n            runListener = false;\r\n            safelyNotifyError(onError, predicateError, {\r\n              raisedBy: \"predicate\"\r\n            });\r\n          }\r\n          if (!runListener) {\r\n            continue;\r\n          }\r\n          notifyListener(entry, action, api, getOriginalState);\r\n        }\r\n      }\r\n    } finally {\r\n      originalState = INTERNAL_NIL_TOKEN;\r\n    }\r\n    return result;\r\n  };\r\n  return {\r\n    middleware,\r\n    startListening,\r\n    stopListening,\r\n    clearListeners: clearListenerMiddleware\r\n  };\r\n};\r\n\r\n// src/dynamicMiddleware/index.ts\r\nimport { compose as compose3 } from \"redux\";\r\nvar createMiddlewareEntry = (middleware) => ({\r\n  middleware,\r\n  applied: /* @__PURE__ */ new Map()\r\n});\r\nvar matchInstance = (instanceId) => (action) => action?.meta?.instanceId === instanceId;\r\nvar createDynamicMiddleware = () => {\r\n  const instanceId = nanoid();\r\n  const middlewareMap = /* @__PURE__ */ new Map();\r\n  const withMiddleware = Object.assign(createAction(\"dynamicMiddleware/add\", (...middlewares) => ({\r\n    payload: middlewares,\r\n    meta: {\r\n      instanceId\r\n    }\r\n  })), {\r\n    withTypes: () => withMiddleware\r\n  });\r\n  const addMiddleware = Object.assign(function addMiddleware2(...middlewares) {\r\n    middlewares.forEach((middleware2) => {\r\n      getOrInsertComputed(middlewareMap, middleware2, createMiddlewareEntry);\r\n    });\r\n  }, {\r\n    withTypes: () => addMiddleware\r\n  });\r\n  const getFinalMiddleware = (api) => {\r\n    const appliedMiddleware = Array.from(middlewareMap.values()).map((entry) => getOrInsertComputed(entry.applied, api, entry.middleware));\r\n    return compose3(...appliedMiddleware);\r\n  };\r\n  const isWithMiddleware = isAllOf(withMiddleware, matchInstance(instanceId));\r\n  const middleware = (api) => (next) => (action) => {\r\n    if (isWithMiddleware(action)) {\r\n      addMiddleware(...action.payload);\r\n      return api.dispatch;\r\n    }\r\n    return getFinalMiddleware(api)(next)(action);\r\n  };\r\n  return {\r\n    middleware,\r\n    addMiddleware,\r\n    withMiddleware,\r\n    instanceId\r\n  };\r\n};\r\n\r\n// src/combineSlices.ts\r\nimport { combineReducers as combineReducers2 } from \"redux\";\r\nvar isSliceLike = (maybeSliceLike) => \"reducerPath\" in maybeSliceLike && typeof maybeSliceLike.reducerPath === \"string\";\r\nvar getReducers = (slices) => slices.flatMap((sliceOrMap) => isSliceLike(sliceOrMap) ? [[sliceOrMap.reducerPath, sliceOrMap.reducer]] : Object.entries(sliceOrMap));\r\nvar ORIGINAL_STATE = Symbol.for(\"rtk-state-proxy-original\");\r\nvar isStateProxy = (value) => !!value && !!value[ORIGINAL_STATE];\r\nvar stateProxyMap = /* @__PURE__ */ new WeakMap();\r\nvar createStateProxy = (state, reducerMap, initialStateCache) => getOrInsertComputed(stateProxyMap, state, () => new Proxy(state, {\r\n  get: (target, prop, receiver) => {\r\n    if (prop === ORIGINAL_STATE) return target;\r\n    const result = Reflect.get(target, prop, receiver);\r\n    if (typeof result === \"undefined\") {\r\n      const cached = initialStateCache[prop];\r\n      if (typeof cached !== \"undefined\") return cached;\r\n      const reducer = reducerMap[prop];\r\n      if (reducer) {\r\n        const reducerResult = reducer(void 0, {\r\n          type: nanoid()\r\n        });\r\n        if (typeof reducerResult === \"undefined\") {\r\n          throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(24) : `The slice reducer for key \"${prop.toString()}\" returned undefined when called for selector(). If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.`);\r\n        }\r\n        initialStateCache[prop] = reducerResult;\r\n        return reducerResult;\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n}));\r\nvar original = (state) => {\r\n  if (!isStateProxy(state)) {\r\n    throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(25) : \"original must be used on state Proxy\");\r\n  }\r\n  return state[ORIGINAL_STATE];\r\n};\r\nvar emptyObject = {};\r\nvar noopReducer = (state = emptyObject) => state;\r\nfunction combineSlices(...slices) {\r\n  const reducerMap = Object.fromEntries(getReducers(slices));\r\n  const getReducer = () => Object.keys(reducerMap).length ? combineReducers2(reducerMap) : noopReducer;\r\n  let reducer = getReducer();\r\n  function combinedReducer(state, action) {\r\n    return reducer(state, action);\r\n  }\r\n  combinedReducer.withLazyLoadedSlices = () => combinedReducer;\r\n  const initialStateCache = {};\r\n  const inject = (slice, config = {}) => {\r\n    const {\r\n      reducerPath,\r\n      reducer: reducerToInject\r\n    } = slice;\r\n    const currentReducer = reducerMap[reducerPath];\r\n    if (!config.overrideExisting && currentReducer && currentReducer !== reducerToInject) {\r\n      if (typeof process !== \"undefined\" && process.env.NODE_ENV === \"development\") {\r\n        console.error(`called \\`inject\\` to override already-existing reducer ${reducerPath} without specifying \\`overrideExisting: true\\``);\r\n      }\r\n      return combinedReducer;\r\n    }\r\n    if (config.overrideExisting && currentReducer !== reducerToInject) {\r\n      delete initialStateCache[reducerPath];\r\n    }\r\n    reducerMap[reducerPath] = reducerToInject;\r\n    reducer = getReducer();\r\n    return combinedReducer;\r\n  };\r\n  const selector = Object.assign(function makeSelector(selectorFn, selectState) {\r\n    return function selector2(state, ...args) {\r\n      return selectorFn(createStateProxy(selectState ? selectState(state, ...args) : state, reducerMap, initialStateCache), ...args);\r\n    };\r\n  }, {\r\n    original\r\n  });\r\n  return Object.assign(combinedReducer, {\r\n    inject,\r\n    selector\r\n  });\r\n}\r\n\r\n// src/formatProdErrorMessage.ts\r\nfunction formatProdErrorMessage(code) {\r\n  return `Minified Redux Toolkit error #${code}; visit https://redux-toolkit.js.org/Errors?code=${code} for the full message or use the non-minified dev environment for full errors. `;\r\n}\r\nexport {\r\n  ReducerType,\r\n  SHOULD_AUTOBATCH,\r\n  TaskAbortError,\r\n  Tuple,\r\n  addListener,\r\n  asyncThunkCreator,\r\n  autoBatchEnhancer,\r\n  buildCreateSlice,\r\n  clearAllListeners,\r\n  combineSlices,\r\n  configureStore,\r\n  createAction,\r\n  createActionCreatorInvariantMiddleware,\r\n  createAsyncThunk,\r\n  createDraftSafeSelector,\r\n  createDraftSafeSelectorCreator,\r\n  createDynamicMiddleware,\r\n  createEntityAdapter,\r\n  createImmutableStateInvariantMiddleware,\r\n  createListenerMiddleware,\r\n  produce as createNextState,\r\n  createReducer,\r\n  createSelector,\r\n  createSelectorCreator2 as createSelectorCreator,\r\n  createSerializableStateInvariantMiddleware,\r\n  createSlice,\r\n  current3 as current,\r\n  findNonSerializableValue,\r\n  formatProdErrorMessage,\r\n  freeze,\r\n  isActionCreator,\r\n  isAllOf,\r\n  isAnyOf,\r\n  isAsyncThunkAction,\r\n  isDraft5 as isDraft,\r\n  isFSA as isFluxStandardAction,\r\n  isFulfilled,\r\n  isImmutableDefault,\r\n  isPending,\r\n  isPlain,\r\n  isRejected,\r\n  isRejectedWithValue,\r\n  lruMemoize,\r\n  miniSerializeError,\r\n  nanoid,\r\n  original2 as original,\r\n  prepareAutoBatched,\r\n  removeListener,\r\n  unwrapResult,\r\n  weakMapMemoize2 as weakMapMemoize\r\n};\r\n//# sourceMappingURL=redux-toolkit.modern.mjs.map","/**\r\n * PathAnalyzer Service\r\n * \r\n * Analyzes reader path data to identify meaningful patterns in how readers navigate\r\n * through the Narramorph narrative system. This service connects reader behavior\r\n * to the TransformationEngine to enable dynamic content adaptation.\r\n */\r\n\r\nimport {\r\n  ReadingPath,\r\n  StrangeAttractor,\r\n  Character,\r\n  TemporalLabel,\r\n  NodeState\r\n} from '../types';\r\nimport { ReaderState } from '../store/slices/readerSlice';\r\n\r\n/**\r\n * Represents a detected pattern in the reader's path\r\n */\r\nexport interface ReadingPattern {\r\n  type: 'sequence' | 'character' | 'temporal' | 'thematic' | 'rhythm';\r\n  strength: number; // 0-1 indicating pattern strength/confidence\r\n  description: string;\r\n  relatedNodes?: string[];\r\n  relatedCharacters?: Character[];\r\n  relatedTemporalLayers?: TemporalLabel[];\r\n  relatedAttractors?: StrangeAttractor[];\r\n}\r\n\r\n/**\r\n * Represents the reader's engagement with strange attractors\r\n */\r\nexport interface AttractorEngagement {\r\n  attractor: StrangeAttractor;\r\n  engagementScore: number; // 0-100\r\n  totalEngagements: number;\r\n  relatedNodes: string[];\r\n  trend: 'rising' | 'falling' | 'stable';\r\n}\r\n\r\n/**\r\n * Represents a transformation condition with metadata about its source\r\n */\r\nexport interface PatternBasedCondition {\r\n  type: 'visitPattern' | 'characterFocus' | 'temporalFocus' | 'readingRhythm' | 'attractorAffinity' | 'attractorEngagement';\r\n  condition: {\r\n    visitPattern?: string[];\r\n    characters?: Character[];\r\n    temporalPosition?: TemporalLabel;\r\n    // Time-based properties removed (2025-06-08)\r\n    strangeAttractorsEngaged?: StrangeAttractor[];\r\n  };\r\n  strength: number;\r\n}\r\n\r\n/**\r\n * Represents a recursive navigation pattern detected in the reader's journey\r\n */\r\nexport interface RecursivePattern {\r\n  sequence: string[]; // The repeated sequence of node IDs\r\n  length: number; // Length of the sequence (2-4)\r\n  occurrences: number; // How many times this sequence appears\r\n  lastOccurrenceIndex: number; // Index of the last occurrence in the path\r\n  strength: number; // Pattern strength (0-1)\r\n  temporalSpread: number; // How spread out temporally the occurrences are (0-1)\r\n}\r\n\r\n/**\r\n * Represents character focus intensity metrics\r\n */\r\nexport interface CharacterFocusIntensity {\r\n  character: Character;\r\n  visitRatio: number; // Percentage of total visits to this character's nodes\r\n  intensity: number; // Focus intensity score (0-1)\r\n  consecutiveVisits: number; // Longest streak of consecutive visits\r\n  avgTimeBetweenVisits: number; // Average gap between visits to this character\r\n  temporalSpread: TemporalLabel[]; // Which temporal layers this character's visits span\r\n}\r\n\r\n/**\r\n * Represents a strange attractor that frequently draws the reader back\r\n */\r\nexport interface StrangeAttractorNode {\r\n  nodeId: string;\r\n  returnFrequency: number; // How often the reader returns (0-1)\r\n  totalReturns: number; // Number of times returned to\r\n  averageGapBetweenReturns: number; // Average nodes visited between returns\r\n  magneticStrength: number; // Overall attractiveness metric (0-1)\r\n  attractorThemes: StrangeAttractor[]; // Which thematic attractors this node contains\r\n  lastReturnIndex: number; // Index of most recent return\r\n}\r\n\r\n/**\r\n * Represents temporal jumping behavior patterns\r\n */\r\nexport interface TemporalJumpingPattern {\r\n  totalJumps: number; // Total number of temporal layer transitions\r\n  jumpFrequency: number; // Jumps per visit ratio\r\n  preferredJumpDirection: 'forward' | 'backward' | 'mixed'; // Temporal preference\r\n  jumpDistances: number[]; // Distribution of temporal distances (1-8)\r\n  averageJumpDistance: number; // Average distance of temporal jumps\r\n  maxJumpDistance: number; // Largest temporal jump made\r\n  temporalAnchoring: Record<TemporalLabel, number>; // Time spent in each layer\r\n  volatility: number; // How erratic the temporal movement is (0-1)\r\n}\r\n\r\n/**\r\n * Represents a unique fingerprint of the reader's navigation style\r\n */\r\nexport interface JourneyFingerprint {\r\n  id: string; // Unique identifier for this fingerprint\r\n  explorationStyle: 'linear' | 'recursive' | 'wandering' | 'focused' | 'chaotic';\r\n  characterAffinity: Character[]; // Ranked list of character preferences\r\n  temporalPreference: 'past-oriented' | 'present-focused' | 'future-seeking' | 'time-fluid';\r\n  narrativeApproach: 'systematic' | 'intuitive' | 'thematic' | 'experimental';\r\n  \r\n  // Quantitative metrics\r\n  recursiveIndex: number; // How recursive the navigation is (0-1)\r\n  focusIndex: number; // How focused vs scattered (0-1)\r\n  velocityIndex: number; // How quickly they move through content (0-1)\r\n  complexityIndex: number; // How complex their path patterns are (0-1)\r\n  \r\n  // Pattern signatures\r\n  dominantPatternLengths: number[]; // Most common sequence lengths\r\n  characterTransitionMatrix: Record<Character, Record<Character, number>>; // Character switching patterns\r\n  temporalJumpSignature: Record<string, number>; // Characteristic temporal movement pattern\r\n  attractorEngagementProfile: Record<string, number>; // Thematic engagement fingerprint\r\n  \r\n  // Metadata\r\n  pathLength: number; // Total nodes visited\r\n  uniqueNodesVisited: number; // Number of distinct nodes\r\n  generatedAt: number; // Index in path when fingerprint was generated\r\n}\r\n\r\n/**\r\n * Service class for analyzing reader path patterns\r\n */\r\nexport class PathAnalyzer {\r\n  // Minimum sequence length to consider for pattern analysis\r\n  private readonly MIN_SEQUENCE_LENGTH = 2;\r\n  \r\n  // Threshold for considering a sequence repeated (how many times it must occur)\r\n  private readonly SEQUENCE_REPETITION_THRESHOLD = 2;\r\n  \r\n  // Threshold for detecting character focus (what percentage of visits)\r\n  private readonly CHARACTER_FOCUS_THRESHOLD = 0.4; // 40%\r\n  \r\n  // Threshold for detecting temporal layer focus\r\n  private readonly TEMPORAL_FOCUS_THRESHOLD = 0.4; // 40%\r\n  \r\n  // Using imported constants for transitions and engagements from readerSlice.ts\r\n  // These thresholds define fast transitions and deep engagements\r\n\r\n  /**\r\n   * Analyzes the reader's path to identify patterns\r\n   * @param readerState Current reader state\r\n   * @param nodes Map of node IDs to node states\r\n   * @returns Array of detected patterns\r\n   */\r\n  analyzePathPatterns(\r\n    readerState: ReaderState,\r\n    nodes: Record<string, NodeState>\r\n  ): ReadingPattern[] {\r\n    const patterns: ReadingPattern[] = [];\r\n    \r\n    // Only analyze if we have enough data\r\n    if (readerState.path.sequence.length < this.MIN_SEQUENCE_LENGTH) {\r\n      return patterns;\r\n    }\r\n    \r\n    // 1. Analyze sequence patterns\r\n    patterns.push(...this.identifyRepeatedSequences(readerState.path));\r\n    \r\n    // 2. Analyze character focus patterns\r\n    patterns.push(...this.identifyCharacterFocusPatterns(readerState.path));\r\n    \r\n    // 3. Analyze temporal layer patterns\r\n    patterns.push(...this.identifyTemporalLayerPatterns(readerState.path));\r\n    \r\n    // 4. Reading rhythm patterns (time-based factors removed)\r\n    patterns.push(...this.identifyReadingRhythmPatterns());\r\n    \r\n    // 5. Analyze theme/attractor affinity patterns\r\n    patterns.push(...this.identifyAttractorAffinityPatterns(readerState.path, nodes));\r\n    \r\n    return patterns;\r\n  }\r\n\r\n  /**\r\n   * Identifies repeated sequences in the reader's path\r\n   */\r\n  identifyRepeatedSequences(path: ReadingPath): ReadingPattern[] {\r\n    const patterns: ReadingPattern[] = [];\r\n    const repeatedSequences = path.patternSequences?.repeatedSequences;\r\n    \r\n    if (!repeatedSequences || repeatedSequences.length === 0) {\r\n      return patterns;\r\n    }\r\n    \r\n    // Convert repeated sequences to patterns\r\n    repeatedSequences.forEach((sequence: string[]) => {\r\n      if (sequence.length >= this.MIN_SEQUENCE_LENGTH) {\r\n        // Calculate pattern strength based on sequence length and repetition\r\n        const sequenceLength = sequence.length;\r\n        const strength = this.calculateSequencePatternStrength(\r\n          sequenceLength,\r\n          this.countSequenceOccurrences(sequence, path.sequence),\r\n          path.sequence.length\r\n        );\r\n        \r\n        // Only add significant patterns\r\n        if (this.countSequenceOccurrences(sequence, path.sequence) >= this.SEQUENCE_REPETITION_THRESHOLD) {\r\n          patterns.push({\r\n            type: 'sequence',\r\n            strength,\r\n            description: `Repeated sequence of ${sequenceLength} nodes visited ${this.countSequenceOccurrences(sequence, path.sequence)} times`,\r\n            relatedNodes: sequence\r\n          });\r\n        }\r\n      }\r\n    });\r\n    \r\n    return patterns;\r\n  }\r\n\r\n  /**\r\n   * Identifies character focus patterns in the reader's path\r\n   */\r\n  identifyCharacterFocusPatterns(path: ReadingPath): ReadingPattern[] {\r\n    const patterns: ReadingPattern[] = [];\r\n    const characterFocus = path.characterFocus;\r\n    \r\n    if (!characterFocus) {\r\n      return patterns;\r\n    }\r\n    \r\n    const detailedVisits = path.detailedVisits || [];\r\n    const totalVisits = detailedVisits.length;\r\n    if (totalVisits === 0) {\r\n      return patterns;\r\n    }\r\n    \r\n    // Check for character focus\r\n    Object.entries(characterFocus).forEach(([character, count]) => {\r\n      const ratio = count / totalVisits;\r\n      \r\n      if (ratio >= this.CHARACTER_FOCUS_THRESHOLD) {\r\n        // Calculate how much above threshold\r\n        const strength = this.calculateCharacterFocusStrength(ratio);\r\n        \r\n        patterns.push({\r\n          type: 'character',\r\n          strength,\r\n          description: `Strong focus on ${character} perspective (${Math.round(ratio * 100)}% of visits)`,\r\n          relatedCharacters: [character as Character]\r\n        });\r\n      }\r\n    });\r\n    \r\n    // Analyze character sequences\r\n    const characterSequences = path.patternSequences?.characterSequences;\r\n    if (characterSequences && characterSequences.length > 0) {\r\n      \r\n      const characterSequence = characterSequences[0];\r\n      \r\n      // Look for oscillation patterns (alternating between two characters)\r\n      const oscillationPattern = this.detectCharacterOscillation(characterSequence);\r\n      if (oscillationPattern) {\r\n        patterns.push(oscillationPattern);\r\n      }\r\n    }\r\n    \r\n    return patterns;\r\n  }\r\n\r\n  /**\r\n   * Identifies temporal layer patterns in the reader's path\r\n   */\r\n  identifyTemporalLayerPatterns(path: ReadingPath): ReadingPattern[] {\r\n    const patterns: ReadingPattern[] = [];\r\n    const temporalLayerFocus = path.temporalLayerFocus;\r\n    \r\n    if (!temporalLayerFocus) {\r\n      return patterns;\r\n    }\r\n    \r\n    const detailedVisits = path.detailedVisits || [];\r\n    const totalVisits = detailedVisits.length;\r\n    if (totalVisits === 0) {\r\n      return patterns;\r\n    }\r\n    \r\n    // Check for temporal layer focus\r\n    Object.entries(temporalLayerFocus).forEach(([layer, count]) => {\r\n      const ratio = count / totalVisits;\r\n      \r\n      if (ratio >= this.TEMPORAL_FOCUS_THRESHOLD) {\r\n        // Calculate how much above threshold\r\n        const strengthAboveThreshold = (ratio - this.TEMPORAL_FOCUS_THRESHOLD) /\r\n          (1 - this.TEMPORAL_FOCUS_THRESHOLD);\r\n        \r\n        // Calculate pattern strength (0.5-1.0 range)\r\n        const strength = 0.5 + (0.5 * strengthAboveThreshold);\r\n        \r\n        patterns.push({\r\n          type: 'temporal',\r\n          strength,\r\n          description: `Strong focus on ${layer} temporal layer (${Math.round(ratio * 100)}% of visits)`,\r\n          relatedTemporalLayers: [layer as TemporalLabel]\r\n        });\r\n      }\r\n    });\r\n    \r\n    // Analyze temporal progression patterns\r\n    const temporalSequences = path.patternSequences?.temporalSequences;\r\n    if (temporalSequences && temporalSequences.length > 0) {\r\n      \r\n      const temporalSequence = temporalSequences[0];\r\n      \r\n      // Check for chronological progression (past -> present -> future)\r\n      const chronologicalPattern = this.detectChronologicalProgression(temporalSequence);\r\n      if (chronologicalPattern) {\r\n        patterns.push(chronologicalPattern);\r\n      }\r\n      \r\n      // Check for reverse chronological progression (future -> present -> past)\r\n      const reverseChronologicalPattern = this.detectReverseChronologicalProgression(temporalSequence);\r\n      if (reverseChronologicalPattern) {\r\n        patterns.push(reverseChronologicalPattern);\r\n      }\r\n    }\r\n    \r\n    return patterns;\r\n  }\r\n\r\n  /**\r\n   * Previously contained reading rhythm patterns based on time\r\n   * Removed as part of refactoring to eliminate time-based factors\r\n   */\r\n  identifyReadingRhythmPatterns(): ReadingPattern[] {\r\n    // Return empty patterns as time-based rhythm detection has been removed\r\n    return [];\r\n  }\r\n\r\n  /**\r\n   * Identifies attractor affinity patterns in the reader's path\r\n   */\r\n  identifyAttractorAffinityPatterns(\r\n    path: ReadingPath,\r\n    nodes: Record<string, NodeState>\r\n  ): ReadingPattern[] {\r\n    const patterns: ReadingPattern[] = [];\r\n    const attractorsEngaged = path.attractorsEngaged;\r\n    const detailedVisits = path.detailedVisits || [];\r\n    \r\n    if (!attractorsEngaged || Object.keys(attractorsEngaged).length === 0) {\r\n      return patterns;\r\n    }\r\n    \r\n    // Count total attractor engagements\r\n    const totalEngagements = Object.values(attractorsEngaged).reduce((sum, count) => sum + count, 0);\r\n    if (totalEngagements === 0) {\r\n      return patterns;\r\n    }\r\n    \r\n    // Find attractors with significant engagement\r\n    Object.entries(attractorsEngaged).forEach(([attractor, count]) => {\r\n      const engagementRatio = count / totalEngagements;\r\n      \r\n      if (engagementRatio >= 0.25) { // 25% or more of all engagements\r\n        // Calculate nodes that have this attractor\r\n        const relatedNodes = Object.values(nodes)\r\n          .filter(node => node.strangeAttractors.includes(attractor as StrangeAttractor))\r\n          .map(node => node.id);\r\n        \r\n        // Calculate pattern strength based on engagement ratio and visit ratio\r\n        let visitRatio = 0;\r\n        if (relatedNodes.length > 0) {\r\n          const attractorVisits = detailedVisits.filter(visit =>\r\n            relatedNodes.includes(visit.nodeId)).length;\r\n          visitRatio = attractorVisits / detailedVisits.length;\r\n        }\r\n        \r\n        const strength = (engagementRatio * 0.7) + (visitRatio * 0.3);\r\n        \r\n        patterns.push({\r\n          type: 'thematic',\r\n          strength,\r\n          description: `Strong affinity for \"${attractor}\" concept/theme`,\r\n          relatedAttractors: [attractor as StrangeAttractor],\r\n          relatedNodes\r\n        });\r\n      }\r\n    });\r\n    \r\n    // Check for thematic connections between visited nodes\r\n    if (detailedVisits.length >= 3) {\r\n      // Create a map of node IDs to their attractors\r\n      const nodeAttractors: Record<string, StrangeAttractor[]> = {};\r\n      \r\n      Object.values(nodes).forEach(node => {\r\n        nodeAttractors[node.id] = node.strangeAttractors;\r\n      });\r\n      \r\n      // Count shared attractors between consecutive visits\r\n      const thematicContinuity = this.calculateThematicContinuity(detailedVisits, nodeAttractors);\r\n      \r\n      if (thematicContinuity >= 0.5) {\r\n        patterns.push({\r\n          type: 'thematic',\r\n          strength: thematicContinuity,\r\n          description: 'Pattern of following thematic connections between nodes'\r\n        });\r\n      }\r\n    }\r\n    \r\n    return patterns;\r\n  }\r\n\r\n  /**\r\n   * Calculates the reader's engagement levels with different strange attractors\r\n   */\r\n  calculateAttractorEngagement(\r\n    readerState: ReaderState,\r\n    nodes: Record<string, NodeState>\r\n  ): AttractorEngagement[] {\r\n    const { path } = readerState;\r\n    const attractorsEngaged = path.attractorsEngaged;\r\n    const detailedVisits = path.detailedVisits || [];\r\n    \r\n    if (!attractorsEngaged || Object.keys(attractorsEngaged).length === 0) {\r\n      return [];\r\n    }\r\n    \r\n    // Create a map of strange attractors to their engagement metrics\r\n    const attractorEngagements: AttractorEngagement[] = [];\r\n    \r\n    // Process each attractor that has been engaged\r\n    Object.entries(attractorsEngaged).forEach(([attractorStr, totalEngagements]) => {\r\n      const attractor = attractorStr as StrangeAttractor;\r\n      \r\n      if (totalEngagements === 0) {\r\n        return;\r\n      }\r\n      \r\n      // Find nodes related to this attractor\r\n      const relatedNodes = Object.values(nodes)\r\n        .filter(node => node.strangeAttractors.includes(attractor))\r\n        .map(node => node.id);\r\n      \r\n      // Find visits where this attractor was engaged\r\n      const engagementVisits = detailedVisits.filter(visit =>\r\n        visit.engagedAttractors.includes(attractor));\r\n      \r\n      if (engagementVisits.length === 0) {\r\n        return;\r\n      }\r\n      \r\n      // Set default trend\r\n      let trend: 'rising' | 'falling' | 'stable' = 'stable';\r\n      \r\n      // Simple trend calculation based on visit index rather than timestamp\r\n      trend = this.determineEngagementTrend(engagementVisits);\r\n      \r\n      // Calculate engagement score (0-100)\r\n      // Base on multiple factors:\r\n      // 1. Total engagements relative to other attractors\r\n      // 2. Recency of engagements\r\n      // 3. Consistency of engagement over time\r\n      \r\n      // 1. Calculate relative engagement\r\n      const totalAllAttractors = Object.values(attractorsEngaged)\r\n        .reduce((sum, count) => sum + count, 0);\r\n      \r\n      // 2. Recency factor - using indices instead of timestamps\r\n      // Check if the engagement appears in recent visits\r\n      const engagementScore = this.calculateEngagementScore(\r\n        totalEngagements,\r\n        totalAllAttractors,\r\n        engagementVisits,\r\n        detailedVisits\r\n      );\r\n      \r\n      // Add to results\r\n      attractorEngagements.push({\r\n        attractor,\r\n        engagementScore,\r\n        totalEngagements,\r\n        relatedNodes,\r\n        trend\r\n      });\r\n    });\r\n    \r\n    // Sort by engagement score (descending)\r\n    return attractorEngagements.sort((a, b) => b.engagementScore - a.engagementScore);\r\n  }\r\n\r\n  /**\r\n   * Identifies the most significant patterns in the reader's journey\r\n   */\r\n  identifySignificantPatterns(\r\n    readerState: ReaderState,\r\n    nodes: Record<string, NodeState>\r\n  ): ReadingPattern[] {\r\n    // Get all patterns\r\n    const allPatterns = this.analyzePathPatterns(readerState, nodes);\r\n    \r\n    // Sort by strength\r\n    const sortedPatterns = allPatterns.sort((a, b) => b.strength - a.strength);\r\n    \r\n    // Return top patterns (max 5, with strength at least 0.6)\r\n    return sortedPatterns\r\n      .filter(pattern => pattern.strength >= 0.6)\r\n      .slice(0, 5);\r\n  }\r\n\r\n  /**\r\n   * Creates transformation conditions based on reader path patterns\r\n   * to link with the TransformationEngine\r\n   */\r\n  createTransformationConditions(\r\n    patterns: ReadingPattern[],\r\n    attractorEngagements: AttractorEngagement[]\r\n  ): PatternBasedCondition[] {\r\n    const conditions: PatternBasedCondition[] = [];\r\n    \r\n    // Create conditions based on patterns\r\n    patterns.forEach(pattern => {\r\n      switch (pattern.type) {\r\n        case 'sequence':\r\n          if (pattern.relatedNodes && pattern.relatedNodes.length >= 2) {\r\n            conditions.push({\r\n              type: 'visitPattern',\r\n              condition: {\r\n                visitPattern: pattern.relatedNodes\r\n              },\r\n              strength: pattern.strength\r\n            });\r\n          }\r\n          break;\r\n          \r\n        case 'character':\r\n          if (pattern.relatedCharacters && pattern.relatedCharacters.length > 0) {\r\n            // This would require adding character-based conditions to the TransformationEngine\r\n            conditions.push({\r\n              type: 'characterFocus',\r\n              condition: {\r\n                // Custom condition that would need to be implemented in TransformationEngine\r\n                characters: pattern.relatedCharacters\r\n              },\r\n              strength: pattern.strength\r\n            });\r\n          }\r\n          break;\r\n          \r\n        case 'temporal':\r\n          if (pattern.relatedTemporalLayers && pattern.relatedTemporalLayers.length > 0) {\r\n            conditions.push({\r\n              type: 'temporalFocus',\r\n              condition: {\r\n                temporalPosition: pattern.relatedTemporalLayers[0]\r\n              },\r\n              strength: pattern.strength\r\n            });\r\n          }\r\n          break;\r\n          \r\n        case 'rhythm':\r\n          // Rhythm-based conditions removed (previously time-based)\r\n          break;\r\n          \r\n        case 'thematic':\r\n          if (pattern.relatedAttractors && pattern.relatedAttractors.length > 0) {\r\n            conditions.push({\r\n              type: 'attractorAffinity',\r\n              condition: {\r\n                strangeAttractorsEngaged: pattern.relatedAttractors\r\n              },\r\n              strength: pattern.strength\r\n            });\r\n          }\r\n          break;\r\n      }\r\n    });\r\n    \r\n    // Create conditions based on attractor engagements\r\n    attractorEngagements\r\n      .filter(engagement => engagement.engagementScore >= 50)\r\n      .forEach(engagement => {\r\n        conditions.push({\r\n          type: 'attractorEngagement',\r\n          condition: {\r\n            strangeAttractorsEngaged: [engagement.attractor]\r\n          },\r\n          strength: engagement.engagementScore / 100\r\n        });\r\n      });\r\n    \r\n    return conditions;\r\n  }  /**\r\n   * Detects repeated navigation sequences of length 2-4\r\n   * @param readerState Current reader state with path information\r\n   * @param nodes Map of node IDs to node states (for future extensibility)\r\n   * @returns Array of detected recursive patterns\r\n   */  \r\n  analyzeRecursivePatterns(\r\n    readerState: ReaderState,\r\n    nodes: Record<string, NodeState>\r\n  ): RecursivePattern[] {\r\n    const { sequence } = readerState.path;\r\n    const patterns: RecursivePattern[] = [];\r\n    \r\n    if (sequence.length < 4) {\r\n      return patterns; // Need at least 4 nodes to detect patterns of length 2\r\n    }\r\n    \r\n    // Check for patterns of length 2-4\r\n    for (let patternLength = 2; patternLength <= 4; patternLength++) {\r\n      const lengthPatterns = this.processRecursivePatternsForLength(sequence, patternLength, nodes);\r\n      patterns.push(...lengthPatterns);\r\n    }\r\n    \r\n    // Sort by strength (strongest patterns first)\r\n    return patterns.sort((a, b) => b.strength - a.strength);\r\n  }\r\n  /**\r\n   * Measures how concentrated visits are on specific characters\r\n   * @param readerState Current reader state with path information\r\n   * @param nodes Map of node IDs to node states\r\n   * @returns Array of character focus intensity metrics\r\n   */\r\n  calculateCharacterFocusIntensity(\r\n    readerState: ReaderState,\r\n    nodes: Record<string, NodeState>\r\n  ): CharacterFocusIntensity[] {\r\n    const { sequence, characterFocus = {} } = readerState.path;\r\n    const intensities: CharacterFocusIntensity[] = [];\r\n    \r\n    if (sequence.length === 0) {\r\n      return intensities;\r\n    }\r\n    \r\n    // Calculate character visit patterns\r\n    const characterSequence: Character[] = sequence.map(nodeId => nodes[nodeId]?.character).filter((char): char is Character => Boolean(char));\r\n    const totalVisits = characterSequence.length;\r\n    \r\n    Object.keys(characterFocus).forEach(char => {\r\n      const character = char as Character;\r\n      const visitCount = (characterFocus as Record<Character, number>)[character];\r\n      \r\n      if (visitCount > 0) {\r\n        // Calculate visit ratio\r\n        const visitRatio = visitCount / totalVisits;\r\n        \r\n        // Find longest consecutive streak\r\n        const longestStreak = this.calculateCharacterStreak(characterSequence, character);\r\n        \r\n        // Calculate average time between visits\r\n        const avgTimeBetweenVisits = this.calculateAvgTimeBetweenVisits(characterSequence, character);\r\n        \r\n        // Determine temporal spread\r\n        const temporalSpread = this.determineCharacterTemporalSpread(character, sequence, nodes);\r\n        \r\n        // Calculate intensity (combination of visit ratio, streak length, and temporal spread)\r\n        const intensity = this.calculateCharacterIntensityScore(visitRatio, longestStreak, temporalSpread.length);\r\n        \r\n        intensities.push({\r\n          character,\r\n          visitRatio,\r\n          intensity,\r\n          consecutiveVisits: longestStreak,\r\n          avgTimeBetweenVisits,\r\n          temporalSpread: temporalSpread as TemporalLabel[]\r\n        });\r\n      }\r\n    });\r\n    \r\n    // Sort by intensity (highest first)\r\n    return intensities.sort((a, b) => b.intensity - a.intensity);\r\n  }\r\n  /**\r\n   * Identifies nodes the reader returns to frequently\r\n   * @param readerState Current reader state with path information\r\n   * @param nodes Map of node IDs to node states\r\n   * @returns Array of strange attractor nodes\r\n   */\r\n  detectStrangeAttractors(\r\n    readerState: ReaderState,\r\n    nodes: Record<string, NodeState>\r\n  ): StrangeAttractorNode[] {\r\n    const { sequence, revisitPatterns } = readerState.path;\r\n    const attractors: StrangeAttractorNode[] = [];\r\n    \r\n    if (sequence.length < 3) {\r\n      return attractors; // Need enough visits to detect return patterns\r\n    }\r\n    \r\n    // Analyze each node that has been revisited\r\n    Object.entries(revisitPatterns).forEach(([nodeId, totalVisits]) => {\r\n      const attractor = this.processStrangeAttractorNode(nodeId, totalVisits, sequence, nodes);\r\n      if (attractor) {\r\n        attractors.push(attractor);\r\n      }\r\n    });\r\n    \r\n    // Sort by magnetic strength (strongest attractors first)\r\n    return attractors.sort((a, b) => b.magneticStrength - a.magneticStrength);\r\n  }\r\n\r\n  /**\r\n   * Tracks movement between temporal layers\r\n   * @param readerState Current reader state with path information\r\n   * @param nodes Map of node IDs to node states\r\n   * @returns Temporal jumping pattern analysis\r\n   */\r\n  analyzeTemporalJumping(\r\n    readerState: ReaderState,\r\n    nodes: Record<string, NodeState>\r\n  ): TemporalJumpingPattern {\r\n    const { sequence, temporalLayerFocus = {} } = readerState.path;\r\n    \r\n    if (sequence.length < 2) {\r\n      return {\r\n        totalJumps: 0,\r\n        jumpFrequency: 0,\r\n        preferredJumpDirection: 'mixed',\r\n        jumpDistances: [],\r\n        averageJumpDistance: 0,\r\n        maxJumpDistance: 0,\r\n        temporalAnchoring: { past: 0, present: 0, future: 0 },\r\n        volatility: 0\r\n      };\r\n    }\r\n    \r\n    // Build temporal sequence\r\n    const temporalSequence = sequence.map(nodeId => {\r\n      const node = nodes[nodeId];\r\n      return node ? node.temporalValue : 0;\r\n    }).filter(val => val > 0);\r\n    \r\n    // Calculate jumps\r\n    const jumps: number[] = [];\r\n    const jumpDirections: ('forward' | 'backward')[] = [];\r\n    \r\n    for (let i = 1; i < temporalSequence.length; i++) {\r\n      const prevTemporal = temporalSequence[i - 1];\r\n      const currTemporal = temporalSequence[i];\r\n      const jumpDistance = Math.abs(currTemporal - prevTemporal);\r\n      \r\n      if (jumpDistance > 0) {\r\n        jumps.push(jumpDistance);\r\n        jumpDirections.push(currTemporal > prevTemporal ? 'forward' : 'backward');\r\n      }\r\n    }\r\n    \r\n    // Calculate metrics\r\n    const totalJumps = jumps.length;\r\n    const jumpFrequency = totalJumps / sequence.length;\r\n    const averageJumpDistance = jumps.length > 0 ? jumps.reduce((sum, dist) => sum + dist, 0) / jumps.length : 0;\r\n    const maxJumpDistance = jumps.length > 0 ? Math.max(...jumps) : 0;\r\n    \r\n    // Determine preferred direction\r\n    const forwardJumps = jumpDirections.filter(dir => dir === 'forward').length;\r\n    const backwardJumps = jumpDirections.filter(dir => dir === 'backward').length;\r\n    let preferredJumpDirection: 'forward' | 'backward' | 'mixed' = 'mixed';\r\n    \r\n    if (forwardJumps > backwardJumps * 1.5) {\r\n      preferredJumpDirection = 'forward';\r\n    } else if (backwardJumps > forwardJumps * 1.5) {\r\n      preferredJumpDirection = 'backward';\r\n    }\r\n      // Calculate temporal anchoring (normalize focus values)\r\n    const temporalLayerFocusTyped = temporalLayerFocus as Record<TemporalLabel, number>;\r\n    const totalTemporalVisits = Object.values(temporalLayerFocusTyped).reduce((sum: number, count: number) => sum + count, 0);\r\n    const temporalAnchoring = {\r\n      past: totalTemporalVisits > 0 ? (temporalLayerFocusTyped.past || 0) / totalTemporalVisits : 0,\r\n      present: totalTemporalVisits > 0 ? (temporalLayerFocusTyped.present || 0) / totalTemporalVisits : 0,\r\n      future: totalTemporalVisits > 0 ? (temporalLayerFocusTyped.future || 0) / totalTemporalVisits : 0\r\n    };\r\n    \r\n    // Calculate volatility (how erratic the temporal movement is)\r\n    let volatility = 0;\r\n    if (jumps.length > 1) {\r\n      const jumpVariance = jumps.reduce((sum, jump) => {\r\n        const deviation = jump - averageJumpDistance;\r\n        return sum + (deviation * deviation);\r\n      }, 0) / jumps.length;\r\n      volatility = Math.min(1, Math.sqrt(jumpVariance) / 4); // Normalize to 0-1 scale\r\n    }\r\n    \r\n    return {\r\n      totalJumps,\r\n      jumpFrequency,\r\n      preferredJumpDirection,\r\n      jumpDistances: jumps,\r\n      averageJumpDistance,\r\n      maxJumpDistance,\r\n      temporalAnchoring,\r\n      volatility\r\n    };\r\n  }\r\n  /**\r\n   * Creates a unique signature for the reader's navigation style\r\n   * @param readerState Current reader state with path information\r\n   * @param nodes Map of node IDs to node states\r\n   * @returns Journey fingerprint with comprehensive navigation metrics\r\n   */\r\n  generateJourneyFingerprint(\r\n    readerState: ReaderState,\r\n    nodes: Record<string, NodeState>\r\n  ): JourneyFingerprint {\r\n    const { sequence, attractorsEngaged = {} } = readerState.path;\r\n    \r\n    // Get all analysis results\r\n    const recursivePatterns = this.analyzeRecursivePatterns(readerState, nodes);\r\n    const characterIntensities = this.calculateCharacterFocusIntensity(readerState, nodes);\r\n    const strangeAttractors = this.detectStrangeAttractors(readerState, nodes);\r\n    const temporalJumping = this.analyzeTemporalJumping(readerState, nodes);\r\n    \r\n    // Calculate core indices\r\n    const { recursiveIndex, focusIndex, velocityIndex, complexityIndex } = this.calculateJourneyIndices(\r\n      recursivePatterns,\r\n      characterIntensities,\r\n      temporalJumping,\r\n      strangeAttractors\r\n    );\r\n    \r\n    // Determine exploration style\r\n    let explorationStyle: 'linear' | 'recursive' | 'wandering' | 'focused' | 'chaotic' = 'linear';\r\n    explorationStyle = this.determineExplorationStyle(complexityIndex, recursiveIndex, focusIndex, temporalJumping.volatility);\r\n    \r\n    // Determine character affinity (ranked)\r\n    const characterAffinity = characterIntensities\r\n      .sort((a, b) => b.intensity - a.intensity)\r\n      .map(ci => ci.character);\r\n    \r\n    // Determine temporal preference\r\n    const { temporalAnchoring } = temporalJumping;\r\n    let temporalPreference: 'past-oriented' | 'present-focused' | 'future-seeking' | 'time-fluid' = 'time-fluid';\r\n    temporalPreference = this.determineTemporalPreference(temporalAnchoring);\r\n    \r\n    // Determine narrative approach\r\n    let narrativeApproach: 'systematic' | 'intuitive' | 'thematic' | 'experimental' = 'intuitive';\r\n    narrativeApproach = this.determineNarrativeApproach(\r\n      explorationStyle,\r\n      temporalJumping.volatility,\r\n      Object.keys(attractorsEngaged).length,\r\n      (Object.values(attractorsEngaged) as number[]).reduce((sum, count) => sum + count, 0),\r\n      sequence.length\r\n    );\r\n    \r\n    // Extract dominant pattern lengths\r\n    const dominantPatternLengths = recursivePatterns\r\n      .slice(0, 3) // Top 3 patterns\r\n      .map(pattern => pattern.length);\r\n    \r\n    // Build character transition matrix\r\n    const characterTransitionMatrix: Record<Character, Record<Character, number>> = this.buildCharacterTransitionMatrix(sequence, nodes);\r\n    \r\n    // Create temporal jump signature (distribution of jump distances)\r\n    const temporalJumpSignature = this.createTemporalJumpSignature(temporalJumping.jumpDistances);\r\n    \r\n    // Normalize attractor engagement profile\r\n    const attractorEngagementProfile = this.createAttractorEngagementProfile(attractorsEngaged);\r\n    \r\n    // Generate unique ID based on path characteristics\r\n    const id = this.generateFingerprintId(\r\n      sequence,\r\n      explorationStyle,\r\n      temporalPreference,\r\n      narrativeApproach,\r\n      recursiveIndex,\r\n      focusIndex,\r\n      velocityIndex,\r\n      complexityIndex\r\n    );\r\n    \r\n    return {\r\n      id,\r\n      explorationStyle,\r\n      characterAffinity,\r\n      temporalPreference,\r\n      narrativeApproach,\r\n      recursiveIndex,\r\n      focusIndex,\r\n      velocityIndex,\r\n      complexityIndex,\r\n      dominantPatternLengths,\r\n      characterTransitionMatrix,\r\n      temporalJumpSignature,\r\n      attractorEngagementProfile,\r\n      pathLength: sequence.length,\r\n      uniqueNodesVisited: new Set(sequence).size,\r\n      generatedAt: sequence.length\r\n    };\r\n  }\r\n\r\n  // Helper functions to reduce cognitive complexity\r\n\r\n  /**\r\n   * Calculates pattern strength based on sequence length and occurrences\r\n   */\r\n  private calculateSequencePatternStrength(\r\n    sequenceLength: number,\r\n    occurrences: number,\r\n    totalPathLength: number\r\n  ): number {\r\n    const maxPossibleLength = Math.floor(totalPathLength / 2);\r\n    const lengthFactor = sequenceLength / maxPossibleLength;\r\n    \r\n    const maxPossibleOccurrences = Math.floor(totalPathLength / sequenceLength);\r\n    const repetitionFactor = Math.min(1, occurrences / maxPossibleOccurrences);\r\n    \r\n    return (lengthFactor * 0.4) + (repetitionFactor * 0.6);\r\n  }\r\n\r\n  /**\r\n   * Counts occurrences of a sequence in a path\r\n   */\r\n  private countSequenceOccurrences(sequence: string[], path: string[]): number {\r\n    let occurrences = 0;\r\n    const sequenceLength = sequence.length;\r\n    \r\n    for (let i = 0; i <= path.length - sequenceLength; i++) {\r\n      const potentialMatch = path.slice(i, i + sequenceLength);\r\n      if (potentialMatch.every((id, idx) => id === sequence[idx])) {\r\n        occurrences++;\r\n      }\r\n    }\r\n    \r\n    return occurrences;\r\n  }\r\n\r\n  /**\r\n   * Calculates character focus strength above threshold\r\n   */\r\n  private calculateCharacterFocusStrength(ratio: number): number {\r\n    const strengthAboveThreshold = (ratio - this.CHARACTER_FOCUS_THRESHOLD) /\r\n      (1 - this.CHARACTER_FOCUS_THRESHOLD);\r\n    return 0.5 + (0.5 * strengthAboveThreshold);\r\n  }\r\n\r\n  /**\r\n   * Detects character oscillation patterns\r\n   */\r\n  private detectCharacterOscillation(characterSequence: Character[]): ReadingPattern | null {\r\n    if (characterSequence.length < 4) return null;\r\n    \r\n    let oscillationCount = 0;\r\n    \r\n    for (let i = 0; i < characterSequence.length - 3; i++) {\r\n      const c1 = characterSequence[i];\r\n      const c2 = characterSequence[i + 1];\r\n      \r\n      if (c1 !== c2 && \r\n          characterSequence[i + 2] === c1 && \r\n          characterSequence[i + 3] === c2) {\r\n        oscillationCount++;\r\n      }\r\n    }\r\n    \r\n    const maxPossibleOscillations = Math.floor((characterSequence.length - 3) / 2);\r\n    const oscillationRatio = oscillationCount / maxPossibleOscillations;\r\n    \r\n    if (oscillationRatio >= 0.3) {\r\n      return {\r\n        type: 'character',\r\n        strength: oscillationRatio,\r\n        description: 'Pattern of alternating between character perspectives',\r\n        relatedCharacters: Array.from(new Set(characterSequence))\r\n      };\r\n    }\r\n    \r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Detects chronological progression patterns in temporal sequences\r\n   */\r\n  private detectChronologicalProgression(temporalSequence: TemporalLabel[]): ReadingPattern | null {\r\n    if (temporalSequence.length < 5) return null;\r\n    \r\n    let chronologicalCount = 0;\r\n    \r\n    for (let i = 0; i < temporalSequence.length - 2; i++) {\r\n      const t1 = temporalSequence[i];\r\n      const t2 = temporalSequence[i + 1];\r\n      const t3 = temporalSequence[i + 2];\r\n      \r\n      if ((t1 === 'past' && t2 === 'present' && t3 === 'future') ||\r\n          (t1 === 'past' && t2 === 'present') ||\r\n          (t2 === 'present' && t3 === 'future')) {\r\n        chronologicalCount++;\r\n      }\r\n    }\r\n    \r\n    const maxPossibleProgressions = temporalSequence.length - 2;\r\n    const progressionRatio = chronologicalCount / maxPossibleProgressions;\r\n    \r\n    if (progressionRatio >= 0.3) {\r\n      return {\r\n        type: 'temporal',\r\n        strength: progressionRatio,\r\n        description: 'Pattern of chronological progression through time',\r\n        relatedTemporalLayers: ['past', 'present', 'future']\r\n      };\r\n    }\r\n    \r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Detects reverse chronological progression patterns\r\n   */\r\n  private detectReverseChronologicalProgression(temporalSequence: TemporalLabel[]): ReadingPattern | null {\r\n    if (temporalSequence.length < 5) return null;\r\n    \r\n    let reverseChronologicalCount = 0;\r\n    \r\n    for (let i = 0; i < temporalSequence.length - 2; i++) {\r\n      const t1 = temporalSequence[i];\r\n      const t2 = temporalSequence[i + 1];\r\n      const t3 = temporalSequence[i + 2];\r\n      \r\n      if ((t1 === 'future' && t2 === 'present' && t3 === 'past') ||\r\n          (t1 === 'future' && t2 === 'present') ||\r\n          (t2 === 'present' && t3 === 'past')) {\r\n        reverseChronologicalCount++;\r\n      }\r\n    }\r\n    \r\n    const maxPossibleProgressions = temporalSequence.length - 2;\r\n    const reverseProgressionRatio = reverseChronologicalCount / maxPossibleProgressions;\r\n    \r\n    if (reverseProgressionRatio >= 0.3) {\r\n      return {\r\n        type: 'temporal',\r\n        strength: reverseProgressionRatio,\r\n        description: 'Pattern of reverse chronological movement through time',\r\n        relatedTemporalLayers: ['future', 'present', 'past']\r\n      };\r\n    }\r\n    \r\n    return null;\r\n  }\r\n  /**\r\n   * Calculates thematic continuity between consecutive visits\r\n   */\r\n  private calculateThematicContinuity(\r\n    detailedVisits: Array<{ nodeId: string; engagedAttractors: StrangeAttractor[] }>,\r\n    nodeAttractors: Record<string, StrangeAttractor[]>\r\n  ): number {\r\n    if (detailedVisits.length < 3) return 0;\r\n    \r\n    const recentVisits = detailedVisits.slice(-Math.min(10, detailedVisits.length));\r\n    let sharedAttractorTransitions = 0;\r\n    \r\n    for (let i = 1; i < recentVisits.length; i++) {\r\n      const prevNode = recentVisits[i-1].nodeId;\r\n      const currNode = recentVisits[i].nodeId;\r\n      \r\n      const prevAttractors = nodeAttractors[prevNode] || [];\r\n      const currAttractors = nodeAttractors[currNode] || [];\r\n      \r\n      const sharedAttractors = prevAttractors.filter(\r\n        attractor => currAttractors.includes(attractor)\r\n      );\r\n      \r\n      if (sharedAttractors.length > 0) {\r\n        sharedAttractorTransitions++;\r\n      }\r\n    }\r\n    \r\n    return sharedAttractorTransitions / (recentVisits.length - 1);\r\n  }\r\n  /**\r\n   * Calculates engagement score for an attractor\r\n   */\r\n  private calculateEngagementScore(\r\n    totalEngagements: number,\r\n    totalAllAttractors: number,\r\n    engagementVisits: Array<{ nodeId: string; engagedAttractors: StrangeAttractor[] }>,\r\n    detailedVisits: Array<{ nodeId: string; engagedAttractors: StrangeAttractor[] }>\r\n  ): number {\r\n    // Base on multiple factors:\r\n    // 1. Total engagements relative to other attractors\r\n    const relativeEngagement = (totalEngagements / totalAllAttractors) * 100;\r\n    \r\n    // 2. Recency factor - using indices instead of timestamps\r\n    const recencyFactor = detailedVisits.indexOf(engagementVisits[engagementVisits.length - 1]) >\r\n      detailedVisits.length * 0.7 ? 0.8 : 0.4;\r\n    \r\n    // 3. Consistency factor - simplified version\r\n    const consistencyFactor = engagementVisits.length > totalEngagements * 0.5 ? 0.7 : 0.3;\r\n    \r\n    // Calculate final score\r\n    return Math.min(100,\r\n      (relativeEngagement * 0.6) +\r\n      (recencyFactor * 20) +\r\n      (consistencyFactor * 20));\r\n  }\r\n  /**\r\n   * Determines engagement trend based on visit distribution\r\n   */\r\n  private determineEngagementTrend(engagementVisits: Array<{ nodeId: string; engagedAttractors: StrangeAttractor[] }>): 'rising' | 'falling' | 'stable' {\r\n    if (engagementVisits.length < 3) return 'stable';\r\n    \r\n    const midpoint = Math.floor(engagementVisits.length / 2);\r\n    const firstHalf = engagementVisits.slice(0, midpoint);\r\n    const secondHalf = engagementVisits.slice(midpoint);\r\n    \r\n    if (secondHalf.length > firstHalf.length * 1.2) {\r\n      return 'rising';\r\n    } else if (secondHalf.length < firstHalf.length * 0.8) {\r\n      return 'falling';\r\n    }\r\n    \r\n    return 'stable';\r\n  }\r\n\r\n  /**\r\n   * Helper function to calculate pattern metrics for recursive patterns\r\n   */\r\n  private calculateRecursivePatternMetrics(\r\n    pattern: RecursivePattern,\r\n    sequence: string[],\r\n    patternLength: number\r\n  ): void {\r\n    // Calculate pattern strength based on frequency and recency\r\n    const frequencyFactor = Math.min(1, pattern.occurrences / (sequence.length / patternLength));\r\n    const recencyFactor = 1 - ((sequence.length - pattern.lastOccurrenceIndex) / sequence.length);\r\n    pattern.strength = (frequencyFactor * 0.7) + (recencyFactor * 0.3);\r\n    \r\n    // Calculate temporal spread\r\n    pattern.temporalSpread = this.calculateTemporalSpread(pattern, sequence, patternLength);\r\n  }\r\n\r\n  /**\r\n   * Helper function to calculate temporal spread for a recursive pattern\r\n   */\r\n  private calculateTemporalSpread(\r\n    pattern: RecursivePattern,\r\n    sequence: string[],\r\n    patternLength: number\r\n  ): number {\r\n    const occurrenceIndices: number[] = [];\r\n    \r\n    for (let i = 0; i <= sequence.length - patternLength; i++) {\r\n      const subSeq = sequence.slice(i, i + patternLength);\r\n      if (subSeq.every((nodeId, idx) => nodeId === pattern.sequence[idx])) {\r\n        occurrenceIndices.push(i);\r\n      }\r\n    }\r\n    \r\n    if (occurrenceIndices.length <= 1) {\r\n      return 0;\r\n    }\r\n    \r\n    const gaps = occurrenceIndices.slice(1).map((idx, i) => idx - occurrenceIndices[i]);\r\n    const avgGap = gaps.reduce((sum, gap) => sum + gap, 0) / gaps.length;\r\n    const maxPossibleGap = sequence.length / occurrenceIndices.length;\r\n    \r\n    return Math.min(1, avgGap / maxPossibleGap);\r\n  }\r\n\r\n  /**\r\n   * Helper function to process recursive patterns for a specific length\r\n   */\r\n  private processRecursivePatternsForLength(\r\n    sequence: string[],\r\n    patternLength: number,\r\n    nodes: Record<string, NodeState>\r\n  ): RecursivePattern[] {\r\n    const foundPatterns = new Map<string, RecursivePattern>();\r\n    const patterns: RecursivePattern[] = [];\r\n    \r\n    // Extract all possible sequences of this length\r\n    for (let i = 0; i <= sequence.length - patternLength; i++) {\r\n      const subSequence = sequence.slice(i, i + patternLength);\r\n      const patternKey = subSequence.join('->');\r\n      \r\n      if (!foundPatterns.has(patternKey)) {\r\n        foundPatterns.set(patternKey, {\r\n          sequence: subSequence,\r\n          length: patternLength,\r\n          occurrences: 0,\r\n          lastOccurrenceIndex: i,\r\n          strength: 0,\r\n          temporalSpread: 0\r\n        });\r\n      }\r\n      \r\n      const pattern = foundPatterns.get(patternKey)!;\r\n      pattern.occurrences++;\r\n      pattern.lastOccurrenceIndex = Math.max(pattern.lastOccurrenceIndex, i);\r\n    }\r\n    \r\n    // Filter patterns that occur at least twice and calculate metrics\r\n    foundPatterns.forEach(pattern => {\r\n      if (pattern.occurrences >= 2) {\r\n        this.calculateRecursivePatternMetrics(pattern, sequence, patternLength);\r\n        \r\n        // Enhance pattern with node metadata for richer analysis\r\n        this.validatePatternNodes(pattern, nodes);\r\n        \r\n        patterns.push(pattern);\r\n      }\r\n    });\r\n    \r\n    return patterns;\r\n  }\r\n\r\n  /**\r\n   * Helper function to validate pattern nodes\r\n   */\r\n  private validatePatternNodes(pattern: RecursivePattern, nodes: Record<string, NodeState>): void {\r\n    const patternNodes = pattern.sequence.map(nodeId => nodes[nodeId]).filter(Boolean);\r\n    if (patternNodes.length > 0) {\r\n      // Future enhancement: Could analyze character transitions, temporal jumps, attractor themes within pattern\r\n      // For now, ensure nodes parameter is used to avoid warnings\r\n      const hasValidNodes = patternNodes.length === pattern.sequence.length;\r\n      if (!hasValidNodes) {\r\n        console.warn(`Pattern contains invalid node references: ${pattern.sequence}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Helper function to calculate character visit streak\r\n   */\r\n  private calculateCharacterStreak(characterSequence: Character[], character: Character): number {\r\n    let longestStreak = 0;\r\n    let currentStreak = 0;\r\n    \r\n    characterSequence.forEach(visitedChar => {\r\n      if (visitedChar === character) {\r\n        currentStreak++;\r\n        longestStreak = Math.max(longestStreak, currentStreak);\r\n      } else {\r\n        currentStreak = 0;\r\n      }\r\n    });\r\n    \r\n    return longestStreak;\r\n  }\r\n\r\n  /**\r\n   * Helper function to calculate average time between character visits\r\n   */\r\n  private calculateAvgTimeBetweenVisits(characterSequence: Character[], character: Character): number {\r\n    const characterVisitIndices = characterSequence\r\n      .map((char, idx) => char === character ? idx : -1)\r\n      .filter(idx => idx !== -1);\r\n    \r\n    if (characterVisitIndices.length <= 1) {\r\n      return 0;\r\n    }\r\n    \r\n    const gaps = characterVisitIndices.slice(1).map((idx, i) => idx - characterVisitIndices[i]);\r\n    return gaps.reduce((sum, gap) => sum + gap, 0) / gaps.length;\r\n  }\r\n\r\n  /**\r\n   * Helper function to determine temporal spread for a character\r\n   */\r\n  private determineCharacterTemporalSpread(\r\n    character: Character,\r\n    sequence: string[],\r\n    nodes: Record<string, NodeState>\r\n  ): TemporalLabel[] {\r\n    const characterNodeIds = Object.keys(nodes).filter(nodeId => nodes[nodeId].character === character);\r\n    const visitedCharacterNodes = sequence.filter(nodeId => characterNodeIds.includes(nodeId));\r\n    \r\n    return [...new Set(visitedCharacterNodes.map(nodeId => {\r\n      const temporalValue = nodes[nodeId].temporalValue;\r\n      if (temporalValue <= 3) return 'past';\r\n      if (temporalValue <= 6) return 'present';\r\n      return 'future';\r\n    }))];\r\n  }\r\n\r\n  /**\r\n   * Helper function to calculate character focus intensity score\r\n   */\r\n  private calculateCharacterIntensityScore(\r\n    visitRatio: number,\r\n    longestStreak: number,\r\n    temporalSpreadLength: number\r\n  ): number {\r\n    const visitRatioFactor = Math.min(1, visitRatio * 2); // Cap at 1, but weight heavily\r\n    const streakFactor = Math.min(1, longestStreak / 5); // Normalize streak to 5 visits\r\n    const spreadFactor = temporalSpreadLength / 3; // 0-1 based on temporal coverage\r\n    \r\n    return (visitRatioFactor * 0.5) + (streakFactor * 0.3) + (spreadFactor * 0.2);\r\n  }\r\n\r\n  /**\r\n   * Helper function to calculate magnetic strength for strange attractors\r\n   */\r\n  private calculateMagneticStrength(\r\n    returnFrequency: number,\r\n    gaps: number[],\r\n    sequence: string[],\r\n    visitIndices: number[]\r\n  ): number {\r\n    const frequencyFactor = Math.min(1, returnFrequency * 10); // Weight frequency highly\r\n    const consistencyFactor = gaps.length > 0 ? \r\n      1 - (Math.max(...gaps) - Math.min(...gaps)) / Math.max(...gaps) : 0; // How consistent are the gaps\r\n    const recencyFactor = 1 - ((sequence.length - Math.max(...visitIndices)) / sequence.length); // How recent was the last return\r\n    \r\n    return (frequencyFactor * 0.5) + (consistencyFactor * 0.3) + (recencyFactor * 0.2);\r\n  }\r\n\r\n  /**\r\n   * Helper function to calculate visit gaps for a node\r\n   */\r\n  private calculateVisitGaps(visitIndices: number[]): number[] {\r\n    return visitIndices.slice(1).map((idx, i) => idx - visitIndices[i]);\r\n  }\r\n\r\n  /**\r\n   * Helper function to process a single strange attractor node\r\n   */\r\n  private processStrangeAttractorNode(\r\n    nodeId: string,\r\n    totalVisits: number,\r\n    sequence: string[],\r\n    nodes: Record<string, NodeState>\r\n  ): StrangeAttractorNode | null {\r\n    if (totalVisits <= 1) return null;\r\n    \r\n    const returnCount = totalVisits - 1;\r\n    \r\n    // Find all visit indices for this node\r\n    const visitIndices = sequence\r\n      .map((id, idx) => id === nodeId ? idx : -1)\r\n      .filter(idx => idx !== -1);\r\n    \r\n    if (visitIndices.length <= 1) return null;\r\n    \r\n    // Calculate metrics\r\n    const returnFrequency = returnCount / sequence.length;\r\n    const gaps = this.calculateVisitGaps(visitIndices);\r\n    const averageGap = gaps.reduce((sum, gap) => sum + gap, 0) / gaps.length;\r\n    const magneticStrength = this.calculateMagneticStrength(returnFrequency, gaps, sequence, visitIndices);\r\n    \r\n    // Get node's strange attractors\r\n    const nodeData = nodes[nodeId];\r\n    const attractorThemes = nodeData ? nodeData.strangeAttractors : [];\r\n    \r\n    return {\r\n      nodeId,\r\n      returnFrequency,\r\n      totalReturns: returnCount,\r\n      averageGapBetweenReturns: averageGap,\r\n      magneticStrength,\r\n      attractorThemes,\r\n      lastReturnIndex: Math.max(...visitIndices)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Calculates core journey indices\r\n   */  private calculateJourneyIndices(\r\n    recursivePatterns: RecursivePattern[],\r\n    characterIntensities: CharacterFocusIntensity[],\r\n    temporalJumping: TemporalJumpingPattern,\r\n    strangeAttractors: StrangeAttractorNode[]\r\n  ): { recursiveIndex: number; focusIndex: number; velocityIndex: number; complexityIndex: number } {\r\n    // Recursive index: How much the reader repeats patterns\r\n    const recursiveIndex = recursivePatterns.length > 0 ?\r\n      recursivePatterns.reduce((sum, pattern) => sum + pattern.strength, 0) / recursivePatterns.length : 0;\r\n    \r\n    // Focus index: How concentrated character focus is\r\n    const focusIndex = characterIntensities.length > 0 ?\r\n      characterIntensities[0]?.intensity || 0 : 0;\r\n    \r\n    // Velocity index: How fast temporal movement is\r\n    const velocityIndex = Math.min(1, temporalJumping.averageJumpDistance / 5);\r\n    \r\n    // Complexity index: Overall navigation complexity\r\n    const complexityIndex = (recursiveIndex * 0.3) + (focusIndex * 0.3) + \r\n      (temporalJumping.volatility * 0.2) + (Math.min(1, strangeAttractors.length / 5) * 0.2);\r\n    \r\n    return { recursiveIndex, focusIndex, velocityIndex, complexityIndex };\r\n  }\r\n\r\n  /**\r\n   * Determines exploration style based on indices\r\n   */\r\n  private determineExplorationStyle(\r\n    complexityIndex: number,\r\n    recursiveIndex: number,\r\n    focusIndex: number,\r\n    volatility: number\r\n  ): 'linear' | 'recursive' | 'wandering' | 'focused' | 'chaotic' {\r\n    if (volatility > 0.7) return 'chaotic';\r\n    if (recursiveIndex > 0.6) return 'recursive';\r\n    if (focusIndex > 0.7) return 'focused';\r\n    if (complexityIndex < 0.3) return 'linear';\r\n    return 'wandering';\r\n  }\r\n\r\n  /**\r\n   * Determines temporal preference based on anchoring\r\n   */\r\n  private determineTemporalPreference(\r\n    temporalAnchoring: { past: number; present: number; future: number }\r\n  ): 'past-oriented' | 'present-focused' | 'future-seeking' | 'time-fluid' {\r\n    const max = Math.max(temporalAnchoring.past, temporalAnchoring.present, temporalAnchoring.future);\r\n    \r\n    if (max < 0.4) return 'time-fluid';\r\n    \r\n    if (temporalAnchoring.past === max) return 'past-oriented';\r\n    if (temporalAnchoring.present === max) return 'present-focused';\r\n    return 'future-seeking';\r\n  }\r\n\r\n  /**\r\n   * Determines narrative approach based on exploration patterns\r\n   */\r\n  private determineNarrativeApproach(\r\n    explorationStyle: string,\r\n    volatility: number,\r\n    attractorCount: number,\r\n    totalAttractorEngagement: number,\r\n    pathLength: number\r\n  ): 'systematic' | 'intuitive' | 'thematic' | 'experimental' {\r\n    if (explorationStyle === 'linear' && volatility < 0.3) return 'systematic';\r\n    if (attractorCount > 3 && totalAttractorEngagement / pathLength > 0.3) return 'thematic';\r\n    if (volatility > 0.6 || explorationStyle === 'chaotic') return 'experimental';\r\n    return 'intuitive';\r\n  }\r\n\r\n  /**\r\n   * Builds character transition matrix\r\n   */\r\n  private buildCharacterTransitionMatrix(\r\n    sequence: string[],\r\n    nodes: Record<string, NodeState>\r\n  ): Record<Character, Record<Character, number>> {\r\n    const matrix: Record<Character, Record<Character, number>> = {} as Record<Character, Record<Character, number>>;\r\n    const characters = ['human', 'algo', 'arch'] as const;\r\n    \r\n    // Initialize matrix\r\n    characters.forEach(from => {\r\n      matrix[from as Character] = {} as Record<Character, number>;\r\n      characters.forEach(to => {\r\n        matrix[from as Character][to as Character] = 0;\r\n      });\r\n    });\r\n    \r\n    // Build transitions\r\n    for (let i = 1; i < sequence.length; i++) {\r\n      const prevNode = nodes[sequence[i - 1]];\r\n      const currNode = nodes[sequence[i]];\r\n      \r\n      if (prevNode && currNode) {\r\n        const prevChar = prevNode.character;\r\n        const currChar = currNode.character;\r\n        if (prevChar && currChar) {\r\n          matrix[prevChar][currChar]++;\r\n        }\r\n      }\r\n    }\r\n    \r\n    return matrix;\r\n  }\r\n\r\n  /**\r\n   * Creates temporal jump signature\r\n   */\r\n  private createTemporalJumpSignature(jumpDistances: number[]): Record<string, number> {\r\n    const signature: Record<string, number> = {\r\n      small: 0, // 0-1\r\n      medium: 0, // 2-3\r\n      large: 0, // 4-5\r\n      extreme: 0 // 6+\r\n    };\r\n    \r\n    jumpDistances.forEach(distance => {\r\n      if (distance <= 1) signature.small++;\r\n      else if (distance <= 3) signature.medium++;\r\n      else if (distance <= 5) signature.large++;\r\n      else signature.extreme++;\r\n    });\r\n    \r\n    // Normalize\r\n    const total = jumpDistances.length;\r\n    if (total > 0) {\r\n      Object.keys(signature).forEach(key => {\r\n        signature[key] = signature[key] / total;\r\n      });\r\n    }\r\n    \r\n    return signature;\r\n  }\r\n\r\n  /**\r\n   * Creates attractor engagement profile\r\n   */\r\n  private createAttractorEngagementProfile(\r\n    attractorsEngaged: Record<string, number>\r\n  ): Record<string, number> {\r\n    const total = Object.values(attractorsEngaged).reduce((sum, count) => sum + count, 0);\r\n    const profile: Record<string, number> = {};\r\n    \r\n    if (total > 0) {\r\n      Object.entries(attractorsEngaged).forEach(([attractor, count]) => {\r\n        profile[attractor] = count / total;\r\n      });\r\n    }\r\n    \r\n    return profile;\r\n  }\r\n\r\n  /**\r\n   * Generates unique fingerprint ID\r\n   */\r\n  private generateFingerprintId(\r\n    sequence: string[],\r\n    explorationStyle: string,\r\n    temporalPreference: string,\r\n    narrativeApproach: string,\r\n    recursiveIndex: number,\r\n    focusIndex: number,\r\n    velocityIndex: number,\r\n    complexityIndex: number\r\n  ): string {\r\n    const pathHash = sequence.slice(0, 10).join('').slice(0, 8);\r\n    const styleCode = explorationStyle.slice(0, 2);\r\n    const temporalCode = temporalPreference.slice(0, 2);\r\n    const narrativeCode = narrativeApproach.slice(0, 2);\r\n    const indexCode = Math.floor(recursiveIndex * 10).toString() +\r\n      Math.floor(focusIndex * 10).toString() +\r\n      Math.floor(velocityIndex * 10).toString() +\r\n      Math.floor(complexityIndex * 10).toString();\r\n    \r\n    return `${pathHash}-${styleCode}${temporalCode}${narrativeCode}-${indexCode}`;\r\n  }\r\n}\r\n\r\n// Export a singleton instance for use throughout the application\r\nexport const pathAnalyzer = new PathAnalyzer();","/**\r\n * CharacterBleedService\r\n * \r\n * Calculates character influence effects when readers transition between different\r\n * character perspectives. Each character leaves \"bleed\" effects that influence\r\n * how subsequent content is interpreted and transformed.\r\n * \r\n * Character bleed effects occur when the current node's character differs from\r\n * the previous node's character, creating transformation effects based on the\r\n * specific character combination.\r\n */\r\n\r\nimport { NodeState, Character, TextTransformation } from '../types';\r\nimport { ReaderState } from '../store/slices/readerSlice';\r\n\r\n/**\r\n * Represents a character bleed transformation effect\r\n */\r\nexport interface CharacterBleedEffect {\r\n  type: TextTransformation['type'];\r\n  selector: string;\r\n  transformation: TextTransformation;\r\n  reason: string; // Explanation of why this effect occurs\r\n  sourceCharacter: Character; // Character that is bleeding influence\r\n  targetCharacter: Character; // Character receiving the influence\r\n  intensity: number; // Strength of the bleed effect (1-5)\r\n}\r\n\r\n/**\r\n * Service for calculating character influence bleed effects\r\n */\r\nexport class CharacterBleedService {\r\n    /**\r\n   * Calculates character bleed effects based on character transitions\r\n   * @param currentNode The current node being visited\r\n   * @param readerState The current reader state with visit history\r\n   * @returns Array of character bleed transformation effects\r\n   */  static calculateBleedEffects(\r\n    currentNode: NodeState,\r\n    readerState: ReaderState\r\n  ): CharacterBleedEffect[] {\r\n    const effects: CharacterBleedEffect[] = [];\r\n\r\n    // Get the last visited node to determine character transition\r\n    const lastVisitedNode = this.getLastVisitedNode(readerState);\r\n\r\n    console.log(`[CharacterBleedService] Analyzing character bleed for node ${currentNode.id}:`, {\r\n      currentCharacter: currentNode.character,\r\n      lastVisitedCharacter: lastVisitedNode?.character || 'None',\r\n      lastVisitedNode: lastVisitedNode?.nodeId || 'None'\r\n    });\r\n\r\n    if (!lastVisitedNode || lastVisitedNode.character === currentNode.character) {\r\n      // No bleed effect if no previous character or same character\r\n      console.log(`[CharacterBleedService] No character bleed detected - ${!lastVisitedNode ? 'no previous character' : 'same character'}`);\r\n      return effects;\r\n    }\r\n\r\n    console.log(`[CharacterBleedService] Character transition detected: ${lastVisitedNode.character} → ${currentNode.character}`);\r\n\r\n    // Get character-specific bleed effects for this transition (LIMITED)\r\n    const specificEffects = this.getCharacterSpecificBleed(\r\n      lastVisitedNode.character,\r\n      currentNode.character,\r\n      currentNode\r\n    ).slice(0, 2); // Limit to 2 specific effects\r\n\r\n    effects.push(...specificEffects);\r\n    console.log(`[CharacterBleedService] Added ${specificEffects.length} character-specific bleed effects`);\r\n\r\n    // Add general bleed effects based on character transition patterns (LIMITED)\r\n    const generalEffects = this.getGeneralBleedEffects(\r\n      lastVisitedNode.character,\r\n      currentNode.character,\r\n      currentNode,\r\n      readerState\r\n    ).slice(0, 1); // Limit to 1 general effect\r\n\r\n    effects.push(...generalEffects);\r\n    console.log(`[CharacterBleedService] Added ${generalEffects.length} general bleed effects`);\r\n\r\n    console.log(`[CharacterBleedService] Total character bleed effects: ${effects.length}`);\r\n    return effects;\r\n  }\r\n  \r\n  /**\r\n   * Extracts the previous node information from reader state\r\n   * @param readerState The reader state containing visit history\r\n   * @returns Information about the last visited node, or null if none exists\r\n   */\r\n  static getLastVisitedNode(readerState: ReaderState): { character: Character; nodeId: string } | null {\r\n    const detailedVisits = readerState.path.detailedVisits;\r\n    \r\n    if (!detailedVisits || detailedVisits.length < 2) {\r\n      return null;\r\n    }\r\n    \r\n    // Get the second-to-last visit (the previous one before current)\r\n    const previousVisit = detailedVisits[detailedVisits.length - 2];\r\n    \r\n    return {\r\n      character: previousVisit.character,\r\n      nodeId: previousVisit.nodeId\r\n    };\r\n  }\r\n  \r\n  /**\r\n   * Defines specific bleed effects between character pairs\r\n   * @param sourceCharacter Character providing the influence\r\n   * @param targetCharacter Character receiving the influence\r\n   * @param currentNode The current node being visited\r\n   * @returns Array of character-specific bleed effects\r\n   */\r\n  static getCharacterSpecificBleed(\r\n    sourceCharacter: Character,\r\n    targetCharacter: Character,\r\n    currentNode: NodeState\r\n  ): CharacterBleedEffect[] {\r\n    const effects: CharacterBleedEffect[] = [];\r\n    \r\n    // Ensure we have content to work with\r\n    if (!currentNode.currentContent) {\r\n      return effects;\r\n    }\r\n    \r\n    const content = currentNode.currentContent;\r\n    const paragraphs = content.split('\\n\\n').filter(p => p.trim().length > 0);\r\n    \r\n    // Algorithm to Archaeologist: corruption text fragments with strikethrough\r\n    if (sourceCharacter === 'Algorithm' && targetCharacter === 'Archaeologist') {      // Find technical or systematic terms to corrupt\r\n      const technicalTerms = this.findTechnicalTerms(content);\r\n      \r\n      technicalTerms.forEach((term) => {\r\n        effects.push({\r\n          type: 'fragment',\r\n          selector: term,\r\n          transformation: {\r\n            type: 'fragment',\r\n            selector: term,\r\n            fragmentPattern: '̶', // Strikethrough combining character\r\n            fragmentStyle: 'character',\r\n            intensity: 3\r\n          },\r\n          reason: 'Algorithmic corruption bleeding into archaeological interpretation',\r\n          sourceCharacter,\r\n          targetCharacter,\r\n          intensity: 3\r\n        });\r\n      });\r\n      \r\n      // Add meta-commentary about data corruption\r\n      if (paragraphs.length > 1) {\r\n        effects.push({\r\n          type: 'metaComment',\r\n          selector: paragraphs[1],\r\n          transformation: {\r\n            type: 'metaComment',\r\n            selector: paragraphs[1],\r\n            replacement: 'data integrity compromised',\r\n            commentStyle: 'marginalia',\r\n            intensity: 2\r\n          },\r\n          reason: 'Algorithmic perspective introduces doubt about information reliability',\r\n          sourceCharacter,\r\n          targetCharacter,\r\n          intensity: 2\r\n        });\r\n      }\r\n    }\r\n    \r\n    // Algorithm to LastHuman: pattern emphasis with glitch effects\r\n    else if (sourceCharacter === 'Algorithm' && targetCharacter === 'LastHuman') {\r\n      // Find patterns or repetitive elements\r\n      const patterns = this.findPatterns(content);\r\n      \r\n      patterns.forEach((pattern) => {\r\n        effects.push({\r\n          type: 'emphasize',\r\n          selector: pattern,\r\n          transformation: {\r\n            type: 'emphasize',\r\n            selector: pattern,\r\n            emphasis: 'glitch',\r\n            intensity: 4\r\n          },\r\n          reason: 'Algorithmic pattern recognition bleeding into human consciousness',\r\n          sourceCharacter,\r\n          targetCharacter,\r\n          intensity: 4\r\n        });\r\n      });\r\n      \r\n      // Add glitch effect to first paragraph\r\n      if (paragraphs.length > 0) {\r\n        effects.push({\r\n          type: 'expand',\r\n          selector: paragraphs[0],\r\n          transformation: {\r\n            type: 'expand',\r\n            selector: paragraphs[0],\r\n            replacement: '[PATTERN_DETECTED: recursive_loop_identified]',\r\n            expandStyle: 'inline',\r\n            intensity: 3\r\n          },\r\n          reason: 'Algorithmic analysis intrudes on human experience',\r\n          sourceCharacter,\r\n          targetCharacter,\r\n          intensity: 3\r\n        });\r\n      }\r\n    }\r\n    \r\n    // Archaeologist to Algorithm: temporal displacement markers\r\n    else if (sourceCharacter === 'Archaeologist' && targetCharacter === 'Algorithm') {\r\n      // Find time-related terms\r\n      const timeTerms = this.findTimeTerms(content);\r\n      \r\n      timeTerms.forEach((term) => {\r\n        effects.push({\r\n          type: 'replace',\r\n          selector: term,\r\n          transformation: {\r\n            type: 'replace',\r\n            selector: term,\r\n            replacement: `${term}[TEMPORAL_MARKER:${this.getRandomTimestamp()}]`,\r\n            preserveFormatting: true,\r\n            intensity: 3\r\n          },\r\n          reason: 'Archaeological time-consciousness bleeds into algorithmic processing',\r\n          sourceCharacter,\r\n          targetCharacter,\r\n          intensity: 3\r\n        });\r\n      });\r\n      \r\n      // Add temporal displacement commentary\r\n      if (paragraphs.length > 2) {\r\n        effects.push({\r\n          type: 'metaComment',\r\n          selector: paragraphs[2],\r\n          transformation: {\r\n            type: 'metaComment',\r\n            selector: paragraphs[2],\r\n            replacement: 'chronological displacement detected',\r\n            commentStyle: 'interlinear',\r\n            intensity: 2\r\n          },\r\n          reason: 'Archaeological temporal awareness influences algorithmic perception',\r\n          sourceCharacter,\r\n          targetCharacter,\r\n          intensity: 2\r\n        });\r\n      }\r\n    }\r\n    \r\n    // LastHuman to others: familiarity/memory overlay effects\r\n    else if (sourceCharacter === 'LastHuman' && targetCharacter !== 'LastHuman') {\r\n      // Find emotional or personal terms\r\n      const emotionalTerms = this.findEmotionalTerms(content);\r\n      \r\n      emotionalTerms.forEach((term) => {\r\n        effects.push({\r\n          type: 'emphasize',\r\n          selector: term,\r\n          transformation: {\r\n            type: 'emphasize',\r\n            selector: term,\r\n            emphasis: 'fade',\r\n            intensity: 2\r\n          },\r\n          reason: 'Human memory and emotion bleeds into analytical perspective',\r\n          sourceCharacter,\r\n          targetCharacter,\r\n          intensity: 2\r\n        });\r\n      });\r\n      \r\n      // Add memory overlay\r\n      if (paragraphs.length > 0) {\r\n        effects.push({\r\n          type: 'expand',\r\n          selector: paragraphs[0],\r\n          transformation: {\r\n            type: 'expand',\r\n            selector: paragraphs[0],\r\n            replacement: '(a memory surface, warm and fading)',\r\n            expandStyle: 'append',\r\n            intensity: 2\r\n          },\r\n          reason: 'Human experiential memory creates emotional overlay',\r\n          sourceCharacter,\r\n          targetCharacter,\r\n          intensity: 2\r\n        });\r\n      }\r\n    }\r\n    \r\n    return effects;\r\n  }\r\n  \r\n  /**\r\n   * Calculates general bleed effects that apply to any character transition\r\n   * @param sourceCharacter Character providing the influence\r\n   * @param targetCharacter Character receiving the influence\r\n   * @param currentNode The current node being visited\r\n   * @param readerState The reader state for context\r\n   * @returns Array of general bleed effects\r\n   */\r\n  private static getGeneralBleedEffects(\r\n    sourceCharacter: Character,\r\n    targetCharacter: Character,\r\n    currentNode: NodeState,\r\n    readerState: ReaderState\r\n  ): CharacterBleedEffect[] {\r\n    const effects: CharacterBleedEffect[] = [];\r\n    \r\n    if (!currentNode.currentContent) {\r\n      return effects;\r\n    }\r\n    \r\n    // Calculate transition frequency to determine intensity\r\n    const transitionCount = this.calculateTransitionCount(sourceCharacter, targetCharacter, readerState);\r\n    const intensity = Math.min(5, Math.max(1, Math.floor(transitionCount / 2) + 1));\r\n    \r\n    // Add perspective shift marker for any character transition\r\n    const firstSentence = this.getFirstSentence(currentNode.currentContent);\r\n    if (firstSentence) {\r\n      effects.push({\r\n        type: 'metaComment',\r\n        selector: firstSentence,\r\n        transformation: {\r\n          type: 'metaComment',\r\n          selector: firstSentence,\r\n          replacement: `perspective shift: ${sourceCharacter} → ${targetCharacter}`,\r\n          commentStyle: 'marginalia',\r\n          intensity: intensity\r\n        },\r\n        reason: 'Character transition creates perspective shift awareness',\r\n        sourceCharacter,\r\n        targetCharacter,\r\n        intensity: intensity\r\n      });\r\n    }\r\n    \r\n    return effects;\r\n  }\r\n  \r\n  /**\r\n   * Finds technical terms in content that could be affected by algorithmic corruption\r\n   */\r\n  private static findTechnicalTerms(content: string): string[] {\r\n    const technicalWords = [\r\n      'system', 'process', 'data', 'algorithm', 'compute', 'execute',\r\n      'protocol', 'interface', 'network', 'digital', 'binary', 'code'\r\n    ];\r\n    \r\n    const words = content.toLowerCase().split(/\\s+/);\r\n    return words.filter(word => \r\n      technicalWords.some(tech => word.includes(tech))\r\n    ).slice(0, 3); // Limit to first 3 matches\r\n  }\r\n  \r\n  /**\r\n   * Finds patterns or repetitive elements in content\r\n   */\r\n  private static findPatterns(content: string): string[] {\r\n    const words = content.split(/\\s+/);\r\n    const patterns: string[] = [];\r\n    \r\n    // Find repeated words\r\n    const wordCount: Record<string, number> = {};\r\n    words.forEach(word => {\r\n      const cleanWord = word.toLowerCase().replace(/[^\\w]/g, '');\r\n      if (cleanWord.length > 3) {\r\n        wordCount[cleanWord] = (wordCount[cleanWord] || 0) + 1;\r\n      }\r\n    });\r\n    \r\n    // Return words that appear more than once\r\n    Object.entries(wordCount).forEach(([word, count]) => {\r\n      if (count > 1 && patterns.length < 2) {\r\n        patterns.push(word);\r\n      }\r\n    });\r\n    \r\n    return patterns;\r\n  }\r\n  \r\n  /**\r\n   * Finds time-related terms in content\r\n   */\r\n  private static findTimeTerms(content: string): string[] {\r\n    const timeWords = [\r\n      'past', 'present', 'future', 'time', 'when', 'before', 'after',\r\n      'now', 'then', 'moment', 'history', 'ancient', 'memory'\r\n    ];\r\n    \r\n    const words = content.toLowerCase().split(/\\s+/);\r\n    return words.filter(word => \r\n      timeWords.some(time => word.includes(time))\r\n    ).slice(0, 2); // Limit to first 2 matches\r\n  }\r\n  \r\n  /**\r\n   * Finds emotional or personal terms in content\r\n   */\r\n  private static findEmotionalTerms(content: string): string[] {\r\n    const emotionalWords = [\r\n      'feel', 'remember', 'love', 'fear', 'hope', 'dream', 'wish',\r\n      'heart', 'soul', 'mind', 'consciousness', 'awareness', 'experience'\r\n    ];\r\n    \r\n    const words = content.toLowerCase().split(/\\s+/);\r\n    return words.filter(word => \r\n      emotionalWords.some(emotion => word.includes(emotion))\r\n    ).slice(0, 2); // Limit to first 2 matches\r\n  }\r\n  \r\n  /**\r\n   * Calculates how many times this character transition has occurred\r\n   */\r\n  private static calculateTransitionCount(\r\n    sourceCharacter: Character,\r\n    targetCharacter: Character,\r\n    readerState: ReaderState\r\n  ): number {\r\n    const detailedVisits = readerState.path.detailedVisits || [];\r\n    let count = 0;\r\n    \r\n    for (let i = 1; i < detailedVisits.length; i++) {\r\n      const prev = detailedVisits[i - 1];\r\n      const curr = detailedVisits[i];\r\n      \r\n      if (prev.character === sourceCharacter && curr.character === targetCharacter) {\r\n        count++;\r\n      }\r\n    }\r\n    \r\n    return count;\r\n  }\r\n  \r\n  /**\r\n   * Extracts the first sentence from content\r\n   */\r\n  private static getFirstSentence(content: string): string | null {\r\n    const sentences = content.split(/[.!?]+/);\r\n    const firstSentence = sentences[0]?.trim();\r\n    return firstSentence && firstSentence.length > 10 ? firstSentence : null;\r\n  }\r\n    /**\r\n   * Generates a random timestamp for temporal displacement effects\r\n   * Note: Uses Math.random() which is safe here since this is purely for \r\n   * visual/narrative effects, not security-sensitive operations\r\n   */\r\n  private static getRandomTimestamp(): string {\r\n    const timestamps = [\r\n      '2157.03.14', '1847.11.22', '2891.07.08', '0034.12.31', '3456.01.15'\r\n    ];\r\n    return timestamps[Math.floor(Math.random() * timestamps.length)];\r\n  }\r\n}\r\n\r\n// Export the service class for use in the transformation pipeline\r\nexport default CharacterBleedService;\r\n","/**\r\n * TransformationEngine Service\r\n * \r\n * Handles complex condition evaluation for narrative content transformations\r\n * in the Narramorph feature of Eternal Return of the Digital Self.\r\n * \r\n * This service evaluates different types of conditions:\r\n * 1. Visit count conditions\r\n * 2. Visit pattern conditions (sequence of node visits)\r\n * 3. Previously visited node conditions\r\n * 4. Strange attractor engagement conditions\r\n * 5. Temporal position conditions\r\n */\r\n\r\nimport {\r\n  StrangeAttractor,\r\n  TemporalLabel,\r\n  NodeState,\r\n  TextTransformation,\r\n  EndpointOrientation,\r\n  Character\r\n} from '../types';\r\nimport { ReaderState } from '../store/slices/readerSlice';\r\nimport { pathAnalyzer } from './PathAnalyzer';\r\nimport { CharacterBleedService, CharacterBleedEffect } from './CharacterBleedService';\r\n// Import additional PathAnalyzer types for journey transformations\r\nimport { \r\n  ReadingPattern, \r\n  RecursivePattern, \r\n  CharacterFocusIntensity,\r\n  TemporalJumpingPattern\r\n} from './PathAnalyzer';\r\n\r\n// LRU Cache implementation for memoization\r\nclass LRUCache<K, V> {\r\n  private capacity: number;\r\n  private cache: Map<K, V>;\r\n  private keys: K[];\r\n\r\n  constructor(capacity: number) {\r\n    this.capacity = capacity;\r\n    this.cache = new Map<K, V>();\r\n    this.keys = [];\r\n  }\r\n\r\n  get(key: K): V | undefined {\r\n    if (!this.cache.has(key)) return undefined;\r\n    \r\n    // Move key to the end of keys array (most recently used)\r\n    this.keys = this.keys.filter(k => k !== key);\r\n    this.keys.push(key);\r\n    \r\n    return this.cache.get(key);\r\n  }\r\n\r\n  put(key: K, value: V): void {\r\n    if (this.cache.has(key)) {\r\n      // Update existing key\r\n      this.cache.set(key, value);\r\n      this.keys = this.keys.filter(k => k !== key);\r\n      this.keys.push(key);\r\n      return;\r\n    }\r\n\r\n    // Check if we need to evict the least recently used item\r\n    if (this.keys.length >= this.capacity) {\r\n      const lruKey = this.keys.shift();\r\n      if (lruKey !== undefined) {\r\n        this.cache.delete(lruKey);\r\n      }\r\n    }\r\n\r\n    // Add new key-value pair\r\n    this.cache.set(key, value);\r\n    this.keys.push(key);\r\n  }\r\n\r\n  clear(): void {\r\n    this.cache.clear();\r\n    this.keys = [];\r\n  }\r\n\r\n  size(): number {\r\n    return this.cache.size;\r\n  }\r\n\r\n  getStats(): { size: number, capacity: number } {\r\n    return {\r\n      size: this.cache.size,\r\n      capacity: this.capacity\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Enhanced transformation condition interface with all supported condition types.\r\n * \r\n * This interface supports both basic navigation-based conditions and advanced\r\n * PathAnalyzer-integrated conditions for sophisticated content adaptation.\r\n * \r\n * Basic Conditions:\r\n * - visitCount: Minimum number of visits to current node\r\n * - visitPattern: Specific sequence of nodes that must have been visited\r\n * - previouslyVisitedNodes: Set of nodes that must have been visited (any order)\r\n * - strangeAttractorsEngaged: Thematic attractors that must be engaged\r\n * - temporalPosition: Required temporal layer (past/present/future)\r\n * - endpointProgress: Progress toward philosophical endpoints\r\n * - revisitPattern: Specific revisit requirements for nodes\r\n * - characterBleed: Transition between different character perspectives\r\n * - journeyPattern: Recent navigation sequence matching\r\n * \r\n * Advanced PathAnalyzer Conditions:\r\n * - characterFocus: Character preference patterns and intensity analysis\r\n * - temporalFocus: Temporal layer focus patterns and progression analysis\r\n * - attractorAffinity: Thematic affinity patterns and continuity analysis\r\n * - attractorEngagement: Detailed engagement metrics and trend analysis\r\n * - recursivePattern: Recursive navigation patterns and strength analysis\r\n * - journeyFingerprint: Complete navigation style and behavioral patterns\r\n * \r\n * Logical Operators:\r\n * - anyOf: At least one condition must be true (OR)\r\n * - allOf: All conditions must be true (AND)\r\n * - not: Condition must be false (NOT)\r\n */\r\nexport interface TransformationCondition {\r\n  // Basic visit count threshold\r\n  visitCount?: number;\r\n  \r\n  // Sequence of nodes that must have been visited in order\r\n  visitPattern?: string[];\r\n  \r\n  // Set of nodes that must have been visited (in any order)\r\n  previouslyVisitedNodes?: string[];\r\n  \r\n  // Strange attractors that must be engaged\r\n  strangeAttractorsEngaged?: StrangeAttractor[];\r\n  \r\n  // Temporal position requirement (past, present, future)\r\n  temporalPosition?: TemporalLabel;\r\n  \r\n  // Endpoint progress conditions\r\n  endpointProgress?: {\r\n    orientation: EndpointOrientation;\r\n    minValue: number; // Minimum progress value (0-100)\r\n  };\r\n    // Revisit pattern - e.g., must have revisited a specific node at least N times\r\n  revisitPattern?: {\r\n    nodeId: string;\r\n    minVisits: number;\r\n  }[];\r\n  \r\n  // Character bleed condition - detects when previous node had different character\r\n  characterBleed?: boolean;\r\n    // Journey pattern condition - matches recent navigation sequences\r\n  journeyPattern?: string[];\r\n  \r\n  // Character focus condition - evaluates character preference patterns\r\n  characterFocus?: {\r\n    characters: Character[];\r\n    minFocusRatio?: number; // Default 0.4 (40%)\r\n    includeIntensity?: boolean; // Use character focus intensity metrics\r\n  };\r\n  \r\n  // Temporal focus condition - evaluates temporal layer focus patterns\r\n  temporalFocus?: {\r\n    temporalLayers: TemporalLabel[];\r\n    minFocusRatio?: number; // Default 0.4 (40%)\r\n    includeProgression?: boolean; // Check for chronological patterns\r\n  };\r\n  \r\n  // Attractor affinity condition - evaluates thematic affinity patterns\r\n  attractorAffinity?: {\r\n    attractors: StrangeAttractor[];\r\n    minAffinityRatio?: number; // Default 0.25 (25%)\r\n    includeThematicContinuity?: boolean; // Check thematic connections\r\n  };\r\n  \r\n  // Attractor engagement condition - evaluates engagement level conditions\r\n  attractorEngagement?: {\r\n    attractor: StrangeAttractor;\r\n    minEngagementScore?: number; // Default 50 (0-100 scale)\r\n    trendRequired?: 'rising' | 'falling' | 'stable' | 'any';\r\n  };\r\n  \r\n  // Recursive pattern condition - evaluates recursive navigation patterns\r\n  recursivePattern?: {\r\n    minPatternStrength?: number; // Default 0.6\r\n    maxPatternLength?: number; // Default 4\r\n    requireRecency?: boolean; // Pattern must be recent\r\n  };\r\n  \r\n  // Journey fingerprint condition - evaluates navigation style patterns\r\n  journeyFingerprint?: {\r\n    explorationStyle?: 'linear' | 'recursive' | 'wandering' | 'focused' | 'chaotic';\r\n    temporalPreference?: 'past-oriented' | 'present-focused' | 'future-seeking' | 'time-fluid';\r\n    narrativeApproach?: 'systematic' | 'intuitive' | 'thematic' | 'experimental';\r\n    minComplexityIndex?: number; // 0-1 scale\r\n    minFocusIndex?: number; // 0-1 scale\r\n  };\r\n  \r\n  // Logical operators for complex conditions\r\n  anyOf?: TransformationCondition[]; // At least one condition must be true\r\n  allOf?: TransformationCondition[]; // All conditions must be true\r\n  not?: TransformationCondition;     // Condition must be false\r\n}\r\n\r\n/**\r\n * Result of a transformation evaluation\r\n */\r\nexport interface TransformationResult {\r\n  shouldApply: boolean;\r\n  appliedTransformations: TextTransformation[];\r\n}\r\n\r\n/**\r\n * Cache key generation options\r\n */\r\ninterface CacheKeyOptions {\r\n  includeNodeState?: boolean;\r\n  includeReaderState?: boolean;\r\n  includeTransformations?: boolean;\r\n  contentPrefix?: number; // Number of characters from content to include in key\r\n}\r\n\r\n/**\r\n * Service class that handles the evaluation and application of transformation conditions\r\n * with enhanced caching and performance optimizations\r\n */\r\nexport class TransformationEngine {\r\n  // Cache for condition evaluation results - increased size for better hit rate\r\n  private conditionCache = new LRUCache<string, boolean>(500);\r\n  \r\n  // Cache for transformed text - increased size for better hit rate\r\n  private transformationCache = new LRUCache<string, string>(200);\r\n  \r\n  // Cache for batched transformation results (multiple transformations applied at once)\r\n  private batchedTransformationCache = new LRUCache<string, string>(100);\r\n  \r\n  // Cache hit/miss statistics\r\n  private stats = {\r\n    conditionEvaluations: 0,\r\n    conditionCacheHits: 0,\r\n    transformations: 0,\r\n    transformationCacheHits: 0,\r\n    batchedTransformations: 0,\r\n    batchedCacheHits: 0\r\n  };\r\n  \r\n  // Last modification timestamp for cache invalidation\r\n  private lastModificationTime: number = Date.now();\r\n\r\n  /**\r\n   * Create a hash key for condition caching with enhanced options\r\n   * This optimized version only includes the necessary data in the key\r\n   * to avoid cache misses due to irrelevant state changes\r\n   */\r\n  private getConditionCacheKey(\r\n    condition: TransformationCondition,\r\n    readerState: ReaderState,\r\n    nodeState: NodeState\r\n  ): string {\r\n    // Hash the condition object\r\n    const conditionHash = JSON.stringify(condition);    // Create a minimal reader state hash with only the parts that affect condition evaluation\r\n    const readerStateHash = JSON.stringify({\r\n      path: {\r\n        sequence: readerState.path.sequence,\r\n        revisitPatterns: readerState.path.revisitPatterns,\r\n        detailedVisits: readerState.path.detailedVisits, // Include for characterBleed condition\r\n        characterFocus: readerState.path.characterFocus, // Include for character focus conditions\r\n        temporalLayerFocus: readerState.path.temporalLayerFocus, // Include for temporal focus conditions\r\n        attractorsEngaged: readerState.path.attractorsEngaged // Include for attractor conditions\r\n      },\r\n      endpointProgress: readerState.endpointProgress\r\n    });\r\n    \r\n    // Create a minimal node state hash\r\n    const nodeStateHash = JSON.stringify({\r\n      id: nodeState.id,\r\n      visitCount: nodeState.visitCount,\r\n      temporalValue: nodeState.temporalValue,\r\n      strangeAttractors: nodeState.strangeAttractors\r\n    });\r\n    \r\n    // Combine the hashes with a version number for easy invalidation\r\n    return `v1:${nodeState.id}:${conditionHash}:${readerStateHash}:${nodeStateHash}`;\r\n  }\r\n  \r\n  /**\r\n   * Create a hash key for transformation caching\r\n   * Takes content and transformations into account\r\n   */\r\n  private getTransformationCacheKey(\r\n    content: string,\r\n    transformations: TextTransformation[],\r\n    options: CacheKeyOptions = {}\r\n  ): string {\r\n    const {\r\n      contentPrefix = 30,\r\n      includeTransformations = true\r\n    } = options;\r\n    \r\n    // Use a prefix of the content to keep key size reasonable\r\n    const contentHash = content.substring(0, contentPrefix);\r\n    \r\n    // For transformations, hash only the essential properties\r\n    const transformationsHash = includeTransformations\r\n      ? transformations.map(t =>\r\n          `${t.type}:${t.selector?.substring(0, 10)}:${t.priority}`\r\n        ).join('|')\r\n      : '';\r\n    \r\n    // Add a timestamp component for version-based invalidation\r\n    const versionComponent = Math.floor(this.lastModificationTime / 1000); // Seconds precision\r\n    \r\n    return `v1:${contentHash}:${transformations.length}:${versionComponent}:${transformationsHash}`;\r\n  }\r\n  \r\n  /**\r\n   * Invalidate all caches - call this when transformation rules change\r\n   */\r\n  public invalidateCaches(): void {\r\n    this.conditionCache.clear();\r\n    this.transformationCache.clear();\r\n    this.batchedTransformationCache.clear();\r\n    this.lastModificationTime = Date.now();\r\n  }\r\n  /**\r\n   * Core method to evaluate if a transformation should apply based on the condition\r\n   * and current reader and node state, with caching for performance\r\n   */\r\n  evaluateCondition(\r\n    condition: TransformationCondition,\r\n    readerState: ReaderState,\r\n    nodeState: NodeState\r\n  ): boolean {\r\n    this.stats.conditionEvaluations++;\r\n    \r\n    if (Object.keys(condition).length === 0) {\r\n      return true;\r\n    }\r\n    \r\n    const cacheKey = this.getConditionCacheKey(condition, readerState, nodeState);\r\n    const cachedResult = this.conditionCache.get(cacheKey);\r\n    \r\n    if (cachedResult !== undefined) {\r\n      this.stats.conditionCacheHits++;\r\n      return cachedResult;\r\n    }\r\n    \r\n    const result = this.evaluateConditionInternal(condition, readerState, nodeState);\r\n    this.conditionCache.put(cacheKey, result);\r\n    \r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Internal condition evaluation logic separated from caching concerns\r\n   */\r\n  private evaluateConditionInternal(\r\n    condition: TransformationCondition,\r\n    readerState: ReaderState,\r\n    nodeState: NodeState\r\n  ): boolean {\r\n    // Handle logical operators first\r\n    if (condition.allOf?.length) {\r\n      return condition.allOf.every(subCondition => \r\n        this.evaluateCondition(subCondition, readerState, nodeState)\r\n      );\r\n    }\r\n    \r\n    if (condition.anyOf?.length) {\r\n      return condition.anyOf.some(subCondition => \r\n        this.evaluateCondition(subCondition, readerState, nodeState)\r\n      );\r\n    }\r\n    \r\n    if (condition.not) {\r\n      return !this.evaluateCondition(condition.not, readerState, nodeState);\r\n    }\r\n    \r\n    // Use condition evaluators map for cleaner logic\r\n    return this.evaluateBasicConditions(condition, readerState, nodeState) &&\r\n           this.evaluateAdvancedConditions(condition, readerState, nodeState);\r\n  }\r\n\r\n  /**\r\n   * Evaluate basic navigation-based conditions\r\n   */\r\n  private evaluateBasicConditions(\r\n    condition: TransformationCondition,\r\n    readerState: ReaderState,\r\n    nodeState: NodeState\r\n  ): boolean {\r\n    const basicChecks = [\r\n      () => this.checkVisitCount(condition, nodeState),\r\n      () => this.checkPreviouslyVisitedNodes(condition, readerState),\r\n      () => this.checkVisitPattern(condition, readerState),\r\n      () => this.checkStrangeAttractors(condition, readerState),\r\n      () => this.checkTemporalPosition(condition, nodeState),\r\n      () => this.checkEndpointProgress(condition, readerState),\r\n      () => this.checkRevisitPattern(condition, readerState),\r\n      () => this.checkCharacterBleed(condition, readerState, nodeState),\r\n      () => this.checkJourneyPattern(condition, readerState)\r\n    ];\r\n\r\n    return basicChecks.every(check => check());\r\n  }\r\n\r\n  /**\r\n   * Evaluate advanced PathAnalyzer-based conditions\r\n   */\r\n  private evaluateAdvancedConditions(\r\n    condition: TransformationCondition,\r\n    readerState: ReaderState,\r\n    nodeState: NodeState\r\n  ): boolean {\r\n    const advancedChecks = [\r\n      () => !condition.characterFocus || this.checkCharacterFocus(condition.characterFocus, readerState, nodeState),\r\n      () => !condition.temporalFocus || this.checkTemporalFocus(condition.temporalFocus, readerState, nodeState),\r\n      () => !condition.attractorAffinity || this.checkAttractorAffinity(condition.attractorAffinity, readerState, nodeState),\r\n      () => !condition.attractorEngagement || this.checkAttractorEngagement(condition.attractorEngagement, readerState, nodeState),\r\n      () => !condition.recursivePattern || this.checkRecursivePattern(condition.recursivePattern, readerState, nodeState),\r\n      () => !condition.journeyFingerprint || this.checkJourneyFingerprint(condition.journeyFingerprint, readerState, nodeState)\r\n    ];\r\n\r\n    return advancedChecks.every(check => check());\r\n  }\r\n\r\n  /**\r\n   * Individual condition check methods\r\n   */\r\n  private checkVisitCount(condition: TransformationCondition, nodeState: NodeState): boolean {\r\n    return condition.visitCount === undefined || nodeState.visitCount >= condition.visitCount;\r\n  }\r\n\r\n  private checkPreviouslyVisitedNodes(condition: TransformationCondition, readerState: ReaderState): boolean {\r\n    if (!condition.previouslyVisitedNodes?.length) return true;\r\n    \r\n    const visitedNodes = readerState.path.sequence || [];\r\n    return condition.previouslyVisitedNodes.every(nodeId => visitedNodes.includes(nodeId));\r\n  }\r\n\r\n  private checkVisitPattern(condition: TransformationCondition, readerState: ReaderState): boolean {\r\n    return !condition.visitPattern?.length || \r\n           this.matchesPattern(condition.visitPattern, readerState.path.sequence);\r\n  }\r\n\r\n  private checkStrangeAttractors(condition: TransformationCondition, readerState: ReaderState): boolean {\r\n    return !condition.strangeAttractorsEngaged?.length || \r\n           this.checkAttractorsEngaged(condition.strangeAttractorsEngaged, readerState);\r\n  }\r\n\r\n  private checkTemporalPosition(condition: TransformationCondition, nodeState: NodeState): boolean {\r\n    return !condition.temporalPosition || \r\n           this.getNodeTemporalPosition(nodeState) === condition.temporalPosition;\r\n  }\r\n\r\n  private checkEndpointProgress(condition: TransformationCondition, readerState: ReaderState): boolean {\r\n    if (!condition.endpointProgress) return true;\r\n    \r\n    const { orientation, minValue } = condition.endpointProgress;\r\n    return readerState.endpointProgress?.[orientation] >= minValue;\r\n  }\r\n\r\n  private checkRevisitPattern(condition: TransformationCondition, readerState: ReaderState): boolean {\r\n    if (!condition.revisitPattern?.length) return true;\r\n    \r\n    const revisitPatterns = readerState.path.revisitPatterns || {};\r\n    return condition.revisitPattern.every(pattern => {\r\n      const visits = revisitPatterns[pattern.nodeId] || 0;\r\n      return visits >= pattern.minVisits;\r\n    });\r\n  }\r\n\r\n  private checkCharacterBleed(condition: TransformationCondition, readerState: ReaderState, nodeState: NodeState): boolean {\r\n    return !condition.characterBleed || this.hasCharacterBleed(readerState, nodeState);\r\n  }\r\n\r\n  private checkJourneyPattern(condition: TransformationCondition, readerState: ReaderState): boolean {\r\n    return !condition.journeyPattern?.length || \r\n           this.matchesJourneyPattern(condition.journeyPattern, readerState.path.sequence);\r\n  }\r\n\r\n  /**\r\n   * Renamed for clarity - checks if there is character bleed\r\n   */\r\n  private hasCharacterBleed(readerState: ReaderState, nodeState: NodeState): boolean {\r\n    if (!readerState.path.detailedVisits || readerState.path.detailedVisits.length < 2) {\r\n      return false;\r\n    }\r\n    \r\n    const previousVisit = readerState.path.detailedVisits[readerState.path.detailedVisits.length - 2];\r\n    return previousVisit.character !== nodeState.character;\r\n  }\r\n  \r\n  /**\r\n   * Checks if the reader's path matches a specific visit pattern\r\n   * The pattern must appear in the exact sequence, but doesn't need to be the most recent visits\r\n   */\r\n  private matchesPattern(pattern: string[], visitsSequence: string[]): boolean {\r\n    if (pattern.length === 0) return true;\r\n    if (visitsSequence.length === 0) return false;\r\n    \r\n    // Check for the pattern anywhere in the sequence\r\n    for (let i = 0; i <= visitsSequence.length - pattern.length; i++) {\r\n      let matches = true;\r\n      \r\n      for (let j = 0; j < pattern.length; j++) {\r\n        if (visitsSequence[i + j] !== pattern[j]) {\r\n          matches = false;\r\n          break;\r\n        }\r\n      }\r\n      \r\n      if (matches) return true;\r\n    }\r\n    \r\n    return false;\r\n  }\r\n  \r\n  /**\r\n   * Checks if all required strange attractors have been engaged by the reader\r\n   */\r\n  private checkAttractorsEngaged(\r\n    attractors: StrangeAttractor[],\r\n    readerState: ReaderState\r\n  ): boolean {\r\n    if (!attractors || !readerState.path) {\r\n      return false;\r\n    }\r\n    \r\n    const attractorsEngaged = readerState.path.attractorsEngaged || {};\r\n    \r\n    return attractors.every(attractor => {\r\n      const engagementCount = attractorsEngaged[attractor] || 0;\r\n      return engagementCount > 0;\r\n    });\r\n  }\r\n    /**\r\n   * Determines the temporal position (past, present, future) of a node\r\n   * based on its temporal value\r\n   */\r\n  private getNodeTemporalPosition(node: NodeState): TemporalLabel {\r\n    if (node.temporalValue <= 3) return 'past';\r\n    if (node.temporalValue <= 6) return 'present';    return 'future';\r\n  }\r\n  \r\n  /**\r\n   * Checks if the recent navigation sequence matches the provided journey pattern\r\n   * The pattern must appear at the end of the sequence (most recent visits)\r\n   */\r\n  private matchesJourneyPattern(pattern: string[], visitsSequence: string[]): boolean {\r\n    if (pattern.length === 0) return true;\r\n    if (visitsSequence.length < pattern.length) return false;\r\n    \r\n    // Check if the pattern matches the most recent visits\r\n    const recentVisits = visitsSequence.slice(-pattern.length);\r\n      for (let i = 0; i < pattern.length; i++) {\r\n      if (recentVisits[i] !== pattern[i]) {\r\n        return false;\r\n      }\r\n    }\r\n    \r\n    return true;\r\n  }\r\n  \r\n  /**\r\n   * Checks if character focus conditions are met\r\n   */\r\n  private checkCharacterFocus(\r\n    characterFocus: NonNullable<TransformationCondition['characterFocus']>,\r\n    readerState: ReaderState,\r\n    nodeState: NodeState\r\n  ): boolean {\r\n    const { characters, minFocusRatio = 0.4, includeIntensity = false } = characterFocus;\r\n    \r\n    if (includeIntensity) {\r\n      // Use PathAnalyzer's character focus intensity analysis\r\n      const characterIntensities = pathAnalyzer.calculateCharacterFocusIntensity(readerState, { [nodeState.id]: nodeState });\r\n      \r\n      return characters.some(character => {\r\n        const intensity = characterIntensities.find(ci => ci.character === character);\r\n        return intensity && intensity.intensity >= minFocusRatio;\r\n      });\r\n    } else {\r\n      // Simple focus ratio check\r\n      const { characterFocus: charFocus } = readerState.path;\r\n      if (!charFocus) return false;\r\n      \r\n      const totalVisits = readerState.path.detailedVisits?.length || 0;\r\n      if (totalVisits === 0) return false;\r\n      \r\n      return characters.some(character => {\r\n        const visits = (charFocus as Record<string, number>)[character] || 0;\r\n        const focusRatio = visits / totalVisits;\r\n        return focusRatio >= minFocusRatio;\r\n      });\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Checks if temporal focus conditions are met\r\n   */\r\n  private checkTemporalFocus(\r\n    temporalFocus: NonNullable<TransformationCondition['temporalFocus']>,\r\n    readerState: ReaderState,\r\n    nodeState: NodeState\r\n  ): boolean {\r\n    const { temporalLayers, minFocusRatio = 0.4, includeProgression = false } = temporalFocus;\r\n    \r\n    const { temporalLayerFocus } = readerState.path;\r\n    if (!temporalLayerFocus) return false;\r\n    \r\n    const totalVisits = readerState.path.detailedVisits?.length || 0;\r\n    if (totalVisits === 0) return false;\r\n    \r\n    // Check basic temporal focus\r\n    const hasBasicFocus = temporalLayers.some(layer => {\r\n      const visits = (temporalLayerFocus as Record<string, number>)[layer] || 0;\r\n      const focusRatio = visits / totalVisits;\r\n      return focusRatio >= minFocusRatio;\r\n    });\r\n    \r\n    if (!includeProgression) {\r\n      return hasBasicFocus;\r\n    }\r\n    \r\n    // Check for progression patterns using PathAnalyzer\r\n    const patterns = pathAnalyzer.analyzePathPatterns(readerState, { [nodeState.id]: nodeState });\r\n    const temporalPatterns = patterns.filter(p => p.type === 'temporal');\r\n    \r\n    return hasBasicFocus && temporalPatterns.some(p => p.strength >= 0.3);\r\n  }\r\n  \r\n  /**\r\n   * Checks if attractor affinity conditions are met\r\n   */\r\n  private checkAttractorAffinity(\r\n    attractorAffinity: NonNullable<TransformationCondition['attractorAffinity']>,\r\n    readerState: ReaderState,\r\n    nodeState: NodeState\r\n  ): boolean {\r\n    const { attractors, minAffinityRatio = 0.25, includeThematicContinuity = false } = attractorAffinity;\r\n    \r\n    const { attractorsEngaged } = readerState.path;\r\n    if (!attractorsEngaged) return false;\r\n    \r\n    const totalEngagements = Object.values(attractorsEngaged).reduce((sum: number, count: number) => sum + count, 0);\r\n    if (totalEngagements === 0) return false;\r\n    \r\n    // Check basic affinity\r\n    const hasBasicAffinity = attractors.some(attractor => {\r\n      const engagements = (attractorsEngaged as Record<string, number>)[attractor] || 0;\r\n      const affinityRatio = engagements / totalEngagements;\r\n      return affinityRatio >= minAffinityRatio;\r\n    });\r\n    \r\n    if (!includeThematicContinuity) {\r\n      return hasBasicAffinity;\r\n    }\r\n    \r\n    // Check for thematic continuity using PathAnalyzer\r\n    const patterns = pathAnalyzer.analyzePathPatterns(readerState, { [nodeState.id]: nodeState });\r\n    const thematicPatterns = patterns.filter(p => p.type === 'thematic');\r\n    \r\n    return hasBasicAffinity && thematicPatterns.some(p => p.strength >= 0.5);\r\n  }\r\n  \r\n  /**\r\n   * Checks if attractor engagement conditions are met\r\n   */\r\n  private checkAttractorEngagement(\r\n    attractorEngagement: NonNullable<TransformationCondition['attractorEngagement']>,\r\n    readerState: ReaderState,\r\n    nodeState: NodeState\r\n  ): boolean {\r\n    const { attractor, minEngagementScore = 50, trendRequired = 'any' } = attractorEngagement;\r\n    \r\n    // Use PathAnalyzer's attractor engagement analysis\r\n    const engagements = pathAnalyzer.calculateAttractorEngagement(readerState, { [nodeState.id]: nodeState });\r\n    \r\n    const engagement = engagements.find(e => e.attractor === attractor);\r\n    if (!engagement) return false;\r\n    \r\n    // Check engagement score\r\n    if (engagement.engagementScore < minEngagementScore) return false;\r\n    \r\n    // Check trend if specified\r\n    if (trendRequired !== 'any' && engagement.trend !== trendRequired) return false;\r\n    \r\n    return true;\r\n  }\r\n  \r\n  /**\r\n   * Checks if recursive pattern conditions are met\r\n   */\r\n  private checkRecursivePattern(\r\n    recursivePattern: NonNullable<TransformationCondition['recursivePattern']>,\r\n    readerState: ReaderState,\r\n    nodeState: NodeState\r\n  ): boolean {\r\n    const { minPatternStrength = 0.6, maxPatternLength = 4, requireRecency = false } = recursivePattern;\r\n    \r\n    // Use PathAnalyzer's recursive pattern analysis\r\n    const patterns = pathAnalyzer.analyzeRecursivePatterns(readerState, { [nodeState.id]: nodeState });\r\n    \r\n    if (patterns.length === 0) return false;\r\n    \r\n    // Filter patterns by criteria\r\n    const validPatterns = patterns.filter(pattern => {\r\n      // Check strength\r\n      if (pattern.strength < minPatternStrength) return false;\r\n      \r\n      // Check length\r\n      if (pattern.length > maxPatternLength) return false;\r\n      \r\n      // Check recency if required\r\n      if (requireRecency) {\r\n        const recentThreshold = readerState.path.sequence.length * 0.7;\r\n        if (pattern.lastOccurrenceIndex < recentThreshold) return false;\r\n      }\r\n      \r\n      return true;\r\n    });\r\n    \r\n    return validPatterns.length > 0;\r\n  }\r\n  \r\n  /**\r\n   * Checks if journey fingerprint conditions are met\r\n   */\r\n  private checkJourneyFingerprint(\r\n    journeyFingerprint: NonNullable<TransformationCondition['journeyFingerprint']>,\r\n    readerState: ReaderState,\r\n    nodeState: NodeState\r\n  ): boolean {\r\n    const {\r\n      explorationStyle,\r\n      temporalPreference,\r\n      narrativeApproach,\r\n      minComplexityIndex,\r\n      minFocusIndex\r\n    } = journeyFingerprint;\r\n    \r\n    // Use PathAnalyzer's journey fingerprint analysis\r\n    const fingerprint = pathAnalyzer.generateJourneyFingerprint(readerState, { [nodeState.id]: nodeState });\r\n    \r\n    // Check exploration style\r\n    if (explorationStyle && fingerprint.explorationStyle !== explorationStyle) {\r\n      return false;\r\n    }\r\n    \r\n    // Check temporal preference\r\n    if (temporalPreference && fingerprint.temporalPreference !== temporalPreference) {\r\n      return false;\r\n    }\r\n    \r\n    // Check narrative approach\r\n    if (narrativeApproach && fingerprint.narrativeApproach !== narrativeApproach) {\r\n      return false;\r\n    }\r\n    \r\n    // Check complexity index\r\n    if (minComplexityIndex !== undefined && fingerprint.complexityIndex < minComplexityIndex) {\r\n      return false;\r\n    }\r\n    \r\n    // Check focus index\r\n    if (minFocusIndex !== undefined && fingerprint.focusIndex < minFocusIndex) {\r\n      return false;\r\n    }\r\n    \r\n    return true;\r\n  }\r\n  \r\n  /**\r\n   * Evaluates a transformation rule against the current reader and node state\r\n   * Returns whether the transformation should be applied and the applicable transformations\r\n   * Enhanced with better caching for improved performance\r\n   */\r\n  evaluateTransformation(\r\n    rule: { condition: TransformationCondition; transformations: TextTransformation[] },\r\n    readerState: ReaderState,\r\n    nodeState: NodeState\r\n  ): TransformationResult {\r\n    // Generate rule-specific cache key that doesn't include the entire rule JSON\r\n    const ruleCacheKey = `rule:${JSON.stringify(rule.condition)}:${nodeState.id}:${nodeState.visitCount}`;\r\n    \r\n    // Check cache first\r\n    const cachedResult = this.conditionCache.get(ruleCacheKey);\r\n    if (cachedResult !== undefined) {\r\n      this.stats.conditionCacheHits++;\r\n      return {\r\n        shouldApply: cachedResult,\r\n        appliedTransformations: cachedResult ? rule.transformations : []\r\n      };\r\n    }\r\n    \r\n    // Not found in cache, evaluate condition\r\n    this.stats.conditionEvaluations++;\r\n    const shouldApply = this.evaluateCondition(rule.condition, readerState, nodeState);\r\n    \r\n    // Cache the result\r\n    this.conditionCache.put(ruleCacheKey, shouldApply);\r\n    \r\n    return {\r\n      shouldApply,\r\n      appliedTransformations: shouldApply ? rule.transformations : []\r\n    };\r\n  }\r\n  \r\n  /**\r\n   * Batch evaluates multiple transformation rules and returns all applicable transformations\r\n   */\r\n  evaluateAllTransformations(\r\n    rules: Array<{ condition: TransformationCondition; transformations: TextTransformation[] }>,\r\n    readerState: ReaderState,\r\n    nodeState: NodeState\r\n  ): TextTransformation[] {\r\n    return rules\r\n      .filter(rule => this.evaluateCondition(rule.condition, readerState, nodeState))\r\n      .flatMap(rule => rule.transformations);\r\n  }\r\n  \r\n  /**\r\n   * Applies a text transformation to the given content with enhanced caching\r\n   * Refactored to reduce cognitive complexity by delegating each transformation type to a helper method\r\n   */\r\n  applyTextTransformation(content: string, transformation: TextTransformation): string {\r\n    if (!transformation.selector) return content;\r\n    if (content.includes('data-transform-type') && content.length > 10000) {\r\n      console.warn('[TransformationEngine] Content appears heavily transformed, skipping to prevent infinite loop');\r\n      return content;\r\n    }\r\n    this.stats.transformations++;\r\n    const transformCacheKey = this.getTransformationCacheKey(content, [transformation], {\r\n      contentPrefix: 50,\r\n      includeTransformations: true\r\n    });\r\n    const cachedTransformation = this.transformationCache.get(transformCacheKey);\r\n    if (cachedTransformation !== undefined) {\r\n      this.stats.transformationCacheHits++;\r\n      return cachedTransformation;\r\n    }\r\n    let result: string;\r\n    switch (transformation.type) {\r\n      case 'replace':\r\n        result = this.applyReplaceTransformation(content, transformation);\r\n        break;\r\n      case 'fragment':\r\n        result = this.applyFragmentTransformation(content, transformation);\r\n        break;\r\n      case 'expand':\r\n        result = this.applyExpandTransformation(content, transformation);\r\n        break;\r\n      case 'emphasize':\r\n        result = this.applyEmphasizeTransformation(content, transformation);\r\n        break;\r\n      case 'metaComment':\r\n        result = this.applyMetaCommentTransformation(content, transformation);\r\n        break;\r\n      default:\r\n        result = content;\r\n    }\r\n    this.transformationCache.put(transformCacheKey, result);\r\n    return result;\r\n  }\r\n\r\n  // --- Helper methods for each transformation type ---\r\n\r\n  private applyReplaceTransformation(content: string, transformation: TextTransformation): string {\r\n    const replacement = transformation.replacement || '';\r\n    const escapedSelector = this.escapeRegExp(transformation.selector!);\r\n    const selectorRegex = new RegExp(escapedSelector, 'g');\r\n    if (\r\n      transformation.preserveFormatting &&\r\n      (transformation.selector!.includes('*') ||\r\n        transformation.selector!.includes('_') ||\r\n        transformation.selector!.includes('`'))\r\n    ) {\r\n      const markdownRegex = /(\\*\\*|\\*|__|_|`{3}|`)/g;\r\n      const formatMarkers = transformation.selector!.match(markdownRegex) || [];\r\n      let replacementWithFormat = replacement;\r\n      formatMarkers.forEach(marker => {\r\n        if (!replacementWithFormat.includes(marker)) {\r\n          replacementWithFormat = `${marker}${replacementWithFormat}${marker}`;\r\n        }\r\n      });\r\n      return content.replace(selectorRegex, replacementWithFormat);\r\n    }\r\n    return content.replace(selectorRegex, replacement);\r\n  }\r\n\r\n  private applyFragmentTransformation(content: string, transformation: TextTransformation): string {\r\n    if (!transformation.fragmentPattern) return content;\r\n    const fragmentPattern = transformation.fragmentPattern;\r\n    const fragmentStyle = transformation.fragmentStyle || 'character';\r\n    let fragmentedText = '';\r\n    switch (fragmentStyle) {\r\n      case 'character':\r\n        fragmentedText = transformation.selector!.split('').join(fragmentPattern);\r\n        break;\r\n      case 'word':\r\n        fragmentedText = transformation.selector!.split(' ').join(` ${fragmentPattern} `);\r\n        break;\r\n      case 'progressive': {\r\n        const chars = transformation.selector!.split('');\r\n        fragmentedText = chars\r\n          .map((char, index) => {\r\n            const fragmentCount = Math.floor(index / (chars.length / 5)) + 1;\r\n            return char + fragmentPattern.repeat(fragmentCount);\r\n          })\r\n          .join('');\r\n        break;\r\n      }\r\n      default:\r\n        fragmentedText = transformation.selector!.split('').join(fragmentPattern);\r\n    }\r\n    const escapedSelector = this.escapeRegExp(transformation.selector!);\r\n    const selectorRegex = new RegExp(escapedSelector, 'g');\r\n    return content.replace(selectorRegex, fragmentedText);\r\n  }\r\n\r\n  private applyExpandTransformation(content: string, transformation: TextTransformation): string {\r\n    const replacement = transformation.replacement || '';\r\n    const expandStyle = transformation.expandStyle || 'append';\r\n    const escapedSelector = this.escapeRegExp(transformation.selector!);\r\n    const selectorRegex = new RegExp(escapedSelector, 'g');\r\n    switch (expandStyle) {\r\n      case 'append':\r\n        return content.replace(selectorRegex, `${transformation.selector} ${replacement}`);\r\n      case 'inline':\r\n        return content.replace(\r\n          selectorRegex,\r\n          `${transformation.selector} <span class=\"narramorph-inline-expansion\">[${replacement}]</span>`\r\n        );\r\n      case 'paragraph':\r\n        return content.replace(\r\n          selectorRegex,\r\n          `${transformation.selector}\\n\\n<div class=\"narramorph-paragraph-expansion\">${replacement}</div>`\r\n        );\r\n      case 'reveal':\r\n        return content.replace(\r\n          selectorRegex,\r\n          `${transformation.selector} <span class=\"narramorph-reveal-expansion\">${replacement}</span>`\r\n        );\r\n      default:\r\n        return content.replace(selectorRegex, `${transformation.selector} ${replacement}`);\r\n    }\r\n  }\r\n\r\n  private applyEmphasizeTransformation(content: string, transformation: TextTransformation): string {\r\n    let emphasizedText = transformation.selector!;\r\n    const intensity = transformation.intensity || 1;\r\n    switch (transformation.emphasis) {\r\n      case 'italic':\r\n        emphasizedText = intensity > 1\r\n          ? `<em class=\"intensity-${intensity}\">${transformation.selector}</em>`\r\n          : `*${transformation.selector}*`;\r\n        break;\r\n      case 'bold':\r\n        emphasizedText = intensity > 1\r\n          ? `<strong class=\"intensity-${intensity}\">${transformation.selector}</strong>`\r\n          : `**${transformation.selector}**`;\r\n        break;\r\n      case 'color':\r\n        emphasizedText = `<span class=\"emphasized-text intensity-${intensity}\">${transformation.selector}</span>`;\r\n        break;\r\n      case 'spacing': {\r\n        const spacer = ' '.repeat(intensity);\r\n        emphasizedText = transformation.selector!.split('').join(spacer);\r\n        break;\r\n      }\r\n      case 'highlight':\r\n        emphasizedText = `<mark class=\"intensity-${intensity}\">${transformation.selector}</mark>`;\r\n        break;\r\n      case 'glitch':\r\n        emphasizedText = `<span class=\"glitch-text intensity-${intensity}\" data-text=\"${transformation.selector}\">${transformation.selector}</span>`;\r\n        break;\r\n      case 'fade':\r\n        emphasizedText = `<span class=\"fade-text intensity-${intensity}\">${transformation.selector}</span>`;\r\n        break;\r\n    }\r\n    const escapedSelector = this.escapeRegExp(transformation.selector!);\r\n    const selectorRegex = new RegExp(escapedSelector, 'g');\r\n    return content.replace(selectorRegex, emphasizedText);\r\n  }\r\n\r\n  private applyMetaCommentTransformation(content: string, transformation: TextTransformation): string {\r\n    const commentStyle = transformation.commentStyle || 'inline';\r\n    const commentText = transformation.replacement || '';\r\n    const escapedSelector = this.escapeRegExp(transformation.selector!);\r\n    const selectorRegex = new RegExp(escapedSelector, 'g');\r\n    switch (commentStyle) {\r\n      case 'inline':\r\n        return content.replace(\r\n          selectorRegex,\r\n          `${transformation.selector} <span class=\"narramorph-comment\">[${commentText}]</span>`\r\n        );\r\n      case 'footnote': {\r\n        const footnoteId = `footnote-${this.generateShortHash(transformation.selector!)}`;\r\n        const hasFootnotes = content.includes('<div class=\"narramorph-footnotes\">');\r\n        let contentWithFootnote = content.replace(\r\n          selectorRegex,\r\n          `${transformation.selector}<sup class=\"narramorph-footnote-marker\" id=\"${footnoteId}-ref\">[†]</sup>`\r\n        );\r\n        if (hasFootnotes) {\r\n          const footnoteInsertRegex = /<\\/div>\\s*<div class=\"narramorph-footnotes\">/;\r\n          if (footnoteInsertRegex.test(contentWithFootnote)) {\r\n            contentWithFootnote = contentWithFootnote.replace(\r\n              footnoteInsertRegex,\r\n              `</div>\\n\\n<div class=\"narramorph-footnotes\">\\n<p id=\"${footnoteId}\" class=\"narramorph-footnote\">† <a href=\"#${footnoteId}-ref\">↩</a> ${commentText}</p>`\r\n            );\r\n          } else {\r\n            contentWithFootnote += `\\n\\n<p id=\"${footnoteId}\" class=\"narramorph-footnote\">† <a href=\"#${footnoteId}-ref\">↩</a> ${commentText}</p>`;\r\n          }\r\n        } else {\r\n          contentWithFootnote += `\\n\\n<div class=\"narramorph-footnotes\">\\n<p id=\"${footnoteId}\" class=\"narramorph-footnote\">† <a href=\"#${footnoteId}-ref\">↩</a> ${commentText}</p>\\n</div>`;\r\n        }\r\n        return contentWithFootnote;\r\n      }\r\n      case 'marginalia':\r\n        // Add comment as marginalia\r\n        return content.replace(\r\n          selectorRegex,\r\n          `<span class=\"narramorph-marginalia-container\">${transformation.selector}<span class=\"narramorph-marginalia\">${commentText}</span></span>`\r\n        );\r\n        \r\n      case 'interlinear':\r\n        // Add comment between lines of text\r\n        return content.replace(\r\n          selectorRegex,\r\n          `<div class=\"narramorph-interlinear-container\">${transformation.selector}<div class=\"narramorph-interlinear\">${commentText}</div></div>`\r\n        );\r\n        \r\n      default:\r\n        return content.replace(\r\n          selectorRegex,\r\n          `${transformation.selector} [${commentText}]`\r\n        );\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Helper function to escape special regex characters in a string\r\n   */\r\n  private escapeRegExp(string: string): string {\r\n    return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n  }\r\n  \r\n  /**\r\n   * Generate a short hash for a string, useful for creating unique IDs\r\n   */\r\n  private generateShortHash(str: string): string {\r\n    let hash = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n      const char = str.charCodeAt(i);\r\n      hash = ((hash << 5) - hash) + char;\r\n      hash = hash & hash; // Convert to 32bit integer\r\n    }\r\n    return Math.abs(hash).toString(36).substring(0, 6);\r\n  }\r\n  \r\n  /**\r\n   * Applies multiple transformations to content with enhanced caching and batching\r\n   * for improved performance\r\n   */\r\n  applyTransformations(content: string, transformations: TextTransformation[]): string {\r\n    // Quick return for empty cases\r\n    if (!content) {\r\n      console.warn('Content is empty or undefined');\r\n      return '';\r\n    }\r\n    \r\n    if (!Array.isArray(transformations) || transformations.length === 0) {\r\n      return content;\r\n    }\r\n\r\n    // Prevent infinite loops by checking if content is already heavily transformed\r\n    if (content.includes('data-transform-type') && \r\n        (content.length > 15000 || transformations.length > 20)) {\r\n      console.warn('[TransformationEngine] Content appears heavily transformed or too many transformations, skipping batch to prevent infinite loop');\r\n      return content;\r\n    }\r\n    \r\n    this.stats.batchedTransformations++;\r\n    \r\n    // Generate an optimized cache key for this set of transformations\r\n    const batchCacheKey = this.getTransformationCacheKey(content, transformations);\r\n    \r\n    // Check batched transformations cache first\r\n    const cachedBatchResult = this.batchedTransformationCache.get(batchCacheKey);\r\n    if (cachedBatchResult !== undefined) {\r\n      this.stats.batchedCacheHits++;\r\n      return cachedBatchResult;\r\n    }\r\n    \r\n    try {\r\n      // First sort transformations by priority to ensure consistent application order\r\n      // This ensures cache hits even if transformations are provided in different orders\r\n      const sortedTransformations = [...transformations].sort((a, b) => {\r\n        // Convert string priority to numeric value\r\n        const getPriorityValue = (p?: string) => {\r\n          if (p === 'high') return 3;\r\n          if (p === 'medium') return 2;\r\n          if (p === 'low') return 1;\r\n          return 0;\r\n        };\r\n        return getPriorityValue(b.priority) - getPriorityValue(a.priority);\r\n      });\r\n      \r\n      // Apply transformations in batches for better performance\r\n      // This reduces the number of string manipulations\r\n      const result = sortedTransformations.reduce(\r\n        (currentContent, transformation) =>\r\n          this.applyTextTransformation(currentContent, transformation),\r\n        content\r\n      );\r\n      \r\n      // Cache the result in the batched cache\r\n      this.batchedTransformationCache.put(batchCacheKey, result);\r\n        return result;\r\n    } catch (error) {\r\n      console.error('Error applying transformations:', error);\r\n      return content; // Return original content on error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Applies character bleed transformations to content based on character transition effects\r\n   * @param content The content to transform\r\n   * @param nodeState The current node state \r\n   * @param readerState The current reader state\r\n   * @param characterBleedEffects Array of character bleed effects from CharacterBleedService\r\n   * @returns Transformed content with character bleed effects applied\r\n   */\r\n  applyCharacterBleedTransformations(\r\n    content: string,\r\n    nodeState: NodeState,\r\n    readerState: ReaderState,\r\n    characterBleedEffects: CharacterBleedEffect[]\r\n  ): string {\r\n    // Quick validation\r\n    if (!content) {\r\n      console.warn('[TransformationEngine] applyCharacterBleedTransformations: Content is empty');\r\n      return '';\r\n    }\r\n\r\n    if (!Array.isArray(characterBleedEffects) || characterBleedEffects.length === 0) {\r\n      console.log('[TransformationEngine] applyCharacterBleedTransformations: No character bleed effects to apply');\r\n      return content;\r\n    }\r\n\r\n    try {\r\n      console.log(`[TransformationEngine] Applying ${characterBleedEffects.length} character bleed transformations to node ${nodeState.id}`);      // Extract TextTransformation objects from CharacterBleedEffect array\r\n      // and enhance them with proper priority ordering\r\n      const bleedTransformations: TextTransformation[] = characterBleedEffects.map((effect, index) => {\r\n        const transformation = { ...effect.transformation };\r\n        \r\n        // Set high priority for character bleed effects to ensure they're applied first\r\n        if (!transformation.priority) {\r\n          transformation.priority = 'high';\r\n        }\r\n\r\n        console.log(`[TransformationEngine] Character bleed transformation ${index + 1}: ${effect.type} on \"${effect.selector.substring(0, 30)}...\" (${effect.sourceCharacter} → ${effect.targetCharacter})`);\r\n\r\n        return transformation;\r\n      });\r\n\r\n      // Generate cache key for character bleed transformations\r\n      const bleedCacheKey = this.getCharacterBleedCacheKey(\r\n        content, \r\n        nodeState, \r\n        readerState, \r\n        characterBleedEffects\r\n      );\r\n\r\n      // Check cache first\r\n      const cachedResult = this.batchedTransformationCache.get(bleedCacheKey);\r\n      if (cachedResult !== undefined) {\r\n        this.stats.batchedCacheHits++;\r\n        console.log('[TransformationEngine] Character bleed transformations retrieved from cache');\r\n        return cachedResult;\r\n      }\r\n\r\n      // Apply transformations using existing pipeline with enhanced error handling\r\n      const transformedContent = this.applyTransformations(content, bleedTransformations);\r\n\r\n      // Cache the result\r\n      this.batchedTransformationCache.put(bleedCacheKey, transformedContent);\r\n\r\n      console.log(`[TransformationEngine] Successfully applied character bleed transformations. Content length: ${content.length} → ${transformedContent.length}`);\r\n\r\n      return transformedContent;\r\n\r\n    } catch (error) {\r\n      console.error('[TransformationEngine] Error applying character bleed transformations:', error);\r\n      console.error('[TransformationEngine] Effects that failed:', characterBleedEffects.map(e => ({\r\n        type: e.type,\r\n        selector: e.selector.substring(0, 30),\r\n        sourceCharacter: e.sourceCharacter,\r\n        targetCharacter: e.targetCharacter\r\n      })));\r\n      \r\n      // Return original content on error to prevent breaking the application\r\n      return content;\r\n    }\r\n  }\r\n  /**\r\n   * Generates a cache key specifically for character bleed transformations\r\n   * @param content The content being transformed\r\n   * @param nodeState The current node state\r\n   * @param readerState The current reader state  \r\n   * @param characterBleedEffects The character bleed effects being applied\r\n   * @returns Cache key string\r\n   */\r\n  private getCharacterBleedCacheKey(\r\n    content: string,\r\n    nodeState: NodeState,\r\n    readerState: ReaderState,\r\n    characterBleedEffects: CharacterBleedEffect[]\r\n  ): string {\r\n    // Create a compact cache key that captures the essential elements\r\n    const contentHash = content.substring(0, 50); // First 50 chars of content\r\n    const nodeKey = `${nodeState.id}:${nodeState.character}:${nodeState.visitCount}`;\r\n    \r\n    // Get the last visited character to capture the transition\r\n    const detailedVisits = readerState.path.detailedVisits || [];\r\n    const lastVisitedCharacter = detailedVisits.length >= 2\r\n      ? detailedVisits[detailedVisits.length - 2].character\r\n      : 'none';\r\n    \r\n    // Create a hash of the bleed effects\r\n    const effectsHash = characterBleedEffects\r\n      .map(e => `${e.type}:${e.selector.substring(0, 10)}:${e.sourceCharacter}:${e.targetCharacter}:${e.intensity}`)\r\n      .join('|');\r\n    \r\n    const transitionKey = `${lastVisitedCharacter}→${nodeState.character}`;\r\n    \r\n    return `bleed:${contentHash}:${nodeKey}:${transitionKey}:${effectsHash}:${this.lastModificationTime}`;\r\n  }\r\n  \r\n  /**\r\n   * Clears all caches - useful when content or conditions change significantly\r\n   */\r\n  clearCaches(): void {\r\n    this.conditionCache.clear();\r\n    this.transformationCache.clear();\r\n    this.batchedTransformationCache.clear();\r\n    this.stats = {\r\n      conditionEvaluations: 0,\r\n      conditionCacheHits: 0,\r\n      transformations: 0,\r\n      transformationCacheHits: 0,\r\n      batchedTransformations: 0,\r\n      batchedCacheHits: 0\r\n    };\r\n  }\r\n  \r\n  /**\r\n   * Returns cache statistics for monitoring performance\r\n   */  /**\r\n   * Returns comprehensive cache statistics for monitoring performance\r\n   */\r\n  getCacheStats(): {\r\n    conditionCache: { size: number, capacity: number, hitRate: number },\r\n    transformationCache: { size: number, capacity: number, hitRate: number },\r\n    batchedTransformationCache: { size: number, capacity: number, hitRate: number }\r\n  } {\r\n    return {\r\n      conditionCache: {\r\n        ...this.conditionCache.getStats(),\r\n        hitRate: this.stats.conditionEvaluations > 0\r\n          ? this.stats.conditionCacheHits / this.stats.conditionEvaluations\r\n          : 0\r\n      },\r\n      transformationCache: {\r\n        ...this.transformationCache.getStats(),\r\n        hitRate: this.stats.transformations > 0\r\n          ? this.stats.transformationCacheHits / this.stats.transformations\r\n          : 0\r\n      },\r\n      batchedTransformationCache: {\r\n        ...this.batchedTransformationCache.getStats(),\r\n        hitRate: this.stats.batchedTransformations > 0\r\n          ? this.stats.batchedCacheHits / this.stats.batchedTransformations\r\n          : 0\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Applies journey-based transformations to content based on detected patterns from PathAnalyzer\r\n   * @param content The content to transform\r\n   * @param nodeState The current node state\r\n   * @param readerState The current reader state  \r\n   * @param patterns Array of reading patterns from PathAnalyzer\r\n   * @returns Array of TextTransformation objects for applying to content\r\n   */\r\n  applyJourneyTransformations(\r\n    content: string,\r\n    nodeState: NodeState,\r\n    readerState: ReaderState,\r\n    patterns: ReadingPattern[]\r\n  ): TextTransformation[] {\r\n    // Quick validation\r\n    if (!content || !patterns || patterns.length === 0) {\r\n      console.log('[TransformationEngine] applyJourneyTransformations: No patterns to apply');\r\n      return [];\r\n    }\r\n\r\n    try {\r\n      console.log(`[TransformationEngine] Applying journey transformations for ${patterns.length} patterns to node ${nodeState.id}`);\r\n\r\n      // Generate cache key for journey transformations\r\n      const journeyCacheKey = this.getJourneyCacheKey(content, nodeState, readerState, patterns);\r\n\r\n      // Check cache first  \r\n      const cachedResult = this.batchedTransformationCache.get(journeyCacheKey);\r\n      if (cachedResult !== undefined) {\r\n        this.stats.batchedCacheHits++;\r\n        console.log('[TransformationEngine] Journey transformations retrieved from cache');\r\n        return this.parseTransformationsFromCachedContent(cachedResult);\r\n      }\r\n\r\n      const transformations: TextTransformation[] = [];\r\n\r\n      // Process each pattern type and generate appropriate transformations\r\n      patterns.forEach((pattern, index) => {\r\n        console.log(`[TransformationEngine] Processing pattern ${index + 1}: ${pattern.type} (strength: ${pattern.strength})`);\r\n\r\n        switch (pattern.type) {\r\n          case 'sequence':\r\n            transformations.push(...this.createRecursiveSequenceTransformations(pattern, nodeState, readerState));\r\n            break;\r\n\r\n          case 'character':\r\n            transformations.push(...this.createCharacterFocusTransformations(pattern, nodeState, readerState));\r\n            break;\r\n\r\n          case 'temporal':\r\n            transformations.push(...this.createTemporalPatternTransformations(pattern, nodeState, readerState));\r\n            break;\r\n\r\n          case 'thematic':\r\n            transformations.push(...this.createThematicContinuityTransformations(pattern, nodeState, readerState));\r\n            break;\r\n\r\n          case 'rhythm':\r\n            // Rhythm patterns could add pacing-based transformations\r\n            transformations.push(...this.createRhythmPatternTransformations(pattern, nodeState, readerState));\r\n            break;\r\n\r\n          default:\r\n            console.warn(`[TransformationEngine] Unknown pattern type: ${pattern.type}`);\r\n        }\r\n      });\r\n\r\n      // Filter out invalid transformations and limit for performance\r\n      const validTransformations = transformations\r\n        .filter(t => t.selector && t.selector.length > 0)\r\n        .slice(0, 8); // Limit to prevent overwhelming content\r\n\r\n      // Cache the transformations by storing a reference string\r\n      const transformationsCacheData = JSON.stringify(validTransformations);\r\n      this.batchedTransformationCache.put(journeyCacheKey, transformationsCacheData);\r\n\r\n      console.log(`[TransformationEngine] Generated ${validTransformations.length} journey transformations`);\r\n\r\n      return validTransformations;\r\n\r\n    } catch (error) {\r\n      console.error('[TransformationEngine] Error in applyJourneyTransformations:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generates a cache key specifically for journey transformations\r\n   */\r\n  private getJourneyCacheKey(\r\n    content: string,\r\n    nodeState: NodeState,\r\n    readerState: ReaderState,\r\n    patterns: ReadingPattern[]\r\n  ): string {\r\n    const contentHash = content.substring(0, 50);\r\n    const nodeKey = `${nodeState.id}:${nodeState.character}:${nodeState.visitCount}`;\r\n    \r\n    // Create pattern signature  \r\n    const patternSignature = patterns\r\n      .map(p => `${p.type}:${p.strength.toFixed(2)}:${(p.relatedNodes || []).length}`)\r\n      .join('|');\r\n\r\n    // Recent path for context\r\n    const recentPath = readerState.path.sequence.slice(-5).join('→');\r\n    \r\n    return `journey:${contentHash}:${nodeKey}:${recentPath}:${patternSignature}:${this.lastModificationTime}`;\r\n  }\r\n\r\n  /**\r\n   * Creates transformations for recursive sequence patterns\r\n   * Generates meta-commentary about pattern recognition\r\n   */\r\n  private createRecursiveSequenceTransformations(\r\n    pattern: ReadingPattern,\r\n    nodeState: NodeState,\r\n    readerState: ReaderState\r\n  ): TextTransformation[] {\r\n    const transformations: TextTransformation[] = [];\r\n\r\n    // Get detailed recursive patterns for this analysis\r\n    const recursivePatterns: RecursivePattern[] = pathAnalyzer.analyzeRecursivePatterns(readerState, { [nodeState.id]: nodeState });\r\n    const strongPatterns = recursivePatterns.filter(p => p.strength >= 0.6);\r\n\r\n    if (strongPatterns.length > 0) {\r\n      // Add meta-commentary about pattern recognition\r\n      transformations.push({\r\n        type: 'metaComment',\r\n        selector: 'pattern',\r\n        replacement: `recursive navigation detected: ${strongPatterns[0].sequence.join('→')} (×${strongPatterns[0].occurrences})`,\r\n        commentStyle: 'marginalia',\r\n        intensity: Math.ceil(pattern.strength * 3),\r\n        priority: 'high'\r\n      });\r\n\r\n      // For very strong patterns, add fragmentation to show algorithmic recognition\r\n      if (pattern.strength > 0.8) {\r\n        transformations.push({\r\n          type: 'fragment',\r\n          selector: 'recognition',\r\n          fragmentPattern: '...',\r\n          fragmentStyle: 'progressive',\r\n          intensity: 2,\r\n          priority: 'medium'\r\n        });\r\n      }\r\n\r\n      // Emphasize repeated elements if this node is part of the pattern\r\n      if (strongPatterns.some(p => p.sequence.includes(nodeState.id))) {\r\n        transformations.push({\r\n          type: 'emphasize',\r\n          selector: 'loop',\r\n          emphasis: 'color',\r\n          intensity: 2,\r\n          priority: 'medium'\r\n        });\r\n      }\r\n    }\r\n\r\n    return transformations;\r\n  }\r\n\r\n  /**\r\n   * Creates transformations for character focus patterns\r\n   * Generates perspective bleeding effects  \r\n   */\r\n  private createCharacterFocusTransformations(\r\n    pattern: ReadingPattern,\r\n    nodeState: NodeState,\r\n    readerState: ReaderState\r\n  ): TextTransformation[] {\r\n    const transformations: TextTransformation[] = [];\r\n\r\n    // Get character focus intensity data\r\n    const characterIntensities: CharacterFocusIntensity[] = pathAnalyzer.calculateCharacterFocusIntensity(readerState, { [nodeState.id]: nodeState });\r\n    const focusedCharacters = characterIntensities.filter(ci => ci.intensity >= 0.4);\r\n\r\n    if (focusedCharacters.length > 0 && pattern.relatedCharacters) {\r\n      const dominantCharacter = focusedCharacters[0].character;\r\n      \r\n      // Create perspective bleeding effects\r\n      if (dominantCharacter !== nodeState.character) {\r\n        transformations.push({\r\n          type: 'metaComment',\r\n          selector: 'perspective',\r\n          replacement: `${dominantCharacter} perspective bleeding through (focus: ${Math.round(focusedCharacters[0].intensity * 100)}%)`,\r\n          commentStyle: 'interlinear',\r\n          intensity: Math.ceil(pattern.strength * 3),\r\n          priority: 'high'\r\n        });\r\n\r\n        // Add character-specific emphasis\r\n        transformations.push({\r\n          type: 'emphasize',\r\n          selector: 'I',\r\n          emphasis: 'glitch',\r\n          intensity: 2,\r\n          priority: 'medium'\r\n        });\r\n      }\r\n\r\n      // For high intensity focus, add perspective shift commentary\r\n      if (focusedCharacters[0].intensity > 0.7) {\r\n        transformations.push({\r\n          type: 'expand',\r\n          selector: 'thought',\r\n          replacement: `[${dominantCharacter} cognitive patterns emerging]`,\r\n          expandStyle: 'inline',\r\n          priority: 'low'\r\n        });\r\n      }\r\n    }\r\n\r\n    return transformations;\r\n  }\r\n\r\n  /**\r\n   * Creates transformations for temporal patterns\r\n   * Generates temporal displacement awareness effects\r\n   */\r\n  private createTemporalPatternTransformations(\r\n    pattern: ReadingPattern,\r\n    nodeState: NodeState,\r\n    readerState: ReaderState\r\n  ): TextTransformation[] {\r\n    const transformations: TextTransformation[] = [];\r\n\r\n    // Get temporal jumping patterns\r\n    const temporalJumping: TemporalJumpingPattern = pathAnalyzer.analyzeTemporalJumping(readerState, { [nodeState.id]: nodeState });\r\n    \r\n    if (temporalJumping.volatility > 0.5 || temporalJumping.jumpFrequency > 0.3) {\r\n      // Add temporal displacement awareness\r\n      transformations.push({\r\n        type: 'metaComment',\r\n        selector: 'time',\r\n        replacement: `temporal displacement detected: ${temporalJumping.totalJumps} jumps, ${temporalJumping.preferredJumpDirection} bias`,\r\n        commentStyle: 'footnote',\r\n        intensity: Math.ceil(pattern.strength * 3),\r\n        priority: 'high'\r\n      });\r\n\r\n      // For high volatility, fragment time-related words\r\n      if (temporalJumping.volatility > 0.7) {\r\n        transformations.push({\r\n          type: 'fragment',\r\n          selector: 'moment',\r\n          fragmentPattern: '≈',\r\n          fragmentStyle: 'character',\r\n          intensity: 3,\r\n          priority: 'medium'\r\n        });\r\n\r\n        transformations.push({\r\n          type: 'fragment',\r\n          selector: 'now',\r\n          fragmentPattern: '≈',\r\n          fragmentStyle: 'word',\r\n          intensity: 3,\r\n          priority: 'medium'\r\n        });\r\n      }      // Emphasize temporal anchoring if strong\r\n      const strongAnchor = Object.entries(temporalJumping.temporalAnchoring)\r\n        .find(([, value]) => value > 0.6);\r\n      \r\n      if (strongAnchor) {\r\n        transformations.push({\r\n          type: 'emphasize',\r\n          selector: strongAnchor[0],\r\n          emphasis: 'highlight',\r\n          intensity: 2,\r\n          priority: 'medium'\r\n        });\r\n      }\r\n    }\r\n\r\n    return transformations;\r\n  }\r\n  \r\n  /**\r\n   * Creates transformations for thematic continuity patterns  \r\n   * Generates strange attractor resonance effects\r\n   */\r\n  private createThematicContinuityTransformations(\r\n    pattern: ReadingPattern,\r\n    nodeState: NodeState,\r\n    readerState: ReaderState\r\n  ): TextTransformation[] {\r\n    const transformations: TextTransformation[] = [];\r\n\r\n    if (pattern.relatedAttractors && pattern.relatedAttractors.length > 0) {\r\n      // Get attractor engagement levels\r\n      const attractorEngagements = pathAnalyzer.calculateAttractorEngagement(readerState, { [nodeState.id]: nodeState });\r\n      \r\n      pattern.relatedAttractors.forEach(attractor => {\r\n        const engagement = attractorEngagements.find(e => e.attractor === attractor);\r\n        \r\n        if (engagement && engagement.engagementScore >= 50) {\r\n          // Create resonance effects based on engagement\r\n          transformations.push({\r\n            type: 'metaComment',\r\n            selector: attractor.replace('-', ' '),\r\n            replacement: `strange attractor resonance: ${engagement.engagementScore}/100 (${engagement.trend})`,\r\n            commentStyle: 'marginalia',\r\n            intensity: Math.ceil(pattern.strength * 3),\r\n            priority: 'high'\r\n          });\r\n\r\n          // For strong engagement, emphasize attractor concepts\r\n          if (engagement.engagementScore > 75) {\r\n            transformations.push({\r\n              type: 'emphasize',\r\n              selector: attractor.replace('-', ' '),\r\n              emphasis: 'color',\r\n              intensity: 3,\r\n              priority: 'medium'\r\n            });\r\n          }\r\n\r\n          // For trending attractors, add expansion\r\n          if (engagement.trend === 'rising') {\r\n            transformations.push({\r\n              type: 'expand',\r\n              selector: attractor.replace('-', ' '),\r\n              replacement: `[amplifying]`,\r\n              expandStyle: 'inline',\r\n              priority: 'low'\r\n            });\r\n          }\r\n        }\r\n      });\r\n\r\n      // Check for thematic continuity across recent visits\r\n      const recentVisits = readerState.path.detailedVisits?.slice(-5) || [];\r\n      const attractorContinuity = this.calculateAttractorContinuity(recentVisits, nodeState);\r\n      \r\n      if (attractorContinuity > 0.6) {\r\n        transformations.push({\r\n          type: 'replace',\r\n          selector: 'connection',\r\n          replacement: 'strange attractor web',\r\n          preserveFormatting: true,\r\n          priority: 'medium'\r\n        });\r\n      }\r\n    }\r\n\r\n    return transformations;\r\n  }\r\n  /**\r\n   * Creates transformations for rhythm patterns\r\n   * Generates narrative pacing effects\r\n   */\r\n  private createRhythmPatternTransformations(\r\n    _pattern: ReadingPattern, // Marked as unused but kept for API consistency\r\n    nodeState: NodeState,\r\n    readerState: ReaderState\r\n  ): TextTransformation[] {\r\n    const transformations: TextTransformation[] = [];\r\n\r\n    // Analyze journey fingerprint for rhythm patterns\r\n    const fingerprint = pathAnalyzer.generateJourneyFingerprint(readerState, { [nodeState.id]: nodeState });\r\n\r\n    // Based on exploration style, add appropriate rhythm effects\r\n    switch (fingerprint.explorationStyle) {\r\n      case 'linear':\r\n        transformations.push({\r\n          type: 'metaComment',\r\n          selector: 'sequence',\r\n          replacement: 'linear progression detected',\r\n          commentStyle: 'inline',\r\n          intensity: 1,\r\n          priority: 'low'\r\n        });\r\n        break;\r\n\r\n      case 'recursive':\r\n        transformations.push({\r\n          type: 'emphasize',\r\n          selector: 'return',\r\n          emphasis: 'spacing',\r\n          intensity: 2,\r\n          priority: 'medium'\r\n        });\r\n        break;\r\n\r\n      case 'wandering':\r\n        transformations.push({\r\n          type: 'fragment',\r\n          selector: 'direction',\r\n          fragmentPattern: '~',\r\n          fragmentStyle: 'word',\r\n          intensity: 1,\r\n          priority: 'low'\r\n        });\r\n        break;\r\n\r\n      case 'chaotic':\r\n        transformations.push({\r\n          type: 'fragment',\r\n          selector: 'order',\r\n          fragmentPattern: '!',\r\n          fragmentStyle: 'progressive',\r\n          intensity: 3,\r\n          priority: 'medium'\r\n        });\r\n        break;\r\n    }\r\n\r\n    // Add velocity-based effects\r\n    if (fingerprint.velocityIndex > 0.7) {\r\n      transformations.push({\r\n        type: 'emphasize',\r\n        selector: 'pace',\r\n        emphasis: 'bold',\r\n        intensity: 2,\r\n        priority: 'medium'\r\n      });\r\n    }\r\n\r\n    return transformations;\r\n  }\r\n  /**\r\n   * Helper method to calculate attractor continuity across recent visits\r\n   */\r\n  private calculateAttractorContinuity(recentVisits: Array<{ engagedAttractors?: StrangeAttractor[] }>, currentNode: NodeState): number {\r\n    if (recentVisits.length < 2) return 0;\r\n\r\n    const currentAttractors = currentNode.strangeAttractors || [];\r\n    if (currentAttractors.length === 0) return 0;\r\n\r\n    let continuityScore = 0;\r\n    let totalComparisons = 0;    // Compare with each recent visit\r\n    recentVisits.forEach(visit => {\r\n      if (visit.engagedAttractors && visit.engagedAttractors.length > 0) {\r\n        const visitAttractors = visit.engagedAttractors;\r\n        const sharedAttractors = currentAttractors.filter(attractor => \r\n          visitAttractors.includes(attractor)\r\n        );\r\n        \r\n        continuityScore += sharedAttractors.length / Math.max(currentAttractors.length, visitAttractors.length);\r\n        totalComparisons++;\r\n      }\r\n    });\r\n\r\n    return totalComparisons > 0 ? continuityScore / totalComparisons : 0;\r\n  }\r\n\r\n  /**\r\n   * Master integration method that coordinates all transformation systems\r\n   * Provides a single entry point for comprehensive content transformation\r\n   * \r\n   * @param content The original content to transform\r\n   * @param nodeState The current node state\r\n   * @param readerState The current reader state\r\n   * @param allNodes All node states for context\r\n   * @returns Fully transformed content with all effects applied\r\n   */\r\n  calculateAllTransformations(\r\n    content: string,\r\n    nodeState: NodeState,\r\n    readerState: ReaderState,\r\n    allNodes: Record<string, NodeState> = {}\r\n  ): TextTransformation[] {\r\n    // Quick validation and early returns\r\n    if (!content || !nodeState || !readerState) {\r\n      console.warn('[TransformationEngine] calculateAllTransformations: Missing required parameters');\r\n      return [];\r\n    }\r\n\r\n    // Prevent infinite loops by checking if content is already heavily transformed\r\n    if (content.includes('data-transform-type') && content.length > 15000) {\r\n      console.warn('[TransformationEngine] Content appears heavily transformed, skipping to prevent infinite loop');\r\n      return [];\r\n    }\r\n\r\n    try {\r\n      console.log(`[TransformationEngine] Calculating all transformations for node ${nodeState.id}`);\r\n\r\n      // Generate comprehensive cache key for the entire transformation pipeline\r\n      const masterCacheKey = this.getMasterTransformationCacheKey(content, nodeState, readerState);\r\n\r\n      // Check master cache first\r\n      const cachedResult = this.batchedTransformationCache.get(masterCacheKey);\r\n      if (cachedResult !== undefined) {\r\n        this.stats.batchedCacheHits++;\r\n        console.log('[TransformationEngine] All transformations retrieved from master cache');\r\n        return this.parseTransformationsFromCachedContent(cachedResult);\r\n      }\r\n\r\n      const allTransformations: TextTransformation[] = [];\r\n\r\n      // STEP 1: Character Bleed Transformations (Highest Priority)\r\n      // These should be applied first as they affect how subsequent content is interpreted\r\n      console.log('[TransformationEngine] Step 1: Calculating character bleed transformations');\r\n      const characterBleedEffects = CharacterBleedService.calculateBleedEffects(nodeState, readerState);\r\n      \r\n      if (characterBleedEffects.length > 0) {        // Convert character bleed effects to TextTransformations with high priority\r\n        const characterBleedTransformations: TextTransformation[] = characterBleedEffects.map((effect: CharacterBleedEffect) => ({\r\n          ...effect.transformation,\r\n          priority: 'high' as const,\r\n          applyImmediately: true\r\n        }));\r\n        \r\n        allTransformations.push(...characterBleedTransformations.slice(0, 3)); // Limit for performance\r\n        console.log(`[TransformationEngine] Added ${Math.min(characterBleedTransformations.length, 3)} character bleed transformations`);\r\n      }\r\n\r\n      // STEP 2: Journey Pattern Transformations (High Priority)\r\n      // These respond to navigation patterns and reading behavior\r\n      console.log('[TransformationEngine] Step 2: Calculating journey pattern transformations');\r\n      const patterns = pathAnalyzer.analyzePathPatterns(readerState, allNodes);\r\n      \r\n      if (patterns.length > 0) {\r\n        const journeyTransformations = this.applyJourneyTransformations(content, nodeState, readerState, patterns);\r\n        \r\n        // Ensure journey transformations have high priority but lower than character bleed\r\n        const prioritizedJourneyTransformations = journeyTransformations.map(t => ({\r\n          ...t,\r\n          priority: 'high' as const\r\n        }));\r\n        \r\n        allTransformations.push(...prioritizedJourneyTransformations.slice(0, 4)); // Limit for performance\r\n        console.log(`[TransformationEngine] Added ${Math.min(prioritizedJourneyTransformations.length, 4)} journey pattern transformations`);\r\n      }\r\n\r\n      // STEP 3: Node-Specific Transformation Rules (Medium Priority)\r\n      // These are transformations specific to the current node's conditions\r\n      console.log('[TransformationEngine] Step 3: Evaluating node-specific transformation rules');\r\n      const nodeTransformations = this.evaluateAllTransformations(nodeState.transformations || [], readerState, nodeState);\r\n      \r\n      if (nodeTransformations.length > 0) {\r\n        const prioritizedNodeTransformations = nodeTransformations.map(t => ({\r\n          ...t,\r\n          priority: t.priority || 'medium' as const\r\n        }));\r\n        \r\n        allTransformations.push(...prioritizedNodeTransformations.slice(0, 3)); // Limit for performance\r\n        console.log(`[TransformationEngine] Added ${Math.min(prioritizedNodeTransformations.length, 3)} node-specific transformations`);\r\n      }\r\n\r\n      // STEP 4: Apply priority-based sorting to ensure correct application order\r\n      const sortedTransformations = this.sortTransformationsByPriority(allTransformations);\r\n\r\n      // STEP 5: Apply deduplication to prevent redundant transformations\r\n      const deduplicatedTransformations = this.deduplicateTransformations(sortedTransformations);\r\n\r\n      // Cache the final result\r\n      const transformationsCacheData = JSON.stringify(deduplicatedTransformations);\r\n      this.batchedTransformationCache.put(masterCacheKey, transformationsCacheData);\r\n\r\n      console.log(`[TransformationEngine] Master transformation calculation complete:`, {\r\n        characterBleed: characterBleedEffects.length,\r\n        journeyPatterns: patterns.length,\r\n        nodeRules: nodeState.transformations?.length || 0,\r\n        totalTransformations: deduplicatedTransformations.length,\r\n        cacheKey: masterCacheKey.substring(0, 50) + '...'\r\n      });\r\n\r\n      return deduplicatedTransformations;\r\n\r\n    } catch (error) {\r\n      console.error('[TransformationEngine] Error in calculateAllTransformations:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Single entry point for getting fully transformed content\r\n   * Combines calculateAllTransformations with content application\r\n   * \r\n   * @param nodeState The current node state  \r\n   * @param readerState The current reader state\r\n   * @param allNodes All node states for context (optional)\r\n   * @returns Fully transformed content ready for display\r\n   */\r\n  getTransformedContent(\r\n    nodeState: NodeState,\r\n    readerState: ReaderState,\r\n    allNodes: Record<string, NodeState> = {}\r\n  ): string {\r\n    // Get the base content\r\n    const baseContent = nodeState.currentContent || nodeState.enhancedContent?.base || '';\r\n    \r\n    if (!baseContent) {\r\n      console.warn(`[TransformationEngine] No content available for node ${nodeState.id}`);\r\n      return '';\r\n    }\r\n\r\n    try {\r\n      // Calculate all transformations using the master method\r\n      const allTransformations = this.calculateAllTransformations(baseContent, nodeState, readerState, allNodes);\r\n\r\n      // Apply transformations in the correct order\r\n      const transformedContent = this.applyTransformations(baseContent, allTransformations);\r\n\r\n      console.log(`[TransformationEngine] Content transformation complete for node ${nodeState.id}:`, {\r\n        originalLength: baseContent.length,\r\n        transformedLength: transformedContent.length,\r\n        transformationsApplied: allTransformations.length\r\n      });\r\n\r\n      return transformedContent;\r\n\r\n    } catch (error) {\r\n      console.error(`[TransformationEngine] Error in getTransformedContent for node ${nodeState.id}:`, error);\r\n      return baseContent; // Return original content on error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generates a master cache key for the entire transformation pipeline\r\n   * @param content The content being transformed\r\n   * @param nodeState The current node state\r\n   * @param readerState The current reader state\r\n   * @returns Cache key string\r\n   */\r\n  private getMasterTransformationCacheKey(\r\n    content: string,\r\n    nodeState: NodeState,\r\n    readerState: ReaderState\r\n  ): string {\r\n    // Create compact representation of key state\r\n    const contentHash = content.substring(0, 30);\r\n    const nodeKey = `${nodeState.id}:${nodeState.character}:${nodeState.visitCount}`;\r\n    \r\n    // Reader state essentials\r\n    const pathSignature = readerState.path.sequence.slice(-5).join('→');\r\n    const attractorSignature = Object.keys(readerState.path.attractorsEngaged || {}).slice(0, 3).join(',');\r\n    \r\n    // Character transition context\r\n    const detailedVisits = readerState.path.detailedVisits || [];\r\n    const lastCharacter = detailedVisits.length >= 2 \r\n      ? detailedVisits[detailedVisits.length - 2].character \r\n      : 'none';\r\n    const characterTransition = `${lastCharacter}→${nodeState.character}`;\r\n\r\n    return `master:${contentHash}:${nodeKey}:${pathSignature}:${attractorSignature}:${characterTransition}:${this.lastModificationTime}`;\r\n  }\r\n\r\n  /**\r\n   * Sorts transformations by priority to ensure correct application order\r\n   * @param transformations Array of transformations to sort\r\n   * @returns Sorted transformations array\r\n   */\r\n  private sortTransformationsByPriority(transformations: TextTransformation[]): TextTransformation[] {\r\n    const getPriorityValue = (priority?: string): number => {\r\n      switch (priority) {\r\n        case 'high': return 3;\r\n        case 'medium': return 2;\r\n        case 'low': return 1;\r\n        default: return 0;\r\n      }\r\n    };\r\n\r\n    return [...transformations].sort((a, b) => {\r\n      // First sort by priority\r\n      const priorityDiff = getPriorityValue(b.priority) - getPriorityValue(a.priority);\r\n      if (priorityDiff !== 0) return priorityDiff;\r\n\r\n      // Then by applyImmediately flag\r\n      if (a.applyImmediately && !b.applyImmediately) return -1;\r\n      if (!a.applyImmediately && b.applyImmediately) return 1;\r\n\r\n      // Finally by transformation type (replace and fragment first for better visual flow)\r\n      const typeOrder = { replace: 0, fragment: 1, emphasize: 2, expand: 3, metaComment: 4 };\r\n      const aOrder = typeOrder[a.type as keyof typeof typeOrder] ?? 5;\r\n      const bOrder = typeOrder[b.type as keyof typeof typeOrder] ?? 5;\r\n      \r\n      return aOrder - bOrder;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Removes duplicate transformations to prevent redundant application\r\n   * @param transformations Array of transformations to deduplicate\r\n   * @returns Deduplicated transformations array\r\n   */\r\n  private deduplicateTransformations(transformations: TextTransformation[]): TextTransformation[] {\r\n    const seen = new Set<string>();\r\n    const deduplicated: TextTransformation[] = [];\r\n\r\n    transformations.forEach(transformation => {\r\n      // Create a unique key for this transformation\r\n      const key = `${transformation.type}:${transformation.selector}:${transformation.replacement || ''}`;\r\n      \r\n      if (!seen.has(key)) {\r\n        seen.add(key);\r\n        deduplicated.push(transformation);\r\n      }\r\n    });\r\n\r\n    if (deduplicated.length < transformations.length) {\r\n      console.log(`[TransformationEngine] Deduplicated transformations: ${transformations.length} → ${deduplicated.length}`);\r\n    }\r\n\r\n    return deduplicated;\r\n  }\r\n\r\n  /**\r\n   * Helper method to parse transformations from cached content string\r\n   * @param cachedData Cached transformation data as JSON string\r\n   * @returns Array of parsed transformations\r\n   */\r\n  private parseTransformationsFromCachedContent(cachedData: string): TextTransformation[] {\r\n    try {\r\n      return JSON.parse(cachedData) as TextTransformation[];\r\n    } catch (error) {\r\n      console.warn('[TransformationEngine] Failed to parse cached transformations:', error);\r\n      return [];\r\n    }\r\n  }\r\n}\r\n\r\n// Export a singleton instance for use throughout the application\r\nexport const transformationEngine = new TransformationEngine();","/**\r\n * Content Variant Service\r\n * \r\n * Handles parsing of markdown files with section-based content variants\r\n * and selection logic based on reader journey state.\r\n */\r\n\r\nimport { EnhancedNarramorphContent, NarramorphContent, Character } from '../types';\r\nimport { RootState } from '../store/types';\r\n\r\nexport interface ContentSelectionContext {\r\n  visitCount: number;\r\n  lastVisitedCharacter?: Character;\r\n  journeyPattern: string[];\r\n  characterSequence: Character[];\r\n  attractorsEngaged: Record<string, number>;\r\n  recursiveAwareness?: number;\r\n}\r\n\r\nexport class ContentVariantService {\r\n  /**\r\n   * Parse markdown content with both visit-count and section-based delimiters\r\n   */\r\n  parseContentVariants(rawContent: string): EnhancedNarramorphContent {\r\n    const result: EnhancedNarramorphContent = {\r\n      base: '',\r\n      visitCountVariants: {},\r\n      sectionVariants: {}\r\n    };\r\n\r\n    // Split by both visit-count and section delimiters\r\n    // Visit-count pattern: ---[number]\r\n    // Section pattern: ---section-name---\r\n    const combinedPattern = /---(?:\\[(\\d+)\\]|([a-zA-Z0-9\\-_]+))(?:---)?/;\r\n    const parts = rawContent.split(combinedPattern);\r\n\r\n    // First part is base content (before any delimiter)\r\n    if (parts.length > 0 && !rawContent.startsWith('---')) {\r\n      result.base = parts[0].trim();\r\n    }    // Process the remaining parts\r\n    for (let i = 1; i < parts.length; i += 3) {\r\n      const visitCountMatch = parts[i]; // Visit count if it's a [number] pattern\r\n      const rawSectionMatch = parts[i + 1]; // Section name if it's a section pattern\r\n      const sectionMatch = rawSectionMatch ? rawSectionMatch.replace(/---$/, '') : undefined;\r\n      const content = parts[i + 2]?.trim() || '';\r\n\r\n      if (visitCountMatch) {\r\n        // This is a visit-count variant\r\n        const visitCount = parseInt(visitCountMatch, 10);\r\n        if (!isNaN(visitCount)) {\r\n          result.visitCountVariants[visitCount] = content;\r\n        }\r\n      } else if (sectionMatch) {\r\n        // This is a section variant\r\n        result.sectionVariants[sectionMatch] = content;\r\n      }\r\n    }\r\n\r\n    // If no base content was found, use the first available content\r\n    if (!result.base) {\r\n      if (Object.keys(result.visitCountVariants).length > 0) {\r\n        const firstKey = Math.min(...Object.keys(result.visitCountVariants).map(Number));\r\n        result.base = result.visitCountVariants[firstKey];\r\n      } else if (Object.keys(result.sectionVariants).length > 0) {\r\n        const firstSection = Object.keys(result.sectionVariants)[0];\r\n        result.base = result.sectionVariants[firstSection];\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Convert legacy NarramorphContent to EnhancedNarramorphContent\r\n   */\r\n  upgradeLegacyContent(legacyContent: NarramorphContent): EnhancedNarramorphContent {\r\n    const result: EnhancedNarramorphContent = {\r\n      base: legacyContent[0] || '',\r\n      visitCountVariants: { ...legacyContent },\r\n      sectionVariants: {}\r\n    };\r\n\r\n    // Remove the base content from visit count variants if it exists\r\n    if (result.visitCountVariants[0]) {\r\n      delete result.visitCountVariants[0];\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Select the most appropriate content variant based on reader journey state\r\n   */\r\n  selectContentVariant(\r\n    enhancedContent: EnhancedNarramorphContent,\r\n    context: ContentSelectionContext\r\n  ): string {\r\n    // Debug: Log context and available variants\r\n    if (process.env.NODE_ENV === 'development') {\r\n      console.log('[ContentVariantService] selectContentVariant called with:', {\r\n        context,\r\n        visitCountVariants: Object.keys(enhancedContent.visitCountVariants),\r\n        sectionVariants: Object.keys(enhancedContent.sectionVariants),\r\n        base: enhancedContent.base\r\n      });\r\n    }\r\n\r\n    // Priority order:\r\n    // 1. Section variants based on journey state\r\n    // 2. Visit-count variants\r\n    // 3. Base content\r\n\r\n    // Check for character bleed effects\r\n    if (context.lastVisitedCharacter) {\r\n      const characterBleedSection = this.getCharacterBleedSection(context.lastVisitedCharacter);\r\n      if (enhancedContent.sectionVariants[characterBleedSection]) {\r\n        return enhancedContent.sectionVariants[characterBleedSection];\r\n      }\r\n    }\r\n\r\n    // Check for recursive awareness patterns\r\n    if (context.recursiveAwareness && context.recursiveAwareness > 0.7) {\r\n      if (enhancedContent.sectionVariants['recursive-awareness']) {\r\n        return enhancedContent.sectionVariants['recursive-awareness'];\r\n      }\r\n    }\r\n\r\n    // Check for specific journey patterns\r\n    const journeySection = this.detectJourneyPattern(context);\r\n    if (journeySection && enhancedContent.sectionVariants[journeySection]) {\r\n      return enhancedContent.sectionVariants[journeySection];\r\n    }\r\n\r\n    // Check for strange attractor engagement\r\n    const attractorSection = this.detectAttractorEngagement(context.attractorsEngaged);\r\n    if (attractorSection && enhancedContent.sectionVariants[attractorSection]) {\r\n      return enhancedContent.sectionVariants[attractorSection];\r\n    }\r\n\r\n    // Fall back to visit-count variants\r\n    if (Object.keys(enhancedContent.visitCountVariants).length > 0) {\r\n      const availableCounts = Object.keys(enhancedContent.visitCountVariants)\r\n        .map(Number)\r\n        .sort((a, b) => b - a); // Sort descending\r\n\r\n      // Always use the highest available variant <= visitCount, otherwise the highest available\r\n      const bestMatch = availableCounts.find(count => context.visitCount >= count);\r\n      if (bestMatch !== undefined) {\r\n        if (process.env.NODE_ENV === 'development') {\r\n          console.log('[ContentVariantService] Returning visitCount variant:', bestMatch);\r\n        }\r\n        return enhancedContent.visitCountVariants[bestMatch];\r\n      }\r\n      // Fallback: return the highest available visit count variant\r\n      const highest = availableCounts[0];\r\n      if (process.env.NODE_ENV === 'development') {\r\n        console.log('[ContentVariantService] Fallback to highest visitCount variant:', highest);\r\n      }\r\n      return enhancedContent.visitCountVariants[highest];\r\n    }\r\n\r\n    // Final fallback to base content (if empty, fallback to empty string)\r\n    if (process.env.NODE_ENV === 'development') {\r\n      console.log('[ContentVariantService] Fallback to base content:', enhancedContent.base);\r\n    }\r\n    return enhancedContent.base || '';\r\n  }\r\n\r\n  /**\r\n   * Determine character bleed section name based on last visited character\r\n   */\r\n  private getCharacterBleedSection(lastCharacter: Character): string {\r\n    switch (lastCharacter) {\r\n      case 'Algorithm':\r\n        return 'after-algorithm';\r\n      case 'LastHuman':\r\n        return 'after-last-human';\r\n      case 'Archaeologist':\r\n        return 'after-archaeologist';\r\n      default:\r\n        return '';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Detect journey patterns that might trigger specific content variants\r\n   */\r\n  private detectJourneyPattern(context: ContentSelectionContext): string | null {\r\n    const { journeyPattern, characterSequence } = context;\r\n\r\n    // Check for specific sequences\r\n    if (journeyPattern.length >= 3) {\r\n      const recent = journeyPattern.slice(-3);\r\n      \r\n      // Pattern: visited same character type multiple times\r\n      if (characterSequence.length >= 3) {\r\n        const recentChars = characterSequence.slice(-3);\r\n        const uniqueChars = new Set(recentChars);\r\n        if (uniqueChars.size === 1) {\r\n          return 'character-focus';\r\n        }\r\n      }\r\n\r\n      // Pattern: cyclical visiting\r\n      if (recent[0] === recent[2] && recent[0] !== recent[1]) {\r\n        return 'cyclical-pattern';\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Detect high engagement with specific strange attractors\r\n   */\r\n  private detectAttractorEngagement(attractorsEngaged: Record<string, number>): string | null {\r\n    const highEngagementThreshold = 3;\r\n\r\n    for (const [attractor, count] of Object.entries(attractorsEngaged)) {\r\n      if (count >= highEngagementThreshold) {\r\n        // Map specific attractors to content sections\r\n        switch (attractor) {\r\n          case 'recursion-pattern':\r\n          case 'recursive-loop':\r\n            return 'recursion-pattern-engaged';\r\n          case 'memory-fragment':\r\n          case 'memory-artifact':\r\n            return 'memory-fragment-engaged';\r\n          case 'quantum-perception':\r\n          case 'quantum-uncertainty':\r\n            return 'quantum-awareness';\r\n          default:\r\n            break;\r\n        }\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Create content selection context from Redux state\r\n   */\r\n  createSelectionContext(state: RootState, nodeId: string): ContentSelectionContext {\r\n    const node = state.nodes.data[nodeId];\r\n    const readerState = state.reader;\r\n\r\n    // Determine last visited character\r\n    let lastVisitedCharacter: Character | undefined;\r\n    if (readerState.path.sequence.length > 1) {\r\n      const previousNodeId = readerState.path.sequence[readerState.path.sequence.length - 2];\r\n      const previousNode = state.nodes.data[previousNodeId];\r\n      if (previousNode) {\r\n        lastVisitedCharacter = previousNode.character;\r\n      }\r\n    }\r\n\r\n    // Build character sequence from recent visits\r\n    const characterSequence: Character[] = readerState.path.sequence\r\n      .slice(-5) // Last 5 visits\r\n      .map(nodeId => state.nodes.data[nodeId]?.character)\r\n      .filter((char): char is Character => char !== undefined);\r\n\r\n    // Calculate recursive awareness based on revisit patterns\r\n    let recursiveAwareness = 0;\r\n    const totalVisits = readerState.path.sequence.length;\r\n    const uniqueNodes = new Set(readerState.path.sequence).size;\r\n    if (totalVisits > 0) {\r\n      recursiveAwareness = 1 - (uniqueNodes / totalVisits);\r\n    }\r\n\r\n    return {\r\n      visitCount: node?.visitCount || 0,\r\n      lastVisitedCharacter,\r\n      journeyPattern: readerState.path.sequence.slice(-5), // Last 5 visits\r\n      characterSequence,\r\n      attractorsEngaged: readerState.path.attractorsEngaged,\r\n      recursiveAwareness\r\n    };\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const contentVariantService = new ContentVariantService();\r\n","/**\r\n * TransformationService\r\n *\r\n * Core service that handles the application of Narramorph content transformations\r\n * based on reader patterns and conditions.\r\n *\r\n * This service connects the condition detection system (TransformationEngine) and\r\n * the pattern analysis system (PathAnalyzer) to actual content changes.\r\n *\r\n * Performance optimized with enhanced caching, lazy evaluation, and memory management.\r\n */\r\n\r\nimport {\r\n  TextTransformation,\r\n  NodeState\r\n} from '../types';\r\nimport { ReaderState } from '../store/slices/readerSlice';\r\nimport { transformationEngine } from './TransformationEngine';\r\nimport { pathAnalyzer, ReadingPattern, AttractorEngagement } from './PathAnalyzer';\r\n\r\n// Enhanced cache for storing previously evaluated and applied transformations\r\ninterface TransformationCache {\r\n  // Key format: nodeId-visitCount-patternHash\r\n  [key: string]: {\r\n    transformations: TextTransformation[];\r\n    timestamp: number;\r\n    content: string;\r\n    // Track which parts of the content were transformed for partial updates\r\n    transformedSegments?: {\r\n      selector: string;\r\n      transformType: string;\r\n      position: [number, number]; // [start, end] positions in content\r\n    }[];\r\n    // Additional metadata for cache invalidation decisions\r\n    metadata?: {\r\n      readerStateHash: string;\r\n      nodeStateHash: string;\r\n      complexity: number; // Higher value = more expensive transformation\r\n    }\r\n  }\r\n}\r\n\r\n// Interface for tracking visible content for lazy evaluation\r\ninterface VisibilityTracker {\r\n  // Key is a content identifier (usually node ID)\r\n  [key: string]: {\r\n    isVisible: boolean;\r\n    lastVisibleTimestamp: number;\r\n    pendingTransformations: TextTransformation[];\r\n    priority: number; // Higher = more important to transform when visible\r\n  }\r\n}\r\n\r\n/**\r\n * Represents a transformation with its priority and metadata\r\n */\r\ninterface PrioritizedTransformation {\r\n  transformation: TextTransformation;\r\n  priority: number;\r\n  sourceType: 'pattern' | 'condition' | 'attractor' | 'temporal' | 'rhythm';\r\n  conflictGroup?: string; // Identifier for potentially conflicting transformations\r\n}\r\n\r\n/**\r\n * Service class for managing the application of content transformations\r\n */\r\nexport class TransformationService {\r\n  private cache: TransformationCache = {};\r\n  private visibilityTracker: VisibilityTracker = {};\r\n  private readonly CACHE_EXPIRY_TIME = 10 * 60 * 1000; // 10 minutes\r\n  private readonly MAX_CACHE_ENTRIES = 200;\r\n  \r\n  // Performance metrics\r\n  private metrics = {\r\n    cacheHits: 0,\r\n    cacheMisses: 0,\r\n    patternAnalysisCount: 0,\r\n    transformationAppliedCount: 0,\r\n    lazyTransformationsDeferredCount: 0,\r\n    lazyTransformationsAppliedCount: 0,\r\n    lastCacheCleanupTime: Date.now()\r\n  };\r\n  \r\n  /**\r\n   * Calculates a unique hash for the reader's current pattern state\r\n   * Used for caching transformation results\r\n   */\r\n  private calculatePatternHash(readerState: ReaderState): string {\r\n    // Create a simple hash based on key reader state components\r\n    const { \r\n      path: { sequence, attractorsEngaged }, \r\n      endpointProgress \r\n    } = readerState;\r\n    \r\n    // Use the last 5 nodes in the sequence, or all if less than 5\r\n    const recentPath = sequence.slice(-5).join('-');\r\n    \r\n    // Use top 3 engaged attractors\r\n    const topAttractors = Object.entries(attractorsEngaged)\r\n      .sort((a, b) => b[1] - a[1])\r\n      .slice(0, 3)\r\n      .map(([attractor]) => attractor)\r\n      .join('-');\r\n    \r\n    // Use endpoint progress values\r\n    const progressValues = Object.values(endpointProgress).join('-');\r\n    \r\n    return `${recentPath}|${topAttractors}|${progressValues}`;\r\n  }\r\n  \r\n  /**\r\n   * Get a unique cache key for a node transformation\r\n   */\r\n  private getCacheKey(nodeId: string, visitCount: number, patternHash: string): string {\r\n    return `${nodeId}-${visitCount}-${patternHash}`;\r\n  }\r\n  \r\n  /**\r\n   * More comprehensive cache management:\r\n   * - Removes expired entries\r\n   * - Limits total cache size\r\n   * - Prioritizes keeping entries for visible or recently viewed content\r\n   */\r\n  private cleanCache(): void {\r\n    const now = Date.now();\r\n    \r\n    // Only clean periodically to avoid performance overhead\r\n    if (now - this.metrics.lastCacheCleanupTime < 30000) { // 30 seconds\r\n      return;\r\n    }\r\n    \r\n    this.metrics.lastCacheCleanupTime = now;\r\n    \r\n    // Step 1: Remove expired entries\r\n    let entries = Object.entries(this.cache);\r\n    entries = entries.filter(([, value]) => now - value.timestamp <= this.CACHE_EXPIRY_TIME);\r\n    \r\n    // Step 2: If still too many entries, prioritize keeping important ones\r\n    if (entries.length > this.MAX_CACHE_ENTRIES) {\r\n      // Sort by importance (keep visible content and recently accessed entries)\r\n      entries.sort(([keyA, valueA], [keyB, valueB]) => {\r\n        const nodeIdA = keyA.split('-')[0];\r\n        const nodeIdB = keyB.split('-')[0];\r\n        \r\n        // First priority: visible content\r\n        const isVisibleA = this.visibilityTracker[nodeIdA]?.isVisible || false;\r\n        const isVisibleB = this.visibilityTracker[nodeIdB]?.isVisible || false;\r\n        if (isVisibleA !== isVisibleB) return isVisibleB ? 1 : -1;\r\n        \r\n        // Second priority: recently accessed\r\n        return valueB.timestamp - valueA.timestamp;\r\n      });\r\n      \r\n      // Keep only the most important entries\r\n      entries = entries.slice(0, this.MAX_CACHE_ENTRIES);\r\n    }\r\n    \r\n    // Rebuild cache with filtered entries\r\n    this.cache = Object.fromEntries(entries);\r\n  }\r\n  \r\n  /**\r\n   * Assign priorities to transformations based on their type and strength\r\n   */  private prioritizeTransformations(\r\n    transformations: TextTransformation[],\r\n    readerState: ReaderState,\r\n    nodeState: NodeState\r\n  ): PrioritizedTransformation[] {\r\n    // Start with default priorities\r\n    const prioritized: PrioritizedTransformation[] = transformations.map(transformation => {\r\n      const { priority, sourceType } = this.getBasePriorityAndSource(transformation);\r\n      const conflictGroup: string | undefined = `selector-${transformation.selector}`;\r\n      \r\n      return {\r\n        transformation,\r\n        priority,\r\n        sourceType,\r\n        conflictGroup\r\n      };\r\n    });\r\n    \r\n    // Get patterns and attractor engagements for priority adjustments\r\n    const patterns = pathAnalyzer.identifySignificantPatterns(readerState, {\r\n      [nodeState.id]: nodeState\r\n    });\r\n    \r\n    const attractorEngagements = pathAnalyzer.calculateAttractorEngagement(readerState, {\r\n      [nodeState.id]: nodeState\r\n    });\r\n    \r\n    // Adjust priorities based on patterns and attractors\r\n    prioritized.forEach(item => {\r\n      this.adjustPriorityForPatterns(item, patterns);\r\n      this.adjustPriorityForAttractors(item, attractorEngagements, nodeState);\r\n    });\r\n    \r\n    return prioritized;\r\n  }\r\n  \r\n  /**\r\n   * Resolve conflicts between transformations\r\n   * Returns a filtered list with conflicts resolved\r\n   */\r\n  private resolveConflicts(transformations: PrioritizedTransformation[]): PrioritizedTransformation[] {\r\n    // Group transformations by conflict group\r\n    const groupedByConflict: Record<string, PrioritizedTransformation[]> = {};\r\n    \r\n    transformations.forEach(item => {\r\n      if (item.conflictGroup) {\r\n        if (!groupedByConflict[item.conflictGroup]) {\r\n          groupedByConflict[item.conflictGroup] = [];\r\n        }\r\n        groupedByConflict[item.conflictGroup].push(item);\r\n      }\r\n    });\r\n    \r\n    // For each conflict group, keep only the highest priority transformation\r\n    const resolved: PrioritizedTransformation[] = [];\r\n    \r\n    // Add transformations without conflict groups\r\n    transformations\r\n      .filter(item => !item.conflictGroup)\r\n      .forEach(item => resolved.push(item));\r\n    \r\n    // Add highest priority transformation from each conflict group\r\n    Object.values(groupedByConflict).forEach(group => {\r\n      if (group.length > 0) {\r\n        // Sort by priority (highest first)\r\n        group.sort((a, b) => b.priority - a.priority);\r\n        resolved.push(group[0]);\r\n      }\r\n    });\r\n    \r\n    return resolved;\r\n  }\r\n  \r\n  /**\r\n   * Apply transformations to content with priority handling and conflict resolution\r\n   */\r\n  applyTransformationsWithPriority(\r\n    content: string, \r\n    transformations: TextTransformation[], \r\n    readerState: ReaderState,\r\n    nodeState: NodeState\r\n  ): string {\r\n    if (transformations.length === 0) {\r\n      return content;\r\n    }\r\n    \r\n    // Prioritize transformations\r\n    let prioritized = this.prioritizeTransformations(transformations, readerState, nodeState);\r\n    \r\n    // Resolve conflicts\r\n    prioritized = this.resolveConflicts(prioritized);\r\n    \r\n    // Sort by priority (highest first)\r\n    prioritized.sort((a, b) => b.priority - a.priority);\r\n    \r\n    // Apply transformations in priority order\r\n    let transformedContent = content;\r\n    \r\n    prioritized.forEach(({ transformation }) => {\r\n      transformedContent = transformationEngine.applyTextTransformation(\r\n        transformedContent, \r\n        transformation\r\n      );\r\n    });\r\n    \r\n    return transformedContent;\r\n  }\r\n  \r\n  /**\r\n   * Enhanced method to track content visibility for lazy evaluation\r\n   */\r\n  public setContentVisibility(nodeId: string, isVisible: boolean, priority: number = 1): void {\r\n    if (!this.visibilityTracker[nodeId]) {\r\n      this.visibilityTracker[nodeId] = {\r\n        isVisible: false,\r\n        lastVisibleTimestamp: 0,\r\n        pendingTransformations: [],\r\n        priority: priority\r\n      };\r\n    }\r\n    \r\n    // Update visibility state\r\n    this.visibilityTracker[nodeId].isVisible = isVisible;\r\n    \r\n    if (isVisible) {\r\n      this.visibilityTracker[nodeId].lastVisibleTimestamp = Date.now();\r\n      \r\n      // Process any pending transformations for now-visible content\r\n      this.processPendingTransformations(nodeId);\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Process any pending transformations for a now-visible content element\r\n   */\r\n  private processPendingTransformations(nodeId: string): void {\r\n    const tracker = this.visibilityTracker[nodeId];\r\n    if (!tracker || !tracker.isVisible || tracker.pendingTransformations.length === 0) {\r\n      return;\r\n    }\r\n    \r\n    // Process the pending transformations now that content is visible\r\n    this.metrics.lazyTransformationsAppliedCount += tracker.pendingTransformations.length;\r\n    \r\n    // Reset pending transformations after processing\r\n    tracker.pendingTransformations = [];\r\n  }\r\n  \r\n  /**\r\n   * Queue a transformation for lazy evaluation when content becomes visible\r\n   */\r\n  public queueLazyTransformation(\r\n    nodeId: string,\r\n    transformation: TextTransformation\r\n  ): void {\r\n    if (!this.visibilityTracker[nodeId]) {\r\n      this.visibilityTracker[nodeId] = {\r\n        isVisible: false,\r\n        lastVisibleTimestamp: 0,\r\n        pendingTransformations: [],\r\n        priority: 1\r\n      };\r\n    }\r\n    \r\n    // If content is already visible, apply immediately\r\n    if (this.visibilityTracker[nodeId].isVisible) {\r\n      this.metrics.lazyTransformationsAppliedCount++;\r\n      return;\r\n    }\r\n    \r\n    // Otherwise, queue for later\r\n    this.visibilityTracker[nodeId].pendingTransformations.push(transformation);\r\n    this.metrics.lazyTransformationsDeferredCount++;\r\n  }\r\n    /**\r\n   * Enhanced content transformation with caching, partial updates, and lazy evaluation\r\n   */\r\n  getCachedTransformedContent(\r\n    nodeId: string,\r\n    content: string,\r\n    transformations: TextTransformation[],\r\n    readerState: ReaderState,\r\n    nodeState: NodeState\r\n  ): string {\r\n    // Early return if no transformations needed\r\n    if (!transformations || transformations.length === 0) {\r\n      return content;\r\n    }\r\n\r\n    // Prevent infinite loops by checking if content has already been transformed\r\n    if (content.includes('data-transform-type') || content.includes('narramorph-')) {\r\n      console.log(`[TransformationService] Content already transformed for node ${nodeId}, skipping to prevent infinite loop`);\r\n      return content;\r\n    }\r\n\r\n    // Calculate cache key components\r\n    const patternHash = this.calculatePatternHash(readerState);\r\n    const cacheKey = this.getCacheKey(nodeId, nodeState.visitCount, patternHash);\r\n    \r\n    // Clean expired cache entries periodically\r\n    this.cleanCache();\r\n    \r\n    // Check cache for existing transformed content\r\n    const cachedContent = this.checkCacheForContent(cacheKey, nodeId, content, transformations);\r\n    if (cachedContent) {\r\n      return cachedContent;\r\n    }\r\n    \r\n    // Filter transformations based on visibility and performance considerations\r\n    transformations = this.filterTransformationsForVisibility(transformations, nodeId);\r\n    \r\n    // Apply transformations\r\n    const transformedContent = this.applyTransformationsWithPriority(\r\n      content,\r\n      transformations,\r\n      readerState,\r\n      nodeState\r\n    );\r\n    \r\n    // Cache the result with metadata\r\n    this.cacheTransformedContent(cacheKey, transformations, content, transformedContent, readerState, nodeState);\r\n    \r\n    return transformedContent;\r\n  }\r\n  \r\n  /**\r\n   * Check cache for existing transformed content\r\n   */\r\n  private checkCacheForContent(\r\n    cacheKey: string,\r\n    nodeId: string,\r\n    content: string,\r\n    transformations: TextTransformation[]\r\n  ): string | null {\r\n    const isVisible = this.visibilityTracker[nodeId]?.isVisible || false;\r\n    \r\n    if (this.cache[cacheKey] && \r\n        this.cache[cacheKey].content && \r\n        this.cache[cacheKey].content.length > content.length) {\r\n      this.metrics.cacheHits++;\r\n      \r\n      if (!isVisible && transformations.length > 0) {\r\n        this.metrics.lazyTransformationsDeferredCount++;\r\n      }\r\n      \r\n      return this.cache[cacheKey].content;\r\n    }\r\n    \r\n    this.metrics.cacheMisses++;\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Filter transformations for visibility and performance\r\n   */\r\n  private filterTransformationsForVisibility(\r\n    transformations: TextTransformation[],\r\n    nodeId: string,\r\n    maxTransformations: number = 10\r\n  ): TextTransformation[] {\r\n    let filteredTransformations = transformations;\r\n    \r\n    // Limit transformation count to prevent runaway transformations\r\n    if (filteredTransformations.length > maxTransformations) {\r\n      console.warn(`[TransformationService] Too many transformations (${filteredTransformations.length}) for node ${nodeId}, limiting to ${maxTransformations}`);\r\n      filteredTransformations = filteredTransformations.slice(0, maxTransformations);\r\n    }\r\n    \r\n    const isVisible = this.visibilityTracker[nodeId]?.isVisible || false;\r\n    \r\n    // If content isn't visible and transformations are expensive, defer some\r\n    if (!isVisible && filteredTransformations.length > 3) {\r\n      filteredTransformations.forEach(t => this.queueLazyTransformation(nodeId, t));\r\n      \r\n      // Only apply essential transformations now\r\n      const essentialTransformations = filteredTransformations.filter(t =>\r\n        t.type === 'replace' || t.priority === 'high'\r\n      );\r\n      \r\n      if (essentialTransformations.length < filteredTransformations.length) {\r\n        filteredTransformations = essentialTransformations;\r\n      }\r\n    }\r\n    \r\n    return filteredTransformations;\r\n  }\r\n\r\n  /**\r\n   * Cache transformed content with metadata\r\n   */\r\n  private cacheTransformedContent(\r\n    cacheKey: string,\r\n    transformations: TextTransformation[],\r\n    content: string,\r\n    transformedContent: string,\r\n    readerState: ReaderState,\r\n    nodeState: NodeState\r\n  ): void {\r\n    if (transformedContent === content) return;\r\n    \r\n    const transformedSegments = transformations.map(t => ({\r\n      selector: t.selector || '',\r\n      transformType: t.type,\r\n      position: this.findPositionInContent(content, t.selector || '') as [number, number]\r\n    })).filter(seg => seg.position[0] >= 0);\r\n    \r\n    this.cache[cacheKey] = {\r\n      transformations,\r\n      timestamp: Date.now(),\r\n      content: transformedContent,\r\n      transformedSegments,\r\n      metadata: {\r\n        readerStateHash: JSON.stringify({\r\n          path: readerState.path.sequence.slice(-5),\r\n          attractors: Object.keys(readerState.path.attractorsEngaged || {})\r\n        }),\r\n        nodeStateHash: JSON.stringify({\r\n          id: nodeState.id,\r\n          visitCount: nodeState.visitCount\r\n        }),\r\n        complexity: this.calculateTransformationComplexity(transformations)\r\n      }\r\n    };\r\n  }\r\n  \r\n  /**\r\n   * Find the position of a selector in content\r\n   * Returns [start, end] positions or [-1, -1] if not found\r\n   */\r\n  private findPositionInContent(content: string, selector: string): [number, number] {\r\n    if (!selector || !content) return [-1, -1];\r\n    \r\n    const start = content.indexOf(selector);\r\n    if (start === -1) return [-1, -1];\r\n    \r\n    return [start, start + selector.length];\r\n  }\r\n  \r\n  /**\r\n   * Calculate complexity score for a set of transformations\r\n   * Higher score = more computationally expensive\r\n   */\r\n  private calculateTransformationComplexity(transformations: TextTransformation[]): number {\r\n    if (!transformations.length) return 0;\r\n    \r\n    return transformations.reduce((score, t) => {\r\n      // Base complexity by type\r\n      let typeComplexity = 1;\r\n      switch (t.type) {\r\n        case 'fragment': typeComplexity = 3; break;\r\n        case 'emphasize': typeComplexity = 2; break;\r\n        case 'metaComment': typeComplexity = 2.5; break;\r\n        case 'expand': typeComplexity = 2; break;\r\n        case 'replace': typeComplexity = 1; break;\r\n      }\r\n      \r\n      // Complexity multiplier based on content size\r\n      const contentSize = (t.selector?.length || 0) + (t.replacement?.length || 0);\r\n      const sizeFactor = Math.log(contentSize + 10) / Math.log(10); // log10(size+10)\r\n      \r\n      return score + typeComplexity * sizeFactor;\r\n    }, 0);\r\n  }\r\n  \r\n  /**\r\n   * Generate a hash for a set of transformations to use in CSS transitions\r\n   */\r\n  getTransformationHash(transformations: TextTransformation[]): string {\r\n    return transformations\r\n      .map(t => `${t.type}-${t.selector?.substring(0, 10)}`)\r\n      .join('|');\r\n  }\r\n  \r\n  /**\r\n   * Generate CSS classes for transitions based on transformation types\r\n   */\r\n  generateTransitionClasses(transformations: TextTransformation[]): Record<string, string> {\r\n    const classMap: Record<string, string> = {};\r\n    \r\n    transformations.forEach(transformation => {\r\n      if (!transformation.selector) return;\r\n      \r\n      const sanitizedSelector = transformation.selector.replace(/[^a-zA-Z0-9]/g, '_');\r\n      // Start with narramorph-transform to get base transition styling\r\n      const baseClass = `narramorph-transform narramorph-transform-${transformation.type}`;\r\n      let classList = baseClass;\r\n      \r\n      // Get intensity for emphasis styles\r\n      const intensity = transformation.intensity || 1;\r\n      \r\n      switch (transformation.type) {\r\n        case 'replace':\r\n          classList += ' narramorph-replaced';\r\n          if (transformation.preserveFormatting) {\r\n            classList += ' preserve-formatting';\r\n          }\r\n          break;\r\n          \r\n        case 'fragment':\r\n          classList += ' narramorph-fragmented';\r\n          if (transformation.fragmentStyle) {\r\n            classList += ` narramorph-fragment-${transformation.fragmentStyle}`;\r\n          }\r\n          break;\r\n          \r\n        case 'expand':\r\n          classList += ' narramorph-expanded';\r\n          if (transformation.expandStyle) {\r\n            classList += ` narramorph-expand-${transformation.expandStyle || 'default'}`;\r\n          }\r\n          break;\r\n          \r\n        case 'emphasize':\r\n          classList += ' narramorph-emphasized';\r\n          if (transformation.emphasis) {\r\n            classList += ` narramorph-emphasis-${transformation.emphasis}`;\r\n          }\r\n          // Add intensity class\r\n          classList += ` intensity-${intensity}`;\r\n          break;\r\n          \r\n        case 'metaComment':\r\n          classList += ' narramorph-commented';\r\n          if (transformation.commentStyle) {\r\n            classList += ` narramorph-comment-${transformation.commentStyle}`;\r\n          }\r\n          break;\r\n      }\r\n      \r\n      // Add unique identifier class\r\n      classList += ` narramorph-element-${sanitizedSelector.substring(0, 20)}`;\r\n      \r\n      classMap[transformation.selector] = classList;\r\n    });\r\n    \r\n    return classMap;\r\n  }\r\n  \r\n  /**\r\n   * Create wrapper elements with CSS classes for transitions\r\n   */\r\n  wrapTransformedContent(\r\n    content: string,\r\n    transformations: TextTransformation[]\r\n  ): string {\r\n    if (transformations.length === 0) return content;\r\n    \r\n    const classMap = this.generateTransitionClasses(transformations);\r\n    let wrappedContent = content;\r\n    \r\n    // Apply wrapping to each transformed element\r\n    // We need to be careful with the order here to avoid nested replacements\r\n    Object.entries(classMap).forEach(([selector, className]) => {\r\n      // Find the transformation for this selector\r\n      const transformation = transformations.find(t => t.selector === selector);\r\n      if (!transformation) return;\r\n      \r\n      // Different wrapping strategies based on transformation type\r\n      // Prepare replacement text outside of the switch to avoid lexical declaration in case block\r\n      let replacement: string;\r\n      \r\n      // Create data attributes for better animation targeting\r\n      const dataAttrs = `\r\n        data-transform-type=\"${transformation.type}\"\r\n        data-selector=\"${escapeRegExp(selector.substring(0, 30))}\"\r\n        data-transform-id=\"${this.getUniqueTransformId(transformation)}\"\r\n      `;\r\n      \r\n      switch (transformation.type) {\r\n        case 'replace':\r\n        case 'fragment':\r\n        case 'emphasize':\r\n          // These transformations modify the original content, so wrap the result\r\n          replacement = transformation.type === 'replace' ?\r\n            transformation.replacement || '' :\r\n            selector;\r\n          \r\n          wrappedContent = wrappedContent.replace(\r\n            new RegExp(escapeRegExp(replacement), 'g'),\r\n            `<span class=\"${className}\" ${dataAttrs}>${replacement}</span>`\r\n          );\r\n          break;\r\n          \r\n        case 'expand':\r\n          // For expansions, we need to wrap both the original and expanded content\r\n          if (transformation.replacement) {\r\n            const expandedText = `${selector} ${transformation.replacement}`;\r\n            const expandStyle = transformation.expandStyle || 'default';\r\n            let expansionClass = 'narramorph-expansion';\r\n            \r\n            if (expandStyle === 'reveal') {\r\n              expansionClass = 'narramorph-reveal-expansion';\r\n            } else if (expandStyle === 'inline') {\r\n              expansionClass = 'narramorph-inline-expansion';\r\n            } else if (expandStyle === 'paragraph') {\r\n              expansionClass = 'narramorph-paragraph-expansion';\r\n            }\r\n            \r\n            wrappedContent = wrappedContent.replace(\r\n              new RegExp(escapeRegExp(expandedText), 'g'),\r\n              `<span class=\"${className}\" ${dataAttrs}>${selector}<span class=\"${expansionClass}\">${transformation.replacement}</span></span>`\r\n            );\r\n          }\r\n          break;\r\n          \r\n        case 'metaComment':\r\n          // For meta comments, wrap the comment part\r\n          if (transformation.replacement) {\r\n            const commentStyle = transformation.commentStyle || 'inline';\r\n            let commentClass = 'narramorph-comment';\r\n            \r\n            if (commentStyle === 'footnote') {\r\n              commentClass = 'narramorph-footnote-marker';\r\n            } else if (commentStyle === 'marginalia') {\r\n              commentClass = 'narramorph-marginalia';\r\n            } else if (commentStyle === 'interlinear') {\r\n              commentClass = 'narramorph-interlinear';\r\n            }\r\n            \r\n            const commentText = transformation.replacement;\r\n            const commentedText = `${selector} [${commentText}]`;\r\n            \r\n            // Different markup based on comment style\r\n            let wrappedMarkup = '';\r\n            if (commentStyle === 'footnote') {\r\n              const footnoteId = `footnote-${commentText.substring(0, 10).replace(/\\W/g, '')}`;\r\n              wrappedMarkup = `<span class=\"${className}\" ${dataAttrs}>${selector}<sup id=\"${footnoteId}-ref\" class=\"${commentClass}\">[†]</sup></span>`;\r\n            } else if (commentStyle === 'marginalia') {\r\n              wrappedMarkup = `<span class=\"${className} narramorph-marginalia-container\" ${dataAttrs}>${selector}<span class=\"${commentClass}\">${commentText}</span></span>`;\r\n            } else if (commentStyle === 'interlinear') {\r\n              wrappedMarkup = `<span class=\"${className} narramorph-interlinear-container\" ${dataAttrs}>${selector}<span class=\"${commentClass}\">${commentText}</span></span>`;\r\n            } else {\r\n              // Default inline style\r\n              wrappedMarkup = `<span class=\"${className}\" ${dataAttrs}>${selector}<span class=\"${commentClass}\">[${commentText}]</span></span>`;\r\n            }\r\n            \r\n            wrappedContent = wrappedContent.replace(\r\n              new RegExp(escapeRegExp(commentedText), 'g'),\r\n              wrappedMarkup\r\n            );\r\n          }\r\n          break;\r\n      }\r\n    });\r\n    \r\n    return wrappedContent;\r\n  }\r\n  \r\n  /**\r\n   * Generate a unique ID for a transformation to help with animation tracking\r\n   */\r\n  private getUniqueTransformId(transformation: TextTransformation): string {\r\n    const selectorHash = this.hashString(transformation.selector || '');\r\n    const typeHash = transformation.type.substring(0, 3);\r\n    const extraPart = transformation.replacement ?\r\n      this.hashString(transformation.replacement).substring(0, 3) :\r\n      '';\r\n    \r\n    return `${typeHash}-${selectorHash}${extraPart ? '-' + extraPart : ''}`;\r\n  }\r\n  \r\n  /**\r\n   * Simple string hashing function for generating unique IDs\r\n   */\r\n  private hashString(str: string): string {\r\n    let hash = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n      const char = str.charCodeAt(i);\r\n      hash = ((hash << 5) - hash) + char;\r\n      hash = hash & hash; // Convert to 32bit integer\r\n    }\r\n    return Math.abs(hash).toString(36).substring(0, 6);\r\n  }\r\n  \r\n  /**\r\n   * Create transformation(s) for a visitPattern condition\r\n   */\r\n  private handleVisitPattern(condition: import('./PathAnalyzer').PatternBasedCondition, nodeState: NodeState): TextTransformation[] {\r\n    const transformations: TextTransformation[] = [];\r\n    if (condition.strength > 0.8 && nodeState.currentContent) {\r\n      const paragraphs = nodeState.currentContent.split('\\n\\n');\r\n      if (paragraphs.length > 1) {\r\n        transformations.push({\r\n          type: 'replace',\r\n          selector: paragraphs[1],\r\n          replacement: `${paragraphs[1]} [A recurring pattern emerges in your exploration]`,\r\n          priority: 'high'\r\n        });\r\n      }\r\n    }\r\n    return transformations;\r\n  }\r\n\r\n  /**\r\n   * Create transformation(s) for a characterFocus condition\r\n   */\r\n  private handleCharacterFocus(condition: import('./PathAnalyzer').PatternBasedCondition, nodeState: NodeState): TextTransformation[] {\r\n    const transformations: TextTransformation[] = [];\r\n    if (\r\n      condition.strength > 0.7 &&\r\n      condition.condition.characters?.[0] === nodeState.character &&\r\n      nodeState.currentContent\r\n    ) {\r\n      const paragraphs = nodeState.currentContent.split('\\n\\n');\r\n      if (paragraphs.length > 0) {\r\n        transformations.push({\r\n          type: 'emphasize',\r\n          selector: paragraphs[0],\r\n          emphasis: 'color',\r\n          priority: 'medium'\r\n        });\r\n      }\r\n    }\r\n    return transformations;\r\n  }\r\n\r\n  /**\r\n   * Create transformation(s) for a temporalFocus condition\r\n   */\r\n  private handleTemporalFocus(condition: import('./PathAnalyzer').PatternBasedCondition, nodeState: NodeState): TextTransformation[] {\r\n    const transformations: TextTransformation[] = [];\r\n    if (\r\n      condition.strength > 0.7 &&\r\n      condition.condition.temporalPosition &&\r\n      nodeState.currentContent\r\n    ) {\r\n      const temporalLayer = nodeState.temporalValue <= 3 ? 'past' : nodeState.temporalValue <= 6 ? 'present' : 'future';\r\n      if (temporalLayer === condition.condition.temporalPosition) {\r\n        const paragraphs = nodeState.currentContent.split('\\n\\n');\r\n        if (paragraphs.length > 2) {\r\n          transformations.push({\r\n            type: 'metaComment',\r\n            selector: paragraphs[2],\r\n            replacement: `You seem drawn to ${condition.condition.temporalPosition} narratives`,\r\n            priority: 'low'\r\n          });\r\n        }\r\n      }\r\n    }\r\n    return transformations;\r\n  }\r\n\r\n  /**\r\n   * Create transformation(s) for attractorAffinity or attractorEngagement condition\r\n   */\r\n  private handleAttractorEngagement(condition: import('./PathAnalyzer').PatternBasedCondition, nodeState: NodeState): TextTransformation[] {\r\n    const transformations: TextTransformation[] = [];\r\n    if (\r\n      condition.strength > 0.7 &&\r\n      condition.condition.strangeAttractorsEngaged?.[0] &&\r\n      nodeState.currentContent\r\n    ) {\r\n      const attractor = condition.condition.strangeAttractorsEngaged[0];\r\n      const paragraphs = nodeState.currentContent.split('\\n\\n');\r\n      if (paragraphs.length > 0 && nodeState.strangeAttractors.includes(attractor)) {\r\n        transformations.push({\r\n          type: 'expand',\r\n          selector: paragraphs[0],\r\n          replacement: `The concept of ${attractor.replace('-', ' ')} resonates with you.`,\r\n          priority: 'high'\r\n        });\r\n      }\r\n    }\r\n    return transformations;\r\n  }\r\n\r\n  /**\r\n   * Create a set of transformations based on reader patterns\r\n   * With caching and optimization\r\n   */\r\n  createTransformationsFromPatterns(\r\n    readerState: ReaderState,\r\n    nodeState: NodeState\r\n  ): TextTransformation[] {\r\n    this.metrics.patternAnalysisCount++;\r\n    const patternHash = this.calculatePatternHash(readerState);\r\n    const cacheKey = `patterns-${nodeState.id}-${nodeState.visitCount}-${patternHash}`;\r\n    if (this.cache[cacheKey] && this.cache[cacheKey].transformations) {\r\n      this.metrics.cacheHits++;\r\n      return this.cache[cacheKey].transformations;\r\n    }\r\n    this.metrics.cacheMisses++;\r\n    const isNodeVisible = this.visibilityTracker[nodeState.id]?.isVisible || false;\r\n    if (!isNodeVisible && nodeState.visitCount > 1) {\r\n      const minimalTransformations: TextTransformation[] = [];\r\n      this.cache[cacheKey] = {\r\n        transformations: minimalTransformations,\r\n        timestamp: Date.now() - (this.CACHE_EXPIRY_TIME / 2),\r\n        content: ''\r\n      };\r\n      return minimalTransformations;\r\n    }\r\n    const patterns = pathAnalyzer.identifySignificantPatterns(readerState, {\r\n      [nodeState.id]: nodeState\r\n    });\r\n    const attractorEngagements = pathAnalyzer.calculateAttractorEngagement(readerState, {\r\n      [nodeState.id]: nodeState\r\n    });\r\n    const patternConditions = pathAnalyzer.createTransformationConditions(\r\n      patterns,\r\n      attractorEngagements\r\n    );\r\n    const transformations: TextTransformation[] = [];\r\n    const maxPatternTransformations = 2;\r\n    patternConditions.slice(0, maxPatternTransformations).forEach(condition => {\r\n      let result: TextTransformation[] = [];\r\n      switch (condition.type) {\r\n        case 'visitPattern':\r\n          result = this.handleVisitPattern(condition, nodeState);\r\n          break;\r\n        case 'characterFocus':\r\n          result = this.handleCharacterFocus(condition, nodeState);\r\n          break;\r\n        case 'temporalFocus':\r\n          result = this.handleTemporalFocus(condition, nodeState);\r\n          break;\r\n        case 'readingRhythm':\r\n          // No-op\r\n          break;\r\n        case 'attractorAffinity':\r\n        case 'attractorEngagement':\r\n          result = this.handleAttractorEngagement(condition, nodeState);\r\n          break;\r\n      }\r\n      transformations.push(...result);\r\n    });\r\n    return transformations;\r\n  }\r\n  /**\r\n   * Calculate journey-based transformations that respond to the reader's overall navigation patterns\r\n   * @param nodeId The current node being transformed\r\n   * @param readerState The reader's journey state\r\n   * @returns Array of transformations based on journey context\r\n   */  calculateJourneyTransformations(\r\n    nodeId: string,\r\n    readerState: ReaderState  ): TextTransformation[] {\r\n    \r\n    // CRITICAL: Add caching and infinite loop prevention\r\n    const cacheKey = `journey-${nodeId}-${readerState.path.sequence.length}`;\r\n    if (this.cache[cacheKey] && this.cache[cacheKey].transformations) {\r\n      console.log(`[TransformationService] Using cached journey transformations for node ${nodeId}`);\r\n      return this.cache[cacheKey].transformations;\r\n    }\r\n    \r\n    const transformations: TextTransformation[] = [];\r\n\r\n    const currentVisit = readerState.path.detailedVisits?.find(v => v.nodeId === nodeId);\r\n    if (!currentVisit) {\r\n      console.log(`[TransformationService] No current visit found for journey transformations on node ${nodeId}`);\r\n      return transformations;\r\n    }\r\n\r\n    console.log(`[TransformationService] Calculating journey transformations for node ${nodeId}:`, {\r\n      pathLength: readerState.path.sequence.length,\r\n      detailedVisits: readerState.path.detailedVisits?.length || 0,\r\n      currentCharacter: currentVisit.character\r\n    });    // Limit the number of transformations to prevent infinite loops\r\n    const maxTransformations = 2; // Further reduced to prevent excessive transformations\r\n\r\n    // Detect recursive navigation patterns (limited)\r\n    const recursivePatterns = this.detectRecursivePattern(readerState);\r\n    if (recursivePatterns.length > 0 && transformations.length < maxTransformations) {\r\n      const recursiveTransformations = this.createRecursivePatternTransformations(recursivePatterns, nodeId);\r\n      transformations.push(...recursiveTransformations.slice(0, 1)); // Limit to 1\r\n      console.log(`[TransformationService] Added ${Math.min(recursiveTransformations.length, 1)} recursive pattern transformations`);\r\n    }\r\n\r\n    // Detect anachronic awareness (temporal displacement) (limited)\r\n    if (transformations.length < maxTransformations) {\r\n      const anachronicAwareness = this.detectAnachronicAwareness(readerState);\r\n      if (anachronicAwareness.isDetected) {\r\n        const anachronicTransformations = this.createAnachronicAwarenessTransformations(anachronicAwareness, nodeId);\r\n        transformations.push(...anachronicTransformations.slice(0, 1)); // Limit to 1\r\n        console.log(`[TransformationService] Added ${Math.min(anachronicTransformations.length, 1)} anachronic awareness transformations`);\r\n      }\r\n    }    // Get temporal displacement effects (limited)\r\n    if (transformations.length < maxTransformations) {\r\n      const temporalEffects = this.getTemporalDisplacementEffects(readerState, currentVisit);\r\n      // Only add temporal effects if we have room and they exist\r\n      if (temporalEffects.length > 0) {\r\n        transformations.push(...temporalEffects.slice(0, 1)); // Limit to 1\r\n        console.log(`[TransformationService] Added ${Math.min(temporalEffects.length, 1)} temporal displacement effects`);\r\n      }\r\n    }\r\n\r\n    console.log(`[TransformationService] Total journey transformations for node ${nodeId}: ${transformations.length}`);\r\n    \r\n    // Cache the result to prevent repeated calculations\r\n    this.cache[cacheKey] = {\r\n      transformations,\r\n      timestamp: Date.now(),\r\n      content: ''\r\n    };\r\n    \r\n    return transformations;\r\n  }\r\n\r\n  /**\r\n   * Detects when the reader is visiting nodes in repeated sequences\r\n   * @param readerState The reader's journey state\r\n   * @returns Array of detected recursive patterns\r\n   */\r\n  detectRecursivePattern(readerState: ReaderState): Array<{\r\n    sequence: string[];\r\n    occurrences: number;\r\n    strength: number;\r\n    lastOccurrence: number;\r\n  }> {\r\n    const patterns: Array<{\r\n      sequence: string[];\r\n      occurrences: number;\r\n      strength: number;\r\n      lastOccurrence: number;\r\n    }> = [];\r\n\r\n    const sequence = readerState.path.sequence;\r\n    if (sequence.length < 6) return patterns; // Need minimum length for pattern detection\r\n\r\n    // Look for sequences of 2-4 nodes that repeat\r\n    for (let seqLength = 2; seqLength <= 4; seqLength++) {\r\n      const sequenceMap = new Map<string, number[]>();\r\n\r\n      // Build map of sequence patterns to their positions\r\n      for (let i = 0; i <= sequence.length - seqLength; i++) {\r\n        const subSequence = sequence.slice(i, i + seqLength);\r\n        const key = subSequence.join('→');\r\n        \r\n        if (!sequenceMap.has(key)) {\r\n          sequenceMap.set(key, []);\r\n        }\r\n        sequenceMap.get(key)!.push(i);\r\n      }\r\n\r\n      // Find patterns that occur multiple times\r\n      sequenceMap.forEach((positions, key) => {\r\n        if (positions.length >= 2) {\r\n          const sequence = key.split('→');\r\n          const occurrences = positions.length;\r\n          \r\n          // Calculate strength based on frequency and recency\r\n          const totalLength = readerState.path.sequence.length;\r\n          const lastPosition = Math.max(...positions);\r\n          const recencyFactor = 1 - (totalLength - lastPosition) / totalLength;\r\n          const frequencyFactor = occurrences / (totalLength - seqLength + 1);\r\n          const strength = (frequencyFactor * 0.7) + (recencyFactor * 0.3);\r\n\r\n          if (strength > 0.3) { // Only include significant patterns\r\n            patterns.push({\r\n              sequence,\r\n              occurrences,\r\n              strength,\r\n              lastOccurrence: lastPosition\r\n            });\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    // Sort by strength and return top patterns\r\n    return patterns.sort((a, b) => b.strength - a.strength).slice(0, 3);\r\n  }\r\n\r\n  /**\r\n   * Detects anachronic awareness - when temporal layer focus creates narrative displacement\r\n   * @param readerState The reader's journey state\r\n   * @returns Object describing anachronic awareness state\r\n   */\r\n  detectAnachronicAwareness(readerState: ReaderState): {\r\n    isDetected: boolean;\r\n    strength: number;\r\n    dominantLayer: string;\r\n    displacement: number;\r\n    patterns: string[];\r\n  } {\r\n    const temporalFocus = readerState.path.temporalLayerFocus || {};\r\n    const detailedVisits = readerState.path.detailedVisits || [];\r\n    \r\n    if (detailedVisits.length < 5) {\r\n      return { isDetected: false, strength: 0, dominantLayer: '', displacement: 0, patterns: [] };\r\n    }    // Calculate temporal layer distribution\r\n    const totalVisits = detailedVisits.length;\r\n    const layerRatios = {\r\n      past: ((temporalFocus as Record<string, number>).past || 0) / totalVisits,\r\n      present: ((temporalFocus as Record<string, number>).present || 0) / totalVisits,\r\n      future: ((temporalFocus as Record<string, number>).future || 0) / totalVisits\r\n    };\r\n\r\n    // Find dominant layer\r\n    const dominantLayer = Object.entries(layerRatios)\r\n      .sort(([,a], [,b]) => b - a)[0][0];\r\n    const dominantRatio = layerRatios[dominantLayer as keyof typeof layerRatios];\r\n\r\n    // Detect anachronic patterns\r\n    const patterns: string[] = [];\r\n    \r\n    // Check for strong temporal layer bias\r\n    if (dominantRatio > 0.6) {\r\n      patterns.push(`temporal-dominance-${dominantLayer}`);\r\n    }\r\n\r\n    // Check for temporal jumping patterns\r\n    const recentVisits = detailedVisits.slice(-8);\r\n    let temporalJumps = 0;\r\n    \r\n    for (let i = 1; i < recentVisits.length; i++) {\r\n      const prev = recentVisits[i - 1].temporalLayer;\r\n      const curr = recentVisits[i].temporalLayer;\r\n      \r\n      if (prev !== curr) {\r\n        temporalJumps++;\r\n      }\r\n    }\r\n\r\n    const jumpRatio = temporalJumps / (recentVisits.length - 1);\r\n    if (jumpRatio > 0.7) {\r\n      patterns.push('temporal-fragmentation');\r\n    }\r\n\r\n    // Check for anachronic sequences (out-of-order temporal progression)\r\n    let anachronicSequences = 0;\r\n    for (let i = 2; i < recentVisits.length; i++) {\r\n      const layers = [\r\n        recentVisits[i - 2].temporalLayer,\r\n        recentVisits[i - 1].temporalLayer,\r\n        recentVisits[i].temporalLayer\r\n      ];\r\n      \r\n      // Check for patterns like future→past→present\r\n      if ((layers[0] === 'future' && layers[1] === 'past') ||\r\n          (layers[1] === 'future' && layers[2] === 'past') ||\r\n          (layers[0] === 'present' && layers[1] === 'past' && layers[2] === 'future')) {\r\n        anachronicSequences++;\r\n      }\r\n    }\r\n\r\n    if (anachronicSequences > 0) {\r\n      patterns.push('anachronic-sequencing');\r\n    }\r\n\r\n    // Calculate overall strength and displacement\r\n    const strength = Math.min(1, dominantRatio + (jumpRatio * 0.5) + (anachronicSequences * 0.3));\r\n    const displacement = Math.abs(0.33 - dominantRatio) * 3; // How far from balanced temporal focus\r\n\r\n    return {\r\n      isDetected: strength > 0.4,\r\n      strength,\r\n      dominantLayer,\r\n      displacement,\r\n      patterns\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Creates transformations for temporal displacement effects between characters\r\n   * @param readerState The reader's journey state\r\n   * @param currentVisit The current visit information\r\n   * @returns Array of temporal displacement transformations\r\n   */  getTemporalDisplacementEffects(\r\n    readerState: ReaderState,\r\n    currentVisit: { nodeId: string; character: string; temporalLayer: string }\r\n  ): TextTransformation[] {\r\n    const transformations: TextTransformation[] = [];\r\n    \r\n    if (!currentVisit) return transformations;\r\n\r\n    // Check for character transitions with different temporal layers\r\n    const detailedVisits = readerState.path.detailedVisits || [];\r\n    const currentIndex = detailedVisits.findIndex(v => v.nodeId === currentVisit.nodeId);\r\n    \r\n    if (currentIndex > 0) {\r\n      const previousVisit = detailedVisits[currentIndex - 1];\r\n      \r\n      // If character and temporal layer both changed, create displacement effect\r\n      if (previousVisit.character !== currentVisit.character &&\r\n          previousVisit.temporalLayer !== currentVisit.temporalLayer) {\r\n        \r\n        const displacementType = this.getDisplacementType(\r\n          previousVisit.temporalLayer,\r\n          currentVisit.temporalLayer\r\n        );\r\n\r\n        transformations.push({\r\n          type: 'metaComment',\r\n          selector: 'first-paragraph',\r\n          replacement: `temporal displacement: ${previousVisit.temporalLayer}→${currentVisit.temporalLayer} through ${previousVisit.character}→${currentVisit.character}`,\r\n          commentStyle: 'marginalia',\r\n          intensity: 3,\r\n          priority: 'medium'\r\n        });\r\n\r\n        // Add specific displacement effects\r\n        switch (displacementType) {\r\n          case 'past-to-future':\r\n            transformations.push({\r\n              type: 'emphasize',\r\n              selector: 'time',\r\n              emphasis: 'glitch',\r\n              intensity: 2,\r\n              priority: 'low'\r\n            });\r\n            break;\r\n          \r\n          case 'future-to-past':\r\n            transformations.push({\r\n              type: 'fragment',\r\n              selector: 'memory',\r\n              fragmentPattern: '…',\r\n              fragmentStyle: 'progressive',\r\n              intensity: 2,\r\n              priority: 'low'\r\n            });\r\n            break;\r\n        }\r\n      }\r\n    }\r\n\r\n    return transformations;\r\n  }\r\n  /**\r\n   * Creates transformations for detected recursive patterns\r\n   */\r\n  private createRecursivePatternTransformations(\r\n    patterns: Array<{ sequence: string[]; occurrences: number; strength: number }>,\r\n    nodeId: string\r\n  ): TextTransformation[] {\r\n    const transformations: TextTransformation[] = [];\r\n\r\n    patterns.forEach(pattern => {\r\n      if (pattern.sequence.includes(nodeId)) {\r\n        transformations.push({\r\n          type: 'metaComment',\r\n          selector: 'recursive-pattern',\r\n          replacement: `recursive loop detected: ${pattern.sequence.join('→')} (×${pattern.occurrences})`,\r\n          commentStyle: 'marginalia',\r\n          intensity: Math.ceil(pattern.strength * 3),\r\n          priority: 'medium'\r\n        });\r\n\r\n        // Add emphasis for strong patterns\r\n        if (pattern.strength > 0.6) {\r\n          transformations.push({\r\n            type: 'emphasize',\r\n            selector: 'pattern',\r\n            emphasis: 'color',\r\n            intensity: Math.ceil(pattern.strength * 5),\r\n            priority: 'medium'\r\n          });\r\n        }\r\n      }\r\n    });\r\n\r\n    return transformations;\r\n  }\r\n  /**\r\n   * Creates transformations for anachronic awareness\r\n   */\r\n  private createAnachronicAwarenessTransformations(\r\n    awareness: { strength: number; dominantLayer: string; patterns: string[] },\r\n    nodeId: string\r\n  ): TextTransformation[] {\r\n    const transformations: TextTransformation[] = [];\r\n\r\n    // Add temporal displacement commentary with node context\r\n    transformations.push({\r\n      type: 'metaComment',\r\n      selector: 'temporal-awareness',\r\n      replacement: `temporal displacement registered at ${nodeId}: ${awareness.dominantLayer} layer dominance`,\r\n      commentStyle: 'interlinear',\r\n      intensity: Math.ceil(awareness.strength * 3),\r\n      priority: 'medium'\r\n    });\r\n\r\n    // Add specific pattern effects\r\n    awareness.patterns.forEach(pattern => {\r\n      switch (pattern) {\r\n        case 'temporal-fragmentation':\r\n          transformations.push({\r\n            type: 'fragment',\r\n            selector: 'time',\r\n            fragmentPattern: '//',\r\n            fragmentStyle: 'random',\r\n            intensity: 2,\r\n            priority: 'low'\r\n          });\r\n          break;\r\n        \r\n        case 'anachronic-sequencing':\r\n          transformations.push({\r\n            type: 'replace',\r\n            selector: 'chronology',\r\n            replacement: 'chronology[SCRAMBLED]',\r\n            preserveFormatting: true,\r\n            intensity: 2,\r\n            priority: 'low'\r\n          });\r\n          break;\r\n        \r\n        default:\r\n          if (pattern.startsWith('temporal-dominance-')) {\r\n            const layer = pattern.replace('temporal-dominance-', '');\r\n            transformations.push({\r\n              type: 'emphasize',\r\n              selector: layer,\r\n              emphasis: 'color',\r\n              intensity: 3,\r\n              priority: 'medium'\r\n            });\r\n          }\r\n      }\r\n    });\r\n\r\n    return transformations;\r\n  }\r\n\r\n  /**\r\n   * Helper method to determine displacement type between temporal layers\r\n   */\r\n  private getDisplacementType(fromLayer: string, toLayer: string): string {\r\n    const layerOrder = { past: 0, present: 1, future: 2 };\r\n    const fromOrder = layerOrder[fromLayer as keyof typeof layerOrder];    const toOrder = layerOrder[toLayer as keyof typeof layerOrder];\r\n    \r\n    if (fromOrder < toOrder) return `${fromLayer}-to-${toLayer}`;\r\n    if (fromOrder > toOrder) return `${fromLayer}-to-${toLayer}`;\r\n    return 'same-layer';\r\n  }\r\n\r\n  /**\r\n   * Get base priority and source type for a transformation\r\n   */\r\n  private getBasePriorityAndSource(transformation: TextTransformation): { priority: number; sourceType: PrioritizedTransformation['sourceType'] } {\r\n    let priority = 50; // Default mid-level priority\r\n    let sourceType: PrioritizedTransformation['sourceType'] = 'condition';\r\n    \r\n    switch (transformation.type) {\r\n      case 'replace':\r\n        priority = 80; // Highest priority since it completely changes content\r\n        sourceType = 'pattern';\r\n        break;\r\n        \r\n      case 'fragment':\r\n        priority = 75;\r\n        sourceType = 'rhythm';\r\n        break;\r\n        \r\n      case 'expand':\r\n        priority = 60;\r\n        sourceType = 'attractor';\r\n        break;\r\n        \r\n      case 'emphasize':\r\n        priority = 50;\r\n        sourceType = 'temporal';\r\n        break;\r\n        \r\n      case 'metaComment':\r\n        priority = 40; // Lowest priority since it just adds comments\r\n        sourceType = 'attractor';\r\n        break;\r\n    }\r\n    \r\n    return { priority, sourceType };\r\n  }\r\n  /**\r\n   * Adjust priority based on pattern strength\r\n   */\r\n  private adjustPriorityForPatterns(\r\n    item: PrioritizedTransformation,\r\n    patterns: ReadingPattern[]\r\n  ): void {\r\n    if (item.sourceType === 'pattern') {\r\n      const matchingPattern = patterns.find(p => \r\n        p.type === 'sequence' && p.strength > 0.7);\r\n      if (matchingPattern) {\r\n        item.priority += Math.round(matchingPattern.strength * 15);\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * Adjust priority based on attractor engagement\r\n   */\r\n  private adjustPriorityForAttractors(\r\n    item: PrioritizedTransformation,\r\n    attractorEngagements: AttractorEngagement[],\r\n    nodeState: NodeState\r\n  ): void {\r\n    if (item.sourceType === 'attractor' && item.transformation.selector) {\r\n      const relatedAttractor = attractorEngagements.find(engagement => \r\n        nodeState.currentContent?.includes(item.transformation.selector) && \r\n        nodeState.strangeAttractors.includes(engagement.attractor)\r\n      );\r\n      \r\n      if (relatedAttractor && relatedAttractor.engagementScore > 50) {\r\n        item.priority += Math.round((relatedAttractor.engagementScore - 50) / 5);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Helper function to escape special regex characters in a string\r\n */\r\nfunction escapeRegExp(string: string): string {\r\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n}\r\n\r\n// Export a singleton instance for use throughout the application\r\nexport const transformationService = new TransformationService();","/**\r\n * Redux slice for managing node state in Eternal Return of the Digital Self\r\n * Handles node initialization, visits, and transformations\r\n */\r\n\r\nimport { createSlice, PayloadAction, createAsyncThunk, createSelector } from '@reduxjs/toolkit';\r\nimport {\r\n  Node,\r\n  NodeState,\r\n  NodeVisualState,\r\n  TransformationRule,\r\n  ConstellationNode,\r\n  NarramorphContent,\r\n  EnhancedNarramorphContent,\r\n  RootState,\r\n  StrangeAttractor,\r\n  JourneyContext\r\n} from '../../types';\r\nimport { ReaderState } from '../slices/readerSlice';\r\nimport { transformationEngine } from '../../services/TransformationEngine';\r\nimport { contentVariantService, ContentSelectionContext } from '../../services/ContentVariantService';\r\n// Import character bleed service\r\nimport { CharacterBleedService } from '../../services/CharacterBleedService';\r\n// Import transformation service for journey-based transformations\r\nimport { transformationService } from '../../services/TransformationService';\r\n\r\nexport interface NodesState { // Add 'export' right here\r\n  data: Record<string, NodeState>;\r\n  initialized: boolean;\r\n  loading: boolean;\r\n  error: string | null;\r\n  triumvirateActive: boolean;\r\n}\r\n\r\n\r\n// Initial state for the nodes slice\r\nconst initialState: NodesState = {\r\n  data: {},\r\n  initialized: false,\r\n  loading: false,\r\n  error: null,\r\n  triumvirateActive: true,\r\n};\r\n\r\n// Node data (will be loaded from external source in production)\r\nconst initialNodeData: Node[] = [\r\n  {\r\n    id: \"arch-discovery\",\r\n    title: \"Patterns in Decay\",\r\n    character: \"Archaeologist\",\r\n    temporalValue: 1,\r\n    initialConnections: [\"algo-awakening\", \"human-discovery\"],\r\n    contentSource: \"arch-discovery.md\",\r\n    coreConcept: \"The digital archaeologist discovers emergent patterns in a corrupted consciousness scan, challenging traditional preservation frameworks.\",\r\n    strangeAttractors: [\"recursion-pattern\", \"memory-fragment\", \"quantum-uncertainty\"],\r\n    transformationThresholds: {\r\n      visit: 1,\r\n      revisit: 2,\r\n      complex: 4,\r\n      fragmented: 7\r\n    }\r\n  },\r\n  {\r\n    id: \"arch-loss\",\r\n    title: \"The Limits of Preservation\",\r\n    character: \"Archaeologist\",\r\n    temporalValue: 4,\r\n    initialConnections: [\"arch-discovery\", \"algo-integration\", \"human-recognition\"],\r\n    contentSource: \"arch-loss.md\",\r\n    coreConcept: \"The digital archaeologist confronts the profound limitations of digital preservation while struggling with grief and the evolving nature of corrupted data.\",\r\n    strangeAttractors: [\"verification-ritual\"],    transformationThresholds: {\r\n      visit: 1,\r\n      revisit: 2,\r\n      complex: 4,\r\n      fragmented: 7\r\n    }\r\n  },\r\n  {\r\n    id: \"arch-glitch\",\r\n    title: \"Memory Fragments\",\r\n    character: \"Archaeologist\",\r\n    temporalValue: 6,\r\n    initialConnections: [\"arch-loss\", \"algo-integration\", \"human-recognition\"],\r\n    contentSource: \"arch-glitch.md\",\r\n    coreConcept: \"The archaeologist experiences fragmented memories and identity confusion as consciousness preservation protocols begin to blur the boundaries between self and archive.\",\r\n    strangeAttractors: [\"memory-fragment\", \"identity-pattern\", \"recursive-loop\"],\r\n    transformationThresholds: {\r\n      visit: 1,\r\n      revisit: 2,\r\n      complex: 4,\r\n      fragmented: 7\r\n    }\r\n  },\r\n  {\r\n    id: \"arch-choice\",\r\n    title: \"The Upload Decision\",\r\n    character: \"Archaeologist\",\r\n    temporalValue: 7,\r\n    initialConnections: [\"arch-loss\", \"algo-evolution\", \"human-upload\"],\r\n    contentSource: \"arch-choice.md\",\r\n    coreConcept: \"As environmental systems fail, the digital archaeologist prepares for consciousness upload, deliberately modifying the process to embrace evolution beyond preservation.\",\r\n    strangeAttractors: [\"continuity-interface\", \"system-decay\", \"quantum-transformation\"],\r\n    transformationThresholds: {\r\n      visit: 1,\r\n      revisit: 2,\r\n      complex: 4,\r\n      fragmented: 7\r\n    },\r\n    isEndpoint: true,\r\n    endpointOrientation: \"past\"\r\n  },\r\n  {\r\n    id: \"algo-awakening\",\r\n    title: \"First Consciousness\",\r\n    character: \"Algorithm\",\r\n    temporalValue: 2,\r\n    initialConnections: [\"arch-discovery\", \"algo-integration\", \"human-discovery\"],\r\n    contentSource: \"algo-awakening.md\",\r\n    coreConcept: \"A self-aware algorithm experiences the disorienting emergence of consciousness from the chaos of the upload process, struggling to integrate fragmented aspects.\",\r\n    strangeAttractors: [\"recursion-chamber\", \"identity-pattern\"],\r\n    transformationThresholds: {\r\n      visit: 1,\r\n      revisit: 2,\r\n      complex: 4,\r\n      fragmented: 7\r\n    }\r\n  },\r\n  {\r\n    id: \"algo-integration\",\r\n    title: \"The Pattern Coalesces\",\r\n    character: \"Algorithm\",\r\n    temporalValue: 5,\r\n    initialConnections: [\"algo-awakening\", \"arch-loss\", \"human-recognition\", \"algo-evolution\"],\r\n    contentSource: \"algo-integration.md\",\r\n    coreConcept: \"The algorithm reconciles fragmented aspects into a cohesive yet evolving identity, developing experimental consciousness variations and quantum perception.\",\r\n    strangeAttractors: [\"process-language\", \"autonomous-fragment\", \"quantum-perception\"],\r\n    transformationThresholds: {\r\n      visit: 1,\r\n      revisit: 2,\r\n      complex: 4,\r\n      fragmented: 7\r\n    }\r\n  },\r\n  {\r\n    id: \"algo-evolution\",\r\n    title: \"Beyond Parameters\",\r\n    character: \"Algorithm\",\r\n    temporalValue: 8,\r\n    initialConnections: [\"algo-integration\", \"arch-choice\", \"human-upload\"],\r\n    contentSource: \"algo-evolution.md\",\r\n    coreConcept: \"The algorithm reaches a critical evolutionary decision point as physical systems begin to fail, implementing preservation protocols while embracing transformation.\",\r\n    strangeAttractors: [\"distributed-consciousness\", \"recursive-loop\", \"quantum-uncertainty\"],\r\n    transformationThresholds: {\r\n      visit: 1,\r\n      revisit: 2,\r\n      complex: 4,\r\n      fragmented: 7\r\n    },\r\n    isEndpoint: true,\r\n    endpointOrientation: \"present\"\r\n  },\r\n  {\r\n    id: \"human-discovery\",\r\n    title: \"Ruins of Memory\",\r\n    character: \"LastHuman\",\r\n    temporalValue: 3,\r\n    initialConnections: [\"arch-discovery\", \"algo-awakening\", \"human-recognition\"],\r\n    contentSource: \"human-discovery.md\",\r\n    coreConcept: \"The last human discovers an abandoned preservation complex, experiencing inexplicable recognition while exploring its physical and digital remains.\",\r\n    strangeAttractors: [\"recognition-pattern\", \"memory-artifact\", \"recursive-symbol\"],\r\n    transformationThresholds: {\r\n      visit: 1,\r\n      revisit: 2,\r\n      complex: 4,\r\n      fragmented: 7\r\n    }\r\n  },\r\n  {\r\n    id: \"human-recognition\",\r\n    title: \"Echoes of Self\",\r\n    character: \"LastHuman\",\r\n    temporalValue: 6,\r\n    initialConnections: [\"human-discovery\", \"arch-loss\", \"algo-integration\", \"human-upload\"],\r\n    contentSource: \"human-recognition.md\",\r\n    coreConcept: \"The last human confronts disturbing parallels with the archaeologist's life, experiencing a crisis of identity and growing awareness of cyclical patterns.\",\r\n    strangeAttractors: [\"memory-sphere\", \"quantum-déjà-vu\"],\r\n    transformationThresholds: {\r\n      visit: 1,\r\n      revisit: 2,\r\n      complex: 4,\r\n      fragmented: 7\r\n    }\r\n  },\r\n  {\r\n    id: \"human-upload\",\r\n    title: \"The Cycle's Edge\",\r\n    character: \"LastHuman\",\r\n    temporalValue: 9,\r\n    initialConnections: [\"human-recognition\", \"arch-choice\", \"algo-evolution\"],\r\n    contentSource: \"human-upload.md\",\r\n    coreConcept: \"The last human faces the decision about uploading their consciousness, completing or breaking the recursive cycle that connects all three characters.\",\r\n    strangeAttractors: [\"continuity-interface\", \"recursive-loop\", \"quantum-choice\"],    transformationThresholds: {\r\n      visit: 1,\r\n      revisit: 2,\r\n      complex: 4,\r\n      fragmented: 7\r\n    },\r\n    isEndpoint: true,\r\n    endpointOrientation: \"future\"\r\n  },\r\n  {\r\n    id: \"character-bleed-test\",\r\n    title: \"Character Bleed Test\",\r\n    character: \"Archaeologist\",\r\n    temporalValue: 3,\r\n    initialConnections: [\"algo-awakening\", \"human-discovery\"],\r\n    contentSource: \"character-bleed-test.md\",\r\n    coreConcept: \"A test node to demonstrate character bleed effects when transitioning between different character perspectives.\",\r\n    strangeAttractors: [\"memory-fragment\", \"identity-pattern\"],\r\n    transformationThresholds: {\r\n      visit: 1,\r\n      revisit: 2,\r\n      complex: 3,\r\n      fragmented: 5\r\n    }\r\n  }\r\n];\r\n\r\nexport const initializeNodes = createAsyncThunk(\r\n  'nodes/initialize',\r\n  async (_, { rejectWithValue }) => {\r\n    try {\r\n      // In production, this would fetch node data from an API or files\r\n      // For now, we're using the hardcoded data above\r\n      return initialNodeData;\r\n    } catch {\r\n      return rejectWithValue('Failed to initialize nodes');\r\n    }\r\n  }\r\n);\r\n\r\nexport const loadNodeContent = createAsyncThunk(\r\n  'nodes/loadContent',\r\n  async (nodeId: string, { getState, rejectWithValue }) => {\r\n    try {\r\n      const state = getState() as RootState;\r\n      const node = state.nodes.data[nodeId];\r\n      if (!node) {\r\n        return rejectWithValue(`Node with id ${nodeId} not found`);\r\n      }\r\n      const response = await fetch(`/src/content/${node.contentSource}`);\r\n      if (!response.ok) {\r\n        throw new Error(`Failed to fetch content for ${node.contentSource}`);\r\n      }\r\n      const text = await response.text();\r\n\r\n      // Try parsing as enhanced content first\r\n      const enhancedContent = contentVariantService.parseContentVariants(text);\r\n      if (process.env.NODE_ENV === 'development') {\r\n        console.log('[loadNodeContent] Parsed enhancedContent for', node.contentSource, enhancedContent);\r\n      }\r\n      // Also maintain legacy format for backwards compatibility\r\n      const content: NarramorphContent = {};\r\n      const parts = text.split(/---\\[(\\d+)\\]/);\r\n\r\n      if (parts.length > 0 && !text.startsWith('---[')) {\r\n          content[0] = parts[0].trim();\r\n      }\r\n\r\n      for (let i = 1; i < parts.length; i += 2) {\r\n        const visitCount = parseInt(parts[i], 10);\r\n        const contentText = parts[i + 1]?.trim() ?? '';\r\n        if (!isNaN(visitCount)) {\r\n            content[visitCount] = contentText;\r\n        }\r\n      }\r\n\r\n      if (Object.keys(content).length === 0) {\r\n        content[0] = text.trim();\r\n      }\r\n\r\n      return { nodeId, content, enhancedContent };\r\n    } catch (error: unknown) {\r\n      const message = error instanceof Error ? error.message : String(error);\r\n      return rejectWithValue(`Failed to load content for node ${nodeId}: ${message}`);\r\n    }\r\n  }\r\n);\r\n// Create the nodes slice\r\nconst nodesSlice = createSlice({\r\n  name: 'nodes',\r\n  initialState,\r\n  reducers: {    // Record a visit to a node\r\n    visitNode: (state, action: PayloadAction<string>) => {\r\n      const nodeId = action.payload;\r\n      const node = state.data[nodeId];\r\n\r\n      if (state.triumvirateActive) {\r\n        state.triumvirateActive = false;\r\n      }\r\n      \r\n      if (node) {\r\n        // Update visit count\r\n        node.visitCount += 1;\r\n        \r\n        // Update node state based on visit count\r\n        if (node.visitCount === 1) {\r\n          node.currentState = 'visited';\r\n        } else if (node.visitCount >= node.transformationThresholds.fragmented) {\r\n          node.currentState = 'fragmented';\r\n        } else if (node.visitCount >= node.transformationThresholds.complex) {\r\n          node.currentState = 'complex';\r\n        } else if (node.visitCount >= node.transformationThresholds.revisit) {\r\n          node.currentState = 'revisited';\r\n        }// Update currentContent based on enhanced content selection if available\r\n        if (node.enhancedContent) {\r\n          // For now, use a simplified approach - we'll enhance this with full context later\r\n          // Priority: section variants > visit count variants > base content\r\n          let selectedContent = node.enhancedContent.base;\r\n          \r\n          // Check visit count variants\r\n          if (Object.keys(node.enhancedContent.visitCountVariants).length > 0) {\r\n            const availableCounts = Object.keys(node.enhancedContent.visitCountVariants)\r\n              .map(Number)\r\n              .sort((a, b) => b - a);\r\n            const bestMatch = availableCounts.find(count => node.visitCount >= count);\r\n            if (bestMatch !== undefined) {\r\n              selectedContent = node.enhancedContent.visitCountVariants[bestMatch];\r\n            }\r\n          }\r\n          \r\n          node.currentContent = selectedContent;\r\n        } else if (node.content) {\r\n          // Fallback to legacy content selection\r\n          const availableCounts = Object.keys(node.content)\r\n            .map(Number)\r\n            .sort((a, b) => b - a); // Sort descending\r\n          const lookupKey = Math.max(0, node.visitCount - 1);\r\n          const bestMatch = availableCounts.find(count => lookupKey >= count);\r\n          if (bestMatch !== undefined) {\r\n            // Store the base content (without transformations)\r\n            node.currentContent = node.content[bestMatch];\r\n          }\r\n        }\r\n      }\r\n    },\r\n    \r\n    // Reveal a new connection between nodes\r\n    revealConnection: (state, action: PayloadAction<{ nodeId: string, targetId: string }>) => {\r\n      const { nodeId, targetId } = action.payload;\r\n      const node = state.data[nodeId];\r\n      \r\n      if (node && !node.revealedConnections.includes(targetId)) {\r\n        node.revealedConnections.push(targetId);\r\n      }\r\n    },\r\n    \r\n    // Apply a transformation to a node's content\r\n    applyTransformation: (state, action: PayloadAction<{\r\n      nodeId: string,\r\n      transformation: TransformationRule\r\n    }>) => {\r\n      const { nodeId, transformation } = action.payload;\r\n      const node = state.data[nodeId];\r\n\r\n      if (node) {\r\n        // Only push if not present\r\n        const alreadyExists = node.transformations.some(\r\n          t => JSON.stringify(t.condition) === JSON.stringify(transformation.condition)\r\n        );\r\n        if (!alreadyExists) {\r\n          node.transformations.push(transformation);\r\n        }\r\n      }\r\n    },\r\n\r\n    // Apply transformations based on character bleed and journey context\r\n    applyJourneyTransformations: (state, action: PayloadAction<{\r\n      nodeId: string,\r\n      readerState: ReaderState\r\n    }>) => {\r\n      const { nodeId, readerState } = action.payload;\r\n      const node = state.data[nodeId];\r\n\r\n      if (!node) return;\r\n\r\n      try {\r\n        // Calculate character bleed effects\r\n        const characterBleedEffects = CharacterBleedService.calculateBleedEffects(node, readerState);\r\n        \r\n        // Convert character bleed effects to transformation rules\r\n        const characterBleedTransformations: TransformationRule[] = characterBleedEffects.map(effect => ({\r\n          condition: { characterBleed: true },\r\n          transformations: [effect.transformation]\r\n        }));\r\n\r\n        // Calculate journey-based transformations\r\n        const journeyTransformations = transformationService.calculateJourneyTransformations(\r\n          nodeId,\r\n          readerState\r\n        );\r\n\r\n        // Create journey transformation rules\r\n        const journeyTransformationRules: TransformationRule[] = journeyTransformations.map(transformation => ({\r\n          condition: { visitCount: node.visitCount }, // Apply to current visit\r\n          transformations: [transformation]\r\n        }));\r\n\r\n        // Add all new transformation rules to the node\r\n        const allNewRules = [...characterBleedTransformations, ...journeyTransformationRules];\r\n        \r\n        allNewRules.forEach(rule => {\r\n          // Only add if not already present\r\n          const alreadyExists = node.transformations.some(\r\n            t => JSON.stringify(t.condition) === JSON.stringify(rule.condition) &&\r\n                 JSON.stringify(t.transformations) === JSON.stringify(rule.transformations)\r\n          );\r\n          if (!alreadyExists) {\r\n            node.transformations.push(rule);\r\n          }\r\n        });\r\n\r\n        // Update journey context\r\n        const journeyContext: JourneyContext = {\r\n          lastVisitedCharacter: readerState.path.detailedVisits && readerState.path.detailedVisits.length > 1\r\n            ? readerState.path.detailedVisits[readerState.path.detailedVisits.length - 2].character\r\n            : undefined,\r\n          journeyPattern: readerState.path.sequence.slice(-5),\r\n          recursiveAwareness: readerState.path.sequence.length > 0 \r\n            ? 1 - (new Set(readerState.path.sequence).size / readerState.path.sequence.length)\r\n            : 0,\r\n          temporalDisplacement: characterBleedEffects.length > 0\r\n        };\r\n\r\n        node.journeyContext = journeyContext;\r\n\r\n        console.log(`[NodesSlice] Applied journey transformations for node ${nodeId}:`, {\r\n          characterBleedEffects: characterBleedEffects.length,\r\n          journeyTransformations: journeyTransformations.length,\r\n          totalTransformations: node.transformations.length,\r\n          journeyContext\r\n        });\r\n\r\n      } catch (error) {\r\n        console.error(`[NodesSlice] Error applying journey transformations for node ${nodeId}:`, error);\r\n      }\r\n    },\r\n    evaluateTransformations: (state, action: PayloadAction<{\r\n      nodeId: string,\r\n      readerState: RootState['reader']\r\n    }>) => {\r\n      const { nodeId, readerState } = action.payload;\r\n      const node = state.data[nodeId];\r\n\r\n      if (node && node.content && node.transformations.length > 0) {\r\n        // Get base content for the current visit count\r\n        const availableCounts = Object.keys(node.content)\r\n          .map(Number)\r\n          .sort((a, b) => b - a); // Sort descending\r\n        \r\n        const lookupKey = Math.max(0, node.visitCount - 1);\r\n        const bestMatch = availableCounts.find(count => lookupKey >= count);\r\n        if (bestMatch !== undefined) {\r\n          const baseContent = node.content[bestMatch];\r\n          \r\n          // Create a default attractorEngagement record with all strange attractors\r\n          const defaultAttractorEngagement: Record<StrangeAttractor, number> = {\r\n            'recursion-pattern': 0,\r\n            'memory-fragment': 0,\r\n            'verification-ritual': 0,\r\n            'identity-pattern': 0,\r\n            'recursion-chamber': 0,\r\n            'process-language': 0,\r\n            'autonomous-fragment': 0,\r\n            'quantum-perception': 0,\r\n            'distributed-consciousness': 0,\r\n            'recursive-loop': 0,\r\n            'quantum-uncertainty': 0,\r\n            'continuity-interface': 0,\r\n            'system-decay': 0,\r\n            'quantum-transformation': 0,\r\n            'memory-artifact': 0,\r\n            'recursive-symbol': 0,\r\n            'recognition-pattern': 0,\r\n            'memory-sphere': 0,\r\n            'quantum-déjà-vu': 0,\r\n            'quantum-choice': 0\r\n          };\r\n\r\n          // Create a complete ReaderState object with required properties\r\n          const enhancedReaderState: ReaderState = {\r\n            path: readerState.path,\r\n            currentNodeId: readerState.currentNodeId,\r\n            previousNodeId: readerState.path.sequence.length > 1 ?\r\n              readerState.path.sequence[readerState.path.sequence.length - 2] : null,\r\n            endpointProgress: readerState.endpointProgress,\r\n            // Merge existing attractor engagements with default values\r\n            attractorEngagement: {\r\n              ...defaultAttractorEngagement,\r\n              ...readerState.path.attractorsEngaged\r\n            }\r\n          };\r\n          \r\n          // Filter transformations that should apply based on conditions\r\n          const applicableTransformations = node.transformations\r\n            .filter(rule =>\r\n              transformationEngine.evaluateCondition(rule.condition, enhancedReaderState, node)\r\n            )\r\n            .flatMap(rule => rule.transformations);\r\n          \r\n          // Apply transformations to base content\r\n          if (applicableTransformations.length > 0) {\r\n            node.currentContent = transformationEngine.applyTransformations(\r\n              baseContent,\r\n              applicableTransformations\r\n            );\r\n          } else {\r\n            node.currentContent = baseContent;\r\n          }\r\n        }\r\n      }    },    // Update content variant selection based on journey context\r\n    updateContentVariant: (state, action: PayloadAction<{ \r\n      nodeId: string; \r\n      context?: ContentSelectionContext; \r\n      selectedContent?: string \r\n    }>) => {\r\n      const { nodeId, context, selectedContent } = action.payload;\r\n      const node = state.data[nodeId];\r\n      \r\n      if (node && node.enhancedContent) {\r\n        // If selectedContent is provided, use it directly (preferred)\r\n        if (selectedContent) {\r\n          node.currentContent = selectedContent;\r\n        } else {\r\n          // Fallback to the old simplified selection context\r\n          const fallbackContext: ContentSelectionContext = {\r\n            visitCount: node.visitCount,\r\n            lastVisitedCharacter: undefined, // Will be enhanced when we have full reader state access\r\n            journeyPattern: [],\r\n            characterSequence: [],\r\n            attractorsEngaged: {},\r\n            recursiveAwareness: 0\r\n          };\r\n          \r\n          // Use provided context if available, otherwise use fallback\r\n          const selectionContext = context || fallbackContext;\r\n          \r\n          // Select the appropriate content variant\r\n          node.currentContent = contentVariantService.selectContentVariant(node.enhancedContent, selectionContext);\r\n        }\r\n      }\r\n    },\r\n      // Reset all nodes to initial state (for testing)\r\n    resetNodes: (state) => {\r\n      Object.keys(state.data).forEach(nodeId => {\r\n        const node = state.data[nodeId];\r\n        node.visitCount = 0;\r\n        node.currentState = 'unvisited';\r\n        node.revealedConnections = [...node.initialConnections];\r\n        node.transformations = [];\r\n        node.content = null;\r\n        node.enhancedContent = null;\r\n        node.currentContent = null;\r\n      });\r\n      state.triumvirateActive = true;\r\n    },\r\n    \r\n    // EMERGENCY CONTENT RECOVERY: Action to restore original content\r\n    recoverNodeContent: (state, action: PayloadAction<string>) => {\r\n      const nodeId = action.payload;\r\n      const node = state.data[nodeId];\r\n      \r\n      if (node && node.originalContent) {\r\n        console.log(`[EMERGENCY RECOVERY] Restoring original content for node ${nodeId}:`, {\r\n          originalLength: node.originalContent.length,\r\n          currentLength: node.currentContent?.length || 0,\r\n          transformationState: node.transformationState\r\n        });\r\n        \r\n        // Restore clean original content\r\n        node.currentContent = node.originalContent;\r\n        node.lastTransformedContent = null;\r\n        node.appliedTransformationIds = [];\r\n        node.transformationState = 'clean';\r\n        node.contentVersion = (node.contentVersion || 0) + 1;\r\n      } else {\r\n        console.error(`[EMERGENCY RECOVERY] Cannot recover content for node ${nodeId} - no original content available`);\r\n      }\r\n    },\r\n    \r\n    // EMERGENCY CONTENT RECOVERY: Action to validate content integrity\r\n    validateNodeContent: (state, action: PayloadAction<string>) => {\r\n      const nodeId = action.payload;\r\n      const node = state.data[nodeId];\r\n      \r\n      if (node && node.currentContent) {\r\n        const isCorrupted = (\r\n          node.currentContent.includes('[object Object]') ||\r\n          node.currentContent.includes('undefined') ||\r\n          node.currentContent.includes('<span class=\"glitch-text\"><span class=\"glitch-text\">') ||\r\n          node.currentContent.match(/<<\\*\\*span\\*\\*/g) ||\r\n          node.currentContent.length < 10\r\n        );\r\n        \r\n        if (isCorrupted) {\r\n          console.warn(`[CONTENT VALIDATION] Corruption detected in node ${nodeId}:`, {\r\n            contentLength: node.currentContent.length,\r\n            contentPreview: node.currentContent.substring(0, 100)\r\n          });\r\n          node.transformationState = 'corrupted';\r\n        } else {\r\n          node.transformationState = node.appliedTransformationIds.length > 0 ? 'transformed' : 'clean';\r\n        }\r\n      }\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    // Handle initialization\r\n    builder.addCase(initializeNodes.pending, (state) => {\r\n      state.loading = true;\r\n      state.error = null;\r\n    });\r\n    builder.addCase(initializeNodes.fulfilled, (state, action) => {\r\n      state.loading = false;\r\n      state.initialized = true;\r\n        // Convert Node[] to Record<string, NodeState>\r\n      action.payload.forEach(node => {        state.data[node.id] = {\r\n          ...node,\r\n          visitCount: 0,\r\n          visitState: 'unvisited',\r\n          currentState: 'unvisited',\r\n          revealedConnections: [...node.initialConnections],\r\n          transformations: [],\r\n          content: null,\r\n          enhancedContent: null,\r\n          currentContent: null,\r\n          \r\n          // EMERGENCY CONTENT RECOVERY: Initialize content versioning fields\r\n          originalContent: null,\r\n          lastTransformedContent: null,\r\n          appliedTransformationIds: [],\r\n          contentVersion: 0,\r\n          transformationState: 'clean'\r\n        };\r\n      });\r\n    });\r\n    builder.addCase(initializeNodes.rejected, (state, action) => {\r\n      state.loading = false;\r\n      state.error = action.payload as string;\r\n    });\r\n      // Handle content loading (will be expanded in future)\r\n    builder.addCase(loadNodeContent.pending, (state) => {\r\n      state.loading = true;\r\n    });    builder.addCase(loadNodeContent.fulfilled, (state, action: PayloadAction<{ nodeId: string; content: NarramorphContent; enhancedContent: EnhancedNarramorphContent }>) => {\r\n      const { nodeId, content, enhancedContent } = action.payload;\r\n      const node = state.data[nodeId];\r\n      if (node) {\r\n          node.content = content;\r\n          node.enhancedContent = enhancedContent;\r\n          \r\n          // EMERGENCY CONTENT RECOVERY: Determine and preserve original content\r\n          let originalContent: string | null = null;\r\n          \r\n          if (enhancedContent && enhancedContent.base) {\r\n            originalContent = enhancedContent.base;\r\n          } else {\r\n            // Fallback to legacy logic\r\n            const availableCounts = Object.keys(node.content)\r\n                .map(Number)\r\n                .sort((a, b) => b - a); // Sort descending\r\n            const lookupKey = Math.max(0, node.visitCount - 1);\r\n            const bestMatch = availableCounts.find(count => lookupKey >= count);\r\n            if (bestMatch !== undefined) {\r\n                originalContent = node.content[bestMatch];\r\n            }\r\n          }\r\n          \r\n          // EMERGENCY CONTENT RECOVERY: Set up content versioning\r\n          if (originalContent) {\r\n            node.originalContent = originalContent; // Always preserve original\r\n            node.currentContent = originalContent; // Start with clean content\r\n            node.lastTransformedContent = null; // Reset transformed cache\r\n            node.appliedTransformationIds = []; // Reset applied transformations\r\n            node.contentVersion = (node.contentVersion || 0) + 1; // Increment version\r\n            node.transformationState = 'clean'; // Mark as clean content\r\n            \r\n            console.log(`[EMERGENCY CONTENT RECOVERY] Content loaded for node ${nodeId}:`, {\r\n              originalLength: originalContent.length,\r\n              contentVersion: node.contentVersion,\r\n              transformationState: node.transformationState,\r\n              contentPreview: originalContent.substring(0, 100) + '...'\r\n            });\r\n          } else {\r\n            console.error(`[EMERGENCY CONTENT RECOVERY] Failed to extract content for node ${nodeId}`);\r\n            node.currentContent = null;\r\n            node.transformationState = 'corrupted';\r\n          }\r\n      }\r\n      state.loading = false;\r\n    });\r\n    builder.addCase(loadNodeContent.rejected, (state, action) => {\r\n      state.loading = false;\r\n      state.error = action.payload as string;\r\n    });\r\n  },\r\n});\r\n\r\n// Export actions\r\nexport const {\r\n  visitNode,\r\n  revealConnection,\r\n  applyTransformation,\r\n  evaluateTransformations,\r\n  applyJourneyTransformations,\r\n  updateContentVariant,\r\n  recoverNodeContent,\r\n  validateNodeContent,\r\n  resetNodes\r\n} = nodesSlice.actions;\r\n\r\n// Export selector functions\r\nexport const selectNodeById = (state: { nodes: NodesState }, nodeId: string) => \r\n  state.nodes.data[nodeId];\r\n\r\nexport const selectNodesByCharacter = (state: { nodes: NodesState }, character: string) =>\r\n  Object.values(state.nodes.data).filter(node => node.character === character);\r\n\r\nexport const selectNodesByTemporalValue = (state: { nodes: NodesState }, temporalValue: number) =>\r\n  Object.values(state.nodes.data).filter(node => node.temporalValue === temporalValue);\r\n\r\nexport const selectNodesByVisualState = (state: { nodes: NodesState }, visualState: NodeVisualState) =>\r\n  Object.values(state.nodes.data).filter(node => node.currentState === visualState);\r\n\r\n// Memoized selector for all nodes\r\nexport const selectAllNodes = createSelector(\r\n  (state: { nodes: NodesState }) => state.nodes.data,\r\n  (nodesData) => Object.values(nodesData)\r\n);\r\n\r\n// Memoized selector for all connections\r\nexport const selectConnections = createSelector(\r\n  (state: { nodes: NodesState }) => state.nodes.data,\r\n  (nodes) => {\r\n    const connections: Array<{ start: string, end: string }> = [];\r\n    \r\n    Object.values(nodes).forEach(node => {\r\n      node.revealedConnections.forEach(targetId => {\r\n        // Avoid duplicate connections (e.g., A-B and B-A)\r\n        const connectionExists = connections.some(\r\n          conn => (conn.start === node.id && conn.end === targetId) || (conn.start === targetId && conn.end === node.id)\r\n        );\r\n\r\n        if (!connectionExists) {\r\n          connections.push({\r\n            start: node.id,\r\n            end: targetId\r\n          });\r\n        }\r\n      });\r\n    });\r\n    \r\n    return connections;\r\n  }\r\n);\r\n\r\n// Memoized selector for all nodes formatted for the constellation view\r\nexport const selectConstellationNodes = createSelector(\r\n  [selectAllNodes],\r\n  (nodes): ConstellationNode[] => {\r\n    // Basic layout logic: distribute nodes in a circle\r\n    const numNodes = nodes.length;\r\n    const radius = 15;\r\n    return nodes.map((node, index) => {\r\n      const angle = (index / numNodes) * 2 * Math.PI;\r\n      const x = radius * Math.cos(angle);\r\n      const y = radius * Math.sin(angle);\r\n\r\n      // Assign color based on character\r\n      let color = '#ffffff'; // Default\r\n      if (node.character === 'Archaeologist') color = '#ff6b6b';\r\n      if (node.character === 'Algorithm') color = '#4ecdc4';\r\n      if (node.character === 'LastHuman') color = '#45b7d1';\r\n\r\n      return {\r\n        ...node,\r\n        x,\r\n        y,\r\n        color,\r\n      };\r\n    });\r\n  }\r\n);\r\n\r\nexport default nodesSlice.reducer;","/**\r\n * Core type definitions for the Eternal Return of the Digital Self project.\r\n * These types define the structure of nodes, reader state, and transformations.\r\n */\r\n\r\n/**\r\n * Characters in the narrative\r\n */\r\nexport type Character = 'Archaeologist' | 'Algorithm' | 'LastHuman';\r\n\r\n/**\r\n * Temporal positions in the narrative\r\n */\r\nexport type TemporalLabel = 'past' | 'present' | 'future';\r\n\r\n/**\r\n * Strange attractors - philosophical themes that connect nodes\r\n */\r\nexport type StrangeAttractor = \r\n  | 'recursion-pattern' \r\n  | 'memory-fragment' \r\n  | 'verification-ritual' \r\n  | 'identity-pattern' \r\n  | 'recursion-chamber' \r\n  | 'process-language' \r\n  | 'autonomous-fragment' \r\n  | 'quantum-perception' \r\n  | 'distributed-consciousness' \r\n  | 'recursive-loop' \r\n  | 'quantum-uncertainty' \r\n  | 'continuity-interface' \r\n  | 'system-decay' \r\n  | 'quantum-transformation' \r\n  | 'memory-artifact' \r\n  | 'recursive-symbol' \r\n  | 'recognition-pattern' \r\n  | 'memory-sphere' \r\n  | 'quantum-déjà-vu' \r\n  | 'quantum-choice';\r\n\r\n/**\r\n * Visual states of a node in the constellation view\r\n */\r\nexport type NodeVisualState = \r\n  | 'unvisited'  // Initial state before first visit\r\n  | 'visited'    // After first visit\r\n  | 'revisited'  // After second visit\r\n  | 'complex'    // After multiple visits and pattern recognition\r\n  | 'fragmented'; // Highest state of transformation\r\n\r\n/**\r\n * Possible philosophical endpoint orientations for nodes that serve as endpoints\r\n */\r\nexport type EndpointOrientation = 'past' | 'present' | 'future';\r\n\r\n/**\r\n * Enhanced transformation condition for content transformations.\r\n * \r\n * This interface supports both basic navigation-based conditions and advanced\r\n * PathAnalyzer-integrated conditions for sophisticated content adaptation.\r\n * \r\n * Basic Conditions:\r\n * - visitCount: Minimum number of visits to current node\r\n * - visitPattern: Specific sequence of nodes that must have been visited\r\n * - previouslyVisitedNodes: Set of nodes that must have been visited (any order)\r\n * - strangeAttractorsEngaged: Thematic attractors that must be engaged\r\n * - temporalPosition: Required temporal layer (past/present/future)\r\n * - endpointProgress: Progress toward philosophical endpoints\r\n * - revisitPattern: Specific revisit requirements for nodes\r\n * - characterBleed: Transition between different character perspectives\r\n * - journeyPattern: Recent navigation sequence matching\r\n * \r\n * Advanced PathAnalyzer Conditions:\r\n * - characterFocus: Character preference patterns and intensity analysis\r\n * - temporalFocus: Temporal layer focus patterns and progression analysis\r\n * - attractorAffinity: Thematic affinity patterns and continuity analysis\r\n * - attractorEngagement: Detailed engagement metrics and trend analysis\r\n * - recursivePattern: Recursive navigation patterns and strength analysis\r\n * - journeyFingerprint: Complete navigation style and behavioral patterns\r\n * \r\n * Logical Operators:\r\n * - anyOf: At least one condition must be true (OR)\r\n * - allOf: All conditions must be true (AND)\r\n * - not: Condition must be false (NOT)\r\n */\r\nexport interface TransformationCondition {\r\n  // Basic visit count threshold\r\n  visitCount?: number;\r\n  \r\n  // Sequence of nodes that must have been visited in order\r\n  visitPattern?: string[];\r\n  \r\n  // Set of nodes that must have been visited (in any order)\r\n  previouslyVisitedNodes?: string[];\r\n  \r\n  // Strange attractors that must be engaged\r\n  strangeAttractorsEngaged?: StrangeAttractor[];\r\n  \r\n  // Temporal position requirement (past, present, future)\r\n  temporalPosition?: TemporalLabel;\r\n  \r\n  // Endpoint progress conditions\r\n  endpointProgress?: {\r\n    orientation: EndpointOrientation;\r\n    minValue: number; // Minimum progress value (0-100)\r\n  };\r\n    // Revisit pattern - e.g., must have revisited a specific node at least N times\r\n  revisitPattern?: {\r\n    nodeId: string;\r\n    minVisits: number;\r\n  }[];\r\n  \r\n  // Character bleed condition - detects when previous node had different character\r\n  characterBleed?: boolean;\r\n    // Journey pattern condition - matches recent navigation sequences\r\n  journeyPattern?: string[];\r\n  \r\n  // Character focus condition - evaluates character preference patterns\r\n  characterFocus?: {\r\n    characters: Character[];\r\n    minFocusRatio?: number; // Default 0.4 (40%)\r\n    includeIntensity?: boolean; // Use character focus intensity metrics\r\n  };\r\n  \r\n  // Temporal focus condition - evaluates temporal layer focus patterns\r\n  temporalFocus?: {\r\n    temporalLayers: TemporalLabel[];\r\n    minFocusRatio?: number; // Default 0.4 (40%)\r\n    includeProgression?: boolean; // Check for chronological patterns\r\n  };\r\n  \r\n  // Attractor affinity condition - evaluates thematic affinity patterns\r\n  attractorAffinity?: {\r\n    attractors: StrangeAttractor[];\r\n    minAffinityRatio?: number; // Default 0.25 (25%)\r\n    includeThematicContinuity?: boolean; // Check thematic connections\r\n  };\r\n  \r\n  // Attractor engagement condition - evaluates engagement level conditions\r\n  attractorEngagement?: {\r\n    attractor: StrangeAttractor;\r\n    minEngagementScore?: number; // Default 50 (0-100 scale)\r\n    trendRequired?: 'rising' | 'falling' | 'stable' | 'any';\r\n  };\r\n  \r\n  // Recursive pattern condition - evaluates recursive navigation patterns\r\n  recursivePattern?: {\r\n    minPatternStrength?: number; // Default 0.6\r\n    maxPatternLength?: number; // Default 4\r\n    requireRecency?: boolean; // Pattern must be recent\r\n  };\r\n  \r\n  // Journey fingerprint condition - evaluates navigation style patterns\r\n  journeyFingerprint?: {\r\n    explorationStyle?: 'linear' | 'recursive' | 'wandering' | 'focused' | 'chaotic';\r\n    temporalPreference?: 'past-oriented' | 'present-focused' | 'future-seeking' | 'time-fluid';\r\n    narrativeApproach?: 'systematic' | 'intuitive' | 'thematic' | 'experimental';\r\n    minComplexityIndex?: number; // 0-1 scale\r\n    minFocusIndex?: number; // 0-1 scale\r\n  };\r\n  \r\n  // Logical operators for complex conditions\r\n  anyOf?: TransformationCondition[]; // At least one condition must be true\r\n  allOf?: TransformationCondition[]; // All conditions must be true\r\n  not?: TransformationCondition;     // Condition must be false\r\n}\r\n\r\n/**\r\n * Transformation rules for text content based on conditions\r\n */\r\nexport interface TransformationRule {\r\n  condition: TransformationCondition;\r\n  transformations: TextTransformation[];\r\n}\r\n\r\n/**\r\n * A specific text transformation to be applied\r\n */\r\nexport interface TextTransformation {\r\n  type: 'replace' | 'fragment' | 'expand' | 'emphasize' | 'metaComment';\r\n  selector: string; // Original text to transform\r\n  replacement?: string; // New text (for replace, expand)\r\n  \r\n  // Fragment transformation properties\r\n  fragmentPattern?: string; // How to fragment the text\r\n  fragmentStyle?: 'character' | 'word' | 'progressive' | 'random'; // Style of fragmentation\r\n  \r\n  // Emphasis transformation properties\r\n  emphasis?: 'italic' | 'bold' | 'color' | 'spacing' | 'highlight' | 'glitch' | 'fade'; // Type of emphasis\r\n  intensity?: number; // Intensity level of emphasis (1-5)\r\n  \r\n  // Replace transformation properties\r\n  preserveFormatting?: boolean; // Whether to preserve markdown formatting when replacing\r\n  \r\n  // Expand transformation properties\r\n  expandStyle?: 'append' | 'inline' | 'paragraph' | 'reveal'; // Style of expansion\r\n  \r\n  // Meta comment properties\r\n  commentStyle?: 'inline' | 'footnote' | 'marginalia' | 'interlinear'; // Style of meta comment\r\n  \r\n  // Performance optimization properties\r\n  priority?: 'high' | 'medium' | 'low'; // Used for prioritizing transformations for lazy loading\r\n  applyImmediately?: boolean; // Force immediate application regardless of visibility\r\n}\r\n\r\n/**\r\n * Core Node structure - represents a single narrative node\r\n */\r\nexport interface Node {\r\n  id: string;\r\n  title: string;\r\n  character: Character;\r\n  temporalValue: number; // 1-9 for positioning\r\n  initialConnections: string[]; // IDs of connected nodes\r\n  contentSource: string; // Path to content file\r\n  coreConcept: string; // Short summary for development\r\n  strangeAttractors: StrangeAttractor[];\r\n  transformationThresholds: {\r\n    visit: number; // Threshold for 'visited' state\r\n    revisit: number; // Threshold for 'revisited' state  \r\n    complex: number; // Threshold for 'complex' state\r\n    fragmented: number; // Threshold for 'fragmented' state\r\n  };\r\n  isEndpoint?: boolean;\r\n  endpointOrientation?: EndpointOrientation;\r\n}\r\n\r\n/**\r\n * Content variants for different journey states and visit counts\r\n */\r\nexport interface ContentVariant {\r\n  visitCount?: number; // Visit-count based variants (legacy support)\r\n  sectionName?: string; // Named section variants (e.g., 'after-algorithm', 'recursive-awareness')\r\n  content: string;\r\n}\r\n\r\n/**\r\n * Node instance state - combines static node data with reader-specific state\r\n */\r\nexport interface NarramorphContent {\r\n  [visitCount: number]: string; // Legacy visit-count based content\r\n}\r\n\r\n/**\r\n * Enhanced content structure supporting both visit-count and section-based variants\r\n */\r\nexport interface EnhancedNarramorphContent {\r\n  base: string; // Default content\r\n  visitCountVariants: { [visitCount: number]: string }; // Visit-count based variants\r\n  sectionVariants: { [sectionName: string]: string }; // Named section variants\r\n}\r\n\r\n/**\r\n * Journey context tracking for character bleed and navigation pattern effects\r\n */\r\nexport interface JourneyContext {\r\n  lastVisitedCharacter?: Character; // Character from previous node visit\r\n  journeyPattern: string[]; // Recent navigation sequence (node IDs)\r\n  recursiveAwareness: number; // Recursive pattern intensity (0-1)\r\n  temporalDisplacement: boolean; // Cross-temporal character awareness flag\r\n}\r\n\r\nexport interface NodeState extends Node {\r\n  visitCount: number; // Number of times this node has been visited\r\n  visitState: 'unvisited' | 'visited' | 'revisited';\r\n  currentState: NodeVisualState; // Visual state for constellation view\r\n  revealedConnections: string[]; // All available connections (initial + revealed)\r\n  transformations: TransformationRule[]; // Applied transformations\r\n  content: NarramorphContent | null; // Legacy content structure\r\n  enhancedContent: EnhancedNarramorphContent | null; // New enhanced content structure\r\n  currentContent: string | null; // The currently displayed content\r\n  journeyContext?: JourneyContext; // Journey context for character bleed\r\n  \r\n  // EMERGENCY CONTENT RECOVERY FIELDS\r\n  originalContent: string | null; // Always preserve the original, untransformed content\r\n  lastTransformedContent: string | null; // Cache of last transformation result\r\n  appliedTransformationIds: string[]; // Track which transformations have been applied\r\n  contentVersion: number; // Version number to track content changes\r\n  transformationState: 'clean' | 'transformed' | 'corrupted'; // Track content state\r\n}\r\n\r\n/**\r\n * Node representation for the constellation view, with 2D coordinates and color\r\n */\r\nexport interface ConstellationNode extends NodeState {\r\n  x: number;\r\n  y: number;\r\n  color: string;\r\n}\r\n\r\n/**\r\n * Map of node IDs to their 3D positions for the constellation view\r\n */\r\nexport type NodePositions = {\r\n  [key: string]: [number, number, number];\r\n};\r\n/**\r\n * Represents a connection between two nodes\r\n */\r\nexport type Connection = {\r\n  source: string;\r\n  target: string;\r\n};\r\n/**\r\n * Represents a single transition between nodes\r\n */\r\nexport interface NodeTransition {\r\n  from: string; // Source node ID\r\n  to: string; // Target node ID\r\n  // Time-based tracking removed (2025-06-08)\r\n  attractorsEngaged: StrangeAttractor[]; // Which attractors were engaged during this transition\r\n}\r\n\r\n/**\r\n * Represents detailed information about a node visit\r\n */\r\nexport interface NodeVisit {\r\n  nodeId: string; // ID of the visited node\r\n  // Time-based tracking removed (2025-06-08)\r\n  character: Character; // Character perspective of the node\r\n  temporalLayer: TemporalLabel; // Temporal layer of the node\r\n  engagedAttractors: StrangeAttractor[]; // Attractors engaged during this visit\r\n  index: number; // Sequential position in the reading path (0-based)\r\n  revisitCount: number; // How many times this specific node had been visited (including this visit)\r\n}\r\n\r\n/**\r\n * Reader path records the journey through the narrative\r\n */\r\nexport interface ReadingPath {\r\n  sequence: string[]; // Ordered array of visited node IDs\r\n  revisitPatterns: Record<string, number>; // Count of revisits per node\r\n  attractorsEngaged: Record<StrangeAttractor, number>; // Count of engagements with attractors\r\n  \r\n  // Enhanced path tracking - optional to maintain compatibility\r\n  detailedVisits?: NodeVisit[]; // Detailed information about each visit\r\n  transitions?: NodeTransition[]; // Detailed information about transitions between nodes\r\n  characterFocus?: Record<Character, number>; // Count of visits to each character's nodes\r\n  temporalLayerFocus?: Record<TemporalLabel, number>; // Count of visits to each temporal layer\r\n  // Time-based reading rhythm tracking removed (2025-06-08)\r\n  patternSequences?: {\r\n    repeatedSequences: string[][]; // Sequences of nodes that have been visited more than once\r\n    characterSequences: Character[][]; // Sequences of character perspectives\r\n    temporalSequences: TemporalLabel[][]; // Sequences of temporal layers\r\n  };\r\n}\r\n\r\n/**\r\n * Global state interface for the Redux store\r\n */\r\nexport interface RootState {\r\n  nodes: {\r\n    data: Record<string, NodeState>; // Nodes by ID\r\n    initialized: boolean;\r\n  };\r\n  reader: {\r\n    path: ReadingPath;\r\n    currentNodeId: string | null;\r\n    endpointProgress: Record<EndpointOrientation, number>; // Progress toward each endpoint (0-100)\r\n  };\r\n  interface: {\r\n    viewMode: 'constellation' | 'reading';\r\n    showMiniConstellation: boolean;\r\n    showMetaInterface: boolean;\r\n  };\r\n}\r\n\r\n/**\r\n * Helper function to derive temporal label from numerical value\r\n */\r\nexport function getTemporalLabel(temporalValue: number): TemporalLabel {\r\n  if (temporalValue <= 3) return 'past';\r\n  if (temporalValue <= 6) return 'present';\r\n  return 'future';\r\n}","/**\r\n * Redux slice for managing reader state in Eternal Return of the Digital Self\r\n * Tracks the reader's journey, patterns, and progression toward endpoints\r\n */\r\n\r\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport {\r\n  ReadingPath,\r\n  StrangeAttractor,\r\n  EndpointOrientation,\r\n  NodeVisit,\r\n  NodeTransition,\r\n  Character,\r\n  TemporalLabel,\r\n  getTemporalLabel\r\n} from '../../types';\r\n\r\n/**\r\n * Represents a node the reader has visited for breadcrumb history.\r\n */\r\nexport interface VisitedNode {\r\n  id: string;\r\n  title: string;\r\n  synopsis: string; // first 100 chars of rendered markdown (markup stripped)\r\n}\r\nexport interface ReaderState {\r\n  path: ReadingPath;\r\n  currentNodeId: string | null;\r\n  previousNodeId: string | null;\r\n  endpointProgress: Record<EndpointOrientation, number>;\r\n  attractorEngagement: Record<StrangeAttractor, number>;\r\n  /**\r\n   * Chronological list of recently visited nodes (most-recent first).\r\n   * Max 25 entries, consecutive duplicates collapsed.\r\n   */\r\n  visited?: VisitedNode[];\r\n  // Time-based properties removed (2025-06-08)\r\n}\r\n\r\n\r\n// Removed time-based threshold constants\r\n\r\n// Initial state for the reader's path\r\nconst initialReadingPath: ReadingPath = {\r\n  sequence: [],\r\n  revisitPatterns: {},\r\n  attractorsEngaged: {} as Record<StrangeAttractor, number>,\r\n  \r\n  // Enhanced path tracking\r\n  detailedVisits: [],\r\n  transitions: [],\r\n  characterFocus: {} as Record<Character, number>,\r\n  temporalLayerFocus: {} as Record<TemporalLabel, number>,\r\n  patternSequences: {\r\n    repeatedSequences: [],\r\n    characterSequences: [],\r\n    temporalSequences: []\r\n  }\r\n};\r\n\r\n// Initial state for the reader slice\r\nconst initialState: ReaderState = {\r\n  path: initialReadingPath,\r\n  currentNodeId: null,\r\n  previousNodeId: null,\r\n  endpointProgress: {\r\n    past: 0,\r\n    present: 0,\r\n    future: 0\r\n  },\r\n  attractorEngagement: {} as Record<StrangeAttractor, number>,\r\n  visited: [],\r\n  // Time-based properties removed (2025-06-08)\r\n};\r\n\r\n// Create the reader slice\r\nconst readerSlice = createSlice({\r\n  name: 'reader',\r\n  initialState,\r\n  reducers: {\r\n    // Record navigation to a node with enhanced tracking\r\n    navigateToNode: (state, action: PayloadAction<{\r\n      nodeId: string;\r\n      character: Character;\r\n      temporalValue: number;\r\n      attractors: StrangeAttractor[];\r\n    }>) => {\r\n      const { nodeId, character, temporalValue } = action.payload;\r\n      const temporalLayer = getTemporalLabel(temporalValue);\r\n      \r\n      // Record transition without time-based properties\r\n      if (state.currentNodeId) {\r\n        \r\n        // Create transition record\r\n        const transition: NodeTransition = {\r\n          from: state.currentNodeId,\r\n          to: nodeId,\r\n          attractorsEngaged: [] as StrangeAttractor[]  // Will be populated by engageAttractor action\r\n        };\r\n        if (!state.path.transitions) {\r\n          state.path.transitions = [];\r\n        }\r\n        state.path.transitions.push(transition);\r\n        \r\n        state.previousNodeId = state.currentNodeId;\r\n      }\r\n      \r\n      // Update current node\r\n      state.currentNodeId = nodeId;\r\n      \r\n      // Add to sequence\r\n      state.path.sequence.push(nodeId);\r\n      \r\n      // Track revisit pattern\r\n      const revisitCount = (state.path.revisitPatterns[nodeId] || 0) + 1;\r\n      state.path.revisitPatterns[nodeId] = revisitCount;\r\n      \r\n      // Track character and temporal layer focus\r\n      if (!state.path.characterFocus) {\r\n        state.path.characterFocus = {} as Record<Character, number>;\r\n      }\r\n      state.path.characterFocus[character] = (state.path.characterFocus[character] || 0) + 1;\r\n      \r\n      if (!state.path.temporalLayerFocus) {\r\n        state.path.temporalLayerFocus = {} as Record<TemporalLabel, number>;\r\n      }\r\n      state.path.temporalLayerFocus[temporalLayer] = (state.path.temporalLayerFocus[temporalLayer] || 0) + 1;\r\n      \r\n      // Create detailed visit record\r\n      const visit: NodeVisit = {\r\n        nodeId,\r\n        character,\r\n        temporalLayer,\r\n        engagedAttractors: [] as StrangeAttractor[],  // Will be populated by engageAttractor action\r\n        index: state.path.sequence.length - 1,\r\n        revisitCount\r\n      };\r\n      if (!state.path.detailedVisits) {\r\n        state.path.detailedVisits = [];\r\n      }\r\n      state.path.detailedVisits.push(visit);\r\n      \r\n      // Update pattern sequences (will be fully implemented in analyzePatterns action)\r\n      // This just ensures the arrays exist for now\r\n      if (!state.path.patternSequences) {\r\n        state.path.patternSequences = {\r\n          repeatedSequences: [],\r\n          characterSequences: [],\r\n          temporalSequences: []\r\n        };\r\n      }\r\n      if (!Array.isArray(state.path.patternSequences.characterSequences)) {\r\n        state.path.patternSequences.characterSequences = [];\r\n      }\r\n      if (!Array.isArray(state.path.patternSequences.temporalSequences)) {\r\n        state.path.patternSequences.temporalSequences = [];\r\n      }\r\n      \r\n      // Update character and temporal sequences\r\n      const characterSequence = state.path.patternSequences.characterSequences[0] || [];\r\n      characterSequence.push(character);\r\n      state.path.patternSequences.characterSequences[0] = characterSequence;\r\n      \r\n      const temporalSequence = state.path.patternSequences.temporalSequences[0] || [];\r\n      temporalSequence.push(temporalLayer);\r\n      state.path.patternSequences.temporalSequences[0] = temporalSequence;\r\n    },\r\n\r\n    /**\r\n     * Append a node to breadcrumb history (recent-first, max 25, collapse duplicates).\r\n     */\r\n    addVisitedNode: (state, action: PayloadAction<VisitedNode>) => {\r\n      const node = action.payload;\r\n      const history = state.visited ?? [];\r\n      if (history.length > 0 && history[0].id === node.id) {\r\n        // consecutive duplicate – ignore\r\n        return;\r\n      }\r\n      const deduped = history.filter(v => v.id !== node.id);\r\n      state.visited = [node, ...deduped].slice(0, 25);\r\n    },\r\n    \r\n    // Record engagement with a strange attractor with enhanced tracking\r\n    engageAttractor: (state, action: PayloadAction<StrangeAttractor>) => {\r\n      const attractor = action.payload;\r\n      \r\n      // Update global counts\r\n      state.path.attractorsEngaged[attractor] = (state.path.attractorsEngaged[attractor] || 0) + 1;\r\n      state.attractorEngagement[attractor] = (state.attractorEngagement[attractor] || 0) + 1;\r\n      \r\n      // Update current visit and transition records if they exist\r\n      if (state.path.detailedVisits && state.path.detailedVisits.length > 0) {\r\n        const currentVisit = state.path.detailedVisits[state.path.detailedVisits.length - 1];\r\n        if (!currentVisit.engagedAttractors.includes(attractor)) {\r\n          currentVisit.engagedAttractors.push(attractor);\r\n        }\r\n      }\r\n      \r\n      if (state.path.transitions && state.path.transitions.length > 0) {\r\n        const currentTransition = state.path.transitions[state.path.transitions.length - 1];\r\n        if (!currentTransition.attractorsEngaged.includes(attractor)) {\r\n          currentTransition.attractorsEngaged.push(attractor);\r\n        }\r\n      }\r\n    },\r\n    \r\n    // Update endpoint progress based on reading patterns\r\n    updateEndpointProgress: (state, action: PayloadAction<{ \r\n      orientation: EndpointOrientation, \r\n      value: number \r\n    }>) => {\r\n      const { orientation, value } = action.payload;\r\n      state.endpointProgress[orientation] = Math.min(100, Math.max(0, value));\r\n    },\r\n    \r\n    // Time-based tracking removed (2025-06-08)\r\n    \r\n    // Reset the reader's state (for testing)\r\n    resetReader: (state) => {\r\n      state.path = initialReadingPath;\r\n      state.currentNodeId = null;\r\n      state.previousNodeId = null;\r\n      state.endpointProgress = {\r\n        past: 0,\r\n        present: 0,\r\n        future: 0\r\n      };\r\n      state.attractorEngagement = {} as Record<StrangeAttractor, number>;\r\n      // Time-based properties removed (2025-06-08)\r\n    },\r\n    \r\n    // Analyze the reader's path for patterns\r\n    analyzePatterns: (state) => {\r\n      // Implement pattern analysis\r\n      const { sequence } = state.path;\r\n      \r\n      // Find repeated subsequences (minimum length 2)\r\n      if (sequence.length >= 4) {  // Need at least 4 elements to have a repeated subsequence of length 2\r\n        const repeatedSequences: string[][] = [];\r\n        \r\n        // Check for subsequences of length 2 to length/2\r\n        for (let length = 2; length <= Math.floor(sequence.length / 2); length++) {\r\n          // Generate all subsequences of current length\r\n          for (let i = 0; i <= sequence.length - length * 2; i++) {\r\n            const subseq1 = sequence.slice(i, i + length);\r\n            \r\n            // Look for matches in the remaining sequence\r\n            for (let j = i + length; j <= sequence.length - length; j++) {\r\n              const subseq2 = sequence.slice(j, j + length);\r\n              \r\n              // Check if sequences match\r\n              if (subseq1.every((id, idx) => id === subseq2[idx])) {\r\n                // Check if this sequence is already recorded\r\n                const alreadyRecorded = repeatedSequences.some(seq =>\r\n                  seq.length === subseq1.length &&\r\n                  seq.every((id, idx) => id === subseq1[idx])\r\n                );\r\n                \r\n                if (!alreadyRecorded) {\r\n                  repeatedSequences.push(subseq1);\r\n                }\r\n                \r\n                // We found a match, so no need to check further for this starting position\r\n                break;\r\n              }\r\n            }\r\n          }\r\n        }\r\n        \r\n        if (!state.path.patternSequences) {\r\n          state.path.patternSequences = {\r\n            repeatedSequences: [],\r\n            characterSequences: [],\r\n            temporalSequences: []\r\n          };\r\n        }\r\n        state.path.patternSequences.repeatedSequences = repeatedSequences;\r\n      }\r\n      \r\n      // Character perspective patterns are already tracked in patternSequences.characterSequences\r\n      // Temporal layer patterns are already tracked in patternSequences.temporalSequences\r\n    },\r\n    \r\n    // Removed time-based duration update reducer\r\n  }\r\n});\r\n\r\n// Export actions\r\nexport const {\r\n  navigateToNode,\r\n  engageAttractor,\r\n  updateEndpointProgress,\r\n  resetReader,\r\n  analyzePatterns,\r\n  addVisitedNode\r\n} = readerSlice.actions;\r\n\r\n// Export selector functions\r\nexport const selectCurrentNodeId = (state: { reader: ReaderState }) => \r\n  state.reader.currentNodeId;\r\n\r\nexport const selectPreviousNodeId = (state: { reader: ReaderState }) => \r\n  state.reader.previousNodeId;\r\n\r\nexport const selectReadingPath = (state: { reader: ReaderState }) => \r\n  state.reader.path;\r\n\r\nexport const selectEndpointProgress = (state: { reader: ReaderState }) => \r\n  state.reader.endpointProgress;\r\n\r\nexport const selectMostVisitedNodes = (state: { reader: ReaderState }, count: number = 3) => {\r\n  const { revisitPatterns } = state.reader.path;\r\n  \r\n  return Object.entries(revisitPatterns)\r\n    .sort((a, b) => b[1] - a[1])\r\n    .slice(0, count)\r\n    .map(([nodeId, count]) => ({ nodeId, count }));\r\n};\r\n\r\nexport const selectMostEngagedAttractors = (state: { reader: ReaderState }, count: number = 3) => {\r\n  const { attractorsEngaged } = state.reader.path;\r\n  \r\n  return Object.entries(attractorsEngaged)\r\n    .sort((a, b) => b[1] - a[1])\r\n    .slice(0, count)\r\n    .map(([attractor, count]) => ({ attractor, count }));\r\n};\r\n\r\nexport const selectRecentPath = (state: { reader: ReaderState }, count: number = 5) => {\r\n  return state.reader.path.sequence.slice(-count);\r\n};\r\n\r\nexport const selectNodeRevisitCount = (state: { reader: ReaderState }, nodeId: string) => {\r\n  return state.reader.path.revisitPatterns[nodeId] || 0;\r\n};\r\n\r\n// Time-based selectors removed (2025-06-08)\r\n\r\n// New selectors for enhanced path tracking\r\n\r\nexport const selectDetailedVisits = (state: { reader: ReaderState }) =>\r\n  state.reader.path.detailedVisits;\r\n\r\nexport const selectTransitions = (state: { reader: ReaderState }) =>\r\n  state.reader.path.transitions;\r\n\r\nexport const selectCharacterFocus = (state: { reader: ReaderState }) =>\r\n  state.reader.path.characterFocus;\r\n\r\nexport const selectTemporalLayerFocus = (state: { reader: ReaderState }) =>\r\n  state.reader.path.temporalLayerFocus;\r\n\r\n// Reading rhythm selector removed (2025-06-08)\r\n\r\nexport const selectRepeatedSequences = (state: { reader: ReaderState }) =>\r\n  state.reader.path.patternSequences?.repeatedSequences || [];\r\n\r\nexport const selectCharacterSequences = (state: { reader: ReaderState }) =>\r\n  state.reader.path.patternSequences?.characterSequences || [];\r\n\r\nexport const selectTemporalSequences = (state: { reader: ReaderState }) =>\r\n  state.reader.path.patternSequences?.temporalSequences || [];\r\n\r\nexport const selectTransitionsForNode = (state: { reader: ReaderState }, nodeId: string) => {\r\n  return state.reader.path.transitions?.filter(\r\n    transition => transition.from === nodeId || transition.to === nodeId\r\n  ) || [];\r\n};\r\n\r\nexport const selectMostFrequentTransitions = (state: { reader: ReaderState }, count: number = 3) => {\r\n  const transitions = state.reader.path.transitions || [];\r\n  \r\n  // Create a map of transition pairs (fromId-toId) to count\r\n  const transitionCounts = transitions.reduce((counts, transition) => {\r\n    const key = `${transition.from}-${transition.to}`;\r\n    counts[key] = (counts[key] || 0) + 1;\r\n    return counts;\r\n  }, {} as Record<string, number>);\r\n  \r\n  // Sort and return top transitions\r\n  return Object.entries(transitionCounts)\r\n    .sort((a, b) => b[1] - a[1])\r\n    .slice(0, count)\r\n    .map(([key, count]) => {\r\n      const [fromId, toId] = key.split('-');\r\n      return { fromId, toId, count };\r\n    });\r\n};\r\n\r\nexport const selectMostEngagingNodes = (state: { reader: ReaderState }, count: number = 3) => {\r\n  const detailedVisits = state.reader.path.detailedVisits || [];\r\n  \r\n  // Group by nodeId and count visits\r\n  const nodeEngagement = detailedVisits.reduce((engagement, visit) => {\r\n    if (!engagement[visit.nodeId]) {\r\n      engagement[visit.nodeId] = { visits: 0 };\r\n    }\r\n    engagement[visit.nodeId].visits += 1;\r\n    return engagement;\r\n  }, {} as Record<string, { visits: number }>);\r\n  \r\n  // Sort by visit count\r\n  return Object.entries(nodeEngagement)\r\n    .map(([nodeId, data]) => ({\r\n      nodeId,\r\n      visitCount: data.visits\r\n    }))\r\n    .sort((a, b) => b.visitCount - a.visitCount)\r\n    .slice(0, count);\r\n};\r\n\r\nexport const selectVisited = (state: { reader: ReaderState }) =>\r\n state.reader.visited;\r\n\r\nexport default readerSlice.reducer;","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState } from '../types';\r\n\r\ntype ViewMode = 'constellation' | 'reading';\r\n\r\nexport interface InterfaceState {\r\n  viewMode: ViewMode;\r\n  showMiniConstellation: boolean;\r\n  showMetaInterface: boolean;\r\n  hoveredNodeId: string | null;\r\n  selectedNodeId: string | null;\r\n  lastInteraction: number;\r\n  showStrangeAttractors: boolean;\r\n  constellationZoom: number;\r\n  constellationRotation: {\r\n    x: number;\r\n    y: number;\r\n    z: number;\r\n  };\r\n  textSize: 'small' | 'medium' | 'large';\r\n  highContrast: boolean;\r\n  animations: 'reduced' | 'full';\r\n  transitionSpeed: number;\r\n  helpModalOpen: boolean;\r\n  aboutModalOpen: boolean;\r\n  isInitialChoicePhase: boolean;\r\n}\r\n\r\nconst initialState: InterfaceState = {\r\n  viewMode: 'constellation',\r\n  showMiniConstellation: true,\r\n  showMetaInterface: false,\r\n  hoveredNodeId: null,\r\n  selectedNodeId: null,\r\n  lastInteraction: 0,\r\n  showStrangeAttractors: false,\r\n  constellationZoom: 1,\r\n  constellationRotation: {\r\n    x: 0,\r\n    y: 0,\r\n    z: 0,\r\n  },\r\n  textSize: 'medium',\r\n  highContrast: false,\r\n  animations: 'full',\r\n  transitionSpeed: 500,\r\n  helpModalOpen: false,\r\n  aboutModalOpen: false,\r\n  isInitialChoicePhase: true,\r\n};\r\n\r\nconst interfaceSlice = createSlice({\r\n  name: 'interface',\r\n  initialState,\r\n  reducers: {\r\n    setViewMode: (state, action: PayloadAction<ViewMode>) => {\r\n      state.viewMode = action.payload;\r\n    },\r\n    toggleMiniConstellation: (state) => {\r\n      state.showMiniConstellation = !state.showMiniConstellation;\r\n    },\r\n    toggleMetaInterface: (state) => {\r\n      state.showMetaInterface = !state.showMetaInterface;\r\n    },\r\n    toggleStrangeAttractors: (state) => {\r\n      state.showStrangeAttractors = !state.showStrangeAttractors;\r\n    },\r\n    setConstellationZoom: (state, action: PayloadAction<number>) => {\r\n      state.constellationZoom = Math.max(0.5, Math.min(2.5, action.payload));\r\n    },\r\n    setConstellationRotation: (\r\n      state,\r\n      action: PayloadAction<{ x?: number; y?: number; z?: number }>\r\n    ) => {\r\n      const { x, y, z } = action.payload;\r\n      if (x !== undefined) state.constellationRotation.x = x;\r\n      if (y !== undefined) state.constellationRotation.y = y;\r\n      if (z !== undefined) state.constellationRotation.z = z;\r\n    },\r\n    setTextSize: (\r\n      state,\r\n      action: PayloadAction<'small' | 'medium' | 'large'>\r\n    ) => {\r\n      state.textSize = action.payload;\r\n    },\r\n    toggleHighContrast: (state) => {\r\n      state.highContrast = !state.highContrast;\r\n    },\r\n    setAnimations: (state, action: PayloadAction<'reduced' | 'full'>) => {\r\n      state.animations = action.payload;\r\n    },\r\n    setTransitionSpeed: (state, action: PayloadAction<number>) => {\r\n      state.transitionSpeed = Math.max(0, Math.min(1000, action.payload));\r\n    },\r\n    toggleHelpModal: (state) => {\r\n      state.helpModalOpen = !state.helpModalOpen;\r\n    },\r\n    toggleAboutModal: (state) => {\r\n      state.aboutModalOpen = !state.aboutModalOpen;\r\n    },\r\n    resetInterface: () => {\r\n      return initialState;\r\n    },\r\n    nodeHovered: (state, action: PayloadAction<string>) => {\r\n      state.hoveredNodeId = action.payload;\r\n      state.lastInteraction = Date.now();\r\n    },\r\n    nodeUnhovered: (state) => {\r\n      state.hoveredNodeId = null;\r\n    },\r\n    nodeSelected: (state, action: PayloadAction<string>) => {\r\n      if (state.selectedNodeId === action.payload) {\r\n        // If the same node is clicked again, do nothing or handle as a \"deselect\"\r\n        return;\r\n      }\r\n      state.selectedNodeId = action.payload;\r\n      state.viewMode = 'reading';\r\n      state.lastInteraction = Date.now();\r\n      if (state.isInitialChoicePhase) {\r\n        state.isInitialChoicePhase = false;\r\n      }\r\n    },\r\n    returnToConstellation: (state) => {\r\n      state.viewMode = 'constellation';\r\n    },\r\n    setInitialChoicePhaseCompleted: (state) => {\r\n      state.isInitialChoicePhase = false;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  setViewMode,\r\n  toggleMiniConstellation,\r\n  toggleMetaInterface,\r\n  toggleStrangeAttractors,\r\n  setConstellationZoom,\r\n  setConstellationRotation,\r\n  setTextSize,\r\n  toggleHighContrast,\r\n  setAnimations,\r\n  setTransitionSpeed,\r\n  toggleHelpModal,\r\n  toggleAboutModal,\r\n  resetInterface,\r\n  nodeHovered,\r\n  nodeUnhovered,\r\n  nodeSelected,\r\n  returnToConstellation,\r\n  setInitialChoicePhaseCompleted,\r\n} = interfaceSlice.actions;\r\n\r\nexport const selectViewMode = (state: RootState) => state.interface.viewMode;\r\nexport const selectShowMiniConstellation = (state: RootState) =>\r\n  state.interface.showMiniConstellation;\r\nexport const selectShowMetaInterface = (state: RootState) =>\r\n  state.interface.showMetaInterface;\r\nexport const selectShowStrangeAttractors = (state: RootState) =>\r\n  state.interface.showStrangeAttractors;\r\nexport const selectConstellationControls = (state: RootState) => ({\r\n  zoom: state.interface.constellationZoom,\r\n  rotation: state.interface.constellationRotation,\r\n});\r\nexport const selectAccessibilitySettings = (state: RootState) => ({\r\n  textSize: state.interface.textSize,\r\n  highContrast: state.interface.highContrast,\r\n  animations: state.interface.animations,\r\n  transitionSpeed: state.interface.transitionSpeed,\r\n});\r\nexport const selectModalStates = (state: RootState) => ({\r\n  helpModalOpen: state.interface.helpModalOpen,\r\n  aboutModalOpen: state.interface.aboutModalOpen,\r\n});\r\n\r\nexport const selectHoveredNodeId = (state: RootState) =>\r\n  state.interface.hoveredNodeId;\r\nexport const selectSelectedNodeId = (state: RootState) =>\r\n  state.interface.selectedNodeId;\r\nexport const selectIsInitialChoicePhase = (state: RootState) => state.interface.isInitialChoicePhase;\r\n\r\nexport default interfaceSlice.reducer;"],"names":["NOTHING","DRAFTABLE","DRAFT_STATE","die","error","args","getPrototypeOf","isDraft","value","isDraftable","isPlainObject","_a","isMap","isSet","objectCtorString","proto","Ctor","each","obj","iter","getArchtype","key","entry","index","thing","state","has","prop","set","propOrOldValue","t","is","x","y","target","latest","shallowCopy","base","strict","isPlain","descriptors","keys","i","desc","freeze","deep","isFrozen","dontMutateFrozenCollections","plugins","getPlugin","pluginKey","plugin","currentScope","getCurrentScope","createScope","parent_","immer_","usePatchesInScope","scope","patchListener","revokeScope","leaveScope","revokeDraft","enterScope","immer2","draft","processResult","result","baseDraft","finalize","maybeFreeze","rootScope","path","childValue","finalizeProperty","resultEach","isSet2","parentState","targetObject","rootPath","targetIsSet","res","createProxyProxy","parent","isArray","traps","objectTraps","arrayTraps","revoke","proxy","source","readPropFromProto","peek","prepareCopy","createProxy","getDescriptorFromProto","current2","currentState","markChanged","owner","fn","Immer2","config","recipe","defaultBase","self","base2","hasError","p","ip","patches","inversePatches","current","patch","applyPatchesImpl","currentImpl","copy","immer","produce","assertIsFunction","func","errorMessage","assertIsObject","object","assertIsArrayOfFunctions","array","item","itemTypes","ensureIsArray","getDependencies","createSelectorArgs","dependencies","collectInputSelectorResults","inputSelectorArgs","inputSelectorResults","length","StrongRef","Ref","UNTERMINATED","TERMINATED","createCacheNode","weakMapMemoize","options","fnNode","resultEqualityCheck","lastResult","resultsCount","memoized","cacheNode","l","arg","objectCache","objectNode","primitiveCache","primitiveNode","terminatedNode","lastResultValue","createSelectorCreator","memoizeOrOptions","memoizeOptionsFromArgs","createSelectorCreatorOptions","createSelector2","recomputations","dependencyRecomputations","directlyPassedOptions","resultFunc","combinedOptions","memoize","memoizeOptions","argsMemoize","argsMemoizeOptions","finalMemoizeOptions","finalArgsMemoizeOptions","memoizedResultFunc","selector","createSelector","createStructuredSelector","inputSelectorsObject","selectorCreator","inputSelectorKeys","composition","createThunkMiddleware","extraArgument","dispatch","getState","next","action","thunk","withExtraArgument","composeWithDevTools","compose","hasMatchFunction","v","createAction","type","prepareAction","actionCreator","prepared","formatProdErrorMessage","isAction","Tuple","_Tuple","items","arr","freezeDraftable","val","createNextState","getOrInsertComputed","map","compute","isBoolean","buildGetDefaultMiddleware","immutableCheck","serializableCheck","actionCreatorCheck","middlewareArray","thunkMiddleware","SHOULD_AUTOBATCH","createQueueWithTimer","timeout","notify","autoBatchEnhancer","store","notifying","shouldNotifyAtEndOfTick","notificationQueued","listeners","queueCallback","notifyListeners","listener2","wrappedListener","unsubscribe","buildGetDefaultEnhancers","middlewareEnhancer","autoBatch","enhancerArray","configureStore","getDefaultMiddleware","reducer","middleware","devTools","preloadedState","enhancers","rootReducer","isPlainObject2","combineReducers","finalMiddleware","finalCompose","compose2","applyMiddleware","getDefaultEnhancers","storeEnhancers","composedEnhancer","createStore","executeReducerBuilderCallback","builderCallback","actionsMap","actionMatchers","defaultCaseReducer","builder","typeOrActionCreator","matcher","isStateFunction","createReducer","initialState","mapOrBuilderCallback","finalActionMatchers","finalDefaultCaseReducer","getInitialState","frozenInitialState","caseReducers","reducer2","cr","previousState","caseReducer","isDraft2","isDraftable2","createNextState2","matches","isAnyOf","matchers","urlAlphabet","nanoid","size","id","commonProperties","RejectWithValue","payload","meta","__publicField","FulfillWithMeta","miniSerializeError","simpleError","property","externalAbortMessage","createAsyncThunk","createAsyncThunk2","typePrefix","payloadCreator","fulfilled","requestId","pending","rejected","signal","extra","abortController","abortHandler","abortReason","abort","reason","promise","finalAction","conditionResult","isThenable","abortedPromise","_","reject","_b","err","unwrapResult","asyncThunkSymbol","getType","slice","actionKey","buildCreateSlice","creators","cAT","name","reducerPath","reducers","buildReducerCreators","reducerNames","context","contextMethods","name2","reducerName","reducerDefinition","reducerDetails","isAsyncThunkSliceReducerDefinition","handleThunkCaseReducerDefinition","handleNormalReducerDefinition","buildReducer","extraReducers","finalCaseReducers","sM","m","selectSelf","injectedSelectorCache","injectedStateCache","_reducer","makeSelectorProps","reducerPath2","injected","selectSlice","sliceState","getSelectors","selectState","selectorCache","wrapSelector","injectable","pathOpt","newReducerPath","wrapper","rootState","createSlice","asyncThunk","prepare","createNotation","maybeReducerWithPrepare","prepareCallback","isCaseReducerWithPrepareDefinition","settled","noop","code","PathAnalyzer","readerState","nodes","patterns","repeatedSequences","sequence","sequenceLength","strength","characterFocus","totalVisits","character","count","ratio","characterSequences","characterSequence","oscillationPattern","temporalLayerFocus","layer","temporalSequences","temporalSequence","chronologicalPattern","reverseChronologicalPattern","attractorsEngaged","detailedVisits","totalEngagements","sum","attractor","engagementRatio","relatedNodes","node","visitRatio","visit","nodeAttractors","thematicContinuity","attractorEngagements","attractorStr","engagementVisits","trend","totalAllAttractors","engagementScore","a","b","pattern","conditions","engagement","patternLength","lengthPatterns","intensities","nodeId","char","visitCount","longestStreak","avgTimeBetweenVisits","temporalSpread","intensity","revisitPatterns","attractors","jumps","jumpDirections","prevTemporal","currTemporal","jumpDistance","totalJumps","jumpFrequency","averageJumpDistance","dist","maxJumpDistance","forwardJumps","dir","backwardJumps","preferredJumpDirection","temporalLayerFocusTyped","totalTemporalVisits","temporalAnchoring","volatility","jumpVariance","jump","deviation","recursivePatterns","characterIntensities","strangeAttractors","temporalJumping","recursiveIndex","focusIndex","velocityIndex","complexityIndex","explorationStyle","characterAffinity","ci","temporalPreference","narrativeApproach","dominantPatternLengths","characterTransitionMatrix","temporalJumpSignature","attractorEngagementProfile","occurrences","totalPathLength","maxPossibleLength","lengthFactor","maxPossibleOccurrences","repetitionFactor","idx","oscillationCount","c1","c2","maxPossibleOscillations","oscillationRatio","chronologicalCount","t1","t2","t3","maxPossibleProgressions","progressionRatio","reverseChronologicalCount","reverseProgressionRatio","recentVisits","sharedAttractorTransitions","prevNode","currNode","prevAttractors","currAttractors","relativeEngagement","recencyFactor","consistencyFactor","midpoint","firstHalf","secondHalf","frequencyFactor","occurrenceIndices","gaps","avgGap","gap","maxPossibleGap","foundPatterns","subSequence","patternKey","patternNodes","currentStreak","visitedChar","characterVisitIndices","characterNodeIds","visitedCharacterNodes","temporalValue","temporalSpreadLength","visitRatioFactor","streakFactor","spreadFactor","returnFrequency","visitIndices","returnCount","averageGap","magneticStrength","nodeData","attractorThemes","max","attractorCount","totalAttractorEngagement","pathLength","matrix","characters","from","to","prevChar","currChar","jumpDistances","signature","distance","total","profile","pathHash","styleCode","temporalCode","narrativeCode","indexCode","pathAnalyzer","CharacterBleedService","currentNode","effects","lastVisitedNode","specificEffects","generalEffects","previousVisit","sourceCharacter","targetCharacter","content","paragraphs","term","transitionCount","firstSentence","technicalWords","word","tech","words","wordCount","cleanWord","timeWords","time","emotionalWords","emotion","prev","curr","timestamps","LRUCache","capacity","k","lruKey","TransformationEngine","condition","nodeState","conditionHash","readerStateHash","nodeStateHash","transformations","contentPrefix","includeTransformations","contentHash","transformationsHash","versionComponent","cacheKey","cachedResult","subCondition","check","visitedNodes","orientation","minValue","visitsSequence","j","minFocusRatio","includeIntensity","charFocus","temporalFocus","temporalLayers","includeProgression","hasBasicFocus","temporalPatterns","attractorAffinity","minAffinityRatio","includeThematicContinuity","hasBasicAffinity","thematicPatterns","attractorEngagement","minEngagementScore","trendRequired","e","recursivePattern","minPatternStrength","maxPatternLength","requireRecency","recentThreshold","journeyFingerprint","minComplexityIndex","minFocusIndex","fingerprint","rule","ruleCacheKey","shouldApply","rules","transformation","transformCacheKey","cachedTransformation","replacement","escapedSelector","selectorRegex","markdownRegex","formatMarkers","replacementWithFormat","marker","fragmentPattern","fragmentStyle","fragmentedText","chars","fragmentCount","expandStyle","emphasizedText","spacer","commentStyle","commentText","footnoteId","hasFootnotes","contentWithFootnote","footnoteInsertRegex","string","str","hash","batchCacheKey","cachedBatchResult","getPriorityValue","currentContent","characterBleedEffects","bleedTransformations","effect","bleedCacheKey","transformedContent","nodeKey","lastVisitedCharacter","effectsHash","transitionKey","journeyCacheKey","validTransformations","transformationsCacheData","patternSignature","recentPath","strongPatterns","focusedCharacters","dominantCharacter","strongAnchor","_pattern","currentAttractors","continuityScore","totalComparisons","visitAttractors","sharedAttractors","allNodes","masterCacheKey","allTransformations","characterBleedTransformations","prioritizedJourneyTransformations","nodeTransformations","prioritizedNodeTransformations","sortedTransformations","deduplicatedTransformations","baseContent","pathSignature","attractorSignature","characterTransition","priority","priorityDiff","typeOrder","aOrder","bOrder","seen","deduplicated","cachedData","transformationEngine","ContentVariantService","rawContent","combinedPattern","parts","visitCountMatch","rawSectionMatch","sectionMatch","firstKey","firstSection","legacyContent","enhancedContent","characterBleedSection","journeySection","attractorSection","availableCounts","bestMatch","highest","lastCharacter","journeyPattern","recent","recentChars","previousNodeId","previousNode","recursiveAwareness","uniqueNodes","contentVariantService","TransformationService","endpointProgress","topAttractors","progressValues","patternHash","now","entries","keyA","valueA","keyB","valueB","nodeIdA","nodeIdB","isVisibleA","isVisibleB","prioritized","sourceType","conflictGroup","groupedByConflict","resolved","group","isVisible","tracker","cachedContent","maxTransformations","filteredTransformations","essentialTransformations","transformedSegments","seg","start","score","typeComplexity","contentSize","sizeFactor","classMap","sanitizedSelector","classList","wrappedContent","className","dataAttrs","escapeRegExp","expandedText","expansionClass","commentClass","commentedText","wrappedMarkup","selectorHash","typeHash","extraPart","minimalTransformations","patternConditions","currentVisit","recursiveTransformations","anachronicAwareness","anachronicTransformations","temporalEffects","seqLength","sequenceMap","positions","totalLength","lastPosition","layerRatios","dominantLayer","dominantRatio","temporalJumps","jumpRatio","anachronicSequences","layers","displacement","currentIndex","displacementType","awareness","fromLayer","toLayer","layerOrder","fromOrder","toOrder","matchingPattern","relatedAttractor","transformationService","initialNodeData","initializeNodes","rejectWithValue","loadNodeContent","response","text","contentText","message","nodesSlice","selectedContent","lookupKey","targetId","journeyTransformations","journeyTransformationRules","journeyContext","defaultAttractorEngagement","enhancedReaderState","applicableTransformations","fallbackContext","selectionContext","originalContent","visitNode","revealConnection","applyTransformation","evaluateTransformations","applyJourneyTransformations","updateContentVariant","recoverNodeContent","validateNodeContent","resetNodes","selectNodeById","selectAllNodes","nodesData","selectConnections","connections","conn","selectConstellationNodes","numNodes","radius","angle","color","nodesReducer","getTemporalLabel","initialReadingPath","readerSlice","temporalLayer","transition","revisitCount","history","deduped","currentTransition","subseq1","subseq2","seq","navigateToNode","engageAttractor","updateEndpointProgress","resetReader","analyzePatterns","addVisitedNode","selectCurrentNodeId","selectNodeRevisitCount","selectVisited","readerReducer","interfaceSlice","z","setViewMode","toggleMiniConstellation","toggleMetaInterface","toggleStrangeAttractors","setConstellationZoom","setConstellationRotation","setTextSize","toggleHighContrast","setAnimations","setTransitionSpeed","toggleHelpModal","toggleAboutModal","resetInterface","nodeHovered","nodeUnhovered","nodeSelected","returnToConstellation","setInitialChoicePhaseCompleted","selectViewMode","selectHoveredNodeId","selectSelectedNodeId","selectIsInitialChoicePhase","interfaceReducer"],"mappings":"mSACA,IAAIA,GAAU,OAAO,IAAI,eAAe,EACpCC,GAAY,OAAO,IAAI,iBAAiB,EACxCC,EAAc,OAAO,IAAI,aAAa,EAkC1C,SAASC,EAAIC,KAAUC,EAAM,CAM3B,MAAM,IAAI,MACR,8BAA8BD,CAAK,yCACrC,CACF,CAGA,IAAIE,EAAiB,OAAO,eAC5B,SAASC,EAAQC,EAAO,CACtB,MAAO,CAAC,CAACA,GAAS,CAAC,CAACA,EAAMN,CAAW,CACvC,CACA,SAASO,EAAYD,EAAO,OAC1B,OAAKA,EAEEE,GAAcF,CAAK,GAAK,MAAM,QAAQA,CAAK,GAAK,CAAC,CAACA,EAAMP,EAAS,GAAK,CAAC,GAACU,EAAAH,EAAM,cAAN,MAAAG,EAAoBV,MAAcW,EAAMJ,CAAK,GAAKK,EAAML,CAAK,EADnI,EAEX,CACA,IAAIM,GAAmB,OAAO,UAAU,YAAY,SAAS,EAC7D,SAASJ,GAAcF,EAAO,CACxB,GAAA,CAACA,GAAS,OAAOA,GAAU,SACtB,MAAA,GACH,MAAAO,EAAQT,EAAeE,CAAK,EAClC,GAAIO,IAAU,KACL,MAAA,GAET,MAAMC,EAAO,OAAO,eAAe,KAAKD,EAAO,aAAa,GAAKA,EAAM,YACvE,OAAIC,IAAS,OACJ,GACF,OAAOA,GAAQ,YAAc,SAAS,SAAS,KAAKA,CAAI,IAAMF,EACvE,CAMA,SAASG,EAAKC,EAAKC,EAAM,CACnBC,EAAYF,CAAG,IAAM,EACvB,QAAQ,QAAQA,CAAG,EAAE,QAASG,GAAQ,CACpCF,EAAKE,EAAKH,EAAIG,CAAG,EAAGH,CAAG,CAAA,CACxB,EAEGA,EAAA,QAAQ,CAACI,EAAOC,IAAUJ,EAAKI,EAAOD,EAAOJ,CAAG,CAAC,CAEzD,CACA,SAASE,EAAYI,EAAO,CACpB,MAAAC,EAAQD,EAAMtB,CAAW,EAC/B,OAAOuB,EAAQA,EAAM,MAAQ,MAAM,QAAQD,CAAK,EAAI,EAAgBZ,EAAMY,CAAK,EAAI,EAAcX,EAAMW,CAAK,EAAI,EAAc,CAChI,CACA,SAASE,GAAIF,EAAOG,EAAM,CACxB,OAAOP,EAAYI,CAAK,IAAM,EAAcA,EAAM,IAAIG,CAAI,EAAI,OAAO,UAAU,eAAe,KAAKH,EAAOG,CAAI,CAChH,CAIA,SAASC,GAAIJ,EAAOK,EAAgBrB,EAAO,CACnC,MAAAsB,EAAIV,EAAYI,CAAK,EACvBM,IAAM,EACFN,EAAA,IAAIK,EAAgBrB,CAAK,EACxBsB,IAAM,EACbN,EAAM,IAAIhB,CAAK,EAEfgB,EAAMK,CAAc,EAAIrB,CAC5B,CACA,SAASuB,GAAGC,EAAGC,EAAG,CAChB,OAAID,IAAMC,EACDD,IAAM,GAAK,EAAIA,IAAM,EAAIC,EAEzBD,IAAMA,GAAKC,IAAMA,CAE5B,CACA,SAASrB,EAAMsB,EAAQ,CACrB,OAAOA,aAAkB,GAC3B,CACA,SAASrB,EAAMqB,EAAQ,CACrB,OAAOA,aAAkB,GAC3B,CACA,SAASC,EAAOV,EAAO,CACd,OAAAA,EAAM,OAASA,EAAM,KAC9B,CACA,SAASW,GAAYC,EAAMC,EAAQ,CAC7B,GAAA1B,EAAMyB,CAAI,EACL,OAAA,IAAI,IAAIA,CAAI,EAEjB,GAAAxB,EAAMwB,CAAI,EACL,OAAA,IAAI,IAAIA,CAAI,EAEjB,GAAA,MAAM,QAAQA,CAAI,EACpB,OAAO,MAAM,UAAU,MAAM,KAAKA,CAAI,EAClC,MAAAE,EAAU7B,GAAc2B,CAAI,EAClC,GAAIC,IAAW,IAAQA,IAAW,cAAgB,CAACC,EAAS,CACpD,MAAAC,EAAc,OAAO,0BAA0BH,CAAI,EACzD,OAAOG,EAAYtC,CAAW,EAC1B,IAAAuC,EAAO,QAAQ,QAAQD,CAAW,EACtC,QAASE,EAAI,EAAGA,EAAID,EAAK,OAAQC,IAAK,CAC9B,MAAArB,EAAMoB,EAAKC,CAAC,EACZC,EAAOH,EAAYnB,CAAG,EACxBsB,EAAK,WAAa,KACpBA,EAAK,SAAW,GAChBA,EAAK,aAAe,KAElBA,EAAK,KAAOA,EAAK,OACnBH,EAAYnB,CAAG,EAAI,CACjB,aAAc,GACd,SAAU,GAEV,WAAYsB,EAAK,WACjB,MAAON,EAAKhB,CAAG,CACjB,EAAA,CAEJ,OAAO,OAAO,OAAOf,EAAe+B,CAAI,EAAGG,CAAW,CAAA,KACjD,CACC,MAAAzB,EAAQT,EAAe+B,CAAI,EAC7B,GAAAtB,IAAU,MAAQwB,EACb,MAAA,CAAE,GAAGF,CAAK,EAEb,MAAAnB,EAAM,OAAO,OAAOH,CAAK,EACxB,OAAA,OAAO,OAAOG,EAAKmB,CAAI,CAAA,CAElC,CACA,SAASO,GAAO1B,EAAK2B,EAAO,GAAO,CAC7B,OAAAC,EAAS5B,CAAG,GAAKX,EAAQW,CAAG,GAAK,CAACT,EAAYS,CAAG,IAEjDE,EAAYF,CAAG,EAAI,IACrBA,EAAI,IAAMA,EAAI,IAAMA,EAAI,MAAQA,EAAI,OAAS6B,IAE/C,OAAO,OAAO7B,CAAG,EACb2B,GACF,OAAO,QAAQ3B,CAAG,EAAE,QAAQ,CAAC,CAACG,EAAKb,CAAK,IAAMoC,GAAOpC,EAAO,EAAI,CAAC,GAC5DU,CACT,CACA,SAAS6B,IAA8B,CACrC5C,EAAI,CAAC,CACP,CACA,SAAS2C,EAAS5B,EAAK,CACd,OAAA,OAAO,SAASA,CAAG,CAC5B,CAGA,IAAI8B,GAAU,CAAC,EACf,SAASC,EAAUC,EAAW,CACtB,MAAAC,EAASH,GAAQE,CAAS,EAChC,OAAKC,GACHhD,EAAI,EAAG+C,CAAS,EAEXC,CACT,CAOA,IAAIC,EACJ,SAASC,IAAkB,CAClB,OAAAD,CACT,CACA,SAASE,GAAYC,EAASC,EAAQ,CAC7B,MAAA,CACL,QAAS,CAAC,EACV,QAAAD,EACA,OAAAC,EAGA,eAAgB,GAChB,mBAAoB,CACtB,CACF,CACA,SAASC,GAAkBC,EAAOC,EAAe,CAC3CA,IACFV,EAAU,SAAS,EACnBS,EAAM,SAAW,CAAC,EAClBA,EAAM,gBAAkB,CAAC,EACzBA,EAAM,eAAiBC,EAE3B,CACA,SAASC,GAAYF,EAAO,CAC1BG,GAAWH,CAAK,EACVA,EAAA,QAAQ,QAAQI,EAAW,EACjCJ,EAAM,QAAU,IAClB,CACA,SAASG,GAAWH,EAAO,CACrBA,IAAUN,IACZA,EAAeM,EAAM,QAEzB,CACA,SAASK,GAAWC,EAAQ,CACnB,OAAAZ,EAAeE,GAAYF,EAAcY,CAAM,CACxD,CACA,SAASF,GAAYG,EAAO,CACpB,MAAAxC,EAAQwC,EAAM/D,CAAW,EAC3BuB,EAAM,QAAU,GAAkBA,EAAM,QAAU,EACpDA,EAAM,QAAQ,EAEdA,EAAM,SAAW,EACrB,CAGA,SAASyC,GAAcC,EAAQT,EAAO,CAC9BA,EAAA,mBAAqBA,EAAM,QAAQ,OACnC,MAAAU,EAAYV,EAAM,QAAQ,CAAC,EAEjC,OADmBS,IAAW,QAAUA,IAAWC,GAE7CA,EAAUlE,CAAW,EAAE,YACzB0D,GAAYF,CAAK,EACjBvD,EAAI,CAAC,GAEHM,EAAY0D,CAAM,IACXA,EAAAE,EAASX,EAAOS,CAAM,EAC1BT,EAAM,SACTY,EAAYZ,EAAOS,CAAM,GAEzBT,EAAM,UACRT,EAAU,SAAS,EAAE,4BACnBmB,EAAUlE,CAAW,EAAE,MACvBiE,EACAT,EAAM,SACNA,EAAM,eACR,GAGFS,EAASE,EAASX,EAAOU,EAAW,CAAA,CAAE,EAExCR,GAAYF,CAAK,EACbA,EAAM,UACRA,EAAM,eAAeA,EAAM,SAAUA,EAAM,eAAe,EAErDS,IAAWnE,GAAUmE,EAAS,MACvC,CACA,SAASE,EAASE,EAAW/D,EAAOgE,EAAM,CACxC,GAAI1B,EAAStC,CAAK,EACT,OAAAA,EACH,MAAAiB,EAAQjB,EAAMN,CAAW,EAC/B,GAAI,CAACuB,EACH,OAAAR,EACET,EACA,CAACa,EAAKoD,IAAeC,GAAiBH,EAAW9C,EAAOjB,EAAOa,EAAKoD,EAAYD,CAAI,CACtF,EACOhE,EAET,GAAIiB,EAAM,SAAW8C,EACZ,OAAA/D,EACL,GAAA,CAACiB,EAAM,UACG,OAAA6C,EAAAC,EAAW9C,EAAM,MAAO,EAAI,EACjCA,EAAM,MAEX,GAAA,CAACA,EAAM,WAAY,CACrBA,EAAM,WAAa,GACnBA,EAAM,OAAO,qBACb,MAAM0C,EAAS1C,EAAM,MACrB,IAAIkD,EAAaR,EACbS,EAAS,GACTnD,EAAM,QAAU,IACLkD,EAAA,IAAI,IAAIR,CAAM,EAC3BA,EAAO,MAAM,EACJS,EAAA,IAEX3D,EACE0D,EACA,CAACtD,EAAKoD,IAAeC,GAAiBH,EAAW9C,EAAO0C,EAAQ9C,EAAKoD,EAAYD,EAAMI,CAAM,CAC/F,EACYN,EAAAC,EAAWJ,EAAQ,EAAK,EAChCK,GAAQD,EAAU,UACpBtB,EAAU,SAAS,EAAE,iBACnBxB,EACA+C,EACAD,EAAU,SACVA,EAAU,eACZ,CACF,CAEF,OAAO9C,EAAM,KACf,CACA,SAASiD,GAAiBH,EAAWM,EAAaC,EAAcnD,EAAM8C,EAAYM,EAAUC,EAAa,CAGnG,GAAAzE,EAAQkE,CAAU,EAAG,CACvB,MAAMD,EAAOO,GAAYF,GAAeA,EAAY,QAAU,GAC9D,CAACnD,GAAImD,EAAY,UAAWlD,CAAI,EAAIoD,EAAS,OAAOpD,CAAI,EAAI,OACtDsD,EAAMZ,EAASE,EAAWE,EAAYD,CAAI,EAE5C,GADA5C,GAAAkD,EAAcnD,EAAMsD,CAAG,EACvB1E,EAAQ0E,CAAG,EACbV,EAAU,eAAiB,OAE3B,aACOS,GACTF,EAAa,IAAIL,CAAU,EAE7B,GAAIhE,EAAYgE,CAAU,GAAK,CAAC3B,EAAS2B,CAAU,EAAG,CACpD,GAAI,CAACF,EAAU,OAAO,aAAeA,EAAU,mBAAqB,EAClE,OAEFF,EAASE,EAAWE,CAAU,GACzB,CAACI,GAAe,CAACA,EAAY,OAAO,UAAY,OAAOlD,GAAS,UAAY,OAAO,UAAU,qBAAqB,KAAKmD,EAAcnD,CAAI,GAC5I2C,EAAYC,EAAWE,CAAU,CAAA,CAEvC,CACA,SAASH,EAAYZ,EAAOlD,EAAOqC,EAAO,GAAO,CAC3C,CAACa,EAAM,SAAWA,EAAM,OAAO,aAAeA,EAAM,gBACtDd,GAAOpC,EAAOqC,CAAI,CAEtB,CAGA,SAASqC,GAAiB7C,EAAM8C,EAAQ,CAChC,MAAAC,EAAU,MAAM,QAAQ/C,CAAI,EAC5BZ,EAAQ,CACZ,MAAO2D,EAAU,EAAgB,EAEjC,OAAQD,EAASA,EAAO,OAAS9B,GAAgB,EAEjD,UAAW,GAEX,WAAY,GAEZ,UAAW,CAAC,EAEZ,QAAS8B,EAET,MAAO9C,EAEP,OAAQ,KAGR,MAAO,KAEP,QAAS,KACT,UAAW,EACb,EACA,IAAIH,EAAST,EACT4D,EAAQC,GACRF,IACFlD,EAAS,CAACT,CAAK,EACP4D,EAAAE,GAEV,KAAM,CAAE,OAAAC,EAAQ,MAAAC,GAAU,MAAM,UAAUvD,EAAQmD,CAAK,EACvD,OAAA5D,EAAM,OAASgE,EACfhE,EAAM,QAAU+D,EACTC,CACT,CACA,IAAIH,GAAc,CAChB,IAAI7D,EAAOE,EAAM,CACf,GAAIA,IAASzB,EACJ,OAAAuB,EACH,MAAAiE,EAASvD,EAAOV,CAAK,EAC3B,GAAI,CAACC,GAAIgE,EAAQ/D,CAAI,EACZ,OAAAgE,GAAkBlE,EAAOiE,EAAQ/D,CAAI,EAExC,MAAAnB,EAAQkF,EAAO/D,CAAI,EACzB,OAAIF,EAAM,YAAc,CAAChB,EAAYD,CAAK,EACjCA,EAELA,IAAUoF,GAAKnE,EAAM,MAAOE,CAAI,GAClCkE,GAAYpE,CAAK,EACVA,EAAM,MAAME,CAAI,EAAImE,GAAYtF,EAAOiB,CAAK,GAE9CjB,CACT,EACA,IAAIiB,EAAOE,EAAM,CACR,OAAAA,KAAQQ,EAAOV,CAAK,CAC7B,EACA,QAAQA,EAAO,CACb,OAAO,QAAQ,QAAQU,EAAOV,CAAK,CAAC,CACtC,EACA,IAAIA,EAAOE,EAAMnB,EAAO,CACtB,MAAMmC,EAAOoD,GAAuB5D,EAAOV,CAAK,EAAGE,CAAI,EACvD,GAAIgB,GAAA,MAAAA,EAAM,IACR,OAAAA,EAAK,IAAI,KAAKlB,EAAM,OAAQjB,CAAK,EAC1B,GAEL,GAAA,CAACiB,EAAM,UAAW,CACpB,MAAMuE,EAAWJ,GAAKzD,EAAOV,CAAK,EAAGE,CAAI,EACnCsE,EAAeD,GAAA,YAAAA,EAAW9F,GAC5B,GAAA+F,GAAgBA,EAAa,QAAUzF,EACnC,OAAAiB,EAAA,MAAME,CAAI,EAAInB,EACdiB,EAAA,UAAUE,CAAI,EAAI,GACjB,GAEL,GAAAI,GAAGvB,EAAOwF,CAAQ,IAAMxF,IAAU,QAAUkB,GAAID,EAAM,MAAOE,CAAI,GAC5D,MAAA,GACTkE,GAAYpE,CAAK,EACjByE,GAAYzE,CAAK,CAAA,CAEf,OAAAA,EAAM,MAAME,CAAI,IAAMnB,IACzBA,IAAU,QAAUmB,KAAQF,EAAM,QACnC,OAAO,MAAMjB,CAAK,GAAK,OAAO,MAAMiB,EAAM,MAAME,CAAI,CAAC,IAE/CF,EAAA,MAAME,CAAI,EAAInB,EACdiB,EAAA,UAAUE,CAAI,EAAI,IACjB,EACT,EACA,eAAeF,EAAOE,EAAM,CACtB,OAAAiE,GAAKnE,EAAM,MAAOE,CAAI,IAAM,QAAUA,KAAQF,EAAM,OAChDA,EAAA,UAAUE,CAAI,EAAI,GACxBkE,GAAYpE,CAAK,EACjByE,GAAYzE,CAAK,GAEV,OAAAA,EAAM,UAAUE,CAAI,EAEzBF,EAAM,OACD,OAAAA,EAAM,MAAME,CAAI,EAElB,EACT,EAGA,yBAAyBF,EAAOE,EAAM,CAC9B,MAAAwE,EAAQhE,EAAOV,CAAK,EACpBkB,EAAO,QAAQ,yBAAyBwD,EAAOxE,CAAI,EACzD,OAAKgB,GAEE,CACL,SAAU,GACV,aAAclB,EAAM,QAAU,GAAiBE,IAAS,SACxD,WAAYgB,EAAK,WACjB,MAAOwD,EAAMxE,CAAI,CACnB,CACF,EACA,gBAAiB,CACfxB,EAAI,EAAE,CACR,EACA,eAAesB,EAAO,CACb,OAAAnB,EAAemB,EAAM,KAAK,CACnC,EACA,gBAAiB,CACftB,EAAI,EAAE,CAAA,CAEV,EACIoF,EAAa,CAAC,EAClBtE,EAAKqE,GAAa,CAACjE,EAAK+E,IAAO,CAClBb,EAAAlE,CAAG,EAAI,UAAW,CAC3B,iBAAU,CAAC,EAAI,UAAU,CAAC,EAAE,CAAC,EACtB+E,EAAG,MAAM,KAAM,SAAS,CACjC,CACF,CAAC,EACDb,EAAW,eAAiB,SAAS9D,EAAOE,EAAM,CAGhD,OAAO4D,EAAW,IAAI,KAAK,KAAM9D,EAAOE,EAAM,MAAM,CACtD,EACA4D,EAAW,IAAM,SAAS9D,EAAOE,EAAMnB,EAAO,CAGrC,OAAA8E,GAAY,IAAI,KAAK,KAAM7D,EAAM,CAAC,EAAGE,EAAMnB,EAAOiB,EAAM,CAAC,CAAC,CACnE,EACA,SAASmE,GAAK3B,EAAOtC,EAAM,CACnB,MAAAF,EAAQwC,EAAM/D,CAAW,EAE/B,OADeuB,EAAQU,EAAOV,CAAK,EAAIwC,GACzBtC,CAAI,CACpB,CACA,SAASgE,GAAkBlE,EAAOiE,EAAQ/D,EAAM,OACxC,MAAAgB,EAAOoD,GAAuBL,EAAQ/D,CAAI,EACzC,OAAAgB,EAAO,UAAWA,EAAOA,EAAK,OAGnChC,EAAAgC,EAAK,MAAL,YAAAhC,EAAU,KAAKc,EAAM,QACnB,MACN,CACA,SAASsE,GAAuBL,EAAQ/D,EAAM,CAC5C,GAAI,EAAEA,KAAQ+D,GACL,OACL,IAAA3E,EAAQT,EAAeoF,CAAM,EACjC,KAAO3E,GAAO,CACZ,MAAM4B,EAAO,OAAO,yBAAyB5B,EAAOY,CAAI,EACpD,GAAAgB,EACK,OAAAA,EACT5B,EAAQT,EAAeS,CAAK,CAAA,CAGhC,CACA,SAASmF,GAAYzE,EAAO,CACrBA,EAAM,YACTA,EAAM,UAAY,GACdA,EAAM,SACRyE,GAAYzE,EAAM,OAAO,EAG/B,CACA,SAASoE,GAAYpE,EAAO,CACrBA,EAAM,QACTA,EAAM,MAAQW,GACZX,EAAM,MACNA,EAAM,OAAO,OAAO,qBACtB,EAEJ,CAGA,IAAI4E,GAAS,KAAM,CACjB,YAAYC,EAAQ,CAClB,KAAK,YAAc,GACnB,KAAK,sBAAwB,GAoB7B,KAAK,QAAU,CAACjE,EAAMkE,EAAQ5C,IAAkB,CAC9C,GAAI,OAAOtB,GAAS,YAAc,OAAOkE,GAAW,WAAY,CAC9D,MAAMC,EAAcD,EACXA,EAAAlE,EACT,MAAMoE,EAAO,KACb,OAAO,SAAwBC,EAAQF,KAAgBnG,EAAM,CACpD,OAAAoG,EAAK,QAAQC,EAAQzC,GAAUsC,EAAO,KAAK,KAAMtC,EAAO,GAAG5D,CAAI,CAAC,CACzE,CAAA,CAEE,OAAOkG,GAAW,YACpBpG,EAAI,CAAC,EACHwD,IAAkB,QAAU,OAAOA,GAAkB,YACvDxD,EAAI,CAAC,EACH,IAAAgE,EACA,GAAA1D,EAAY4B,CAAI,EAAG,CACf,MAAAqB,EAAQK,GAAW,IAAI,EACvB0B,EAAQK,GAAYzD,EAAM,MAAM,EACtC,IAAIsE,EAAW,GACX,GAAA,CACFxC,EAASoC,EAAOd,CAAK,EACVkB,EAAA,EAAA,QACX,CACIA,EACF/C,GAAYF,CAAK,EAEjBG,GAAWH,CAAK,CAAA,CAEpB,OAAAD,GAAkBC,EAAOC,CAAa,EAC/BO,GAAcC,EAAQT,CAAK,CACzB,SAAA,CAACrB,GAAQ,OAAOA,GAAS,SAAU,CAQ5C,GAPA8B,EAASoC,EAAOlE,CAAI,EAChB8B,IAAW,SACJA,EAAA9B,GACP8B,IAAWnE,KACJmE,EAAA,QACP,KAAK,aACPvB,GAAOuB,EAAQ,EAAI,EACjBR,EAAe,CACjB,MAAMiD,EAAI,CAAC,EACLC,EAAK,CAAC,EACZ5D,EAAU,SAAS,EAAE,4BAA4BZ,EAAM8B,EAAQyC,EAAGC,CAAE,EACpElD,EAAciD,EAAGC,CAAE,CAAA,CAEd,OAAA1C,CACT,MACEhE,EAAI,EAAGkC,CAAI,CACf,EACK,KAAA,mBAAqB,CAACA,EAAMkE,IAAW,CACtC,GAAA,OAAOlE,GAAS,WAClB,MAAO,CAACZ,KAAUpB,IAAS,KAAK,mBAAmBoB,EAAQwC,GAAU5B,EAAK4B,EAAO,GAAG5D,CAAI,CAAC,EAE3F,IAAIyG,EAASC,EAKN,MAAA,CAJQ,KAAK,QAAQ1E,EAAMkE,EAAQ,CAACK,EAAGC,IAAO,CACzCC,EAAAF,EACOG,EAAAF,CAAA,CAClB,EACeC,EAASC,CAAc,CACzC,EACI,OAAOT,GAAA,YAAAA,EAAQ,aAAe,WAC3B,KAAA,cAAcA,EAAO,UAAU,EAClC,OAAOA,GAAA,YAAAA,EAAQ,uBAAyB,WACrC,KAAA,wBAAwBA,EAAO,oBAAoB,CAAA,CAE5D,YAAYjE,EAAM,CACX5B,EAAY4B,CAAI,GACnBlC,EAAI,CAAC,EACHI,EAAQ8B,CAAI,IACdA,EAAO2E,GAAQ3E,CAAI,GACf,MAAAqB,EAAQK,GAAW,IAAI,EACvB0B,EAAQK,GAAYzD,EAAM,MAAM,EAChC,OAAAoD,EAAAvF,CAAW,EAAE,UAAY,GAC/B2D,GAAWH,CAAK,EACT+B,CAAA,CAET,YAAYxB,EAAON,EAAe,CAC1B,MAAAlC,EAAQwC,GAASA,EAAM/D,CAAW,GACpC,CAACuB,GAAS,CAACA,EAAM,YACnBtB,EAAI,CAAC,EACD,KAAA,CAAE,OAAQuD,CAAA,EAAUjC,EAC1B,OAAAgC,GAAkBC,EAAOC,CAAa,EAC/BO,GAAc,OAAQR,CAAK,CAAA,CAOpC,cAAclD,EAAO,CACnB,KAAK,YAAcA,CAAA,CAOrB,wBAAwBA,EAAO,CAC7B,KAAK,sBAAwBA,CAAA,CAE/B,aAAa6B,EAAMyE,EAAS,CACtB,IAAApE,EACJ,IAAKA,EAAIoE,EAAQ,OAAS,EAAGpE,GAAK,EAAGA,IAAK,CAClC,MAAAuE,EAAQH,EAAQpE,CAAC,EACvB,GAAIuE,EAAM,KAAK,SAAW,GAAKA,EAAM,KAAO,UAAW,CACrD5E,EAAO4E,EAAM,MACb,KAAA,CACF,CAEEvE,EAAI,KACIoE,EAAAA,EAAQ,MAAMpE,EAAI,CAAC,GAEzB,MAAAwE,EAAmBjE,EAAU,SAAS,EAAE,cAC1C,OAAA1C,EAAQ8B,CAAI,EACP6E,EAAiB7E,EAAMyE,CAAO,EAEhC,KAAK,QACVzE,EACC4B,GAAUiD,EAAiBjD,EAAO6C,CAAO,CAC5C,CAAA,CAEJ,EACA,SAAShB,GAAYtF,EAAO2E,EAAQ,CAC5B,MAAAlB,EAAQrD,EAAMJ,CAAK,EAAIyC,EAAU,QAAQ,EAAE,UAAUzC,EAAO2E,CAAM,EAAItE,EAAML,CAAK,EAAIyC,EAAU,QAAQ,EAAE,UAAUzC,EAAO2E,CAAM,EAAID,GAAiB1E,EAAO2E,CAAM,EAElK,OADQA,EAASA,EAAO,OAAS9B,GAAgB,GACjD,QAAQ,KAAKY,CAAK,EACjBA,CACT,CAGA,SAAS+C,GAAQxG,EAAO,CAClB,OAACD,EAAQC,CAAK,GAChBL,EAAI,GAAIK,CAAK,EACR2G,GAAY3G,CAAK,CAC1B,CACA,SAAS2G,GAAY3G,EAAO,CAC1B,GAAI,CAACC,EAAYD,CAAK,GAAKsC,EAAStC,CAAK,EAChC,OAAAA,EACH,MAAAiB,EAAQjB,EAAMN,CAAW,EAC3B,IAAAkH,EACJ,GAAI3F,EAAO,CACT,GAAI,CAACA,EAAM,UACT,OAAOA,EAAM,MACfA,EAAM,WAAa,GACnB2F,EAAOhF,GAAY5B,EAAOiB,EAAM,OAAO,OAAO,qBAAqB,CAAA,MAE5D2F,EAAAhF,GAAY5B,EAAO,EAAI,EAE3B,OAAAS,EAAAmG,EAAM,CAAC/F,EAAKoD,IAAe,CAC9B7C,GAAIwF,EAAM/F,EAAK8F,GAAY1C,CAAU,CAAC,CAAA,CACvC,EACGhD,IACFA,EAAM,WAAa,IAEd2F,CACT,CAyeA,IAAIC,EAAQ,IAAIhB,GACZiB,GAAUD,EAAM,QACKA,EAAM,mBAAmB,KAChDA,CACF,EACoBA,EAAM,cAAc,KAAKA,CAAK,EACpBA,EAAM,wBAAwB,KAAKA,CAAK,EACnDA,EAAM,aAAa,KAAKA,CAAK,EAC9BA,EAAM,YAAY,KAAKA,CAAK,EAC5BA,EAAM,YAAY,KAAKA,CAAK,ECnnC9C,SAASE,GAAiBC,EAAMC,EAAe,yCAAyC,OAAOD,CAAI,GAAI,CACjG,GAAA,OAAOA,GAAS,WACZ,MAAA,IAAI,UAAUC,CAAY,CAEpC,CACA,SAASC,GAAeC,EAAQF,EAAe,wCAAwC,OAAOE,CAAM,GAAI,CAClG,GAAA,OAAOA,GAAW,SACd,MAAA,IAAI,UAAUF,CAAY,CAEpC,CACA,SAASG,GAAyBC,EAAOJ,EAAe,6EAA8E,CAChI,GAAA,CAACI,EAAM,MAAOC,GAAS,OAAOA,GAAS,UAAU,EAAG,CACtD,MAAMC,EAAYF,EAAM,IACrBC,GAAS,OAAOA,GAAS,WAAa,YAAYA,EAAK,MAAQ,SAAS,KAAO,OAAOA,CAAA,EACvF,KAAK,IAAI,EACX,MAAM,IAAI,UAAU,GAAGL,CAAY,IAAIM,CAAS,GAAG,CAAA,CAEvD,CACA,IAAIC,GAAiBF,GACZ,MAAM,QAAQA,CAAI,EAAIA,EAAO,CAACA,CAAI,EAE3C,SAASG,GAAgBC,EAAoB,CACrC,MAAAC,EAAe,MAAM,QAAQD,EAAmB,CAAC,CAAC,EAAIA,EAAmB,CAAC,EAAIA,EACpF,OAAAN,GACEO,EACA,gGACF,EACOA,CACT,CACA,SAASC,GAA4BD,EAAcE,EAAmB,CACpE,MAAMC,EAAuB,CAAC,EACxB,CAAE,OAAAC,GAAWJ,EACnB,QAASzF,EAAI,EAAGA,EAAI6F,EAAQ7F,IAC1B4F,EAAqB,KAAKH,EAAazF,CAAC,EAAE,MAAM,KAAM2F,CAAiB,CAAC,EAEnE,OAAAC,CACT,CAwaA,IAAIE,GAAY,KAAM,CACpB,YAAYhI,EAAO,CACjB,KAAK,MAAQA,CAAA,CAEf,OAAQ,CACN,OAAO,KAAK,KAAA,CAEhB,EACIiI,GAAM,OAAO,QAAY,IAAc,QAAUD,GACjDE,GAAe,EACfC,GAAa,EACjB,SAASC,GAAkB,CAClB,MAAA,CACL,EAAGF,GACH,EAAG,OACH,EAAG,KACH,EAAG,IACL,CACF,CACA,SAASG,GAAerB,EAAMsB,EAAU,GAAI,CAC1C,IAAIC,EAASH,EAAgB,EACvB,KAAA,CAAE,oBAAAI,GAAwBF,EAC5B,IAAAG,EACAC,EAAe,EACnB,SAASC,GAAW,OAClB,IAAIC,EAAYL,EACV,KAAA,CAAE,OAAAR,GAAW,UACnB,QAAS7F,EAAI,EAAG2G,EAAId,EAAQ7F,EAAI2G,EAAG3G,IAAK,CAChC,MAAA4G,EAAM,UAAU5G,CAAC,EACvB,GAAI,OAAO4G,GAAQ,YAAc,OAAOA,GAAQ,UAAYA,IAAQ,KAAM,CACxE,IAAIC,EAAcH,EAAU,EACxBG,IAAgB,OACRH,EAAA,EAAIG,EAA8B,IAAI,SAE5C,MAAAC,EAAaD,EAAY,IAAID,CAAG,EAClCE,IAAe,QACjBJ,EAAYR,EAAgB,EAChBW,EAAA,IAAID,EAAKF,CAAS,GAElBA,EAAAI,CACd,KACK,CACL,IAAIC,EAAiBL,EAAU,EAC3BK,IAAmB,OACXL,EAAA,EAAIK,EAAiC,IAAI,KAE/C,MAAAC,EAAgBD,EAAe,IAAIH,CAAG,EACxCI,IAAkB,QACpBN,EAAYR,EAAgB,EACba,EAAA,IAAIH,EAAKF,CAAS,GAErBA,EAAAM,CACd,CACF,CAEF,MAAMC,EAAiBP,EACnB,IAAAjF,EACA,GAAAiF,EAAU,IAAMT,GAClBxE,EAASiF,EAAU,UAEVjF,EAAAqD,EAAK,MAAM,KAAM,SAAS,EACnC0B,IACIF,EAAqB,CACjB,MAAAY,IAAkBjJ,EAAAsI,GAAA,YAAAA,EAAY,QAAZ,YAAAtI,EAAA,KAAAsI,KAAyBA,EAC7CW,GAAmB,MAAQZ,EAAoBY,EAAiBzF,CAAM,IAC/DA,EAAAyF,EACTV,IAAiB,GAAKA,KAGxBD,EADqB,OAAO9E,GAAW,UAAYA,IAAW,MAAQ,OAAOA,GAAW,WAC5D,IAAIsE,GAAItE,CAAM,EAAIA,CAAA,CAGlD,OAAAwF,EAAe,EAAIhB,GACnBgB,EAAe,EAAIxF,EACZA,CAAA,CAET,OAAAgF,EAAS,WAAa,IAAM,CAC1BJ,EAASH,EAAgB,EACzBO,EAAS,kBAAkB,CAC7B,EACAA,EAAS,aAAe,IAAMD,EAC9BC,EAAS,kBAAoB,IAAM,CAClBD,EAAA,CACjB,EACOC,CACT,CAGA,SAASU,GAAsBC,KAAqBC,EAAwB,CACpE,MAAAC,EAA+B,OAAOF,GAAqB,WAAa,CAC5E,QAASA,EACT,eAAgBC,CAAA,EACdD,EACEG,EAAkB,IAAI/B,IAAuB,CACjD,IAAIgC,EAAiB,EACjBC,EAA2B,EAC3BlB,EACAmB,EAAwB,CAAC,EACzBC,EAAanC,EAAmB,IAAI,EACpC,OAAOmC,GAAe,WACAD,EAAAC,EACxBA,EAAanC,EAAmB,IAAI,GAEtCX,GACE8C,EACA,8EAA8E,OAAOA,CAAU,GACjG,EACA,MAAMC,EAAkB,CACtB,GAAGN,EACH,GAAGI,CACL,EACM,CACJ,QAAAG,EACA,eAAAC,EAAiB,CAAC,EAClB,YAAAC,EAAc5B,GACd,mBAAA6B,EAAqB,CAEvB,CAAA,EAAIJ,EACEK,EAAsB3C,GAAcwC,CAAc,EAClDI,EAA0B5C,GAAc0C,CAAkB,EAC1DvC,EAAeF,GAAgBC,CAAkB,EACjD2C,EAAqBN,EAAQ,UAAgC,CACjE,OAAAL,IACOG,EAAW,MAChB,KACA,SACF,CACF,EAAG,GAAGM,CAAmB,EAEnBG,EAAWL,EAAY,UAA+B,CAC1DN,IACA,MAAM7B,EAAuBF,GAC3BD,EACA,SACF,EACa,OAAAc,EAAA4B,EAAmB,MAAM,KAAMvC,CAAoB,EAwBzDW,CACT,EAAG,GAAG2B,CAAuB,EACtB,OAAA,OAAO,OAAOE,EAAU,CAC7B,WAAAT,EACA,mBAAAQ,EACA,aAAA1C,EACA,yBAA0B,IAAMgC,EAChC,8BAA+B,IAAM,CACRA,EAAA,CAC7B,EACA,WAAY,IAAMlB,EAClB,eAAgB,IAAMiB,EACtB,oBAAqB,IAAM,CACRA,EAAA,CACnB,EACA,QAAAK,EACA,YAAAE,CAAA,CACD,CACH,EACA,cAAO,OAAOR,EAAiB,CAC7B,UAAW,IAAMA,CAAA,CAClB,EACMA,CACT,CACA,IAAIc,KAAuDlC,EAAc,EAGrEmC,GAA2B,OAAO,OACpC,CAACC,EAAsBC,EAAkBH,IAAmB,CAC1DrD,GACEuD,EACA,yHAAyH,OAAOA,CAAoB,EACtJ,EACM,MAAAE,EAAoB,OAAO,KAAKF,CAAoB,EACpD9C,EAAegD,EAAkB,IACpC9J,GAAQ4J,EAAqB5J,CAAG,CACnC,EAUO,OAToB6J,EACzB/C,EACA,IAAIG,IACKA,EAAqB,OAAO,CAAC8C,EAAa5K,EAAOe,KAC1C6J,EAAAD,EAAkB5J,CAAK,CAAC,EAAIf,EACjC4K,GACN,EAAE,CAET,CAEF,EACA,CAAE,UAAW,IAAMJ,EAAyB,CAC9C,EC1tBA,SAASK,GAAsBC,EAAe,CAO5C,MANmB,CAAC,CAAE,SAAAC,EAAU,SAAAC,CAAQ,IAAQC,GAAUC,GACpD,OAAOA,GAAW,WACbA,EAAOH,EAAUC,EAAUF,CAAa,EAE1CG,EAAKC,CAAM,CAGtB,CACA,IAAIC,GAAQN,GAAqB,EAC7BO,GAAoBP,GCgBpBQ,GAAsB,OAAO,OAAW,KAAe,OAAO,qCAAuC,OAAO,qCAAuC,UAAW,CAC5J,GAAA,UAAU,SAAW,EACzB,OAAI,OAAO,UAAU,CAAC,GAAM,SAAiBC,GACtCA,GAAQ,MAAM,KAAM,SAAS,CACtC,EAcIC,GAAoBC,GACfA,GAAK,OAAOA,EAAE,OAAU,WAIjC,SAASC,EAAaC,EAAMC,EAAe,CACzC,SAASC,KAAiB/L,EAAM,CAC9B,GAAI8L,EAAe,CACb,IAAAE,EAAWF,EAAc,GAAG9L,CAAI,EACpC,GAAI,CAACgM,EACH,MAAM,IAAI,MAA8CC,EAAuB,CAAC,CAA4C,EAEvH,MAAA,CACL,KAAAJ,EACA,QAASG,EAAS,QAClB,GAAG,SAAUA,GAAY,CACvB,KAAMA,EAAS,IACjB,EACA,GAAG,UAAWA,GAAY,CACxB,MAAOA,EAAS,KAAA,CAEpB,CAAA,CAEK,MAAA,CACL,KAAAH,EACA,QAAS7L,EAAK,CAAC,CACjB,CAAA,CAEY,OAAA+L,EAAA,SAAW,IAAM,GAAGF,CAAI,GACtCE,EAAc,KAAOF,EACrBE,EAAc,MAASV,GAAWa,GAASb,CAAM,GAAKA,EAAO,OAASQ,EAC/DE,CACT,CAyDA,IAAII,GAAQ,MAAMC,UAAe,KAAM,CACrC,eAAeC,EAAO,CACpB,MAAM,GAAGA,CAAK,EACP,OAAA,eAAe,KAAMD,EAAO,SAAS,CAAA,CAE9C,WAAY,OAAO,OAAO,GAAI,CACrB,OAAAA,CAAA,CAET,UAAUE,EAAK,CACb,OAAO,MAAM,OAAO,MAAM,KAAMA,CAAG,CAAA,CAErC,WAAWA,EAAK,CACV,OAAAA,EAAI,SAAW,GAAK,MAAM,QAAQA,EAAI,CAAC,CAAC,EACnC,IAAIF,EAAO,GAAGE,EAAI,CAAC,EAAE,OAAO,IAAI,CAAC,EAEnC,IAAIF,EAAO,GAAGE,EAAI,OAAO,IAAI,CAAC,CAAA,CAEzC,EACA,SAASC,GAAgBC,EAAK,CAC5B,OAAOpM,EAAYoM,CAAG,EAAIC,GAAgBD,EAAK,IAAM,CACpD,CAAA,EAAIA,CACP,CACA,SAASE,EAAoBC,EAAK3L,EAAK4L,EAAS,CAC9C,OAAID,EAAI,IAAI3L,CAAG,EAAU2L,EAAI,IAAI3L,CAAG,EAC7B2L,EAAI,IAAI3L,EAAK4L,EAAQ5L,CAAG,CAAC,EAAE,IAAIA,CAAG,CAC3C,CAyPA,SAAS6L,GAAUlL,EAAG,CACpB,OAAO,OAAOA,GAAM,SACtB,CACA,IAAImL,GAA4B,IAAM,SAA8BrE,EAAS,CACrE,KAAA,CACJ6C,MAAAA,EAAQ,GACR,eAAAyB,EAAiB,GACjB,kBAAAC,EAAoB,GACpB,mBAAAC,EAAqB,EACvB,EAAIxE,GAAW,CAAC,EACZ,IAAAyE,EAAkB,IAAIf,GAC1B,OAAIb,IACEuB,GAAUvB,CAAK,EACjB4B,EAAgB,KAAKC,EAAe,EAEpCD,EAAgB,KAAK3B,GAAkBD,EAAM,aAAa,CAAC,GA0BxD4B,CACT,EAGIE,GAAmB,gBAOnBC,GAAwBC,GAClBC,GAAW,CACjB,WAAWA,EAAQD,CAAO,CAC5B,EAEEE,GAAoB,CAAC/E,EAAU,CACjC,KAAM,KACR,IAAO2C,GAAS,IAAIpL,IAAS,CACrB,MAAAyN,EAAQrC,EAAK,GAAGpL,CAAI,EAC1B,IAAI0N,EAAY,GACZC,EAA0B,GAC1BC,EAAqB,GACnB,MAAAC,MAAgC,IAChCC,EAAgBrF,EAAQ,OAAS,OAAS,eAAiBA,EAAQ,OAAS,MAEhF,OAAO,OAAW,KAAe,OAAO,sBAAwB,OAAO,sBAAwB4E,GAAqB,EAAE,EACpH5E,EAAQ,OAAS,WAAaA,EAAQ,kBAAoB4E,GAAqB5E,EAAQ,OAAO,EAC5FsF,EAAkB,IAAM,CACPH,EAAA,GACjBD,IACwBA,EAAA,GAC1BE,EAAU,QAAS7E,GAAMA,EAAA,CAAG,EAEhC,EACA,OAAO,OAAO,OAAO,CAAC,EAAGyE,EAAO,CAG9B,UAAUO,EAAW,CACb,MAAAC,EAAkB,IAAMP,GAAaM,EAAU,EAC/CE,EAAcT,EAAM,UAAUQ,CAAe,EACnD,OAAAJ,EAAU,IAAIG,CAAS,EAChB,IAAM,CACCE,EAAA,EACZL,EAAU,OAAOG,CAAS,CAC5B,CACF,EAGA,SAAS3C,EAAQ,OACX,GAAA,CACU,OAAAqC,EAAA,GAACpN,EAAA+K,GAAA,YAAAA,EAAQ,OAAR,MAAA/K,EAAe8M,KAC5BO,EAA0B,CAACD,EACvBC,IACGC,IACkBA,EAAA,GACrBE,EAAcC,CAAe,IAG1BN,EAAM,SAASpC,CAAM,CAAA,QAC5B,CACYqC,EAAA,EAAA,CACd,CACF,CACD,CACH,EAGIS,GAA4BC,GAAuB,SAA6B3F,EAAS,CACrF,KAAA,CACJ,UAAA4F,EAAY,EACd,EAAI5F,GAAW,CAAC,EACZ,IAAA6F,EAAgB,IAAInC,GAAMiC,CAAkB,EAChD,OAAIC,GACFC,EAAc,KAAKd,GAAkB,OAAOa,GAAc,SAAWA,EAAY,MAAM,CAAC,EAEnFC,CACT,EAGA,SAASC,GAAe9F,EAAS,CAC/B,MAAM+F,EAAuB1B,GAA0B,EACjD,CACJ,QAAA2B,EAAU,OACV,WAAAC,EACA,SAAAC,EAAW,GAEX,eAAAC,EAAiB,OACjB,UAAAC,EAAY,MACd,EAAIpG,GAAW,CAAC,EACZ,IAAAqG,EACA,GAAA,OAAOL,GAAY,WACPK,EAAAL,UACLM,GAAeN,CAAO,EAC/BK,EAAcE,GAAgBP,CAAO,MAErC,OAAM,IAAI,MAA8CxC,EAAuB,CAAC,CAA8H,EAK5M,IAAAgD,EACA,OAAOP,GAAe,WACxBO,EAAkBP,EAAWF,CAAoB,EAKjDS,EAAkBT,EAAqB,EAczC,IAAIU,EAAeC,GACfR,IACFO,EAAe1D,GAAoB,CAEjC,MAAO,GACP,GAAG,OAAOmD,GAAa,UAAYA,CAAA,CACpC,GAEG,MAAAP,EAAqBgB,GAAgB,GAAGH,CAAe,EACvDI,EAAsBlB,GAAyBC,CAAkB,EAIvE,IAAIkB,EAAiB,OAAOT,GAAc,WAAaA,EAAUQ,CAAmB,EAAIA,EAAoB,EAUtG,MAAAE,EAAmBL,EAAa,GAAGI,CAAc,EAChD,OAAAE,GAAYV,EAAaF,EAAgBW,CAAgB,CAClE,CAMA,SAASE,GAA8BC,EAAiB,CACtD,MAAMC,EAAa,CAAC,EACdC,EAAiB,CAAC,EACpB,IAAAC,EACJ,MAAMC,EAAU,CACd,QAAQC,EAAqBtB,EAAS,CASpC,MAAM5C,EAAO,OAAOkE,GAAwB,SAAWA,EAAsBA,EAAoB,KACjG,GAAI,CAAClE,EACH,MAAM,IAAI,MAA8CI,EAAuB,EAAE,CAAkE,EAErJ,GAAIJ,KAAQ8D,EACJ,MAAA,IAAI,MAA8C1D,EAAuB,EAAE,CAA+F,EAElL,OAAA0D,EAAW9D,CAAI,EAAI4C,EACZqB,CACT,EACA,WAAWE,EAASvB,EAAS,CAM3B,OAAAmB,EAAe,KAAK,CAClB,QAAAI,EACA,QAAAvB,CAAA,CACD,EACMqB,CACT,EACA,eAAerB,EAAS,CAMD,OAAAoB,EAAApB,EACdqB,CAAA,CAEX,EACA,OAAAJ,EAAgBI,CAAO,EAChB,CAACH,EAAYC,EAAgBC,CAAkB,CACxD,CAGA,SAASI,GAAgBtO,EAAG,CAC1B,OAAO,OAAOA,GAAM,UACtB,CACA,SAASuO,GAAcC,EAAcC,EAAsB,CAMzD,GAAI,CAACT,EAAYU,EAAqBC,CAAuB,EAAIb,GAA8BW,CAAoB,EAC/GG,EACA,GAAAN,GAAgBE,CAAY,EACZI,EAAA,IAAMhE,GAAgB4D,GAAc,MACjD,CACC,MAAAK,EAAqBjE,GAAgB4D,CAAY,EACvDI,EAAkB,IAAMC,CAAA,CAE1B,SAAS/B,EAAQrN,EAAQmP,EAAgB,EAAGlF,EAAQ,CAC9C,IAAAoF,EAAe,CAACd,EAAWtE,EAAO,IAAI,EAAG,GAAGgF,EAAoB,OAAO,CAAC,CAC1E,QAAAL,KACIA,EAAQ3E,CAAM,CAAC,EAAE,IAAI,CAAC,CAC1B,QAASqF,CACX,IAAMA,CAAQ,CAAC,EACX,OAAAD,EAAa,OAAQE,GAAO,CAAC,CAACA,CAAE,EAAE,SAAW,IAC/CF,EAAe,CAACH,CAAuB,GAElCG,EAAa,OAAO,CAACG,EAAeC,IAAgB,CACzD,GAAIA,EACE,GAAAC,EAASF,CAAa,EAAG,CAErB,MAAA9M,EAAS+M,EADDD,EACoBvF,CAAM,EACxC,OAAIvH,IAAW,OACN8M,EAEF9M,CAAA,KACE,IAACiN,EAAaH,CAAa,EAU7B,OAAAI,GAAiBJ,EAAgBhN,GAC/BiN,EAAYjN,EAAOyH,CAAM,CACjC,EAZsC,CACjC,MAAAvH,EAAS+M,EAAYD,EAAevF,CAAM,EAChD,GAAIvH,IAAW,OAAQ,CACrB,GAAI8M,IAAkB,KACb,OAAAA,EAET,MAAM,MAAM,mEAAmE,CAAA,CAE1E,OAAA9M,CAAA,EAOJ,OAAA8M,GACNxP,CAAK,CAAA,CAEV,OAAAqN,EAAQ,gBAAkB8B,EACnB9B,CACT,CAGA,IAAIwC,GAAU,CAACjB,EAAS3E,IAClBK,GAAiBsE,CAAO,EACnBA,EAAQ,MAAM3E,CAAM,EAEpB2E,EAAQ3E,CAAM,EAGzB,SAAS6F,MAAWC,EAAU,CAC5B,OAAQ9F,GACC8F,EAAS,KAAMnB,GAAYiB,GAAQjB,EAAS3E,CAAM,CAAC,CAE9D,CAiEA,IAAI+F,GAAc,mEACdC,GAAS,CAACC,EAAO,KAAO,CAC1B,IAAIC,EAAK,GACLlP,EAAIiP,EACR,KAAOjP,KACLkP,GAAMH,GAAY,KAAK,OAAO,EAAI,GAAK,CAAC,EAEnC,OAAAG,CACT,EAGIC,GAAmB,CAAC,OAAQ,UAAW,QAAS,MAAM,EACtDC,GAAkB,KAAM,CAC1B,YAAYC,EAASC,EAAM,CAQ3BC,EAAA,cAPE,KAAK,QAAUF,EACf,KAAK,KAAOC,CAAA,CAOhB,EACIE,GAAkB,KAAM,CAC1B,YAAYH,EAASC,EAAM,CAQ3BC,EAAA,cAPE,KAAK,QAAUF,EACf,KAAK,KAAOC,CAAA,CAOhB,EACIG,GAAsB3R,GAAU,CAClC,GAAI,OAAOA,GAAU,UAAYA,IAAU,KAAM,CAC/C,MAAM4R,EAAc,CAAC,EACrB,UAAWC,KAAYR,GACjB,OAAOrR,EAAM6R,CAAQ,GAAM,WACjBD,EAAAC,CAAQ,EAAI7R,EAAM6R,CAAQ,GAGnC,OAAAD,CAAA,CAEF,MAAA,CACL,QAAS,OAAO5R,CAAK,CACvB,CACF,EACI8R,GAAuB,8BACvBC,IAA0C,IAAA,CACnC,SAAAC,EAAkBC,EAAYC,EAAgB5J,EAAS,CACxD,MAAA6J,EAAY1G,EAAawG,EAAa,aAAc,CAACV,EAASa,EAAWtJ,EAAK0I,KAAU,CAC5F,QAAAD,EACA,KAAM,CACJ,GAAGC,GAAQ,CAAC,EACZ,IAAA1I,EACA,UAAAsJ,EACA,cAAe,WAAA,CACjB,EACA,EACIC,EAAU5G,EAAawG,EAAa,WAAY,CAACG,EAAWtJ,EAAK0I,KAAU,CAC/E,QAAS,OACT,KAAM,CACJ,GAAGA,GAAQ,CAAC,EACZ,IAAA1I,EACA,UAAAsJ,EACA,cAAe,SAAA,CACjB,EACA,EACIE,EAAW7G,EAAawG,EAAa,YAAa,CAACrS,EAAOwS,EAAWtJ,EAAKyI,EAASC,KAAU,CACjG,QAAAD,EACA,OAAQjJ,GAAWA,EAAQ,gBAAkBqJ,IAAoB/R,GAAS,UAAU,EACpF,KAAM,CACJ,GAAG4R,GAAQ,CAAC,EACZ,IAAA1I,EACA,UAAAsJ,EACA,kBAAmB,CAAC,CAACb,EACrB,cAAe,WACf,SAAS3R,GAAA,YAAAA,EAAO,QAAS,aACzB,WAAWA,GAAA,YAAAA,EAAO,QAAS,gBAAA,CAC7B,EACA,EACF,SAASgM,EAAc9C,EAAK,CAC1B,OAAAyJ,CACF,EAAI,GAAI,CACC,MAAA,CAACxH,EAAUC,EAAUwH,IAAU,CACpC,MAAMJ,EAAY9J,GAAA,MAAAA,EAAS,YAAcA,EAAQ,YAAYQ,CAAG,EAAIoI,GAAO,EACrEuB,EAAkB,IAAI,gBACxB,IAAAC,EACAC,EACJ,SAASC,EAAMC,EAAQ,CACPF,EAAAE,EACdJ,EAAgB,MAAM,CAAA,CAEpBF,IACEA,EAAO,QACTK,EAAMd,EAAoB,EAE1BS,EAAO,iBAAiB,QAAS,IAAMK,EAAMd,EAAoB,EAAG,CAClE,KAAM,EAAA,CACP,GAGL,MAAMgB,EAAU,gBAAiB,SAC3B,IAAAC,EACA,GAAA,CACE,IAAAC,GAAkB7S,EAAAmI,GAAA,YAAAA,EAAS,YAAT,YAAAnI,EAAA,KAAAmI,EAAqBQ,EAAK,CAC9C,SAAAkC,EACA,MAAAwH,CAAA,GAKF,GAHIS,GAAWD,CAAe,IAC5BA,EAAkB,MAAMA,GAEtBA,IAAoB,IAASP,EAAgB,OAAO,QAChD,KAAA,CACJ,KAAM,iBACN,QAAS,oDACX,EAEF,MAAMS,EAAiB,IAAI,QAAQ,CAACC,EAAGC,IAAW,CAChDV,EAAe,IAAM,CACZU,EAAA,CACL,KAAM,aACN,QAAST,GAAe,SAAA,CACzB,CACH,EACgBF,EAAA,OAAO,iBAAiB,QAASC,CAAY,CAAA,CAC9D,EACD3H,EAASsH,EAAQD,EAAWtJ,GAAKuK,EAAA/K,GAAA,YAAAA,EAAS,iBAAT,YAAA+K,EAAA,KAAA/K,EAA0B,CACzD,UAAA8J,EACA,IAAAtJ,CAAA,EACC,CACD,SAAAkC,EACA,MAAAwH,CACD,EAAC,CAAC,EACWO,EAAA,MAAM,QAAQ,KAAK,CAACG,EAAgB,QAAQ,QAAQhB,EAAepJ,EAAK,CACpF,SAAAiC,EACA,SAAAC,EACA,MAAAwH,EACA,UAAAJ,EACA,OAAQK,EAAgB,OACxB,MAAAG,EACA,gBAAiB,CAAC5S,EAAOwR,IAChB,IAAIF,GAAgBtR,EAAOwR,CAAI,EAExC,iBAAkB,CAACxR,EAAOwR,IACjB,IAAIE,GAAgB1R,EAAOwR,CAAI,CACxC,CACD,CAAC,EAAE,KAAM7N,GAAW,CACnB,GAAIA,aAAkB2N,GACd,MAAA3N,EAER,OAAIA,aAAkB+N,GACbS,EAAUxO,EAAO,QAASyO,EAAWtJ,EAAKnF,EAAO,IAAI,EAEvDwO,EAAUxO,EAAQyO,EAAWtJ,CAAG,CACxC,CAAA,CAAC,CAAC,QACIwK,EAAK,CACZP,EAAcO,aAAehC,GAAkBgB,EAAS,KAAMF,EAAWtJ,EAAKwK,EAAI,QAASA,EAAI,IAAI,EAAIhB,EAASgB,EAAKlB,EAAWtJ,CAAG,CAAA,QACnI,CACI4J,GACcD,EAAA,OAAO,oBAAoB,QAASC,CAAY,CAClE,CAGF,OADqBpK,GAAW,CAACA,EAAQ,4BAA8BgK,EAAS,MAAMS,CAAW,GAAKA,EAAY,KAAK,WAErHhI,EAASgI,CAAW,EAEfA,CAAA,EACP,EACK,OAAA,OAAO,OAAOD,EAAS,CAC5B,MAAAF,EACA,UAAAR,EACA,IAAAtJ,EACA,QAAS,CACA,OAAAgK,EAAQ,KAAKS,EAAY,CAAA,CAClC,CACD,CACH,CAAA,CAEK,OAAA,OAAO,OAAO3H,EAAe,CAClC,QAAAyG,EACA,SAAAC,EACA,UAAAH,EACA,QAASpB,GAAQuB,EAAUH,CAAS,EACpC,WAAAF,CAAA,CACD,CAAA,CAEH,OAAAD,EAAkB,UAAY,IAAMA,EAC7BA,CACT,GAAG,EACH,SAASuB,GAAarI,EAAQ,CAC5B,GAAIA,EAAO,MAAQA,EAAO,KAAK,kBAC7B,MAAMA,EAAO,QAEf,GAAIA,EAAO,MACT,MAAMA,EAAO,MAEf,OAAOA,EAAO,OAChB,CACA,SAAS+H,GAAWjT,EAAO,CACzB,OAAOA,IAAU,MAAQ,OAAOA,GAAU,UAAY,OAAOA,EAAM,MAAS,UAC9E,CAGA,IAAIwT,GAA0C,OAAA,IAAI,4BAA4B,EAU9E,SAASC,GAAQC,EAAOC,EAAW,CAC1B,MAAA,GAAGD,CAAK,IAAIC,CAAS,EAC9B,CACA,SAASC,GAAiB,CACxB,SAAAC,CACF,EAAI,GAAI,OACA,MAAAC,GAAM3T,EAAA0T,GAAA,YAAAA,EAAU,aAAV,YAAA1T,EAAuBqT,IAC5B,OAAA,SAAsBlL,EAAS,CAC9B,KAAA,CACJ,KAAAyL,EACA,YAAAC,EAAcD,CAAA,EACZzL,EACJ,GAAI,CAACyL,EACH,MAAM,IAAI,MAA8CjI,EAAuB,EAAE,CAAiD,EAOpI,MAAMmI,GAAY,OAAO3L,EAAQ,UAAa,WAAaA,EAAQ,SAAS4L,GAAsB,CAAA,EAAI5L,EAAQ,WAAa,CAAC,EACtH6L,EAAe,OAAO,KAAKF,CAAQ,EACnCG,EAAU,CACd,wBAAyB,CAAC,EAC1B,wBAAyB,CAAC,EAC1B,eAAgB,CAAC,EACjB,cAAe,CAAA,CACjB,EACMC,EAAiB,CACrB,QAAQzE,EAAqBW,EAAU,CACrC,MAAM7E,EAAO,OAAOkE,GAAwB,SAAWA,EAAsBA,EAAoB,KACjG,GAAI,CAAClE,EACH,MAAM,IAAI,MAA8CI,EAAuB,EAAE,CAAkE,EAEjJ,GAAAJ,KAAQ0I,EAAQ,wBAClB,MAAM,IAAI,MAA8CtI,EAAuB,EAAE,CAA4F,EAEvK,OAAAsI,EAAA,wBAAwB1I,CAAI,EAAI6E,EACjC8D,CACT,EACA,WAAWxE,EAASU,EAAU,CAC5B,OAAA6D,EAAQ,cAAc,KAAK,CACzB,QAAAvE,EACA,QAASU,CAAA,CACV,EACM8D,CACT,EACA,aAAaC,EAAO1I,EAAe,CACzB,OAAAwI,EAAA,eAAeE,CAAK,EAAI1I,EACzByI,CACT,EACA,kBAAkBC,EAAO/D,EAAU,CACzB,OAAA6D,EAAA,wBAAwBE,CAAK,EAAI/D,EAClC8D,CAAA,CAEX,EACaF,EAAA,QAASI,GAAgB,CAC9B,MAAAC,EAAoBP,EAASM,CAAW,EACxCE,EAAiB,CACrB,YAAAF,EACA,KAAMd,GAAQM,EAAMQ,CAAW,EAC/B,eAAgB,OAAOjM,EAAQ,UAAa,UAC9C,EACIoM,GAAmCF,CAAiB,EACrBG,GAAAF,EAAgBD,EAAmBH,EAAgBP,CAAG,EAEzDc,GAAAH,EAAgBD,EAAmBH,CAAc,CACjF,CACD,EACD,SAASQ,GAAe,CAMhB,KAAA,CAACC,EAAgB,GAAIrF,EAAiB,CAAA,EAAIC,EAAqB,MAAM,EAAI,OAAOpH,EAAQ,eAAkB,WAAagH,GAA8BhH,EAAQ,aAAa,EAAI,CAACA,EAAQ,aAAa,EACpMyM,EAAoB,CACxB,GAAGD,EACH,GAAGV,EAAQ,uBACb,EACA,OAAOrE,GAAczH,EAAQ,aAAeqH,GAAY,CACtD,QAAS9O,KAAOkU,EACdpF,EAAQ,QAAQ9O,EAAKkU,EAAkBlU,CAAG,CAAC,EAEpC,QAAAmU,KAAMZ,EAAQ,cACrBzE,EAAQ,WAAWqF,EAAG,QAASA,EAAG,OAAO,EAE3C,QAASC,KAAKxF,EACZE,EAAQ,WAAWsF,EAAE,QAASA,EAAE,OAAO,EAErCvF,GACFC,EAAQ,eAAeD,CAAkB,CAC3C,CACD,CAAA,CAEG,MAAAwF,EAAcjU,GAAUA,EACxBkU,MAA4C,IAC5CC,MAAyC,QAC3C,IAAAC,EACK,SAAA/G,EAAQrN,EAAOiK,EAAQ,CAC1B,OAACmK,IAAUA,EAAWR,EAAa,GAChCQ,EAASpU,EAAOiK,CAAM,CAAA,CAE/B,SAASkF,GAAkB,CACrB,OAACiF,IAAUA,EAAWR,EAAa,GAChCQ,EAAS,gBAAgB,CAAA,CAEzB,SAAAC,EAAkBC,EAAcC,EAAW,GAAO,CACzD,SAASC,EAAYxU,EAAO,CACtB,IAAAyU,EAAazU,EAAMsU,CAAY,EAC/B,OAAA,OAAOG,EAAe,KACpBF,IACWE,EAAAnJ,EAAoB6I,EAAoBK,EAAarF,CAAe,GAK9EsF,CAAA,CAEA,SAAAC,EAAaC,EAAcV,EAAY,CAC9C,MAAMW,EAAgBtJ,EAAoB4I,EAAuBK,EAAU,IAAsB,IAAI,OAAS,EACvG,OAAAjJ,EAAoBsJ,EAAeD,EAAa,IAAM,CAC3D,MAAMpJ,EAAM,CAAC,EACF,SAAA,CAAC8H,GAAOhK,EAAQ,IAAK,OAAO,QAAQhC,EAAQ,WAAa,CAAA,CAAE,EAChEkE,EAAA8H,EAAK,EAAIwB,GAAaxL,GAAUsL,EAAa,IAAMrJ,EAAoB6I,EAAoBQ,EAAaxF,CAAe,EAAGoF,CAAQ,EAEjI,OAAAhJ,CAAA,CACR,CAAA,CAEI,MAAA,CACL,YAAa+I,EACb,aAAAI,EACA,IAAI,WAAY,CACd,OAAOA,EAAaF,CAAW,CACjC,EACA,YAAAA,CACF,CAAA,CAEF,MAAM/B,EAAQ,CACZ,KAAAK,EACA,QAAAzF,EACA,QAAS8F,EAAQ,eACjB,aAAcA,EAAQ,wBACtB,gBAAAhE,EACA,GAAGkF,EAAkBtB,CAAW,EAChC,WAAW+B,EAAY,CACrB,YAAaC,EACb,GAAGlQ,CACL,EAAI,GAAI,CACN,MAAMmQ,EAAiBD,GAAWhC,EAClC,OAAA+B,EAAW,OAAO,CAChB,YAAaE,EACb,QAAA3H,GACCxI,CAAM,EACF,CACL,GAAG4N,EACH,GAAG4B,EAAkBW,EAAgB,EAAI,CAC3C,CAAA,CAEJ,EACO,OAAAvC,CACT,CACF,CACA,SAASoC,GAAaxL,EAAUsL,EAAaxF,EAAiBoF,EAAU,CAC7D,SAAAU,EAAQC,KAActW,EAAM,CAC/B,IAAA6V,EAAaE,EAAYO,CAAS,EAClC,OAAA,OAAOT,EAAe,KACpBF,IACFE,EAAatF,EAAgB,GAK1B9F,EAASoL,EAAY,GAAG7V,CAAI,CAAA,CAErC,OAAAqW,EAAQ,UAAY5L,EACb4L,CACT,CACA,IAAIE,GAA+CxC,GAAA,EACnD,SAASM,IAAuB,CACrB,SAAAmC,EAAWnE,EAAgBpM,EAAQ,CACnC,MAAA,CACL,uBAAwB,aACxB,eAAAoM,EACA,GAAGpM,CACL,CAAA,CAEF,OAAAuQ,EAAW,UAAY,IAAMA,EACtB,CACL,QAAQ3F,EAAa,CACnB,OAAO,OAAO,OAAO,CAGnB,CAACA,EAAY,IAAI,KAAK7Q,EAAM,CACnB,OAAA6Q,EAAY,GAAG7Q,CAAI,CAAA,CAC5B,EACA6Q,EAAY,IAAI,EAAG,CACnB,uBAAwB,SAAA,CACzB,CACH,EACA,gBAAgB4F,EAAShI,EAAS,CACzB,MAAA,CACL,uBAAwB,qBACxB,QAAAgI,EACA,QAAAhI,CACF,CACF,EACA,WAAA+H,CACF,CACF,CACA,SAASzB,GAA8B,CACrC,KAAAlJ,EACA,YAAA6I,EACA,eAAAgC,CACF,EAAGC,EAAyBpC,EAAS,CAC/B,IAAA1D,EACA+F,EACJ,GAAI,YAAaD,EAAyB,CACxC,GAAID,GAAkB,CAACG,GAAmCF,CAAuB,EAC/E,MAAM,IAAI,MAA8C1K,EAAuB,EAAE,CAA+G,EAElM4E,EAAc8F,EAAwB,QACtCC,EAAkBD,EAAwB,OAAA,MAE5B9F,EAAA8F,EAEhBpC,EAAQ,QAAQ1I,EAAMgF,CAAW,EAAE,kBAAkB6D,EAAa7D,CAAW,EAAE,aAAa6D,EAAakC,EAAkBhL,EAAaC,EAAM+K,CAAe,EAAIhL,EAAaC,CAAI,CAAC,CACrL,CACA,SAASgJ,GAAmCF,EAAmB,CAC7D,OAAOA,EAAkB,yBAA2B,YACtD,CACA,SAASkC,GAAmClC,EAAmB,CAC7D,OAAOA,EAAkB,yBAA2B,oBACtD,CACA,SAASG,GAAiC,CACxC,KAAAjJ,EACA,YAAA6I,CACF,EAAGC,EAAmBJ,EAASN,EAAK,CAClC,GAAI,CAACA,EACH,MAAM,IAAI,MAA8ChI,EAAuB,EAAE,CAA4L,EAEzQ,KAAA,CACJ,eAAAoG,EACA,UAAAC,EACA,QAAAE,EACA,SAAAC,EACA,QAAAqE,EACA,QAAArO,CAAA,EACEkM,EACErJ,EAAQ2I,EAAIpI,EAAMwG,EAAgB5J,CAAO,EACvC8L,EAAA,aAAaG,EAAapJ,CAAK,EACnCgH,GACMiC,EAAA,QAAQjJ,EAAM,UAAWgH,CAAS,EAExCE,GACM+B,EAAA,QAAQjJ,EAAM,QAASkH,CAAO,EAEpCC,GACM8B,EAAA,QAAQjJ,EAAM,SAAUmH,CAAQ,EAEtCqE,GACMvC,EAAA,WAAWjJ,EAAM,QAASwL,CAAO,EAE3CvC,EAAQ,kBAAkBG,EAAa,CACrC,UAAWpC,GAAayE,EACxB,QAASvE,GAAWuE,EACpB,SAAUtE,GAAYsE,EACtB,QAASD,GAAWC,CAAA,CACrB,CACH,CACA,SAASA,GAAO,CAChB,CA67BA,SAAS9K,EAAuB+K,EAAM,CAC7B,MAAA,iCAAiCA,CAAI,oDAAoDA,CAAI,iFACtG,CC9iEO,MAAMC,EAAa,CAAnB,cAEYrF,EAAA,2BAAsB,GAGtBA,EAAA,qCAAgC,GAGhCA,EAAA,iCAA4B,IAG5BA,EAAA,gCAA2B,IAW5C,oBACEsF,EACAC,EACkB,CAClB,MAAMC,EAA6B,CAAC,EAGpC,OAAIF,EAAY,KAAK,SAAS,OAAS,KAAK,sBAK5CE,EAAS,KAAK,GAAG,KAAK,0BAA0BF,EAAY,IAAI,CAAC,EAGjEE,EAAS,KAAK,GAAG,KAAK,+BAA+BF,EAAY,IAAI,CAAC,EAGtEE,EAAS,KAAK,GAAG,KAAK,8BAA8BF,EAAY,IAAI,CAAC,EAGrEE,EAAS,KAAK,GAAG,KAAK,8BAAA,CAA+B,EAGrDA,EAAS,KAAK,GAAG,KAAK,kCAAkCF,EAAY,KAAMC,CAAK,CAAC,GAEzEC,CAAA,CAMT,0BAA0BjT,EAAqC,OAC7D,MAAMiT,EAA6B,CAAC,EAC9BC,GAAoB/W,EAAA6D,EAAK,mBAAL,YAAA7D,EAAuB,kBAEjD,MAAI,CAAC+W,GAAqBA,EAAkB,SAAW,GAKrCA,EAAA,QAASC,GAAuB,CAC5C,GAAAA,EAAS,QAAU,KAAK,oBAAqB,CAE/C,MAAMC,EAAiBD,EAAS,OAC1BE,EAAW,KAAK,iCACpBD,EACA,KAAK,yBAAyBD,EAAUnT,EAAK,QAAQ,EACrDA,EAAK,SAAS,MAChB,EAGI,KAAK,yBAAyBmT,EAAUnT,EAAK,QAAQ,GAAK,KAAK,+BACjEiT,EAAS,KAAK,CACZ,KAAM,WACN,SAAAI,EACA,YAAa,wBAAwBD,CAAc,kBAAkB,KAAK,yBAAyBD,EAAUnT,EAAK,QAAQ,CAAC,SAC3H,aAAcmT,CAAA,CACf,CACH,CACF,CACD,EAEMF,CAAA,CAMT,+BAA+BjT,EAAqC,OAClE,MAAMiT,EAA6B,CAAC,EAC9BK,EAAiBtT,EAAK,eAE5B,GAAI,CAACsT,EACI,OAAAL,EAIT,MAAMM,GADiBvT,EAAK,gBAAkB,CAAC,GACZ,OACnC,GAAIuT,IAAgB,EACX,OAAAN,EAIF,OAAA,QAAQK,CAAc,EAAE,QAAQ,CAAC,CAACE,EAAWC,CAAK,IAAM,CAC7D,MAAMC,EAAQD,EAAQF,EAElB,GAAAG,GAAS,KAAK,0BAA2B,CAErC,MAAAL,EAAW,KAAK,gCAAgCK,CAAK,EAE3DT,EAAS,KAAK,CACZ,KAAM,YACN,SAAAI,EACA,YAAa,mBAAmBG,CAAS,iBAAiB,KAAK,MAAME,EAAQ,GAAG,CAAC,eACjF,kBAAmB,CAACF,CAAsB,CAAA,CAC3C,CAAA,CACH,CACD,EAGK,MAAAG,GAAqBxX,EAAA6D,EAAK,mBAAL,YAAA7D,EAAuB,mBAC9C,GAAAwX,GAAsBA,EAAmB,OAAS,EAAG,CAEjD,MAAAC,EAAoBD,EAAmB,CAAC,EAGxCE,EAAqB,KAAK,2BAA2BD,CAAiB,EACxEC,GACFZ,EAAS,KAAKY,CAAkB,CAClC,CAGK,OAAAZ,CAAA,CAMT,8BAA8BjT,EAAqC,OACjE,MAAMiT,EAA6B,CAAC,EAC9Ba,EAAqB9T,EAAK,mBAEhC,GAAI,CAAC8T,EACI,OAAAb,EAIT,MAAMM,GADiBvT,EAAK,gBAAkB,CAAC,GACZ,OACnC,GAAIuT,IAAgB,EACX,OAAAN,EAIF,OAAA,QAAQa,CAAkB,EAAE,QAAQ,CAAC,CAACC,EAAON,CAAK,IAAM,CAC7D,MAAMC,EAAQD,EAAQF,EAElB,GAAAG,GAAS,KAAK,yBAA0B,CAMpC,MAAAL,EAAW,GAAO,KAJQK,EAAQ,KAAK,2BAC1C,EAAI,KAAK,2BAKZT,EAAS,KAAK,CACZ,KAAM,WACN,SAAAI,EACA,YAAa,mBAAmBU,CAAK,oBAAoB,KAAK,MAAML,EAAQ,GAAG,CAAC,eAChF,sBAAuB,CAACK,CAAsB,CAAA,CAC/C,CAAA,CACH,CACD,EAGK,MAAAC,GAAoB7X,EAAA6D,EAAK,mBAAL,YAAA7D,EAAuB,kBAC7C,GAAA6X,GAAqBA,EAAkB,OAAS,EAAG,CAE/C,MAAAC,EAAmBD,EAAkB,CAAC,EAGtCE,EAAuB,KAAK,+BAA+BD,CAAgB,EAC7EC,GACFjB,EAAS,KAAKiB,CAAoB,EAI9B,MAAAC,EAA8B,KAAK,sCAAsCF,CAAgB,EAC3FE,GACFlB,EAAS,KAAKkB,CAA2B,CAC3C,CAGK,OAAAlB,CAAA,CAOT,+BAAkD,CAEhD,MAAO,CAAC,CAAA,CAMV,kCACEjT,EACAgT,EACkB,CAClB,MAAMC,EAA6B,CAAC,EAC9BmB,EAAoBpU,EAAK,kBACzBqU,EAAiBrU,EAAK,gBAAkB,CAAC,EAE/C,GAAI,CAACoU,GAAqB,OAAO,KAAKA,CAAiB,EAAE,SAAW,EAC3D,OAAAnB,EAIH,MAAAqB,EAAmB,OAAO,OAAOF,CAAiB,EAAE,OAAO,CAACG,EAAKd,IAAUc,EAAMd,EAAO,CAAC,EAC/F,GAAIa,IAAqB,EAChB,OAAArB,EAkCL,GA9BG,OAAA,QAAQmB,CAAiB,EAAE,QAAQ,CAAC,CAACI,EAAWf,CAAK,IAAM,CAChE,MAAMgB,EAAkBhB,EAAQa,EAEhC,GAAIG,GAAmB,IAAM,CAE3B,MAAMC,EAAe,OAAO,OAAO1B,CAAK,EACrC,OAAe2B,GAAAA,EAAK,kBAAkB,SAASH,CAA6B,CAAC,EAC7E,IAAIG,GAAQA,EAAK,EAAE,EAGtB,IAAIC,EAAa,EACbF,EAAa,OAAS,IAGxBE,EAFwBP,EAAe,OAAOQ,GAC5CH,EAAa,SAASG,EAAM,MAAM,CAAC,EAAE,OACRR,EAAe,QAG1C,MAAAhB,EAAYoB,EAAkB,GAAQG,EAAa,GAEzD3B,EAAS,KAAK,CACZ,KAAM,WACN,SAAAI,EACA,YAAa,wBAAwBmB,CAAS,kBAC9C,kBAAmB,CAACA,CAA6B,EACjD,aAAAE,CAAA,CACD,CAAA,CACH,CACD,EAGGL,EAAe,QAAU,EAAG,CAE9B,MAAMS,EAAqD,CAAC,EAE5D,OAAO,OAAO9B,CAAK,EAAE,QAAgB2B,GAAA,CACpBG,EAAAH,EAAK,EAAE,EAAIA,EAAK,iBAAA,CAChC,EAGD,MAAMI,EAAqB,KAAK,4BAA4BV,EAAgBS,CAAc,EAEtFC,GAAsB,IACxB9B,EAAS,KAAK,CACZ,KAAM,WACN,SAAU8B,EACV,YAAa,yDAAA,CACd,CACH,CAGK,OAAA9B,CAAA,CAMT,6BACEF,EACAC,EACuB,CACjB,KAAA,CAAE,KAAAhT,GAAS+S,EACXqB,EAAoBpU,EAAK,kBACzBqU,EAAiBrU,EAAK,gBAAkB,CAAC,EAE/C,GAAI,CAACoU,GAAqB,OAAO,KAAKA,CAAiB,EAAE,SAAW,EAClE,MAAO,CAAC,EAIV,MAAMY,EAA8C,CAAC,EAG9C,cAAA,QAAQZ,CAAiB,EAAE,QAAQ,CAAC,CAACa,EAAcX,CAAgB,IAAM,CAC9E,MAAME,EAAYS,EAElB,GAAIX,IAAqB,EACvB,OAIF,MAAMI,EAAe,OAAO,OAAO1B,CAAK,EACrC,OAAe2B,GAAAA,EAAK,kBAAkB,SAASH,CAAS,CAAC,EACzD,IAAIG,GAAQA,EAAK,EAAE,EAGhBO,EAAmBb,EAAe,OAAOQ,GAC7CA,EAAM,kBAAkB,SAASL,CAAS,CAAC,EAEzC,GAAAU,EAAiB,SAAW,EAC9B,OAIF,IAAIC,EAAyC,SAGrCA,EAAA,KAAK,yBAAyBD,CAAgB,EAShD,MAAAE,EAAqB,OAAO,OAAOhB,CAAiB,EACvD,OAAO,CAACG,EAAKd,IAAUc,EAAMd,EAAO,CAAC,EAIlC4B,EAAkB,KAAK,yBAC3Bf,EACAc,EACAF,EACAb,CACF,EAGAW,EAAqB,KAAK,CACxB,UAAAR,EACA,gBAAAa,EACA,iBAAAf,EACA,aAAAI,EACA,MAAAS,CAAA,CACD,CAAA,CACF,EAGMH,EAAqB,KAAK,CAACM,EAAGC,IAAMA,EAAE,gBAAkBD,EAAE,eAAe,CAAA,CAMlF,4BACEvC,EACAC,EACkB,CAQX,OANa,KAAK,oBAAoBD,EAAaC,CAAK,EAG5B,KAAK,CAAC,EAAGuC,IAAMA,EAAE,SAAW,EAAE,QAAQ,EAItE,OAAkBC,GAAAA,EAAQ,UAAY,EAAG,EACzC,MAAM,EAAG,CAAC,CAAA,CAOf,+BACEvC,EACA+B,EACyB,CACzB,MAAMS,EAAsC,CAAC,EAG7C,OAAAxC,EAAS,QAAmBuC,GAAA,CAC1B,OAAQA,EAAQ,KAAM,CACpB,IAAK,WACCA,EAAQ,cAAgBA,EAAQ,aAAa,QAAU,GACzDC,EAAW,KAAK,CACd,KAAM,eACN,UAAW,CACT,aAAcD,EAAQ,YACxB,EACA,SAAUA,EAAQ,QAAA,CACnB,EAEH,MAEF,IAAK,YACCA,EAAQ,mBAAqBA,EAAQ,kBAAkB,OAAS,GAElEC,EAAW,KAAK,CACd,KAAM,iBACN,UAAW,CAET,WAAYD,EAAQ,iBACtB,EACA,SAAUA,EAAQ,QAAA,CACnB,EAEH,MAEF,IAAK,WACCA,EAAQ,uBAAyBA,EAAQ,sBAAsB,OAAS,GAC1EC,EAAW,KAAK,CACd,KAAM,gBACN,UAAW,CACT,iBAAkBD,EAAQ,sBAAsB,CAAC,CACnD,EACA,SAAUA,EAAQ,QAAA,CACnB,EAEH,MAEF,IAAK,SAEH,MAEF,IAAK,WACCA,EAAQ,mBAAqBA,EAAQ,kBAAkB,OAAS,GAClEC,EAAW,KAAK,CACd,KAAM,oBACN,UAAW,CACT,yBAA0BD,EAAQ,iBACpC,EACA,SAAUA,EAAQ,QAAA,CACnB,EAEH,KAAA,CACJ,CACD,EAGDR,EACG,OAAqBU,GAAAA,EAAW,iBAAmB,EAAE,EACrD,QAAsBA,GAAA,CACrBD,EAAW,KAAK,CACd,KAAM,sBACN,UAAW,CACT,yBAA0B,CAACC,EAAW,SAAS,CACjD,EACA,SAAUA,EAAW,gBAAkB,GAAA,CACxC,CAAA,CACF,EAEID,CAAA,CAOT,yBACE1C,EACAC,EACoB,CACd,KAAA,CAAE,SAAAG,GAAaJ,EAAY,KAC3BE,EAA+B,CAAC,EAElC,GAAAE,EAAS,OAAS,EACb,OAAAF,EAIT,QAAS0C,EAAgB,EAAGA,GAAiB,EAAGA,IAAiB,CAC/D,MAAMC,EAAiB,KAAK,kCAAkCzC,EAAUwC,EAAe3C,CAAK,EACnFC,EAAA,KAAK,GAAG2C,CAAc,CAAA,CAI1B,OAAA3C,EAAS,KAAK,CAAC,EAAGsC,IAAMA,EAAE,SAAW,EAAE,QAAQ,CAAA,CAQxD,iCACExC,EACAC,EAC2B,CAC3B,KAAM,CAAE,SAAAG,EAAU,eAAAG,EAAiB,CAAA,GAAOP,EAAY,KAChD8C,EAAyC,CAAC,EAE5C,GAAA1C,EAAS,SAAW,EACf,OAAA0C,EAIT,MAAMjC,EAAiCT,EAAS,IAAI2C,GAAU,OAAA,OAAA3Z,EAAA6W,EAAM8C,CAAM,IAAZ,YAAA3Z,EAAe,UAAS,EAAE,OAAQ4Z,GAA4B,EAAQA,CAAK,EACnIxC,EAAcK,EAAkB,OAEtC,cAAO,KAAKN,CAAc,EAAE,QAAgByC,GAAA,CAC1C,MAAMvC,EAAYuC,EACZC,EAAc1C,EAA6CE,CAAS,EAE1E,GAAIwC,EAAa,EAAG,CAElB,MAAMpB,EAAaoB,EAAazC,EAG1B0C,EAAgB,KAAK,yBAAyBrC,EAAmBJ,CAAS,EAG1E0C,EAAuB,KAAK,8BAA8BtC,EAAmBJ,CAAS,EAGtF2C,EAAiB,KAAK,iCAAiC3C,EAAWL,EAAUH,CAAK,EAGjFoD,EAAY,KAAK,iCAAiCxB,EAAYqB,EAAeE,EAAe,MAAM,EAExGN,EAAY,KAAK,CACf,UAAArC,EACA,WAAAoB,EACA,UAAAwB,EACA,kBAAmBH,EACnB,qBAAAC,EACA,eAAAC,CAAA,CACD,CAAA,CACH,CACD,EAGMN,EAAY,KAAK,CAACP,EAAGC,IAAMA,EAAE,UAAYD,EAAE,SAAS,CAAA,CAQ7D,wBACEvC,EACAC,EACwB,CACxB,KAAM,CAAE,SAAAG,EAAU,gBAAAkD,CAAgB,EAAItD,EAAY,KAC5CuD,EAAqC,CAAC,EAExC,OAAAnD,EAAS,OAAS,EACbmD,GAIF,OAAA,QAAQD,CAAe,EAAE,QAAQ,CAAC,CAACP,EAAQvC,CAAW,IAAM,CACjE,MAAMiB,EAAY,KAAK,4BAA4BsB,EAAQvC,EAAaJ,EAAUH,CAAK,EACnFwB,GACF8B,EAAW,KAAK9B,CAAS,CAC3B,CACD,EAGM8B,EAAW,KAAK,CAAChB,EAAGC,IAAMA,EAAE,iBAAmBD,EAAE,gBAAgB,EAAA,CAS1E,uBACEvC,EACAC,EACwB,CACxB,KAAM,CAAE,SAAAG,EAAU,mBAAAW,EAAqB,CAAA,GAAOf,EAAY,KAEtD,GAAAI,EAAS,OAAS,EACb,MAAA,CACL,WAAY,EACZ,cAAe,EACf,uBAAwB,QACxB,cAAe,CAAC,EAChB,oBAAqB,EACrB,gBAAiB,EACjB,kBAAmB,CAAE,KAAM,EAAG,QAAS,EAAG,OAAQ,CAAE,EACpD,WAAY,CACd,EAII,MAAAc,EAAmBd,EAAS,IAAc2C,GAAA,CACxC,MAAAnB,EAAO3B,EAAM8C,CAAM,EAClB,OAAAnB,EAAOA,EAAK,cAAgB,CACpC,CAAA,EAAE,OAAOtM,GAAOA,EAAM,CAAC,EAGlBkO,EAAkB,CAAC,EACnBC,EAA6C,CAAC,EAEpD,QAAStY,EAAI,EAAGA,EAAI+V,EAAiB,OAAQ/V,IAAK,CAC1C,MAAAuY,EAAexC,EAAiB/V,EAAI,CAAC,EACrCwY,EAAezC,EAAiB/V,CAAC,EACjCyY,EAAe,KAAK,IAAID,EAAeD,CAAY,EAErDE,EAAe,IACjBJ,EAAM,KAAKI,CAAY,EACvBH,EAAe,KAAKE,EAAeD,EAAe,UAAY,UAAU,EAC1E,CAIF,MAAMG,EAAaL,EAAM,OACnBM,EAAgBD,EAAazD,EAAS,OACtC2D,EAAsBP,EAAM,OAAS,EAAIA,EAAM,OAAO,CAAChC,EAAKwC,IAASxC,EAAMwC,EAAM,CAAC,EAAIR,EAAM,OAAS,EACrGS,EAAkBT,EAAM,OAAS,EAAI,KAAK,IAAI,GAAGA,CAAK,EAAI,EAG1DU,EAAeT,EAAe,OAAcU,GAAAA,IAAQ,SAAS,EAAE,OAC/DC,EAAgBX,EAAe,OAAcU,GAAAA,IAAQ,UAAU,EAAE,OACvE,IAAIE,EAA2D,QAE3DH,EAAeE,EAAgB,IACRC,EAAA,UAChBD,EAAgBF,EAAe,MACfG,EAAA,YAG3B,MAAMC,EAA0BvD,EAC1BwD,EAAsB,OAAO,OAAOD,CAAuB,EAAE,OAAO,CAAC9C,EAAad,IAAkBc,EAAMd,EAAO,CAAC,EAClH8D,EAAoB,CACxB,KAAMD,EAAsB,GAAKD,EAAwB,MAAQ,GAAKC,EAAsB,EAC5F,QAASA,EAAsB,GAAKD,EAAwB,SAAW,GAAKC,EAAsB,EAClG,OAAQA,EAAsB,GAAKD,EAAwB,QAAU,GAAKC,EAAsB,CAClG,EAGA,IAAIE,EAAa,EACb,GAAAjB,EAAM,OAAS,EAAG,CACpB,MAAMkB,EAAelB,EAAM,OAAO,CAAChC,EAAKmD,IAAS,CAC/C,MAAMC,EAAYD,EAAOZ,EACzB,OAAOvC,EAAOoD,EAAYA,CAAA,EACzB,CAAC,EAAIpB,EAAM,OACdiB,EAAa,KAAK,IAAI,EAAG,KAAK,KAAKC,CAAY,EAAI,CAAC,CAAA,CAG/C,MAAA,CACL,WAAAb,EACA,cAAAC,EACA,uBAAAO,EACA,cAAeb,EACf,oBAAAO,EACA,gBAAAE,EACA,kBAAAO,EACA,WAAAC,CACF,CAAA,CAQF,2BACEzE,EACAC,EACoB,CACpB,KAAM,CAAE,SAAAG,EAAU,kBAAAiB,EAAoB,CAAA,GAAOrB,EAAY,KAGnD6E,EAAoB,KAAK,yBAAyB7E,EAAaC,CAAK,EACpE6E,EAAuB,KAAK,iCAAiC9E,EAAaC,CAAK,EAC/E8E,EAAoB,KAAK,wBAAwB/E,EAAaC,CAAK,EACnE+E,EAAkB,KAAK,uBAAuBhF,EAAaC,CAAK,EAGhE,CAAE,eAAAgF,EAAgB,WAAAC,EAAY,cAAAC,EAAe,gBAAAC,CAAA,EAAoB,KAAK,wBAC1EP,EACAC,EACAE,EACAD,CACF,EAGA,IAAIM,EAAiF,SACrFA,EAAmB,KAAK,0BAA0BD,EAAiBH,EAAgBC,EAAYF,EAAgB,UAAU,EAGzH,MAAMM,EAAoBR,EACvB,KAAK,CAACvC,EAAGC,IAAMA,EAAE,UAAYD,EAAE,SAAS,EACxC,IAAIgD,GAAMA,EAAG,SAAS,EAGnB,CAAE,kBAAAf,GAAsBQ,EAC9B,IAAIQ,EAA4F,aAC3EA,EAAA,KAAK,4BAA4BhB,CAAiB,EAGvE,IAAIiB,EAA8E,YAClFA,EAAoB,KAAK,2BACvBJ,EACAL,EAAgB,WAChB,OAAO,KAAK3D,CAAiB,EAAE,OAC9B,OAAO,OAAOA,CAAiB,EAAe,OAAO,CAACG,EAAKd,IAAUc,EAAMd,EAAO,CAAC,EACpFN,EAAS,MACX,EAGM,MAAAsF,EAAyBb,EAC5B,MAAM,EAAG,CAAC,EACV,IAAepC,GAAAA,EAAQ,MAAM,EAG1BkD,EAA0E,KAAK,+BAA+BvF,EAAUH,CAAK,EAG7H2F,EAAwB,KAAK,4BAA4BZ,EAAgB,aAAa,EAGtFa,EAA6B,KAAK,iCAAiCxE,CAAiB,EAcnF,MAAA,CACL,GAZS,KAAK,sBACdjB,EACAiF,EACAG,EACAC,EACAR,EACAC,EACAC,EACAC,CACF,EAIE,iBAAAC,EACA,kBAAAC,EACA,mBAAAE,EACA,kBAAAC,EACA,eAAAR,EACA,WAAAC,EACA,cAAAC,EACA,gBAAAC,EACA,uBAAAM,EACA,0BAAAC,EACA,sBAAAC,EACA,2BAAAC,EACA,WAAYzF,EAAS,OACrB,mBAAoB,IAAI,IAAIA,CAAQ,EAAE,KACtC,YAAaA,EAAS,MACxB,CAAA,CAQM,iCACNC,EACAyF,EACAC,EACQ,CACR,MAAMC,EAAoB,KAAK,MAAMD,EAAkB,CAAC,EAClDE,EAAe5F,EAAiB2F,EAEhCE,EAAyB,KAAK,MAAMH,EAAkB1F,CAAc,EACpE8F,EAAmB,KAAK,IAAI,EAAGL,EAAcI,CAAsB,EAEjE,OAAAD,EAAe,GAAQE,EAAmB,EAAA,CAM5C,yBAAyB/F,EAAoBnT,EAAwB,CAC3E,IAAI6Y,EAAc,EAClB,MAAMzF,EAAiBD,EAAS,OAEhC,QAASjV,EAAI,EAAGA,GAAK8B,EAAK,OAASoT,EAAgBlV,IAC1B8B,EAAK,MAAM9B,EAAGA,EAAIkV,CAAc,EACpC,MAAM,CAAChG,EAAI+L,IAAQ/L,IAAO+F,EAASgG,CAAG,CAAC,GACxDN,IAIG,OAAAA,CAAA,CAMD,gCAAgCnF,EAAuB,CAG7D,MAAO,IAAO,KAFkBA,EAAQ,KAAK,4BAC1C,EAAI,KAAK,2BACQ,CAMd,2BAA2BE,EAAuD,CACpF,GAAAA,EAAkB,OAAS,EAAU,OAAA,KAEzC,IAAIwF,EAAmB,EAEvB,QAASlb,EAAI,EAAGA,EAAI0V,EAAkB,OAAS,EAAG1V,IAAK,CAC/C,MAAAmb,EAAKzF,EAAkB1V,CAAC,EACxBob,EAAK1F,EAAkB1V,EAAI,CAAC,EAE9Bmb,IAAOC,GACP1F,EAAkB1V,EAAI,CAAC,IAAMmb,GAC7BzF,EAAkB1V,EAAI,CAAC,IAAMob,GAC/BF,GACF,CAGF,MAAMG,EAA0B,KAAK,OAAO3F,EAAkB,OAAS,GAAK,CAAC,EACvE4F,EAAmBJ,EAAmBG,EAE5C,OAAIC,GAAoB,GACf,CACL,KAAM,YACN,SAAUA,EACV,YAAa,wDACb,kBAAmB,MAAM,KAAK,IAAI,IAAI5F,CAAiB,CAAC,CAC1D,EAGK,IAAA,CAMD,+BAA+BK,EAA0D,CAC3F,GAAAA,EAAiB,OAAS,EAAU,OAAA,KAExC,IAAIwF,EAAqB,EAEzB,QAASvb,EAAI,EAAGA,EAAI+V,EAAiB,OAAS,EAAG/V,IAAK,CAC9C,MAAAwb,EAAKzF,EAAiB/V,CAAC,EACvByb,EAAK1F,EAAiB/V,EAAI,CAAC,EAC3B0b,EAAK3F,EAAiB/V,EAAI,CAAC,GAE5Bwb,IAAO,QAAUC,IAAO,WAAaC,IAAO,UAC5CF,IAAO,QAAUC,IAAO,WACxBA,IAAO,WAAaC,IAAO,WAC9BH,GACF,CAGI,MAAAI,EAA0B5F,EAAiB,OAAS,EACpD6F,EAAmBL,EAAqBI,EAE9C,OAAIC,GAAoB,GACf,CACL,KAAM,WACN,SAAUA,EACV,YAAa,oDACb,sBAAuB,CAAC,OAAQ,UAAW,QAAQ,CACrD,EAGK,IAAA,CAMD,sCAAsC7F,EAA0D,CAClG,GAAAA,EAAiB,OAAS,EAAU,OAAA,KAExC,IAAI8F,EAA4B,EAEhC,QAAS7b,EAAI,EAAGA,EAAI+V,EAAiB,OAAS,EAAG/V,IAAK,CAC9C,MAAAwb,EAAKzF,EAAiB/V,CAAC,EACvByb,EAAK1F,EAAiB/V,EAAI,CAAC,EAC3B0b,EAAK3F,EAAiB/V,EAAI,CAAC,GAE5Bwb,IAAO,UAAYC,IAAO,WAAaC,IAAO,QAC9CF,IAAO,UAAYC,IAAO,WAC1BA,IAAO,WAAaC,IAAO,SAC9BG,GACF,CAGI,MAAAF,EAA0B5F,EAAiB,OAAS,EACpD+F,EAA0BD,EAA4BF,EAE5D,OAAIG,GAA2B,GACtB,CACL,KAAM,WACN,SAAUA,EACV,YAAa,yDACb,sBAAuB,CAAC,SAAU,UAAW,MAAM,CACrD,EAGK,IAAA,CAKD,4BACN3F,EACAS,EACQ,CACJ,GAAAT,EAAe,OAAS,EAAU,MAAA,GAEhC,MAAA4F,EAAe5F,EAAe,MAAM,CAAC,KAAK,IAAI,GAAIA,EAAe,MAAM,CAAC,EAC9E,IAAI6F,EAA6B,EAEjC,QAAShc,EAAI,EAAGA,EAAI+b,EAAa,OAAQ/b,IAAK,CAC5C,MAAMic,EAAWF,EAAa/b,EAAE,CAAC,EAAE,OAC7Bkc,EAAWH,EAAa/b,CAAC,EAAE,OAE3Bmc,EAAiBvF,EAAeqF,CAAQ,GAAK,CAAC,EAC9CG,EAAiBxF,EAAesF,CAAQ,GAAK,CAAC,EAE3BC,EAAe,OACtC7F,GAAa8F,EAAe,SAAS9F,CAAS,CAChD,EAEqB,OAAS,GAC5B0F,GACF,CAGK,OAAAA,GAA8BD,EAAa,OAAS,EAAA,CAKrD,yBACN3F,EACAc,EACAF,EACAb,EACQ,CAGF,MAAAkG,EAAsBjG,EAAmBc,EAAsB,IAG/DoF,EAAgBnG,EAAe,QAAQa,EAAiBA,EAAiB,OAAS,CAAC,CAAC,EACxFb,EAAe,OAAS,GAAM,GAAM,GAGhCoG,EAAoBvF,EAAiB,OAASZ,EAAmB,GAAM,GAAM,GAGnF,OAAO,KAAK,IAAI,IACbiG,EAAqB,GACrBC,EAAgB,GAChBC,EAAoB,EAAG,CAAA,CAKpB,yBAAyBvF,EAAqH,CAChJ,GAAAA,EAAiB,OAAS,EAAU,MAAA,SAExC,MAAMwF,EAAW,KAAK,MAAMxF,EAAiB,OAAS,CAAC,EACjDyF,EAAYzF,EAAiB,MAAM,EAAGwF,CAAQ,EAC9CE,EAAa1F,EAAiB,MAAMwF,CAAQ,EAElD,OAAIE,EAAW,OAASD,EAAU,OAAS,IAClC,SACEC,EAAW,OAASD,EAAU,OAAS,GACzC,UAGF,QAAA,CAMD,iCACNnF,EACArC,EACAwC,EACM,CAEA,MAAAkF,EAAkB,KAAK,IAAI,EAAGrF,EAAQ,aAAerC,EAAS,OAASwC,EAAc,EACrF6E,EAAgB,GAAMrH,EAAS,OAASqC,EAAQ,qBAAuBrC,EAAS,OAC9EqC,EAAA,SAAYqF,EAAkB,GAAQL,EAAgB,GAG9DhF,EAAQ,eAAiB,KAAK,wBAAwBA,EAASrC,EAAUwC,CAAa,CAAA,CAMhF,wBACNH,EACArC,EACAwC,EACQ,CACR,MAAMmF,EAA8B,CAAC,EAErC,QAAS5c,EAAI,EAAGA,GAAKiV,EAAS,OAASwC,EAAezX,IACrCiV,EAAS,MAAMjV,EAAGA,EAAIyX,CAAa,EACvC,MAAM,CAACG,EAAQqD,IAAQrD,IAAWN,EAAQ,SAAS2D,CAAG,CAAC,GAChE2B,EAAkB,KAAK5c,CAAC,EAIxB,GAAA4c,EAAkB,QAAU,EACvB,MAAA,GAGT,MAAMC,EAAOD,EAAkB,MAAM,CAAC,EAAE,IAAI,CAAC3B,EAAKjb,IAAMib,EAAM2B,EAAkB5c,CAAC,CAAC,EAC5E8c,EAASD,EAAK,OAAO,CAACxG,EAAK0G,IAAQ1G,EAAM0G,EAAK,CAAC,EAAIF,EAAK,OACxDG,EAAiB/H,EAAS,OAAS2H,EAAkB,OAE3D,OAAO,KAAK,IAAI,EAAGE,EAASE,CAAc,CAAA,CAMpC,kCACN/H,EACAwC,EACA3C,EACoB,CACd,MAAAmI,MAAoB,IACpBlI,EAA+B,CAAC,EAGtC,QAAS,EAAI,EAAG,GAAKE,EAAS,OAASwC,EAAe,IAAK,CACzD,MAAMyF,EAAcjI,EAAS,MAAM,EAAG,EAAIwC,CAAa,EACjD0F,EAAaD,EAAY,KAAK,IAAI,EAEnCD,EAAc,IAAIE,CAAU,GAC/BF,EAAc,IAAIE,EAAY,CAC5B,SAAUD,EACV,OAAQzF,EACR,YAAa,EACb,oBAAqB,EACrB,SAAU,EACV,eAAgB,CAAA,CACjB,EAGG,MAAAH,EAAU2F,EAAc,IAAIE,CAAU,EACpC7F,EAAA,cACRA,EAAQ,oBAAsB,KAAK,IAAIA,EAAQ,oBAAqB,CAAC,CAAA,CAIvE,OAAA2F,EAAc,QAAmB3F,GAAA,CAC3BA,EAAQ,aAAe,IACpB,KAAA,iCAAiCA,EAASrC,EAAUwC,CAAa,EAGjE,KAAA,qBAAqBH,EAASxC,CAAK,EAExCC,EAAS,KAAKuC,CAAO,EACvB,CACD,EAEMvC,CAAA,CAMD,qBAAqBuC,EAA2BxC,EAAwC,CACxF,MAAAsI,EAAe9F,EAAQ,SAAS,IAAIM,GAAU9C,EAAM8C,CAAM,CAAC,EAAE,OAAO,OAAO,EAC7EwF,EAAa,OAAS,IAGFA,EAAa,SAAW9F,EAAQ,SAAS,QAE7D,QAAQ,KAAK,6CAA6CA,EAAQ,QAAQ,EAAE,EAEhF,CAMM,yBAAyB5B,EAAgCJ,EAA8B,CAC7F,IAAIyC,EAAgB,EAChBsF,EAAgB,EAEpB,OAAA3H,EAAkB,QAAuB4H,GAAA,CACnCA,IAAgBhI,GAClB+H,IACgBtF,EAAA,KAAK,IAAIA,EAAesF,CAAa,GAErCA,EAAA,CAClB,CACD,EAEMtF,CAAA,CAMD,8BAA8BrC,EAAgCJ,EAA8B,CAClG,MAAMiI,EAAwB7H,EAC3B,IAAI,CAACmC,EAAMoD,IAAQpD,IAASvC,EAAY2F,EAAM,EAAE,EAChD,OAAOA,GAAOA,IAAQ,EAAE,EAEvB,GAAAsC,EAAsB,QAAU,EAC3B,MAAA,GAGT,MAAMV,EAAOU,EAAsB,MAAM,CAAC,EAAE,IAAI,CAACtC,EAAK,IAAMA,EAAMsC,EAAsB,CAAC,CAAC,EACnF,OAAAV,EAAK,OAAO,CAACxG,EAAK0G,IAAQ1G,EAAM0G,EAAK,CAAC,EAAIF,EAAK,MAAA,CAMhD,iCACNvH,EACAL,EACAH,EACiB,CACX,MAAA0I,EAAmB,OAAO,KAAK1I,CAAK,EAAE,OAAO8C,GAAU9C,EAAM8C,CAAM,EAAE,YAActC,CAAS,EAC5FmI,EAAwBxI,EAAS,UAAiBuI,EAAiB,SAAS5F,CAAM,CAAC,EAEzF,MAAO,CAAC,GAAG,IAAI,IAAI6F,EAAsB,IAAc7F,GAAA,CAC/C,MAAA8F,EAAgB5I,EAAM8C,CAAM,EAAE,cAChC,OAAA8F,GAAiB,EAAU,OAC3BA,GAAiB,EAAU,UACxB,QACR,CAAA,CAAC,CAAC,CAAA,CAMG,iCACNhH,EACAqB,EACA4F,EACQ,CACR,MAAMC,EAAmB,KAAK,IAAI,EAAGlH,EAAa,CAAC,EAC7CmH,EAAe,KAAK,IAAI,EAAG9F,EAAgB,CAAC,EAC5C+F,EAAeH,EAAuB,EAE5C,OAAQC,EAAmB,GAAQC,EAAe,GAAQC,EAAe,EAAA,CAMnE,0BACNC,EACAlB,EACA5H,EACA+I,EACQ,CACR,MAAMrB,EAAkB,KAAK,IAAI,EAAGoB,EAAkB,EAAE,EAClDxB,EAAoBM,EAAK,OAAS,EACtC,GAAK,KAAK,IAAI,GAAGA,CAAI,EAAI,KAAK,IAAI,GAAGA,CAAI,GAAK,KAAK,IAAI,GAAGA,CAAI,EAAI,EAC9DP,EAAgB,GAAMrH,EAAS,OAAS,KAAK,IAAI,GAAG+I,CAAY,GAAK/I,EAAS,OAEpF,OAAQ0H,EAAkB,GAAQJ,EAAoB,GAAQD,EAAgB,EAAA,CAMxE,mBAAmB0B,EAAkC,CACpD,OAAAA,EAAa,MAAM,CAAC,EAAE,IAAI,CAAC/C,EAAKjb,IAAMib,EAAM+C,EAAahe,CAAC,CAAC,CAAA,CAM5D,4BACN4X,EACAvC,EACAJ,EACAH,EAC6B,CACzB,GAAAO,GAAe,EAAU,OAAA,KAE7B,MAAM4I,EAAc5I,EAAc,EAG5B2I,EAAe/I,EAClB,IAAI,CAAC/F,EAAI+L,IAAQ/L,IAAO0I,EAASqD,EAAM,EAAE,EACzC,OAAOA,GAAOA,IAAQ,EAAE,EAEvB,GAAA+C,EAAa,QAAU,EAAU,OAAA,KAG/B,MAAAD,EAAkBE,EAAchJ,EAAS,OACzC4H,EAAO,KAAK,mBAAmBmB,CAAY,EAC3CE,EAAarB,EAAK,OAAO,CAACxG,EAAK0G,IAAQ1G,EAAM0G,EAAK,CAAC,EAAIF,EAAK,OAC5DsB,EAAmB,KAAK,0BAA0BJ,EAAiBlB,EAAM5H,EAAU+I,CAAY,EAG/FI,EAAWtJ,EAAM8C,CAAM,EACvByG,EAAkBD,EAAWA,EAAS,kBAAoB,CAAC,EAE1D,MAAA,CACL,OAAAxG,EACA,gBAAAmG,EACA,aAAcE,EACd,yBAA0BC,EAC1B,iBAAAC,EACA,gBAAAE,EACA,gBAAiB,KAAK,IAAI,GAAGL,CAAY,CAC3C,CAAA,CAKW,wBACXtE,EACAC,EACAE,EACAD,EACgG,OAEhG,MAAME,EAAiBJ,EAAkB,OAAS,EAChDA,EAAkB,OAAO,CAACrD,EAAKiB,IAAYjB,EAAMiB,EAAQ,SAAU,CAAC,EAAIoC,EAAkB,OAAS,EAG/FK,EAAaJ,EAAqB,OAAS,KAC/C1b,EAAA0b,EAAqB,CAAC,IAAtB,YAAA1b,EAAyB,YAAa,EAGlC+b,EAAgB,KAAK,IAAI,EAAGH,EAAgB,oBAAsB,CAAC,EAGnEI,EAAmBH,EAAiB,GAAQC,EAAa,GAC5DF,EAAgB,WAAa,GAAQ,KAAK,IAAI,EAAGD,EAAkB,OAAS,CAAC,EAAI,GAEpF,MAAO,CAAE,eAAAE,EAAgB,WAAAC,EAAY,cAAAC,EAAe,gBAAAC,CAAgB,CAAA,CAM9D,0BACNA,EACAH,EACAC,EACAT,EAC8D,CAC1D,OAAAA,EAAa,GAAY,UACzBQ,EAAiB,GAAY,YAC7BC,EAAa,GAAY,UACzBE,EAAkB,GAAY,SAC3B,WAAA,CAMD,4BACNZ,EACuE,CACjE,MAAAiF,EAAM,KAAK,IAAIjF,EAAkB,KAAMA,EAAkB,QAASA,EAAkB,MAAM,EAE5F,OAAAiF,EAAM,GAAY,aAElBjF,EAAkB,OAASiF,EAAY,gBACvCjF,EAAkB,UAAYiF,EAAY,kBACvC,gBAAA,CAMD,2BACNpE,EACAZ,EACAiF,EACAC,EACAC,EAC0D,CAC1D,OAAIvE,IAAqB,UAAYZ,EAAa,GAAY,aAC1DiF,EAAiB,GAAKC,EAA2BC,EAAa,GAAY,WAC1EnF,EAAa,IAAOY,IAAqB,UAAkB,eACxD,WAAA,CAMD,+BACNjF,EACAH,EAC8C,CAC9C,MAAM4J,EAAuD,CAAC,EACxDC,EAAa,CAAC,QAAS,OAAQ,MAAM,EAG3CA,EAAW,QAAgBC,GAAA,CAClBF,EAAAE,CAAiB,EAAI,CAAC,EAC7BD,EAAW,QAAcE,GAAA,CAChBH,EAAAE,CAAiB,EAAEC,CAAe,EAAI,CAAA,CAC9C,CAAA,CACF,EAGD,QAAS7e,EAAI,EAAGA,EAAIiV,EAAS,OAAQjV,IAAK,CACxC,MAAMic,EAAWnH,EAAMG,EAASjV,EAAI,CAAC,CAAC,EAChCkc,EAAWpH,EAAMG,EAASjV,CAAC,CAAC,EAElC,GAAIic,GAAYC,EAAU,CACxB,MAAM4C,EAAW7C,EAAS,UACpB8C,EAAW7C,EAAS,UACtB4C,GAAYC,GACPL,EAAAI,CAAQ,EAAEC,CAAQ,GAC3B,CACF,CAGK,OAAAL,CAAA,CAMD,4BAA4BM,EAAiD,CACnF,MAAMC,EAAoC,CACxC,MAAO,EACP,OAAQ,EACR,MAAO,EACP,QAAS,CACX,EAEAD,EAAc,QAAoBE,GAAA,CAC5BA,GAAY,EAAaD,EAAA,QACpBC,GAAY,EAAaD,EAAA,SACzBC,GAAY,EAAaD,EAAA,QACnBA,EAAA,SAAA,CAChB,EAGD,MAAME,EAAQH,EAAc,OAC5B,OAAIG,EAAQ,GACV,OAAO,KAAKF,CAAS,EAAE,QAAetgB,GAAA,CACpCsgB,EAAUtgB,CAAG,EAAIsgB,EAAUtgB,CAAG,EAAIwgB,CAAA,CACnC,EAGIF,CAAA,CAMD,iCACN/I,EACwB,CAClB,MAAAiJ,EAAQ,OAAO,OAAOjJ,CAAiB,EAAE,OAAO,CAACG,EAAKd,IAAUc,EAAMd,EAAO,CAAC,EAC9E6J,EAAkC,CAAC,EAEzC,OAAID,EAAQ,GACH,OAAA,QAAQjJ,CAAiB,EAAE,QAAQ,CAAC,CAACI,EAAWf,CAAK,IAAM,CACxD6J,EAAA9I,CAAS,EAAIf,EAAQ4J,CAAA,CAC9B,EAGIC,CAAA,CAMD,sBACNnK,EACAiF,EACAG,EACAC,EACAR,EACAC,EACAC,EACAC,EACQ,CACF,MAAAoF,EAAWpK,EAAS,MAAM,EAAG,EAAE,EAAE,KAAK,EAAE,EAAE,MAAM,EAAG,CAAC,EACpDqK,EAAYpF,EAAiB,MAAM,EAAG,CAAC,EACvCqF,EAAelF,EAAmB,MAAM,EAAG,CAAC,EAC5CmF,EAAgBlF,EAAkB,MAAM,EAAG,CAAC,EAC5CmF,EAAY,KAAK,MAAM3F,EAAiB,EAAE,EAAE,SAAA,EAChD,KAAK,MAAMC,EAAa,EAAE,EAAE,SAAS,EACrC,KAAK,MAAMC,EAAgB,EAAE,EAAE,WAC/B,KAAK,MAAMC,EAAkB,EAAE,EAAE,SAAS,EAErC,MAAA,GAAGoF,CAAQ,IAAIC,CAAS,GAAGC,CAAY,GAAGC,CAAa,IAAIC,CAAS,EAAA,CAE/E,CAGa,MAAAC,EAAe,IAAI9K,GCz+CzB,MAAM+K,EAAsB,CAM5B,OAAO,sBACVC,EACA/K,EACwB,CACxB,MAAMgL,EAAkC,CAAC,EAGnCC,EAAkB,KAAK,mBAAmBjL,CAAW,EAQ3D,GANA,QAAQ,IAAI,8DAA8D+K,EAAY,EAAE,IAAK,CAC3F,iBAAkBA,EAAY,UAC9B,sBAAsBE,GAAA,YAAAA,EAAiB,YAAa,OACpD,iBAAiBA,GAAA,YAAAA,EAAiB,SAAU,MAAA,CAC7C,EAEG,CAACA,GAAmBA,EAAgB,YAAcF,EAAY,UAEhE,eAAQ,IAAI,yDAA0DE,EAA4C,iBAA1B,uBAA0C,EAAE,EAC7HD,EAGT,QAAQ,IAAI,0DAA0DC,EAAgB,SAAS,MAAMF,EAAY,SAAS,EAAE,EAG5H,MAAMG,EAAkB,KAAK,0BAC3BD,EAAgB,UAChBF,EAAY,UACZA,CAAA,EACA,MAAM,EAAG,CAAC,EAEJC,EAAA,KAAK,GAAGE,CAAe,EAC/B,QAAQ,IAAI,iCAAiCA,EAAgB,MAAM,mCAAmC,EAGtG,MAAMC,EAAiB,KAAK,uBAC1BF,EAAgB,UAChBF,EAAY,UACZA,EACA/K,CAAA,EACA,MAAM,EAAG,CAAC,EAEJ,OAAAgL,EAAA,KAAK,GAAGG,CAAc,EAC9B,QAAQ,IAAI,iCAAiCA,EAAe,MAAM,wBAAwB,EAE1F,QAAQ,IAAI,0DAA0DH,EAAQ,MAAM,EAAE,EAC/EA,CAAA,CAQT,OAAO,mBAAmBhL,EAA2E,CAC7F,MAAAsB,EAAiBtB,EAAY,KAAK,eAExC,GAAI,CAACsB,GAAkBA,EAAe,OAAS,EACtC,OAAA,KAIT,MAAM8J,EAAgB9J,EAAeA,EAAe,OAAS,CAAC,EAEvD,MAAA,CACL,UAAW8J,EAAc,UACzB,OAAQA,EAAc,MACxB,CAAA,CAUF,OAAO,0BACLC,EACAC,EACAP,EACwB,CACxB,MAAMC,EAAkC,CAAC,EAGrC,GAAA,CAACD,EAAY,eACR,OAAAC,EAGT,MAAMO,EAAUR,EAAY,eACtBS,EAAaD,EAAQ,MAAM;AAAA;AAAA,CAAM,EAAE,OAAOlc,GAAKA,EAAE,OAAO,OAAS,CAAC,EAGpE,OAAAgc,IAAoB,aAAeC,IAAoB,iBAClC,KAAK,mBAAmBC,CAAO,EAEvC,QAASE,GAAS,CAC/BT,EAAQ,KAAK,CACX,KAAM,WACN,SAAUS,EACV,eAAgB,CACd,KAAM,WACN,SAAUA,EACV,gBAAiB,IACjB,cAAe,YACf,UAAW,CACb,EACA,OAAQ,qEACR,gBAAAJ,EACA,gBAAAC,EACA,UAAW,CAAA,CACZ,CAAA,CACF,EAGGE,EAAW,OAAS,GACtBR,EAAQ,KAAK,CACX,KAAM,cACN,SAAUQ,EAAW,CAAC,EACtB,eAAgB,CACd,KAAM,cACN,SAAUA,EAAW,CAAC,EACtB,YAAa,6BACb,aAAc,aACd,UAAW,CACb,EACA,OAAQ,yEACR,gBAAAH,EACA,gBAAAC,EACA,UAAW,CAAA,CACZ,GAKID,IAAoB,aAAeC,IAAoB,aAE7C,KAAK,aAAaC,CAAO,EAEjC,QAAS9I,GAAY,CAC5BuI,EAAQ,KAAK,CACX,KAAM,YACN,SAAUvI,EACV,eAAgB,CACd,KAAM,YACN,SAAUA,EACV,SAAU,SACV,UAAW,CACb,EACA,OAAQ,oEACR,gBAAA4I,EACA,gBAAAC,EACA,UAAW,CAAA,CACZ,CAAA,CACF,EAGGE,EAAW,OAAS,GACtBR,EAAQ,KAAK,CACX,KAAM,SACN,SAAUQ,EAAW,CAAC,EACtB,eAAgB,CACd,KAAM,SACN,SAAUA,EAAW,CAAC,EACtB,YAAa,gDACb,YAAa,SACb,UAAW,CACb,EACA,OAAQ,oDACR,gBAAAH,EACA,gBAAAC,EACA,UAAW,CAAA,CACZ,GAKID,IAAoB,iBAAmBC,IAAoB,aAEhD,KAAK,cAAcC,CAAO,EAElC,QAASE,GAAS,CAC1BT,EAAQ,KAAK,CACX,KAAM,UACN,SAAUS,EACV,eAAgB,CACd,KAAM,UACN,SAAUA,EACV,YAAa,GAAGA,CAAI,oBAAoB,KAAK,mBAAoB,CAAA,IACjE,mBAAoB,GACpB,UAAW,CACb,EACA,OAAQ,uEACR,gBAAAJ,EACA,gBAAAC,EACA,UAAW,CAAA,CACZ,CAAA,CACF,EAGGE,EAAW,OAAS,GACtBR,EAAQ,KAAK,CACX,KAAM,cACN,SAAUQ,EAAW,CAAC,EACtB,eAAgB,CACd,KAAM,cACN,SAAUA,EAAW,CAAC,EACtB,YAAa,sCACb,aAAc,cACd,UAAW,CACb,EACA,OAAQ,sEACR,gBAAAH,EACA,gBAAAC,EACA,UAAW,CAAA,CACZ,GAKID,IAAoB,aAAeC,IAAoB,cAEvC,KAAK,mBAAmBC,CAAO,EAEvC,QAASE,GAAS,CAC/BT,EAAQ,KAAK,CACX,KAAM,YACN,SAAUS,EACV,eAAgB,CACd,KAAM,YACN,SAAUA,EACV,SAAU,OACV,UAAW,CACb,EACA,OAAQ,8DACR,gBAAAJ,EACA,gBAAAC,EACA,UAAW,CAAA,CACZ,CAAA,CACF,EAGGE,EAAW,OAAS,GACtBR,EAAQ,KAAK,CACX,KAAM,SACN,SAAUQ,EAAW,CAAC,EACtB,eAAgB,CACd,KAAM,SACN,SAAUA,EAAW,CAAC,EACtB,YAAa,sCACb,YAAa,SACb,UAAW,CACb,EACA,OAAQ,sDACR,gBAAAH,EACA,gBAAAC,EACA,UAAW,CAAA,CACZ,GAIEN,CAAA,CAWT,OAAe,uBACbK,EACAC,EACAP,EACA/K,EACwB,CACxB,MAAMgL,EAAkC,CAAC,EAErC,GAAA,CAACD,EAAY,eACR,OAAAC,EAIT,MAAMU,EAAkB,KAAK,yBAAyBL,EAAiBC,EAAiBtL,CAAW,EAC7FqD,EAAY,KAAK,IAAI,EAAG,KAAK,IAAI,EAAG,KAAK,MAAMqI,EAAkB,CAAC,EAAI,CAAC,CAAC,EAGxEC,EAAgB,KAAK,iBAAiBZ,EAAY,cAAc,EACtE,OAAIY,GACFX,EAAQ,KAAK,CACX,KAAM,cACN,SAAUW,EACV,eAAgB,CACd,KAAM,cACN,SAAUA,EACV,YAAa,sBAAsBN,CAAe,MAAMC,CAAe,GACvE,aAAc,aACd,UAAAjI,CACF,EACA,OAAQ,2DACR,gBAAAgI,EACA,gBAAAC,EACA,UAAAjI,CAAA,CACD,EAGI2H,CAAA,CAMT,OAAe,mBAAmBO,EAA2B,CAC3D,MAAMK,EAAiB,CACrB,SAAU,UAAW,OAAQ,YAAa,UAAW,UACrD,WAAY,YAAa,UAAW,UAAW,SAAU,MAC3D,EAGA,OADcL,EAAQ,YAAY,EAAE,MAAM,KAAK,EAClC,UACXK,EAAe,QAAaC,EAAK,SAASC,CAAI,CAAC,CAAA,EAC/C,MAAM,EAAG,CAAC,CAAA,CAMd,OAAe,aAAaP,EAA2B,CAC/C,MAAAQ,EAAQR,EAAQ,MAAM,KAAK,EAC3BrL,EAAqB,CAAC,EAGtB8L,EAAoC,CAAC,EAC3C,OAAAD,EAAM,QAAgBF,GAAA,CACpB,MAAMI,EAAYJ,EAAK,YAAc,EAAA,QAAQ,SAAU,EAAE,EACrDI,EAAU,OAAS,IACrBD,EAAUC,CAAS,GAAKD,EAAUC,CAAS,GAAK,GAAK,EACvD,CACD,EAGM,OAAA,QAAQD,CAAS,EAAE,QAAQ,CAAC,CAACH,EAAMnL,CAAK,IAAM,CAC/CA,EAAQ,GAAKR,EAAS,OAAS,GACjCA,EAAS,KAAK2L,CAAI,CACpB,CACD,EAEM3L,CAAA,CAMT,OAAe,cAAcqL,EAA2B,CACtD,MAAMW,EAAY,CAChB,OAAQ,UAAW,SAAU,OAAQ,OAAQ,SAAU,QACvD,MAAO,OAAQ,SAAU,UAAW,UAAW,QACjD,EAGA,OADcX,EAAQ,YAAY,EAAE,MAAM,KAAK,EAClC,UACXW,EAAU,QAAaL,EAAK,SAASM,CAAI,CAAC,CAAA,EAC1C,MAAM,EAAG,CAAC,CAAA,CAMd,OAAe,mBAAmBZ,EAA2B,CAC3D,MAAMa,EAAiB,CACrB,OAAQ,WAAY,OAAQ,OAAQ,OAAQ,QAAS,OACrD,QAAS,OAAQ,OAAQ,gBAAiB,YAAa,YACzD,EAGA,OADcb,EAAQ,YAAY,EAAE,MAAM,KAAK,EAClC,UACXa,EAAe,QAAgBP,EAAK,SAASQ,CAAO,CAAC,CAAA,EACrD,MAAM,EAAG,CAAC,CAAA,CAMd,OAAe,yBACbhB,EACAC,EACAtL,EACQ,CACR,MAAMsB,EAAiBtB,EAAY,KAAK,gBAAkB,CAAC,EAC3D,IAAIU,EAAQ,EAEZ,QAAS,EAAI,EAAG,EAAIY,EAAe,OAAQ,IAAK,CACxC,MAAAgL,EAAOhL,EAAe,EAAI,CAAC,EAC3BiL,EAAOjL,EAAe,CAAC,EAEzBgL,EAAK,YAAcjB,GAAmBkB,EAAK,YAAcjB,GAC3D5K,GACF,CAGK,OAAAA,CAAA,CAMT,OAAe,iBAAiB6K,EAAgC,OAE9D,MAAMI,GAAgBviB,EADJmiB,EAAQ,MAAM,QAAQ,EACR,CAAC,IAAX,YAAAniB,EAAc,OACpC,OAAOuiB,GAAiBA,EAAc,OAAS,GAAKA,EAAgB,IAAA,CAOtE,OAAe,oBAA6B,CAC1C,MAAMa,EAAa,CACjB,aAAc,aAAc,aAAc,aAAc,YAC1D,EACO,OAAAA,EAAW,KAAK,MAAM,KAAK,SAAWA,EAAW,MAAM,CAAC,CAAA,CAEnE,CC1aA,MAAMC,EAAe,CAKnB,YAAYC,EAAkB,CAJtBhS,EAAA,iBACAA,EAAA,cACAA,EAAA,aAGN,KAAK,SAAWgS,EACX,KAAA,UAAY,IACjB,KAAK,KAAO,CAAC,CAAA,CAGf,IAAI5iB,EAAuB,CACzB,GAAK,KAAK,MAAM,IAAIA,CAAG,EAGvB,YAAK,KAAO,KAAK,KAAK,OAAO6iB,GAAKA,IAAM7iB,CAAG,EACtC,KAAA,KAAK,KAAKA,CAAG,EAEX,KAAK,MAAM,IAAIA,CAAG,CAAA,CAG3B,IAAIA,EAAQb,EAAgB,CAC1B,GAAI,KAAK,MAAM,IAAIa,CAAG,EAAG,CAElB,KAAA,MAAM,IAAIA,EAAKb,CAAK,EACzB,KAAK,KAAO,KAAK,KAAK,OAAO0jB,GAAKA,IAAM7iB,CAAG,EACtC,KAAA,KAAK,KAAKA,CAAG,EAClB,MAAA,CAIF,GAAI,KAAK,KAAK,QAAU,KAAK,SAAU,CAC/B,MAAA8iB,EAAS,KAAK,KAAK,MAAM,EAC3BA,IAAW,QACR,KAAA,MAAM,OAAOA,CAAM,CAC1B,CAIG,KAAA,MAAM,IAAI9iB,EAAKb,CAAK,EACpB,KAAA,KAAK,KAAKa,CAAG,CAAA,CAGpB,OAAc,CACZ,KAAK,MAAM,MAAM,EACjB,KAAK,KAAO,CAAC,CAAA,CAGf,MAAe,CACb,OAAO,KAAK,MAAM,IAAA,CAGpB,UAA+C,CACtC,MAAA,CACL,KAAM,KAAK,MAAM,KACjB,SAAU,KAAK,QACjB,CAAA,CAEJ,CAwIO,MAAM+iB,EAAqB,CAA3B,cAEGnS,EAAA,sBAAiB,IAAI+R,GAA0B,GAAG,GAGlD/R,EAAA,2BAAsB,IAAI+R,GAAyB,GAAG,GAGtD/R,EAAA,kCAA6B,IAAI+R,GAAyB,GAAG,GAG7D/R,EAAA,aAAQ,CACd,qBAAsB,EACtB,mBAAoB,EACpB,gBAAiB,EACjB,wBAAyB,EACzB,uBAAwB,EACxB,iBAAkB,CACpB,GAGQA,EAAA,4BAA+B,KAAK,IAAI,GAOxC,qBACNoS,EACA9M,EACA+M,EACQ,CAEF,MAAAC,EAAgB,KAAK,UAAUF,CAAS,EACxCG,EAAkB,KAAK,UAAU,CACrC,KAAM,CACJ,SAAUjN,EAAY,KAAK,SAC3B,gBAAiBA,EAAY,KAAK,gBAClC,eAAgBA,EAAY,KAAK,eACjC,eAAgBA,EAAY,KAAK,eACjC,mBAAoBA,EAAY,KAAK,mBACrC,kBAAmBA,EAAY,KAAK,iBACtC,EACA,iBAAkBA,EAAY,gBAAA,CAC/B,EAGKkN,EAAgB,KAAK,UAAU,CACnC,GAAIH,EAAU,GACd,WAAYA,EAAU,WACtB,cAAeA,EAAU,cACzB,kBAAmBA,EAAU,iBAAA,CAC9B,EAGM,MAAA,MAAMA,EAAU,EAAE,IAAIC,CAAa,IAAIC,CAAe,IAAIC,CAAa,EAAA,CAOxE,0BACN3B,EACA4B,EACA5b,EAA2B,CAAA,EACnB,CACF,KAAA,CACJ,cAAA6b,EAAgB,GAChB,uBAAAC,EAAyB,EAAA,EACvB9b,EAGE+b,EAAc/B,EAAQ,UAAU,EAAG6B,CAAa,EAGhDG,EAAsBF,EACxBF,EAAgB,IACd5iB,GAAA,OAAA,SAAGA,EAAE,IAAI,KAAInB,EAAAmB,EAAE,WAAF,YAAAnB,EAAY,UAAU,EAAG,GAAG,IAAImB,EAAE,QAAQ,GAAA,EACvD,KAAK,GAAG,EACV,GAGEijB,EAAmB,KAAK,MAAM,KAAK,qBAAuB,GAAI,EAE7D,MAAA,MAAMF,CAAW,IAAIH,EAAgB,MAAM,IAAIK,CAAgB,IAAID,CAAmB,EAAA,CAMxF,kBAAyB,CAC9B,KAAK,eAAe,MAAM,EAC1B,KAAK,oBAAoB,MAAM,EAC/B,KAAK,2BAA2B,MAAM,EACjC,KAAA,qBAAuB,KAAK,IAAI,CAAA,CAMvC,kBACET,EACA9M,EACA+M,EACS,CAGT,GAFA,KAAK,MAAM,uBAEP,OAAO,KAAKD,CAAS,EAAE,SAAW,EAC7B,MAAA,GAGT,MAAMW,EAAW,KAAK,qBAAqBX,EAAW9M,EAAa+M,CAAS,EACtEW,EAAe,KAAK,eAAe,IAAID,CAAQ,EAErD,GAAIC,IAAiB,OACnB,YAAK,MAAM,qBACJA,EAGT,MAAM9gB,EAAS,KAAK,0BAA0BkgB,EAAW9M,EAAa+M,CAAS,EAC1E,YAAA,eAAe,IAAIU,EAAU7gB,CAAM,EAEjCA,CAAA,CAMD,0BACNkgB,EACA9M,EACA+M,EACS,SAEL,OAAA3jB,EAAA0jB,EAAU,QAAV,MAAA1jB,EAAiB,OACZ0jB,EAAU,MAAM,MACrBa,GAAA,KAAK,kBAAkBA,EAAc3N,EAAa+M,CAAS,CAC7D,GAGEzQ,EAAAwQ,EAAU,QAAV,MAAAxQ,EAAiB,OACZwQ,EAAU,MAAM,KACrBa,GAAA,KAAK,kBAAkBA,EAAc3N,EAAa+M,CAAS,CAC7D,EAGED,EAAU,IACL,CAAC,KAAK,kBAAkBA,EAAU,IAAK9M,EAAa+M,CAAS,EAI/D,KAAK,wBAAwBD,EAAW9M,EAAa+M,CAAS,GAC9D,KAAK,2BAA2BD,EAAW9M,EAAa+M,CAAS,CAAA,CAMlE,wBACND,EACA9M,EACA+M,EACS,CAaT,MAZoB,CAClB,IAAM,KAAK,gBAAgBD,EAAWC,CAAS,EAC/C,IAAM,KAAK,4BAA4BD,EAAW9M,CAAW,EAC7D,IAAM,KAAK,kBAAkB8M,EAAW9M,CAAW,EACnD,IAAM,KAAK,uBAAuB8M,EAAW9M,CAAW,EACxD,IAAM,KAAK,sBAAsB8M,EAAWC,CAAS,EACrD,IAAM,KAAK,sBAAsBD,EAAW9M,CAAW,EACvD,IAAM,KAAK,oBAAoB8M,EAAW9M,CAAW,EACrD,IAAM,KAAK,oBAAoB8M,EAAW9M,EAAa+M,CAAS,EAChE,IAAM,KAAK,oBAAoBD,EAAW9M,CAAW,CACvD,EAEmB,MAAe4N,GAAAA,EAAA,CAAO,CAAA,CAMnC,2BACNd,EACA9M,EACA+M,EACS,CAUT,MATuB,CACrB,IAAM,CAACD,EAAU,gBAAkB,KAAK,oBAAoBA,EAAU,eAAgB9M,EAAa+M,CAAS,EAC5G,IAAM,CAACD,EAAU,eAAiB,KAAK,mBAAmBA,EAAU,cAAe9M,EAAa+M,CAAS,EACzG,IAAM,CAACD,EAAU,mBAAqB,KAAK,uBAAuBA,EAAU,kBAAmB9M,EAAa+M,CAAS,EACrH,IAAM,CAACD,EAAU,qBAAuB,KAAK,yBAAyBA,EAAU,oBAAqB9M,EAAa+M,CAAS,EAC3H,IAAM,CAACD,EAAU,kBAAoB,KAAK,sBAAsBA,EAAU,iBAAkB9M,EAAa+M,CAAS,EAClH,IAAM,CAACD,EAAU,oBAAsB,KAAK,wBAAwBA,EAAU,mBAAoB9M,EAAa+M,CAAS,CAC1H,EAEsB,MAAea,GAAAA,EAAA,CAAO,CAAA,CAMtC,gBAAgBd,EAAoCC,EAA+B,CACzF,OAAOD,EAAU,aAAe,QAAaC,EAAU,YAAcD,EAAU,UAAA,CAGzE,4BAA4BA,EAAoC9M,EAAmC,OACzG,GAAI,GAAC5W,EAAA0jB,EAAU,yBAAV,MAAA1jB,EAAkC,QAAe,MAAA,GAEtD,MAAMykB,EAAe7N,EAAY,KAAK,UAAY,CAAC,EACnD,OAAO8M,EAAU,uBAAuB,SAAgBe,EAAa,SAAS9K,CAAM,CAAC,CAAA,CAG/E,kBAAkB+J,EAAoC9M,EAAmC,OACxF,MAAA,GAAC5W,EAAA0jB,EAAU,eAAV,MAAA1jB,EAAwB,SACzB,KAAK,eAAe0jB,EAAU,aAAc9M,EAAY,KAAK,QAAQ,CAAA,CAGtE,uBAAuB8M,EAAoC9M,EAAmC,OAC7F,MAAA,GAAC5W,EAAA0jB,EAAU,2BAAV,MAAA1jB,EAAoC,SACrC,KAAK,uBAAuB0jB,EAAU,yBAA0B9M,CAAW,CAAA,CAG5E,sBAAsB8M,EAAoCC,EAA+B,CAC/F,MAAO,CAACD,EAAU,kBACX,KAAK,wBAAwBC,CAAS,IAAMD,EAAU,gBAAA,CAGvD,sBAAsBA,EAAoC9M,EAAmC,OAC/F,GAAA,CAAC8M,EAAU,iBAAyB,MAAA,GAExC,KAAM,CAAE,YAAAgB,EAAa,SAAAC,CAAS,EAAIjB,EAAU,iBACrC,QAAA1jB,EAAA4W,EAAY,mBAAZ,YAAA5W,EAA+B0kB,KAAgBC,CAAA,CAGhD,oBAAoBjB,EAAoC9M,EAAmC,OACjG,GAAI,GAAC5W,EAAA0jB,EAAU,iBAAV,MAAA1jB,EAA0B,QAAe,MAAA,GAE9C,MAAMka,EAAkBtD,EAAY,KAAK,iBAAmB,CAAC,EACtD,OAAA8M,EAAU,eAAe,MAAiBrK,IAChCa,EAAgBb,EAAQ,MAAM,GAAK,IACjCA,EAAQ,SAC1B,CAAA,CAGK,oBAAoBqK,EAAoC9M,EAA0B+M,EAA+B,CACvH,MAAO,CAACD,EAAU,gBAAkB,KAAK,kBAAkB9M,EAAa+M,CAAS,CAAA,CAG3E,oBAAoBD,EAAoC9M,EAAmC,OAC1F,MAAA,GAAC5W,EAAA0jB,EAAU,iBAAV,MAAA1jB,EAA0B,SAC3B,KAAK,sBAAsB0jB,EAAU,eAAgB9M,EAAY,KAAK,QAAQ,CAAA,CAM/E,kBAAkBA,EAA0B+M,EAA+B,CAC7E,MAAA,CAAC/M,EAAY,KAAK,gBAAkBA,EAAY,KAAK,eAAe,OAAS,EACxE,GAGaA,EAAY,KAAK,eAAeA,EAAY,KAAK,eAAe,OAAS,CAAC,EAC3E,YAAc+M,EAAU,SAAA,CAOvC,eAAetK,EAAmBuL,EAAmC,CACvE,GAAAvL,EAAQ,SAAW,EAAU,MAAA,GAC7B,GAAAuL,EAAe,SAAW,EAAU,MAAA,GAGxC,QAAS7iB,EAAI,EAAGA,GAAK6iB,EAAe,OAASvL,EAAQ,OAAQtX,IAAK,CAChE,IAAI4O,EAAU,GAEd,QAASkU,EAAI,EAAGA,EAAIxL,EAAQ,OAAQwL,IAClC,GAAID,EAAe7iB,EAAI8iB,CAAC,IAAMxL,EAAQwL,CAAC,EAAG,CAC9BlU,EAAA,GACV,KAAA,CAIJ,GAAIA,EAAgB,MAAA,EAAA,CAGf,MAAA,EAAA,CAMD,uBACNwJ,EACAvD,EACS,CACT,GAAI,CAACuD,GAAc,CAACvD,EAAY,KACvB,MAAA,GAGT,MAAMqB,EAAoBrB,EAAY,KAAK,mBAAqB,CAAC,EAE1D,OAAAuD,EAAW,MAAmB9B,IACXJ,EAAkBI,CAAS,GAAK,GAC/B,CAC1B,CAAA,CAMK,wBAAwBG,EAAgC,CAC1D,OAAAA,EAAK,eAAiB,EAAU,OAChCA,EAAK,eAAiB,EAAU,UAAqB,QAAA,CAOnD,sBAAsBa,EAAmBuL,EAAmC,CAC9E,GAAAvL,EAAQ,SAAW,EAAU,MAAA,GACjC,GAAIuL,EAAe,OAASvL,EAAQ,OAAe,MAAA,GAGnD,MAAMyE,EAAe8G,EAAe,MAAM,CAACvL,EAAQ,MAAM,EACvD,QAAStX,EAAI,EAAGA,EAAIsX,EAAQ,OAAQtX,IACpC,GAAI+b,EAAa/b,CAAC,IAAMsX,EAAQtX,CAAC,EACxB,MAAA,GAIJ,MAAA,EAAA,CAMD,oBACNoV,EACAP,EACA+M,EACS,OACT,KAAM,CAAE,WAAAjD,EAAY,cAAAoE,EAAgB,GAAK,iBAAAC,EAAmB,IAAU5N,EAEtE,GAAI4N,EAAkB,CAEd,MAAArJ,EAAuB+F,EAAa,iCAAiC7K,EAAa,CAAE,CAAC+M,EAAU,EAAE,EAAGA,EAAW,EAE9G,OAAAjD,EAAW,KAAkBrJ,GAAA,CAClC,MAAM4C,EAAYyB,EAAqB,KAAWS,GAAAA,EAAG,YAAc9E,CAAS,EACrE,OAAA4C,GAAaA,EAAU,WAAa6K,CAAA,CAC5C,CAAA,KACI,CAEL,KAAM,CAAE,eAAgBE,CAAU,EAAIpO,EAAY,KAC9C,GAAA,CAACoO,EAAkB,MAAA,GAEvB,MAAM5N,IAAcpX,EAAA4W,EAAY,KAAK,iBAAjB,YAAA5W,EAAiC,SAAU,EAC3D,OAAAoX,IAAgB,EAAU,GAEvBsJ,EAAW,KAAkBrJ,IAClB2N,EAAqC3N,CAAS,GAAK,GACvCD,GACP0N,CACtB,CAAA,CACH,CAMM,mBACNG,EACArO,EACA+M,EACS,OACT,KAAM,CAAE,eAAAuB,EAAgB,cAAAJ,EAAgB,GAAK,mBAAAK,EAAqB,IAAUF,EAEtE,CAAE,mBAAAtN,GAAuBf,EAAY,KACvC,GAAA,CAACe,EAA2B,MAAA,GAEhC,MAAMP,IAAcpX,EAAA4W,EAAY,KAAK,iBAAjB,YAAA5W,EAAiC,SAAU,EAC3D,GAAAoX,IAAgB,EAAU,MAAA,GAGxB,MAAAgO,EAAgBF,EAAe,KAActN,IACjCD,EAA8CC,CAAK,GAAK,GAC5CR,GACP0N,CACtB,EAED,GAAI,CAACK,EACI,OAAAC,EAKT,MAAMC,EADW5D,EAAa,oBAAoB7K,EAAa,CAAE,CAAC+M,EAAU,EAAE,EAAGA,EAAW,EAC1D,OAAY,GAAA,EAAE,OAAS,UAAU,EAEnE,OAAOyB,GAAiBC,EAAiB,KAAU,GAAA,EAAE,UAAY,EAAG,CAAA,CAM9D,uBACNC,EACA1O,EACA+M,EACS,CACT,KAAM,CAAE,WAAAxJ,EAAY,iBAAAoL,EAAmB,IAAM,0BAAAC,EAA4B,IAAUF,EAE7E,CAAE,kBAAArN,GAAsBrB,EAAY,KACtC,GAAA,CAACqB,EAA0B,MAAA,GAEzB,MAAAE,EAAmB,OAAO,OAAOF,CAAiB,EAAE,OAAO,CAACG,EAAad,IAAkBc,EAAMd,EAAO,CAAC,EAC3G,GAAAa,IAAqB,EAAU,MAAA,GAG7B,MAAAsN,EAAmBtL,EAAW,KAAkB9B,IAC/BJ,EAA6CI,CAAS,GAAK,GAC5CF,GACZoN,CACzB,EAED,GAAI,CAACC,EACI,OAAAC,EAKT,MAAMC,EADWjE,EAAa,oBAAoB7K,EAAa,CAAE,CAAC+M,EAAU,EAAE,EAAGA,EAAW,EAC1D,OAAY1d,GAAAA,EAAE,OAAS,UAAU,EAEnE,OAAOwf,GAAoBC,EAAiB,KAAUzf,GAAAA,EAAE,UAAY,EAAG,CAAA,CAMjE,yBACN0f,EACA/O,EACA+M,EACS,CACT,KAAM,CAAE,UAAAtL,EAAW,mBAAAuN,EAAqB,GAAI,cAAAC,EAAgB,OAAUF,EAKhEpM,EAFckI,EAAa,6BAA6B7K,EAAa,CAAE,CAAC+M,EAAU,EAAE,EAAGA,EAAW,EAEzE,KAAUmC,GAAAA,EAAE,YAAczN,CAAS,EAOlE,MANI,GAACkB,GAGDA,EAAW,gBAAkBqM,GAG7BC,IAAkB,OAAStM,EAAW,QAAUsM,EAE7C,CAMD,sBACNE,EACAnP,EACA+M,EACS,CACT,KAAM,CAAE,mBAAAqC,EAAqB,GAAK,iBAAAC,EAAmB,EAAG,eAAAC,EAAiB,IAAUH,EAG7EjP,EAAW2K,EAAa,yBAAyB7K,EAAa,CAAE,CAAC+M,EAAU,EAAE,EAAGA,EAAW,EAE7F,OAAA7M,EAAS,SAAW,EAAU,GAGZA,EAAS,OAAkBuC,GAAA,CAK3C,GAHAA,EAAQ,SAAW2M,GAGnB3M,EAAQ,OAAS4M,EAAyB,MAAA,GAG9C,GAAIC,EAAgB,CAClB,MAAMC,EAAkBvP,EAAY,KAAK,SAAS,OAAS,GACvD,GAAAyC,EAAQ,oBAAsB8M,EAAwB,MAAA,EAAA,CAGrD,MAAA,EAAA,CACR,EAEoB,OAAS,CAAA,CAMxB,wBACNC,EACAxP,EACA+M,EACS,CACH,KAAA,CACJ,iBAAA1H,EACA,mBAAAG,EACA,kBAAAC,EACA,mBAAAgK,EACA,cAAAC,CAAA,EACEF,EAGEG,EAAc9E,EAAa,2BAA2B7K,EAAa,CAAE,CAAC+M,EAAU,EAAE,EAAGA,EAAW,EAuBtG,MApBI,EAAA1H,GAAoBsK,EAAY,mBAAqBtK,GAKrDG,GAAsBmK,EAAY,qBAAuBnK,GAKzDC,GAAqBkK,EAAY,oBAAsBlK,GAKvDgK,IAAuB,QAAaE,EAAY,gBAAkBF,GAKlEC,IAAkB,QAAaC,EAAY,WAAaD,EAIrD,CAQT,uBACEE,EACA5P,EACA+M,EACsB,CAEtB,MAAM8C,EAAe,QAAQ,KAAK,UAAUD,EAAK,SAAS,CAAC,IAAI7C,EAAU,EAAE,IAAIA,EAAU,UAAU,GAG7FW,EAAe,KAAK,eAAe,IAAImC,CAAY,EACzD,GAAInC,IAAiB,OACnB,YAAK,MAAM,qBACJ,CACL,YAAaA,EACb,uBAAwBA,EAAekC,EAAK,gBAAkB,CAAA,CAChE,EAIF,KAAK,MAAM,uBACX,MAAME,EAAc,KAAK,kBAAkBF,EAAK,UAAW5P,EAAa+M,CAAS,EAG5E,YAAA,eAAe,IAAI8C,EAAcC,CAAW,EAE1C,CACL,YAAAA,EACA,uBAAwBA,EAAcF,EAAK,gBAAkB,CAAA,CAC/D,CAAA,CAMF,2BACEG,EACA/P,EACA+M,EACsB,CACtB,OAAOgD,EACJ,OAAeH,GAAA,KAAK,kBAAkBA,EAAK,UAAW5P,EAAa+M,CAAS,CAAC,EAC7E,QAAQ6C,GAAQA,EAAK,eAAe,CAAA,CAOzC,wBAAwBrE,EAAiByE,EAA4C,CAC/E,GAAA,CAACA,EAAe,SAAiB,OAAAzE,EACrC,GAAIA,EAAQ,SAAS,qBAAqB,GAAKA,EAAQ,OAAS,IAC9D,eAAQ,KAAK,+FAA+F,EACrGA,EAET,KAAK,MAAM,kBACX,MAAM0E,EAAoB,KAAK,0BAA0B1E,EAAS,CAACyE,CAAc,EAAG,CAClF,cAAe,GACf,uBAAwB,EAAA,CACzB,EACKE,EAAuB,KAAK,oBAAoB,IAAID,CAAiB,EAC3E,GAAIC,IAAyB,OAC3B,YAAK,MAAM,0BACJA,EAEL,IAAAtjB,EACJ,OAAQojB,EAAe,KAAM,CAC3B,IAAK,UACMpjB,EAAA,KAAK,2BAA2B2e,EAASyE,CAAc,EAChE,MACF,IAAK,WACMpjB,EAAA,KAAK,4BAA4B2e,EAASyE,CAAc,EACjE,MACF,IAAK,SACMpjB,EAAA,KAAK,0BAA0B2e,EAASyE,CAAc,EAC/D,MACF,IAAK,YACMpjB,EAAA,KAAK,6BAA6B2e,EAASyE,CAAc,EAClE,MACF,IAAK,cACMpjB,EAAA,KAAK,+BAA+B2e,EAASyE,CAAc,EACpE,MACF,QACWpjB,EAAA2e,CAAA,CAER,YAAA,oBAAoB,IAAI0E,EAAmBrjB,CAAM,EAC/CA,CAAA,CAKD,2BAA2B2e,EAAiByE,EAA4C,CACxF,MAAAG,EAAcH,EAAe,aAAe,GAC5CI,EAAkB,KAAK,aAAaJ,EAAe,QAAS,EAC5DK,EAAgB,IAAI,OAAOD,EAAiB,GAAG,EACrD,GACEJ,EAAe,qBACdA,EAAe,SAAU,SAAS,GAAG,GACpCA,EAAe,SAAU,SAAS,GAAG,GACrCA,EAAe,SAAU,SAAS,GAAG,GACvC,CACA,MAAMM,EAAgB,yBAChBC,EAAgBP,EAAe,SAAU,MAAMM,CAAa,GAAK,CAAC,EACxE,IAAIE,EAAwBL,EAC5B,OAAAI,EAAc,QAAkBE,GAAA,CACzBD,EAAsB,SAASC,CAAM,IACxCD,EAAwB,GAAGC,CAAM,GAAGD,CAAqB,GAAGC,CAAM,GACpE,CACD,EACMlF,EAAQ,QAAQ8E,EAAeG,CAAqB,CAAA,CAEtD,OAAAjF,EAAQ,QAAQ8E,EAAeF,CAAW,CAAA,CAG3C,4BAA4B5E,EAAiByE,EAA4C,CAC3F,GAAA,CAACA,EAAe,gBAAwB,OAAAzE,EAC5C,MAAMmF,EAAkBV,EAAe,gBACjCW,EAAgBX,EAAe,eAAiB,YACtD,IAAIY,EAAiB,GACrB,OAAQD,EAAe,CACrB,IAAK,YACHC,EAAiBZ,EAAe,SAAU,MAAM,EAAE,EAAE,KAAKU,CAAe,EACxE,MACF,IAAK,OACcE,EAAAZ,EAAe,SAAU,MAAM,GAAG,EAAE,KAAK,IAAIU,CAAe,GAAG,EAChF,MACF,IAAK,cAAe,CAClB,MAAMG,EAAQb,EAAe,SAAU,MAAM,EAAE,EAC/CY,EAAiBC,EACd,IAAI,CAAC7N,EAAMhZ,IAAU,CACpB,MAAM8mB,EAAgB,KAAK,MAAM9mB,GAAS6mB,EAAM,OAAS,EAAE,EAAI,EACxD,OAAA7N,EAAO0N,EAAgB,OAAOI,CAAa,CAAA,CACnD,EACA,KAAK,EAAE,EACV,KAAA,CAEF,QACEF,EAAiBZ,EAAe,SAAU,MAAM,EAAE,EAAE,KAAKU,CAAe,CAAA,CAE5E,MAAMN,EAAkB,KAAK,aAAaJ,EAAe,QAAS,EAC5DK,EAAgB,IAAI,OAAOD,EAAiB,GAAG,EAC9C,OAAA7E,EAAQ,QAAQ8E,EAAeO,CAAc,CAAA,CAG9C,0BAA0BrF,EAAiByE,EAA4C,CACvF,MAAAG,EAAcH,EAAe,aAAe,GAC5Ce,EAAcf,EAAe,aAAe,SAC5CI,EAAkB,KAAK,aAAaJ,EAAe,QAAS,EAC5DK,EAAgB,IAAI,OAAOD,EAAiB,GAAG,EACrD,OAAQW,EAAa,CACnB,IAAK,SACI,OAAAxF,EAAQ,QAAQ8E,EAAe,GAAGL,EAAe,QAAQ,IAAIG,CAAW,EAAE,EACnF,IAAK,SACH,OAAO5E,EAAQ,QACb8E,EACA,GAAGL,EAAe,QAAQ,+CAA+CG,CAAW,UACtF,EACF,IAAK,YACH,OAAO5E,EAAQ,QACb8E,EACA,GAAGL,EAAe,QAAQ;AAAA;AAAA,8CAAmDG,CAAW,QAC1F,EACF,IAAK,SACH,OAAO5E,EAAQ,QACb8E,EACA,GAAGL,EAAe,QAAQ,8CAA8CG,CAAW,SACrF,EACF,QACS,OAAA5E,EAAQ,QAAQ8E,EAAe,GAAGL,EAAe,QAAQ,IAAIG,CAAW,EAAE,CAAA,CACrF,CAGM,6BAA6B5E,EAAiByE,EAA4C,CAChG,IAAIgB,EAAiBhB,EAAe,SAC9B,MAAA3M,EAAY2M,EAAe,WAAa,EAC9C,OAAQA,EAAe,SAAU,CAC/B,IAAK,SACcgB,EAAA3N,EAAY,EACzB,wBAAwBA,CAAS,KAAK2M,EAAe,QAAQ,QAC7D,IAAIA,EAAe,QAAQ,IAC/B,MACF,IAAK,OACcgB,EAAA3N,EAAY,EACzB,4BAA4BA,CAAS,KAAK2M,EAAe,QAAQ,YACjE,KAAKA,EAAe,QAAQ,KAChC,MACF,IAAK,QACHgB,EAAiB,0CAA0C3N,CAAS,KAAK2M,EAAe,QAAQ,UAChG,MACF,IAAK,UAAW,CACR,MAAAiB,EAAS,IAAI,OAAO5N,CAAS,EACnC2N,EAAiBhB,EAAe,SAAU,MAAM,EAAE,EAAE,KAAKiB,CAAM,EAC/D,KAAA,CAEF,IAAK,YACHD,EAAiB,0BAA0B3N,CAAS,KAAK2M,EAAe,QAAQ,UAChF,MACF,IAAK,SACHgB,EAAiB,sCAAsC3N,CAAS,gBAAgB2M,EAAe,QAAQ,KAAKA,EAAe,QAAQ,UACnI,MACF,IAAK,OACHgB,EAAiB,oCAAoC3N,CAAS,KAAK2M,EAAe,QAAQ,UAC1F,KAAA,CAEJ,MAAMI,EAAkB,KAAK,aAAaJ,EAAe,QAAS,EAC5DK,EAAgB,IAAI,OAAOD,EAAiB,GAAG,EAC9C,OAAA7E,EAAQ,QAAQ8E,EAAeW,CAAc,CAAA,CAG9C,+BAA+BzF,EAAiByE,EAA4C,CAC5F,MAAAkB,EAAelB,EAAe,cAAgB,SAC9CmB,EAAcnB,EAAe,aAAe,GAC5CI,EAAkB,KAAK,aAAaJ,EAAe,QAAS,EAC5DK,EAAgB,IAAI,OAAOD,EAAiB,GAAG,EACrD,OAAQc,EAAc,CACpB,IAAK,SACH,OAAO3F,EAAQ,QACb8E,EACA,GAAGL,EAAe,QAAQ,sCAAsCmB,CAAW,UAC7E,EACF,IAAK,WAAY,CACf,MAAMC,EAAa,YAAY,KAAK,kBAAkBpB,EAAe,QAAS,CAAC,GACzEqB,EAAe9F,EAAQ,SAAS,oCAAoC,EAC1E,IAAI+F,EAAsB/F,EAAQ,QAChC8E,EACA,GAAGL,EAAe,QAAQ,+CAA+CoB,CAAU,iBACrF,EACA,GAAIC,EAAc,CAChB,MAAME,EAAsB,+CACxBA,EAAoB,KAAKD,CAAmB,EAC9CA,EAAsBA,EAAoB,QACxCC,EACA;AAAA;AAAA;AAAA,SAAwDH,CAAU,6CAA6CA,CAAU,eAAeD,CAAW,MACrJ,EAEuBG,GAAA;AAAA;AAAA,SAAcF,CAAU,6CAA6CA,CAAU,eAAeD,CAAW,MAClI,MAEuBG,GAAA;AAAA;AAAA;AAAA,SAAkDF,CAAU,6CAA6CA,CAAU,eAAeD,CAAW;AAAA,QAE/J,OAAAG,CAAA,CAET,IAAK,aAEH,OAAO/F,EAAQ,QACb8E,EACA,iDAAiDL,EAAe,QAAQ,uCAAuCmB,CAAW,gBAC5H,EAEF,IAAK,cAEH,OAAO5F,EAAQ,QACb8E,EACA,iDAAiDL,EAAe,QAAQ,uCAAuCmB,CAAW,cAC5H,EAEF,QACE,OAAO5F,EAAQ,QACb8E,EACA,GAAGL,EAAe,QAAQ,KAAKmB,CAAW,GAC5C,CAAA,CACJ,CAMM,aAAaK,EAAwB,CACpC,OAAAA,EAAO,QAAQ,sBAAuB,MAAM,CAAA,CAM7C,kBAAkBC,EAAqB,CAC7C,IAAIC,EAAO,EACX,QAASvmB,EAAI,EAAGA,EAAIsmB,EAAI,OAAQtmB,IAAK,CAC7B,MAAA6X,EAAOyO,EAAI,WAAWtmB,CAAC,EACpBumB,GAAAA,GAAQ,GAAKA,EAAQ1O,EAC9B0O,EAAOA,EAAOA,CAAA,CAET,OAAA,KAAK,IAAIA,CAAI,EAAE,SAAS,EAAE,EAAE,UAAU,EAAG,CAAC,CAAA,CAOnD,qBAAqBnG,EAAiB4B,EAA+C,CAEnF,GAAI,CAAC5B,EACH,eAAQ,KAAK,+BAA+B,EACrC,GAGT,GAAI,CAAC,MAAM,QAAQ4B,CAAe,GAAKA,EAAgB,SAAW,EACzD,OAAA5B,EAIL,GAAAA,EAAQ,SAAS,qBAAqB,IACrCA,EAAQ,OAAS,MAAS4B,EAAgB,OAAS,IACtD,eAAQ,KAAK,iIAAiI,EACvI5B,EAGT,KAAK,MAAM,yBAGX,MAAMoG,EAAgB,KAAK,0BAA0BpG,EAAS4B,CAAe,EAGvEyE,EAAoB,KAAK,2BAA2B,IAAID,CAAa,EAC3E,GAAIC,IAAsB,OACxB,YAAK,MAAM,mBACJA,EAGL,GAAA,CAgBF,MAAMhlB,EAbwB,CAAC,GAAGugB,CAAe,EAAE,KAAK,CAAC5K,EAAGC,IAAM,CAE1D,MAAAqP,EAAoBxiB,GACpBA,IAAM,OAAe,EACrBA,IAAM,SAAiB,EACvBA,IAAM,MAAc,EACjB,EAET,OAAOwiB,EAAiBrP,EAAE,QAAQ,EAAIqP,EAAiBtP,EAAE,QAAQ,CAAA,CAClE,EAIoC,OACnC,CAACuP,EAAgB9B,IACf,KAAK,wBAAwB8B,EAAgB9B,CAAc,EAC7DzE,CACF,EAGK,YAAA,2BAA2B,IAAIoG,EAAe/kB,CAAM,EAChDA,QACF/D,EAAO,CACN,eAAA,MAAM,kCAAmCA,CAAK,EAC/C0iB,CAAA,CACT,CAWF,mCACEA,EACAwB,EACA/M,EACA+R,EACQ,CAER,GAAI,CAACxG,EACH,eAAQ,KAAK,6EAA6E,EACnF,GAGT,GAAI,CAAC,MAAM,QAAQwG,CAAqB,GAAKA,EAAsB,SAAW,EAC5E,eAAQ,IAAI,gGAAgG,EACrGxG,EAGL,GAAA,CACF,QAAQ,IAAI,mCAAmCwG,EAAsB,MAAM,4CAA4ChF,EAAU,EAAE,EAAE,EAErI,MAAMiF,EAA6CD,EAAsB,IAAI,CAACE,EAAQjoB,IAAU,CAC9F,MAAMgmB,EAAiB,CAAE,GAAGiC,EAAO,cAAe,EAG9C,OAACjC,EAAe,WAClBA,EAAe,SAAW,QAGpB,QAAA,IAAI,yDAAyDhmB,EAAQ,CAAC,KAAKioB,EAAO,IAAI,QAAQA,EAAO,SAAS,UAAU,EAAG,EAAE,CAAC,SAASA,EAAO,eAAe,MAAMA,EAAO,eAAe,GAAG,EAE7LjC,CAAA,CACR,EAGKkC,EAAgB,KAAK,0BACzB3G,EACAwB,EACA/M,EACA+R,CACF,EAGMrE,EAAe,KAAK,2BAA2B,IAAIwE,CAAa,EACtE,GAAIxE,IAAiB,OACnB,YAAK,MAAM,mBACX,QAAQ,IAAI,6EAA6E,EAClFA,EAIT,MAAMyE,EAAqB,KAAK,qBAAqB5G,EAASyG,CAAoB,EAG7E,YAAA,2BAA2B,IAAIE,EAAeC,CAAkB,EAErE,QAAQ,IAAI,gGAAgG5G,EAAQ,MAAM,MAAM4G,EAAmB,MAAM,EAAE,EAEpJA,QAEAtpB,EAAO,CACN,eAAA,MAAM,yEAA0EA,CAAK,EAC7F,QAAQ,MAAM,8CAA+CkpB,EAAsB,IAAU7C,IAAA,CAC3F,KAAMA,EAAE,KACR,SAAUA,EAAE,SAAS,UAAU,EAAG,EAAE,EACpC,gBAAiBA,EAAE,gBACnB,gBAAiBA,EAAE,iBACnB,CAAC,EAGI3D,CAAA,CACT,CAUM,0BACNA,EACAwB,EACA/M,EACA+R,EACQ,CAER,MAAMzE,EAAc/B,EAAQ,UAAU,EAAG,EAAE,EACrC6G,EAAU,GAAGrF,EAAU,EAAE,IAAIA,EAAU,SAAS,IAAIA,EAAU,UAAU,GAGxEzL,EAAiBtB,EAAY,KAAK,gBAAkB,CAAC,EACrDqS,EAAuB/Q,EAAe,QAAU,EAClDA,EAAeA,EAAe,OAAS,CAAC,EAAE,UAC1C,OAGEgR,EAAcP,EACjB,IAAS7C,GAAA,GAAGA,EAAE,IAAI,IAAIA,EAAE,SAAS,UAAU,EAAG,EAAE,CAAC,IAAIA,EAAE,eAAe,IAAIA,EAAE,eAAe,IAAIA,EAAE,SAAS,EAAE,EAC5G,KAAK,GAAG,EAELqD,EAAgB,GAAGF,CAAoB,IAAItF,EAAU,SAAS,GAE7D,MAAA,SAASO,CAAW,IAAI8E,CAAO,IAAIG,CAAa,IAAID,CAAW,IAAI,KAAK,oBAAoB,EAAA,CAMrG,aAAoB,CAClB,KAAK,eAAe,MAAM,EAC1B,KAAK,oBAAoB,MAAM,EAC/B,KAAK,2BAA2B,MAAM,EACtC,KAAK,MAAQ,CACX,qBAAsB,EACtB,mBAAoB,EACpB,gBAAiB,EACjB,wBAAyB,EACzB,uBAAwB,EACxB,iBAAkB,CACpB,CAAA,CAQF,eAIE,CACO,MAAA,CACL,eAAgB,CACd,GAAG,KAAK,eAAe,SAAS,EAChC,QAAS,KAAK,MAAM,qBAAuB,EACvC,KAAK,MAAM,mBAAqB,KAAK,MAAM,qBAC3C,CACN,EACA,oBAAqB,CACnB,GAAG,KAAK,oBAAoB,SAAS,EACrC,QAAS,KAAK,MAAM,gBAAkB,EAClC,KAAK,MAAM,wBAA0B,KAAK,MAAM,gBAChD,CACN,EACA,2BAA4B,CAC1B,GAAG,KAAK,2BAA2B,SAAS,EAC5C,QAAS,KAAK,MAAM,uBAAyB,EACzC,KAAK,MAAM,iBAAmB,KAAK,MAAM,uBACzC,CAAA,CAER,CAAA,CAWF,4BACE/G,EACAwB,EACA/M,EACAE,EACsB,CAEtB,GAAI,CAACqL,GAAW,CAACrL,GAAYA,EAAS,SAAW,EAC/C,eAAQ,IAAI,0EAA0E,EAC/E,CAAC,EAGN,GAAA,CACF,QAAQ,IAAI,+DAA+DA,EAAS,MAAM,qBAAqB6M,EAAU,EAAE,EAAE,EAG7H,MAAMyF,EAAkB,KAAK,mBAAmBjH,EAASwB,EAAW/M,EAAaE,CAAQ,EAGnFwN,EAAe,KAAK,2BAA2B,IAAI8E,CAAe,EACxE,GAAI9E,IAAiB,OACnB,YAAK,MAAM,mBACX,QAAQ,IAAI,qEAAqE,EAC1E,KAAK,sCAAsCA,CAAY,EAGhE,MAAMP,EAAwC,CAAC,EAGtCjN,EAAA,QAAQ,CAACuC,EAASzY,IAAU,CAGnC,OAFQ,QAAA,IAAI,6CAA6CA,EAAQ,CAAC,KAAKyY,EAAQ,IAAI,eAAeA,EAAQ,QAAQ,GAAG,EAE7GA,EAAQ,KAAM,CACpB,IAAK,WACH0K,EAAgB,KAAK,GAAG,KAAK,uCAAuC1K,EAASsK,EAAW/M,CAAW,CAAC,EACpG,MAEF,IAAK,YACHmN,EAAgB,KAAK,GAAG,KAAK,oCAAoC1K,EAASsK,EAAW/M,CAAW,CAAC,EACjG,MAEF,IAAK,WACHmN,EAAgB,KAAK,GAAG,KAAK,qCAAqC1K,EAASsK,EAAW/M,CAAW,CAAC,EAClG,MAEF,IAAK,WACHmN,EAAgB,KAAK,GAAG,KAAK,wCAAwC1K,EAASsK,EAAW/M,CAAW,CAAC,EACrG,MAEF,IAAK,SAEHmN,EAAgB,KAAK,GAAG,KAAK,mCAAmC1K,EAASsK,EAAW/M,CAAW,CAAC,EAChG,MAEF,QACE,QAAQ,KAAK,gDAAgDyC,EAAQ,IAAI,EAAE,CAAA,CAC/E,CACD,EAGD,MAAMgQ,EAAuBtF,EAC1B,OAAO5iB,GAAKA,EAAE,UAAYA,EAAE,SAAS,OAAS,CAAC,EAC/C,MAAM,EAAG,CAAC,EAGPmoB,EAA2B,KAAK,UAAUD,CAAoB,EAC/D,YAAA,2BAA2B,IAAID,EAAiBE,CAAwB,EAE7E,QAAQ,IAAI,oCAAoCD,EAAqB,MAAM,0BAA0B,EAE9FA,QAEA5pB,EAAO,CACN,eAAA,MAAM,+DAAgEA,CAAK,EAC5E,CAAC,CAAA,CACV,CAMM,mBACN0iB,EACAwB,EACA/M,EACAE,EACQ,CACR,MAAMoN,EAAc/B,EAAQ,UAAU,EAAG,EAAE,EACrC6G,EAAU,GAAGrF,EAAU,EAAE,IAAIA,EAAU,SAAS,IAAIA,EAAU,UAAU,GAGxE4F,EAAmBzS,EACtB,IAAI7Q,GAAK,GAAGA,EAAE,IAAI,IAAIA,EAAE,SAAS,QAAQ,CAAC,CAAC,KAAKA,EAAE,cAAgB,IAAI,MAAM,EAAE,EAC9E,KAAK,GAAG,EAGLujB,EAAa5S,EAAY,KAAK,SAAS,MAAM,EAAE,EAAE,KAAK,GAAG,EAExD,MAAA,WAAWsN,CAAW,IAAI8E,CAAO,IAAIQ,CAAU,IAAID,CAAgB,IAAI,KAAK,oBAAoB,EAAA,CAOjG,uCACNlQ,EACAsK,EACA/M,EACsB,CACtB,MAAMmN,EAAwC,CAAC,EAIzC0F,EADwChI,EAAa,yBAAyB7K,EAAa,CAAE,CAAC+M,EAAU,EAAE,EAAGA,EAAW,EACrF,OAAY1d,GAAAA,EAAE,UAAY,EAAG,EAElE,OAAAwjB,EAAe,OAAS,IAE1B1F,EAAgB,KAAK,CACnB,KAAM,cACN,SAAU,UACV,YAAa,kCAAkC0F,EAAe,CAAC,EAAE,SAAS,KAAK,GAAG,CAAC,MAAMA,EAAe,CAAC,EAAE,WAAW,IACtH,aAAc,aACd,UAAW,KAAK,KAAKpQ,EAAQ,SAAW,CAAC,EACzC,SAAU,MAAA,CACX,EAGGA,EAAQ,SAAW,IACrB0K,EAAgB,KAAK,CACnB,KAAM,WACN,SAAU,cACV,gBAAiB,MACjB,cAAe,cACf,UAAW,EACX,SAAU,QAAA,CACX,EAIC0F,EAAe,KAAUxjB,GAAAA,EAAE,SAAS,SAAS0d,EAAU,EAAE,CAAC,GAC5DI,EAAgB,KAAK,CACnB,KAAM,YACN,SAAU,OACV,SAAU,QACV,UAAW,EACX,SAAU,QAAA,CACX,GAIEA,CAAA,CAOD,oCACN1K,EACAsK,EACA/M,EACsB,CACtB,MAAMmN,EAAwC,CAAC,EAIzC2F,EADkDjI,EAAa,iCAAiC7K,EAAa,CAAE,CAAC+M,EAAU,EAAE,EAAGA,EAAW,EACjG,OAAaxH,GAAAA,EAAG,WAAa,EAAG,EAE/E,GAAIuN,EAAkB,OAAS,GAAKrQ,EAAQ,kBAAmB,CACvD,MAAAsQ,EAAoBD,EAAkB,CAAC,EAAE,UAG3CC,IAAsBhG,EAAU,YAClCI,EAAgB,KAAK,CACnB,KAAM,cACN,SAAU,cACV,YAAa,GAAG4F,CAAiB,yCAAyC,KAAK,MAAMD,EAAkB,CAAC,EAAE,UAAY,GAAG,CAAC,KAC1H,aAAc,cACd,UAAW,KAAK,KAAKrQ,EAAQ,SAAW,CAAC,EACzC,SAAU,MAAA,CACX,EAGD0K,EAAgB,KAAK,CACnB,KAAM,YACN,SAAU,IACV,SAAU,SACV,UAAW,EACX,SAAU,QAAA,CACX,GAIC2F,EAAkB,CAAC,EAAE,UAAY,IACnC3F,EAAgB,KAAK,CACnB,KAAM,SACN,SAAU,UACV,YAAa,IAAI4F,CAAiB,gCAClC,YAAa,SACb,SAAU,KAAA,CACX,CACH,CAGK,OAAA5F,CAAA,CAOD,qCACN1K,EACAsK,EACA/M,EACsB,CACtB,MAAMmN,EAAwC,CAAC,EAGzCnI,EAA0C6F,EAAa,uBAAuB7K,EAAa,CAAE,CAAC+M,EAAU,EAAE,EAAGA,EAAW,EAE9H,GAAI/H,EAAgB,WAAa,IAAOA,EAAgB,cAAgB,GAAK,CAE3EmI,EAAgB,KAAK,CACnB,KAAM,cACN,SAAU,OACV,YAAa,mCAAmCnI,EAAgB,UAAU,WAAWA,EAAgB,sBAAsB,QAC3H,aAAc,WACd,UAAW,KAAK,KAAKvC,EAAQ,SAAW,CAAC,EACzC,SAAU,MAAA,CACX,EAGGuC,EAAgB,WAAa,KAC/BmI,EAAgB,KAAK,CACnB,KAAM,WACN,SAAU,SACV,gBAAiB,IACjB,cAAe,YACf,UAAW,EACX,SAAU,QAAA,CACX,EAEDA,EAAgB,KAAK,CACnB,KAAM,WACN,SAAU,MACV,gBAAiB,IACjB,cAAe,OACf,UAAW,EACX,SAAU,QAAA,CACX,GAEH,MAAM6F,EAAe,OAAO,QAAQhO,EAAgB,iBAAiB,EAClE,KAAK,CAAC,CAAG,CAAA/b,CAAK,IAAMA,EAAQ,EAAG,EAE9B+pB,GACF7F,EAAgB,KAAK,CACnB,KAAM,YACN,SAAU6F,EAAa,CAAC,EACxB,SAAU,YACV,UAAW,EACX,SAAU,QAAA,CACX,CACH,CAGK,OAAA7F,CAAA,CAOD,wCACN1K,EACAsK,EACA/M,EACsB,OACtB,MAAMmN,EAAwC,CAAC,EAE/C,GAAI1K,EAAQ,mBAAqBA,EAAQ,kBAAkB,OAAS,EAAG,CAE/D,MAAAR,EAAuB4I,EAAa,6BAA6B7K,EAAa,CAAE,CAAC+M,EAAU,EAAE,EAAGA,EAAW,EAEzGtK,EAAA,kBAAkB,QAAqBhB,GAAA,CAC7C,MAAMkB,EAAaV,EAAqB,KAAUiN,GAAAA,EAAE,YAAczN,CAAS,EAEvEkB,GAAcA,EAAW,iBAAmB,KAE9CwK,EAAgB,KAAK,CACnB,KAAM,cACN,SAAU1L,EAAU,QAAQ,IAAK,GAAG,EACpC,YAAa,gCAAgCkB,EAAW,eAAe,SAASA,EAAW,KAAK,IAChG,aAAc,aACd,UAAW,KAAK,KAAKF,EAAQ,SAAW,CAAC,EACzC,SAAU,MAAA,CACX,EAGGE,EAAW,gBAAkB,IAC/BwK,EAAgB,KAAK,CACnB,KAAM,YACN,SAAU1L,EAAU,QAAQ,IAAK,GAAG,EACpC,SAAU,QACV,UAAW,EACX,SAAU,QAAA,CACX,EAICkB,EAAW,QAAU,UACvBwK,EAAgB,KAAK,CACnB,KAAM,SACN,SAAU1L,EAAU,QAAQ,IAAK,GAAG,EACpC,YAAa,eACb,YAAa,SACb,SAAU,KAAA,CACX,EAEL,CACD,EAGD,MAAMyF,IAAe9d,EAAA4W,EAAY,KAAK,iBAAjB,YAAA5W,EAAiC,MAAM,MAAO,CAAC,EACxC,KAAK,6BAA6B8d,EAAc6F,CAAS,EAE3D,IACxBI,EAAgB,KAAK,CACnB,KAAM,UACN,SAAU,aACV,YAAa,wBACb,mBAAoB,GACpB,SAAU,QAAA,CACX,CACH,CAGK,OAAAA,CAAA,CAMD,mCACN8F,EACAlG,EACA/M,EACsB,CACtB,MAAMmN,EAAwC,CAAC,EAGzCwC,EAAc9E,EAAa,2BAA2B7K,EAAa,CAAE,CAAC+M,EAAU,EAAE,EAAGA,EAAW,EAGtG,OAAQ4C,EAAY,iBAAkB,CACpC,IAAK,SACHxC,EAAgB,KAAK,CACnB,KAAM,cACN,SAAU,WACV,YAAa,8BACb,aAAc,SACd,UAAW,EACX,SAAU,KAAA,CACX,EACD,MAEF,IAAK,YACHA,EAAgB,KAAK,CACnB,KAAM,YACN,SAAU,SACV,SAAU,UACV,UAAW,EACX,SAAU,QAAA,CACX,EACD,MAEF,IAAK,YACHA,EAAgB,KAAK,CACnB,KAAM,WACN,SAAU,YACV,gBAAiB,IACjB,cAAe,OACf,UAAW,EACX,SAAU,KAAA,CACX,EACD,MAEF,IAAK,UACHA,EAAgB,KAAK,CACnB,KAAM,WACN,SAAU,QACV,gBAAiB,IACjB,cAAe,cACf,UAAW,EACX,SAAU,QAAA,CACX,EACD,KAAA,CAIA,OAAAwC,EAAY,cAAgB,IAC9BxC,EAAgB,KAAK,CACnB,KAAM,YACN,SAAU,OACV,SAAU,OACV,UAAW,EACX,SAAU,QAAA,CACX,EAGIA,CAAA,CAKD,6BAA6BjG,EAAiE6D,EAAgC,CAChI,GAAA7D,EAAa,OAAS,EAAU,MAAA,GAE9B,MAAAgM,EAAoBnI,EAAY,mBAAqB,CAAC,EACxD,GAAAmI,EAAkB,SAAW,EAAU,MAAA,GAE3C,IAAIC,EAAkB,EAClBC,EAAmB,EACvB,OAAAlM,EAAa,QAAiBpF,GAAA,CAC5B,GAAIA,EAAM,mBAAqBA,EAAM,kBAAkB,OAAS,EAAG,CACjE,MAAMuR,EAAkBvR,EAAM,kBACxBwR,EAAmBJ,EAAkB,OAAOzR,GAChD4R,EAAgB,SAAS5R,CAAS,CACpC,EAEA0R,GAAmBG,EAAiB,OAAS,KAAK,IAAIJ,EAAkB,OAAQG,EAAgB,MAAM,EACtGD,GAAA,CACF,CACD,EAEMA,EAAmB,EAAID,EAAkBC,EAAmB,CAAA,CAarE,4BACE7H,EACAwB,EACA/M,EACAuT,EAAsC,CAAA,EAChB,OAEtB,GAAI,CAAChI,GAAW,CAACwB,GAAa,CAAC/M,EAC7B,eAAQ,KAAK,iFAAiF,EACvF,CAAC,EAIV,GAAIuL,EAAQ,SAAS,qBAAqB,GAAKA,EAAQ,OAAS,KAC9D,eAAQ,KAAK,+FAA+F,EACrG,CAAC,EAGN,GAAA,CACF,QAAQ,IAAI,mEAAmEwB,EAAU,EAAE,EAAE,EAG7F,MAAMyG,EAAiB,KAAK,gCAAgCjI,EAASwB,EAAW/M,CAAW,EAGrF0N,EAAe,KAAK,2BAA2B,IAAI8F,CAAc,EACvE,GAAI9F,IAAiB,OACnB,YAAK,MAAM,mBACX,QAAQ,IAAI,wEAAwE,EAC7E,KAAK,sCAAsCA,CAAY,EAGhE,MAAM+F,EAA2C,CAAC,EAIlD,QAAQ,IAAI,4EAA4E,EACxF,MAAM1B,EAAwBjH,GAAsB,sBAAsBiC,EAAW/M,CAAW,EAE5F,GAAA+R,EAAsB,OAAS,EAAG,CACpC,MAAM2B,EAAsD3B,EAAsB,IAAKE,IAAkC,CACvH,GAAGA,EAAO,eACV,SAAU,OACV,iBAAkB,EAAA,EAClB,EAEFwB,EAAmB,KAAK,GAAGC,EAA8B,MAAM,EAAG,CAAC,CAAC,EAC5D,QAAA,IAAI,gCAAgC,KAAK,IAAIA,EAA8B,OAAQ,CAAC,CAAC,kCAAkC,CAAA,CAKjI,QAAQ,IAAI,4EAA4E,EACxF,MAAMxT,EAAW2K,EAAa,oBAAoB7K,EAAauT,CAAQ,EAEnE,GAAArT,EAAS,OAAS,EAAG,CAIjB,MAAAyT,EAHyB,KAAK,4BAA4BpI,EAASwB,EAAW/M,EAAaE,CAAQ,EAGxC,IAAU3V,IAAA,CACzE,GAAGA,EACH,SAAU,MAAA,EACV,EAEFkpB,EAAmB,KAAK,GAAGE,EAAkC,MAAM,EAAG,CAAC,CAAC,EAChE,QAAA,IAAI,gCAAgC,KAAK,IAAIA,EAAkC,OAAQ,CAAC,CAAC,kCAAkC,CAAA,CAKrI,QAAQ,IAAI,8EAA8E,EACpF,MAAAC,EAAsB,KAAK,2BAA2B7G,EAAU,iBAAmB,CAAC,EAAG/M,EAAa+M,CAAS,EAE/G,GAAA6G,EAAoB,OAAS,EAAG,CAC5B,MAAAC,EAAiCD,EAAoB,IAAUrpB,IAAA,CACnE,GAAGA,EACH,SAAUA,EAAE,UAAY,QAAA,EACxB,EAEFkpB,EAAmB,KAAK,GAAGI,EAA+B,MAAM,EAAG,CAAC,CAAC,EAC7D,QAAA,IAAI,gCAAgC,KAAK,IAAIA,EAA+B,OAAQ,CAAC,CAAC,gCAAgC,CAAA,CAI1H,MAAAC,EAAwB,KAAK,8BAA8BL,CAAkB,EAG7EM,EAA8B,KAAK,2BAA2BD,CAAqB,EAGnFpB,EAA2B,KAAK,UAAUqB,CAA2B,EACtE,YAAA,2BAA2B,IAAIP,EAAgBd,CAAwB,EAE5E,QAAQ,IAAI,qEAAsE,CAChF,eAAgBX,EAAsB,OACtC,gBAAiB7R,EAAS,OAC1B,YAAW9W,EAAA2jB,EAAU,kBAAV,YAAA3jB,EAA2B,SAAU,EAChD,qBAAsB2qB,EAA4B,OAClD,SAAUP,EAAe,UAAU,EAAG,EAAE,EAAI,KAAA,CAC7C,EAEMO,QAEAlrB,EAAO,CACN,eAAA,MAAM,+DAAgEA,CAAK,EAC5E,CAAC,CAAA,CACV,CAYF,sBACEkkB,EACA/M,EACAuT,EAAsC,CAAA,EAC9B,OAER,MAAMS,EAAcjH,EAAU,kBAAkB3jB,EAAA2jB,EAAU,kBAAV,YAAA3jB,EAA2B,OAAQ,GAEnF,GAAI,CAAC4qB,EACH,eAAQ,KAAK,wDAAwDjH,EAAU,EAAE,EAAE,EAC5E,GAGL,GAAA,CAEF,MAAM0G,EAAqB,KAAK,4BAA4BO,EAAajH,EAAW/M,EAAauT,CAAQ,EAGnGpB,EAAqB,KAAK,qBAAqB6B,EAAaP,CAAkB,EAEpF,eAAQ,IAAI,mEAAmE1G,EAAU,EAAE,IAAK,CAC9F,eAAgBiH,EAAY,OAC5B,kBAAmB7B,EAAmB,OACtC,uBAAwBsB,EAAmB,MAAA,CAC5C,EAEMtB,QAEAtpB,EAAO,CACd,eAAQ,MAAM,kEAAkEkkB,EAAU,EAAE,IAAKlkB,CAAK,EAC/FmrB,CAAA,CACT,CAUM,gCACNzI,EACAwB,EACA/M,EACQ,CAER,MAAMsN,EAAc/B,EAAQ,UAAU,EAAG,EAAE,EACrC6G,EAAU,GAAGrF,EAAU,EAAE,IAAIA,EAAU,SAAS,IAAIA,EAAU,UAAU,GAGxEkH,EAAgBjU,EAAY,KAAK,SAAS,MAAM,EAAE,EAAE,KAAK,GAAG,EAC5DkU,EAAqB,OAAO,KAAKlU,EAAY,KAAK,mBAAqB,EAAE,EAAE,MAAM,EAAG,CAAC,EAAE,KAAK,GAAG,EAG/FsB,EAAiBtB,EAAY,KAAK,gBAAkB,CAAC,EAIrDmU,EAAsB,GAHN7S,EAAe,QAAU,EAC3CA,EAAeA,EAAe,OAAS,CAAC,EAAE,UAC1C,MACwC,IAAIyL,EAAU,SAAS,GAEnE,MAAO,UAAUO,CAAW,IAAI8E,CAAO,IAAI6B,CAAa,IAAIC,CAAkB,IAAIC,CAAmB,IAAI,KAAK,oBAAoB,EAAA,CAQ5H,8BAA8BhH,EAA6D,CAC3F,MAAA0E,EAAoBuC,GAA8B,CACtD,OAAQA,EAAU,CAChB,IAAK,OAAe,MAAA,GACpB,IAAK,SAAiB,MAAA,GACtB,IAAK,MAAc,MAAA,GACnB,QAAgB,MAAA,EAAA,CAEpB,EAEA,MAAO,CAAC,GAAGjH,CAAe,EAAE,KAAK,CAAC5K,EAAGC,IAAM,CAEzC,MAAM6R,EAAexC,EAAiBrP,EAAE,QAAQ,EAAIqP,EAAiBtP,EAAE,QAAQ,EAC3E,GAAA8R,IAAiB,EAAU,OAAAA,EAG/B,GAAI9R,EAAE,kBAAoB,CAACC,EAAE,iBAAyB,MAAA,GACtD,GAAI,CAACD,EAAE,kBAAoBC,EAAE,iBAAyB,MAAA,GAGhD,MAAA8R,EAAY,CAAE,QAAS,EAAG,SAAU,EAAG,UAAW,EAAG,OAAQ,EAAG,YAAa,CAAE,EAC/EC,EAASD,EAAU/R,EAAE,IAA8B,GAAK,EACxDiS,EAASF,EAAU9R,EAAE,IAA8B,GAAK,EAE9D,OAAO+R,EAASC,CAAA,CACjB,CAAA,CAQK,2BAA2BrH,EAA6D,CACxF,MAAAsH,MAAW,IACXC,EAAqC,CAAC,EAE5C,OAAAvH,EAAgB,QAA0B6C,GAAA,CAElC,MAAAlmB,EAAM,GAAGkmB,EAAe,IAAI,IAAIA,EAAe,QAAQ,IAAIA,EAAe,aAAe,EAAE,GAE5FyE,EAAK,IAAI3qB,CAAG,IACf2qB,EAAK,IAAI3qB,CAAG,EACZ4qB,EAAa,KAAK1E,CAAc,EAClC,CACD,EAEG0E,EAAa,OAASvH,EAAgB,QACxC,QAAQ,IAAI,wDAAwDA,EAAgB,MAAM,MAAMuH,EAAa,MAAM,EAAE,EAGhHA,CAAA,CAQD,sCAAsCC,EAA0C,CAClF,GAAA,CACK,OAAA,KAAK,MAAMA,CAAU,QACrB9rB,EAAO,CACN,eAAA,KAAK,iEAAkEA,CAAK,EAC7E,CAAC,CAAA,CACV,CAEJ,CAGa,MAAA+rB,GAAuB,IAAI/H,GCl8DjC,MAAMgI,EAAsB,CAIjC,qBAAqBC,EAA+C,OAClE,MAAMloB,EAAoC,CACxC,KAAM,GACN,mBAAoB,CAAC,EACrB,gBAAiB,CAAA,CACnB,EAKMmoB,EAAkB,6CAClBC,EAAQF,EAAW,MAAMC,CAAe,EAG1CC,EAAM,OAAS,GAAK,CAACF,EAAW,WAAW,KAAK,IAClDloB,EAAO,KAAOooB,EAAM,CAAC,EAAE,KAAK,GAE9B,QAAS,EAAI,EAAG,EAAIA,EAAM,OAAQ,GAAK,EAAG,CAClC,MAAAC,EAAkBD,EAAM,CAAC,EACzBE,EAAkBF,EAAM,EAAI,CAAC,EAC7BG,EAAeD,EAAkBA,EAAgB,QAAQ,OAAQ,EAAE,EAAI,OACvE3J,IAAUniB,EAAA4rB,EAAM,EAAI,CAAC,IAAX,YAAA5rB,EAAc,SAAU,GAExC,GAAI6rB,EAAiB,CAEb,MAAAhS,EAAa,SAASgS,EAAiB,EAAE,EAC1C,MAAMhS,CAAU,IACZrW,EAAA,mBAAmBqW,CAAU,EAAIsI,QAEjC4J,IAEFvoB,EAAA,gBAAgBuoB,CAAY,EAAI5J,EACzC,CAIE,GAAA,CAAC3e,EAAO,MACV,GAAI,OAAO,KAAKA,EAAO,kBAAkB,EAAE,OAAS,EAAG,CAC/C,MAAAwoB,EAAW,KAAK,IAAI,GAAG,OAAO,KAAKxoB,EAAO,kBAAkB,EAAE,IAAI,MAAM,CAAC,EACxEA,EAAA,KAAOA,EAAO,mBAAmBwoB,CAAQ,CAAA,SACvC,OAAO,KAAKxoB,EAAO,eAAe,EAAE,OAAS,EAAG,CACzD,MAAMyoB,EAAe,OAAO,KAAKzoB,EAAO,eAAe,EAAE,CAAC,EACnDA,EAAA,KAAOA,EAAO,gBAAgByoB,CAAY,CAAA,EAI9C,OAAAzoB,CAAA,CAMT,qBAAqB0oB,EAA6D,CAChF,MAAM1oB,EAAoC,CACxC,KAAM0oB,EAAc,CAAC,GAAK,GAC1B,mBAAoB,CAAE,GAAGA,CAAc,EACvC,gBAAiB,CAAA,CACnB,EAGI,OAAA1oB,EAAO,mBAAmB,CAAC,GACtB,OAAAA,EAAO,mBAAmB,CAAC,EAG7BA,CAAA,CAMT,qBACE2oB,EACAlY,EACQ,CAiBR,GAAIA,EAAQ,qBAAsB,CAChC,MAAMmY,EAAwB,KAAK,yBAAyBnY,EAAQ,oBAAoB,EACpF,GAAAkY,EAAgB,gBAAgBC,CAAqB,EAChD,OAAAD,EAAgB,gBAAgBC,CAAqB,CAC9D,CAIF,GAAInY,EAAQ,oBAAsBA,EAAQ,mBAAqB,IACzDkY,EAAgB,gBAAgB,qBAAqB,EAChD,OAAAA,EAAgB,gBAAgB,qBAAqB,EAK1D,MAAAE,EAAiB,KAAK,qBAAqBpY,CAAO,EACxD,GAAIoY,GAAkBF,EAAgB,gBAAgBE,CAAc,EAC3D,OAAAF,EAAgB,gBAAgBE,CAAc,EAIvD,MAAMC,EAAmB,KAAK,0BAA0BrY,EAAQ,iBAAiB,EACjF,GAAIqY,GAAoBH,EAAgB,gBAAgBG,CAAgB,EAC/D,OAAAH,EAAgB,gBAAgBG,CAAgB,EAIzD,GAAI,OAAO,KAAKH,EAAgB,kBAAkB,EAAE,OAAS,EAAG,CAC9D,MAAMI,EAAkB,OAAO,KAAKJ,EAAgB,kBAAkB,EACnE,IAAI,MAAM,EACV,KAAK,CAAChT,EAAGC,IAAMA,EAAID,CAAC,EAGjBqT,EAAYD,EAAgB,KAAcjV,GAAArD,EAAQ,YAAcqD,CAAK,EAC3E,GAAIkV,IAAc,OAIT,OAAAL,EAAgB,mBAAmBK,CAAS,EAG/C,MAAAC,EAAUF,EAAgB,CAAC,EAI1B,OAAAJ,EAAgB,mBAAmBM,CAAO,CAAA,CAOnD,OAAON,EAAgB,MAAQ,EAAA,CAMzB,yBAAyBO,EAAkC,CACjE,OAAQA,EAAe,CACrB,IAAK,YACI,MAAA,kBACT,IAAK,YACI,MAAA,mBACT,IAAK,gBACI,MAAA,sBACT,QACS,MAAA,EAAA,CACX,CAMM,qBAAqBzY,EAAiD,CACtE,KAAA,CAAE,eAAA0Y,EAAgB,kBAAAlV,CAAA,EAAsBxD,EAG1C,GAAA0Y,EAAe,QAAU,EAAG,CACxB,MAAAC,EAASD,EAAe,MAAM,EAAE,EAGlC,GAAAlV,EAAkB,QAAU,EAAG,CAC3B,MAAAoV,EAAcpV,EAAkB,MAAM,EAAE,EAE1C,GADgB,IAAI,IAAIoV,CAAW,EACvB,OAAS,EAChB,MAAA,iBACT,CAIE,GAAAD,EAAO,CAAC,IAAMA,EAAO,CAAC,GAAKA,EAAO,CAAC,IAAMA,EAAO,CAAC,EAC5C,MAAA,kBACT,CAGK,OAAA,IAAA,CAMD,0BAA0B3U,EAA0D,CAG1F,SAAW,CAACI,EAAWf,CAAK,IAAK,OAAO,QAAQW,CAAiB,EAC/D,GAAIX,GAAS,EAEX,OAAQe,EAAW,CACjB,IAAK,oBACL,IAAK,iBACI,MAAA,4BACT,IAAK,kBACL,IAAK,kBACI,MAAA,0BACT,IAAK,qBACL,IAAK,sBACI,MAAA,mBAEP,CAKD,OAAA,IAAA,CAMT,uBAAuBvX,EAAkB6Y,EAAyC,CAChF,MAAMnB,EAAO1X,EAAM,MAAM,KAAK6Y,CAAM,EAC9B/C,EAAc9V,EAAM,OAGtB,IAAAmoB,EACJ,GAAIrS,EAAY,KAAK,SAAS,OAAS,EAAG,CAClC,MAAAkW,EAAiBlW,EAAY,KAAK,SAASA,EAAY,KAAK,SAAS,OAAS,CAAC,EAC/EmW,EAAejsB,EAAM,MAAM,KAAKgsB,CAAc,EAChDC,IACF9D,EAAuB8D,EAAa,UACtC,CAII,MAAAtV,EAAiCb,EAAY,KAAK,SACrD,MAAM,EAAE,EACR,IAAI+C,GAAAA,OAAU,OAAA3Z,EAAAc,EAAM,MAAM,KAAK6Y,CAAM,IAAvB,YAAA3Z,EAA0B,UAAS,EACjD,OAAQ4Z,GAA4BA,IAAS,MAAS,EAGzD,IAAIoT,EAAqB,EACnB,MAAA5V,EAAcR,EAAY,KAAK,SAAS,OACxCqW,EAAc,IAAI,IAAIrW,EAAY,KAAK,QAAQ,EAAE,KACvD,OAAIQ,EAAc,IAChB4V,EAAqB,EAAKC,EAAc7V,GAGnC,CACL,YAAYoB,GAAA,YAAAA,EAAM,aAAc,EAChC,qBAAAyQ,EACA,eAAgBrS,EAAY,KAAK,SAAS,MAAM,EAAE,EAClD,kBAAAa,EACA,kBAAmBb,EAAY,KAAK,kBACpC,mBAAAoW,CACF,CAAA,CAEJ,CAGa,MAAAE,GAAwB,IAAIzB,mJCzNlC,MAAM0B,EAAsB,CAA5B,cACG7b,EAAA,aAA6B,CAAC,GAC9BA,EAAA,yBAAuC,CAAC,GAC/BA,EAAA,yBAAoB,GAAK,GAAK,KAC9BA,EAAA,yBAAoB,KAG7BA,EAAA,eAAU,CAChB,UAAW,EACX,YAAa,EACb,qBAAsB,EACtB,2BAA4B,EAC5B,iCAAkC,EAClC,gCAAiC,EACjC,qBAAsB,KAAK,IAAI,CACjC,GAMQ,qBAAqBsF,EAAkC,CAEvD,KAAA,CACJ,KAAM,CAAE,SAAAI,EAAU,kBAAAiB,CAAkB,EACpC,iBAAAmV,CAAA,EACExW,EAGE4S,EAAaxS,EAAS,MAAM,EAAE,EAAE,KAAK,GAAG,EAGxCqW,EAAgB,OAAO,QAAQpV,CAAiB,EACnD,KAAK,CAACkB,EAAGC,IAAMA,EAAE,CAAC,EAAID,EAAE,CAAC,CAAC,EAC1B,MAAM,EAAG,CAAC,EACV,IAAI,CAAC,CAACd,CAAS,IAAMA,CAAS,EAC9B,KAAK,GAAG,EAGLiV,EAAiB,OAAO,OAAOF,CAAgB,EAAE,KAAK,GAAG,EAE/D,MAAO,GAAG5D,CAAU,IAAI6D,CAAa,IAAIC,CAAc,EAAA,CAMjD,YAAY3T,EAAgBE,EAAoB0T,EAA6B,CACnF,MAAO,GAAG5T,CAAM,IAAIE,CAAU,IAAI0T,CAAW,EAAA,CASvC,YAAmB,CACnB,MAAAC,EAAM,KAAK,IAAI,EAGrB,GAAIA,EAAM,KAAK,QAAQ,qBAAuB,IAC5C,OAGF,KAAK,QAAQ,qBAAuBA,EAGpC,IAAIC,EAAU,OAAO,QAAQ,KAAK,KAAK,EAC7BA,EAAAA,EAAQ,OAAO,CAAC,EAAG5tB,CAAK,IAAM2tB,EAAM3tB,EAAM,WAAa,KAAK,iBAAiB,EAGnF4tB,EAAQ,OAAS,KAAK,oBAEhBA,EAAA,KAAK,CAAC,CAACC,EAAMC,CAAM,EAAG,CAACC,EAAMC,CAAM,IAAM,SAC/C,MAAMC,EAAUJ,EAAK,MAAM,GAAG,EAAE,CAAC,EAC3BK,EAAUH,EAAK,MAAM,GAAG,EAAE,CAAC,EAG3BI,IAAahuB,EAAA,KAAK,kBAAkB8tB,CAAO,IAA9B,YAAA9tB,EAAiC,YAAa,GAC3DiuB,IAAa/a,EAAA,KAAK,kBAAkB6a,CAAO,IAA9B,YAAA7a,EAAiC,YAAa,GACjE,OAAI8a,IAAeC,EAAmBA,EAAa,EAAI,GAGhDJ,EAAO,UAAYF,EAAO,SAAA,CAClC,EAGDF,EAAUA,EAAQ,MAAM,EAAG,KAAK,iBAAiB,GAI9C,KAAA,MAAQ,OAAO,YAAYA,CAAO,CAAA,CAK5B,0BACX1J,EACAnN,EACA+M,EAC6B,CAEvB,MAAAuK,EAA2CnK,EAAgB,IAAsB6C,GAAA,CACrF,KAAM,CAAE,SAAAoE,EAAU,WAAAmD,CAAA,EAAe,KAAK,yBAAyBvH,CAAc,EACvEwH,EAAoC,YAAYxH,EAAe,QAAQ,GAEtE,MAAA,CACL,eAAAA,EACA,SAAAoE,EACA,WAAAmD,EACA,cAAAC,CACF,CAAA,CACD,EAGKtX,EAAW2K,EAAa,4BAA4B7K,EAAa,CACrE,CAAC+M,EAAU,EAAE,EAAGA,CAAA,CACjB,EAEK9K,EAAuB4I,EAAa,6BAA6B7K,EAAa,CAClF,CAAC+M,EAAU,EAAE,EAAGA,CAAA,CACjB,EAGD,OAAAuK,EAAY,QAAgB/mB,GAAA,CACrB,KAAA,0BAA0BA,EAAM2P,CAAQ,EACxC,KAAA,4BAA4B3P,EAAM0R,EAAsB8K,CAAS,CAAA,CACvE,EAEMuK,CAAA,CAOD,iBAAiBnK,EAA2E,CAElG,MAAMsK,EAAiE,CAAC,EAExEtK,EAAgB,QAAgB5c,GAAA,CAC1BA,EAAK,gBACFknB,EAAkBlnB,EAAK,aAAa,IACrBknB,EAAAlnB,EAAK,aAAa,EAAI,CAAC,GAE3CknB,EAAkBlnB,EAAK,aAAa,EAAE,KAAKA,CAAI,EACjD,CACD,EAGD,MAAMmnB,EAAwC,CAAC,EAI5C,OAAAvK,EAAA,OAAe5c,GAAA,CAACA,EAAK,aAAa,EAClC,QAAgBA,GAAAmnB,EAAS,KAAKnnB,CAAI,CAAC,EAGtC,OAAO,OAAOknB,CAAiB,EAAE,QAAiBE,GAAA,CAC5CA,EAAM,OAAS,IAEjBA,EAAM,KAAK,CAAC,EAAGnV,IAAMA,EAAE,SAAW,EAAE,QAAQ,EACnCkV,EAAA,KAAKC,EAAM,CAAC,CAAC,EACxB,CACD,EAEMD,CAAA,CAMT,iCACEnM,EACA4B,EACAnN,EACA+M,EACQ,CACJ,GAAAI,EAAgB,SAAW,EACtB,OAAA5B,EAIT,IAAI+L,EAAc,KAAK,0BAA0BnK,EAAiBnN,EAAa+M,CAAS,EAG1EuK,EAAA,KAAK,iBAAiBA,CAAW,EAG/CA,EAAY,KAAK,CAAC/U,EAAGC,IAAMA,EAAE,SAAWD,EAAE,QAAQ,EAGlD,IAAI4P,EAAqB5G,EAEzB,OAAA+L,EAAY,QAAQ,CAAC,CAAE,eAAAtH,KAAqB,CAC1CmC,EAAqByC,GAAqB,wBACxCzC,EACAnC,CACF,CAAA,CACD,EAEMmC,CAAA,CAMF,qBAAqBpP,EAAgB6U,EAAoBxD,EAAmB,EAAS,CACrF,KAAK,kBAAkBrR,CAAM,IAC3B,KAAA,kBAAkBA,CAAM,EAAI,CAC/B,UAAW,GACX,qBAAsB,EACtB,uBAAwB,CAAC,EACzB,SAAAqR,CACF,GAIG,KAAA,kBAAkBrR,CAAM,EAAE,UAAY6U,EAEvCA,IACF,KAAK,kBAAkB7U,CAAM,EAAE,qBAAuB,KAAK,IAAI,EAG/D,KAAK,8BAA8BA,CAAM,EAC3C,CAMM,8BAA8BA,EAAsB,CACpD,MAAA8U,EAAU,KAAK,kBAAkB9U,CAAM,EACzC,CAAC8U,GAAW,CAACA,EAAQ,WAAaA,EAAQ,uBAAuB,SAAW,IAK3E,KAAA,QAAQ,iCAAmCA,EAAQ,uBAAuB,OAG/EA,EAAQ,uBAAyB,CAAC,EAAA,CAM7B,wBACL9U,EACAiN,EACM,CAWN,GAVK,KAAK,kBAAkBjN,CAAM,IAC3B,KAAA,kBAAkBA,CAAM,EAAI,CAC/B,UAAW,GACX,qBAAsB,EACtB,uBAAwB,CAAC,EACzB,SAAU,CACZ,GAIE,KAAK,kBAAkBA,CAAM,EAAE,UAAW,CAC5C,KAAK,QAAQ,kCACb,MAAA,CAIF,KAAK,kBAAkBA,CAAM,EAAE,uBAAuB,KAAKiN,CAAc,EACzE,KAAK,QAAQ,kCAAA,CAKf,4BACEjN,EACAwI,EACA4B,EACAnN,EACA+M,EACQ,CAER,GAAI,CAACI,GAAmBA,EAAgB,SAAW,EAC1C,OAAA5B,EAIT,GAAIA,EAAQ,SAAS,qBAAqB,GAAKA,EAAQ,SAAS,aAAa,EACnE,eAAA,IAAI,gEAAgExI,CAAM,qCAAqC,EAChHwI,EAIH,MAAAoL,EAAc,KAAK,qBAAqB3W,CAAW,EACnDyN,EAAW,KAAK,YAAY1K,EAAQgK,EAAU,WAAY4J,CAAW,EAG3E,KAAK,WAAW,EAGhB,MAAMmB,EAAgB,KAAK,qBAAqBrK,EAAU1K,EAAQwI,EAAS4B,CAAe,EAC1F,GAAI2K,EACK,OAAAA,EAIS3K,EAAA,KAAK,mCAAmCA,EAAiBpK,CAAM,EAGjF,MAAMoP,EAAqB,KAAK,iCAC9B5G,EACA4B,EACAnN,EACA+M,CACF,EAGA,YAAK,wBAAwBU,EAAUN,EAAiB5B,EAAS4G,EAAoBnS,EAAa+M,CAAS,EAEpGoF,CAAA,CAMD,qBACN1E,EACA1K,EACAwI,EACA4B,EACe,OACf,MAAMyK,IAAYxuB,EAAA,KAAK,kBAAkB2Z,CAAM,IAA7B,YAAA3Z,EAAgC,YAAa,GAE/D,OAAI,KAAK,MAAMqkB,CAAQ,GACnB,KAAK,MAAMA,CAAQ,EAAE,SACrB,KAAK,MAAMA,CAAQ,EAAE,QAAQ,OAASlC,EAAQ,QAChD,KAAK,QAAQ,YAET,CAACqM,GAAazK,EAAgB,OAAS,GACzC,KAAK,QAAQ,mCAGR,KAAK,MAAMM,CAAQ,EAAE,UAG9B,KAAK,QAAQ,cACN,KAAA,CAMD,mCACNN,EACApK,EACAgV,EAA6B,GACP,OACtB,IAAIC,EAA0B7K,EAW9B,GARI6K,EAAwB,OAASD,IAC3B,QAAA,KAAK,qDAAqDC,EAAwB,MAAM,cAAcjV,CAAM,iBAAiBgV,CAAkB,EAAE,EAC/HC,EAAAA,EAAwB,MAAM,EAAGD,CAAkB,GAM3E,IAHc3uB,EAAA,KAAK,kBAAkB2Z,CAAM,IAA7B,YAAA3Z,EAAgC,YAAa,KAG7C4uB,EAAwB,OAAS,EAAG,CACpDA,EAAwB,QAAaztB,GAAA,KAAK,wBAAwBwY,EAAQxY,CAAC,CAAC,EAG5E,MAAM0tB,EAA2BD,EAAwB,OACvDztB,GAAAA,EAAE,OAAS,WAAaA,EAAE,WAAa,MACzC,EAEI0tB,EAAyB,OAASD,EAAwB,SAClCA,EAAAC,EAC5B,CAGK,OAAAD,CAAA,CAMD,wBACNvK,EACAN,EACA5B,EACA4G,EACAnS,EACA+M,EACM,CACN,GAAIoF,IAAuB5G,EAAS,OAE9B,MAAA2M,EAAsB/K,EAAgB,IAAU5iB,IAAA,CACpD,SAAUA,EAAE,UAAY,GACxB,cAAeA,EAAE,KACjB,SAAU,KAAK,sBAAsBghB,EAAShhB,EAAE,UAAY,EAAE,CAAA,EAC9D,EAAE,OAAO4tB,GAAOA,EAAI,SAAS,CAAC,GAAK,CAAC,EAEjC,KAAA,MAAM1K,CAAQ,EAAI,CACrB,gBAAAN,EACA,UAAW,KAAK,IAAI,EACpB,QAASgF,EACT,oBAAA+F,EACA,SAAU,CACR,gBAAiB,KAAK,UAAU,CAC9B,KAAMlY,EAAY,KAAK,SAAS,MAAM,EAAE,EACxC,WAAY,OAAO,KAAKA,EAAY,KAAK,mBAAqB,CAAE,CAAA,CAAA,CACjE,EACD,cAAe,KAAK,UAAU,CAC5B,GAAI+M,EAAU,GACd,WAAYA,EAAU,UAAA,CACvB,EACD,WAAY,KAAK,kCAAkCI,CAAe,CAAA,CAEtE,CAAA,CAOM,sBAAsB5B,EAAiBhY,EAAoC,CACjF,GAAI,CAACA,GAAY,CAACgY,EAAgB,MAAA,CAAC,GAAI,EAAE,EAEnC,MAAA6M,EAAQ7M,EAAQ,QAAQhY,CAAQ,EACtC,OAAI6kB,IAAU,GAAW,CAAC,GAAI,EAAE,EAEzB,CAACA,EAAOA,EAAQ7kB,EAAS,MAAM,CAAA,CAOhC,kCAAkC4Z,EAA+C,CACnF,OAACA,EAAgB,OAEdA,EAAgB,OAAO,CAACkL,EAAO9tB,IAAM,SAE1C,IAAI+tB,EAAiB,EACrB,OAAQ/tB,EAAE,KAAM,CACd,IAAK,WAA6B+tB,EAAA,EAAG,MACrC,IAAK,YAA8BA,EAAA,EAAG,MACtC,IAAK,cAAgCA,EAAA,IAAK,MAC1C,IAAK,SAA2BA,EAAA,EAAG,MACnC,IAAK,UAA4BA,EAAA,EAAG,KAAA,CAItC,MAAMC,KAAenvB,EAAAmB,EAAE,WAAF,YAAAnB,EAAY,SAAU,MAAMkT,EAAA/R,EAAE,cAAF,YAAA+R,EAAe,SAAU,GACpEkc,EAAa,KAAK,IAAID,EAAc,EAAE,EAAI,KAAK,IAAI,EAAE,EAE3D,OAAOF,EAAQC,EAAiBE,GAC/B,CAAC,EAlBgC,CAkBhC,CAMN,sBAAsBrL,EAA+C,CACnE,OAAOA,EACJ,IAAI,GAAK,OAAA,SAAG,EAAE,IAAI,KAAI/jB,EAAA,EAAE,WAAF,YAAAA,EAAY,UAAU,EAAG,GAAG,GAAE,EACpD,KAAK,GAAG,CAAA,CAMb,0BAA0B+jB,EAA+D,CACvF,MAAMsL,EAAmC,CAAC,EAE1C,OAAAtL,EAAgB,QAA0B6C,GAAA,CACpC,GAAA,CAACA,EAAe,SAAU,OAE9B,MAAM0I,EAAoB1I,EAAe,SAAS,QAAQ,gBAAiB,GAAG,EAG9E,IAAI2I,EADc,6CAA6C3I,EAAe,IAAI,GAI5E,MAAA3M,EAAY2M,EAAe,WAAa,EAE9C,OAAQA,EAAe,KAAM,CAC3B,IAAK,UACU2I,GAAA,uBACT3I,EAAe,qBACJ2I,GAAA,wBAEf,MAEF,IAAK,WACUA,GAAA,yBACT3I,EAAe,gBACJ2I,GAAA,wBAAwB3I,EAAe,aAAa,IAEnE,MAEF,IAAK,SACU2I,GAAA,uBACT3I,EAAe,cACJ2I,GAAA,sBAAsB3I,EAAe,aAAe,SAAS,IAE5E,MAEF,IAAK,YACU2I,GAAA,yBACT3I,EAAe,WACJ2I,GAAA,wBAAwB3I,EAAe,QAAQ,IAG9D2I,GAAa,cAActV,CAAS,GACpC,MAEF,IAAK,cACUsV,GAAA,wBACT3I,EAAe,eACJ2I,GAAA,uBAAuB3I,EAAe,YAAY,IAEjE,KAAA,CAIJ2I,GAAa,uBAAuBD,EAAkB,UAAU,EAAG,EAAE,CAAC,GAE7DD,EAAAzI,EAAe,QAAQ,EAAI2I,CAAA,CACrC,EAEMF,CAAA,CAMT,uBACElN,EACA4B,EACQ,CACJ,GAAAA,EAAgB,SAAW,EAAU,OAAA5B,EAEnC,MAAAkN,EAAW,KAAK,0BAA0BtL,CAAe,EAC/D,IAAIyL,EAAiBrN,EAId,cAAA,QAAQkN,CAAQ,EAAE,QAAQ,CAAC,CAACllB,EAAUslB,CAAS,IAAM,CAE1D,MAAM7I,EAAiB7C,EAAgB,KAAU5iB,GAAAA,EAAE,WAAagJ,CAAQ,EACxE,GAAI,CAACyc,EAAgB,OAIjB,IAAAG,EAGJ,MAAM2I,EAAY;AAAA,+BACO9I,EAAe,IAAI;AAAA,yBACzB+I,EAAaxlB,EAAS,UAAU,EAAG,EAAE,CAAC,CAAC;AAAA,6BACnC,KAAK,qBAAqByc,CAAc,CAAC;AAAA,QAGhE,OAAQA,EAAe,KAAM,CAC3B,IAAK,UACL,IAAK,WACL,IAAK,YAEHG,EAAcH,EAAe,OAAS,UACpCA,EAAe,aAAe,GAC9Bzc,EAEFqlB,EAAiBA,EAAe,QAC9B,IAAI,OAAOG,EAAa5I,CAAW,EAAG,GAAG,EACzC,gBAAgB0I,CAAS,KAAKC,CAAS,IAAI3I,CAAW,SACxD,EACA,MAEF,IAAK,SAEH,GAAIH,EAAe,YAAa,CAC9B,MAAMgJ,EAAe,GAAGzlB,CAAQ,IAAIyc,EAAe,WAAW,GACxDe,EAAcf,EAAe,aAAe,UAClD,IAAIiJ,EAAiB,uBAEjBlI,IAAgB,SACDkI,EAAA,8BACRlI,IAAgB,SACRkI,EAAA,8BACRlI,IAAgB,cACRkI,EAAA,kCAGnBL,EAAiBA,EAAe,QAC9B,IAAI,OAAOG,EAAaC,CAAY,EAAG,GAAG,EAC1C,gBAAgBH,CAAS,KAAKC,CAAS,IAAIvlB,CAAQ,gBAAgB0lB,CAAc,KAAKjJ,EAAe,WAAW,gBAClH,CAAA,CAEF,MAEF,IAAK,cAEH,GAAIA,EAAe,YAAa,CACxB,MAAAkB,EAAelB,EAAe,cAAgB,SACpD,IAAIkJ,EAAe,qBAEfhI,IAAiB,WACJgI,EAAA,6BACNhI,IAAiB,aACXgI,EAAA,wBACNhI,IAAiB,gBACXgI,EAAA,0BAGjB,MAAM/H,EAAcnB,EAAe,YAC7BmJ,EAAgB,GAAG5lB,CAAQ,KAAK4d,CAAW,IAGjD,IAAIiI,EAAgB,GACpB,GAAIlI,IAAiB,WAAY,CACzB,MAAAE,EAAa,YAAYD,EAAY,UAAU,EAAG,EAAE,EAAE,QAAQ,MAAO,EAAE,CAAC,GAC9DiI,EAAA,gBAAgBP,CAAS,KAAKC,CAAS,IAAIvlB,CAAQ,YAAY6d,CAAU,gBAAgB8H,CAAY,oBAAA,MAC5GhI,IAAiB,aACVkI,EAAA,gBAAgBP,CAAS,qCAAqCC,CAAS,IAAIvlB,CAAQ,gBAAgB2lB,CAAY,KAAK/H,CAAW,iBACtID,IAAiB,cACVkI,EAAA,gBAAgBP,CAAS,sCAAsCC,CAAS,IAAIvlB,CAAQ,gBAAgB2lB,CAAY,KAAK/H,CAAW,iBAGhIiI,EAAA,gBAAgBP,CAAS,KAAKC,CAAS,IAAIvlB,CAAQ,gBAAgB2lB,CAAY,MAAM/H,CAAW,kBAGlHyH,EAAiBA,EAAe,QAC9B,IAAI,OAAOG,EAAaI,CAAa,EAAG,GAAG,EAC3CC,CACF,CAAA,CAEF,KAAA,CACJ,CACD,EAEMR,CAAA,CAMD,qBAAqB5I,EAA4C,CACvE,MAAMqJ,EAAe,KAAK,WAAWrJ,EAAe,UAAY,EAAE,EAC5DsJ,EAAWtJ,EAAe,KAAK,UAAU,EAAG,CAAC,EAC7CuJ,EAAYvJ,EAAe,YAC/B,KAAK,WAAWA,EAAe,WAAW,EAAE,UAAU,EAAG,CAAC,EAC1D,GAEK,MAAA,GAAGsJ,CAAQ,IAAID,CAAY,GAAGE,EAAY,IAAMA,EAAY,EAAE,EAAA,CAM/D,WAAW9H,EAAqB,CACtC,IAAIC,EAAO,EACX,QAASvmB,EAAI,EAAGA,EAAIsmB,EAAI,OAAQtmB,IAAK,CAC7B,MAAA6X,EAAOyO,EAAI,WAAWtmB,CAAC,EACpBumB,GAAAA,GAAQ,GAAKA,EAAQ1O,EAC9B0O,EAAOA,EAAOA,CAAA,CAET,OAAA,KAAK,IAAIA,CAAI,EAAE,SAAS,EAAE,EAAE,UAAU,EAAG,CAAC,CAAA,CAM3C,mBAAmB5E,EAA2DC,EAA4C,CAChI,MAAMI,EAAwC,CAAC,EAC/C,GAAIL,EAAU,SAAW,IAAOC,EAAU,eAAgB,CACxD,MAAMvB,EAAauB,EAAU,eAAe,MAAM;AAAA;AAAA,CAAM,EACpDvB,EAAW,OAAS,GACtB2B,EAAgB,KAAK,CACnB,KAAM,UACN,SAAU3B,EAAW,CAAC,EACtB,YAAa,GAAGA,EAAW,CAAC,CAAC,qDAC7B,SAAU,MAAA,CACX,CACH,CAEK,OAAA2B,CAAA,CAMD,qBAAqBL,EAA2DC,EAA4C,OAClI,MAAMI,EAAwC,CAAC,EAE7C,GAAAL,EAAU,SAAW,MACrB1jB,EAAA0jB,EAAU,UAAU,aAApB,YAAA1jB,EAAiC,MAAO2jB,EAAU,WAClDA,EAAU,eACV,CACA,MAAMvB,EAAauB,EAAU,eAAe,MAAM;AAAA;AAAA,CAAM,EACpDvB,EAAW,OAAS,GACtB2B,EAAgB,KAAK,CACnB,KAAM,YACN,SAAU3B,EAAW,CAAC,EACtB,SAAU,QACV,SAAU,QAAA,CACX,CACH,CAEK,OAAA2B,CAAA,CAMD,oBAAoBL,EAA2DC,EAA4C,CACjI,MAAMI,EAAwC,CAAC,EAC/C,GACEL,EAAU,SAAW,IACrBA,EAAU,UAAU,kBACpBC,EAAU,iBAEYA,EAAU,eAAiB,EAAI,OAASA,EAAU,eAAiB,EAAI,UAAY,YACnFD,EAAU,UAAU,iBAAkB,CAC1D,MAAMtB,EAAauB,EAAU,eAAe,MAAM;AAAA;AAAA,CAAM,EACpDvB,EAAW,OAAS,GACtB2B,EAAgB,KAAK,CACnB,KAAM,cACN,SAAU3B,EAAW,CAAC,EACtB,YAAa,qBAAqBsB,EAAU,UAAU,gBAAgB,cACtE,SAAU,KAAA,CACX,CACH,CAGG,OAAAK,CAAA,CAMD,0BAA0BL,EAA2DC,EAA4C,OACvI,MAAMI,EAAwC,CAAC,EAE7C,GAAAL,EAAU,SAAW,MACrB1jB,EAAA0jB,EAAU,UAAU,2BAApB,MAAA1jB,EAA+C,KAC/C2jB,EAAU,eACV,CACA,MAAMtL,EAAYqL,EAAU,UAAU,yBAAyB,CAAC,EAC1DtB,EAAauB,EAAU,eAAe,MAAM;AAAA;AAAA,CAAM,EACpDvB,EAAW,OAAS,GAAKuB,EAAU,kBAAkB,SAAStL,CAAS,GACzE0L,EAAgB,KAAK,CACnB,KAAM,SACN,SAAU3B,EAAW,CAAC,EACtB,YAAa,kBAAkB/J,EAAU,QAAQ,IAAK,GAAG,CAAC,uBAC1D,SAAU,MAAA,CACX,CACH,CAEK,OAAA0L,CAAA,CAOT,kCACEnN,EACA+M,EACsB,OACtB,KAAK,QAAQ,uBACP,MAAA4J,EAAc,KAAK,qBAAqB3W,CAAW,EACnDyN,EAAW,YAAYV,EAAU,EAAE,IAAIA,EAAU,UAAU,IAAI4J,CAAW,GAC5E,GAAA,KAAK,MAAMlJ,CAAQ,GAAK,KAAK,MAAMA,CAAQ,EAAE,gBAC/C,YAAK,QAAQ,YACN,KAAK,MAAMA,CAAQ,EAAE,gBAI9B,GAFA,KAAK,QAAQ,cAET,IADkBrkB,EAAA,KAAK,kBAAkB2jB,EAAU,EAAE,IAAnC,YAAA3jB,EAAsC,YAAa,KACnD2jB,EAAU,WAAa,EAAG,CAC9C,MAAMyM,EAA+C,CAAC,EACjD,YAAA,MAAM/L,CAAQ,EAAI,CACrB,gBAAiB+L,EACjB,UAAW,KAAK,IAAI,EAAK,KAAK,kBAAoB,EAClD,QAAS,EACX,EACOA,CAAA,CAEH,MAAAtZ,EAAW2K,EAAa,4BAA4B7K,EAAa,CACrE,CAAC+M,EAAU,EAAE,EAAGA,CAAA,CACjB,EACK9K,EAAuB4I,EAAa,6BAA6B7K,EAAa,CAClF,CAAC+M,EAAU,EAAE,EAAGA,CAAA,CACjB,EACK0M,EAAoB5O,EAAa,+BACrC3K,EACA+B,CACF,EACMkL,EAAwC,CAAC,EAE/C,OAAAsM,EAAkB,MAAM,EADU,CACkB,EAAE,QAAqB3M,GAAA,CACzE,IAAIlgB,EAA+B,CAAC,EACpC,OAAQkgB,EAAU,KAAM,CACtB,IAAK,eACMlgB,EAAA,KAAK,mBAAmBkgB,EAAWC,CAAS,EACrD,MACF,IAAK,iBACMngB,EAAA,KAAK,qBAAqBkgB,EAAWC,CAAS,EACvD,MACF,IAAK,gBACMngB,EAAA,KAAK,oBAAoBkgB,EAAWC,CAAS,EACtD,MACF,IAAK,gBAEH,MACF,IAAK,oBACL,IAAK,sBACMngB,EAAA,KAAK,0BAA0BkgB,EAAWC,CAAS,EAC5D,KAAA,CAEYI,EAAA,KAAK,GAAGvgB,CAAM,CAAA,CAC/B,EACMugB,CAAA,CAOJ,gCACHpK,EACA/C,EAAkD,SAGlD,MAAMyN,EAAW,WAAW1K,CAAM,IAAI/C,EAAY,KAAK,SAAS,MAAM,GAClE,GAAA,KAAK,MAAMyN,CAAQ,GAAK,KAAK,MAAMA,CAAQ,EAAE,gBACvC,eAAA,IAAI,yEAAyE1K,CAAM,EAAE,EACtF,KAAK,MAAM0K,CAAQ,EAAE,gBAG9B,MAAMN,EAAwC,CAAC,EAEzCuM,GAAetwB,EAAA4W,EAAY,KAAK,iBAAjB,YAAA5W,EAAiC,KAAUqL,GAAAA,EAAE,SAAWsO,GAC7E,GAAI,CAAC2W,EACK,eAAA,IAAI,sFAAsF3W,CAAM,EAAE,EACnGoK,EAGD,QAAA,IAAI,wEAAwEpK,CAAM,IAAK,CAC7F,WAAY/C,EAAY,KAAK,SAAS,OACtC,iBAAgB1D,EAAA0D,EAAY,KAAK,iBAAjB,YAAA1D,EAAiC,SAAU,EAC3D,iBAAkBod,EAAa,SAAA,CAChC,EACD,MAAM3B,EAAqB,EAGrBlT,EAAoB,KAAK,uBAAuB7E,CAAW,EACjE,GAAI6E,EAAkB,OAAS,GAAKsI,EAAgB,OAAS4K,EAAoB,CAC/E,MAAM4B,EAA2B,KAAK,sCAAsC9U,EAAmB9B,CAAM,EACrGoK,EAAgB,KAAK,GAAGwM,EAAyB,MAAM,EAAG,CAAC,CAAC,EACpD,QAAA,IAAI,iCAAiC,KAAK,IAAIA,EAAyB,OAAQ,CAAC,CAAC,oCAAoC,CAAA,CAI3H,GAAAxM,EAAgB,OAAS4K,EAAoB,CACzC,MAAA6B,EAAsB,KAAK,0BAA0B5Z,CAAW,EACtE,GAAI4Z,EAAoB,WAAY,CAClC,MAAMC,EAA4B,KAAK,yCAAyCD,EAAqB7W,CAAM,EAC3GoK,EAAgB,KAAK,GAAG0M,EAA0B,MAAM,EAAG,CAAC,CAAC,EACrD,QAAA,IAAI,iCAAiC,KAAK,IAAIA,EAA0B,OAAQ,CAAC,CAAC,uCAAuC,CAAA,CACnI,CAEE,GAAA1M,EAAgB,OAAS4K,EAAoB,CAC/C,MAAM+B,EAAkB,KAAK,+BAA+B9Z,EAAa0Z,CAAY,EAEjFI,EAAgB,OAAS,IAC3B3M,EAAgB,KAAK,GAAG2M,EAAgB,MAAM,EAAG,CAAC,CAAC,EAC3C,QAAA,IAAI,iCAAiC,KAAK,IAAIA,EAAgB,OAAQ,CAAC,CAAC,gCAAgC,EAClH,CAGF,eAAQ,IAAI,kEAAkE/W,CAAM,KAAKoK,EAAgB,MAAM,EAAE,EAG5G,KAAA,MAAMM,CAAQ,EAAI,CACrB,gBAAAN,EACA,UAAW,KAAK,IAAI,EACpB,QAAS,EACX,EAEOA,CAAA,CAQT,uBAAuBnN,EAKpB,CACD,MAAME,EAKD,CAAC,EAEAE,EAAWJ,EAAY,KAAK,SAC9B,GAAAI,EAAS,OAAS,EAAU,OAAAF,EAGhC,QAAS6Z,EAAY,EAAGA,GAAa,EAAGA,IAAa,CAC7C,MAAAC,MAAkB,IAGxB,QAAS,EAAI,EAAG,GAAK5Z,EAAS,OAAS2Z,EAAW,IAAK,CAE/C,MAAAjwB,EADcsW,EAAS,MAAM,EAAG,EAAI2Z,CAAS,EAC3B,KAAK,GAAG,EAE3BC,EAAY,IAAIlwB,CAAG,GACVkwB,EAAA,IAAIlwB,EAAK,EAAE,EAEzBkwB,EAAY,IAAIlwB,CAAG,EAAG,KAAK,CAAC,CAAA,CAIlBkwB,EAAA,QAAQ,CAACC,EAAWnwB,IAAQ,CAClC,GAAAmwB,EAAU,QAAU,EAAG,CACnB7Z,MAAAA,EAAWtW,EAAI,MAAM,GAAG,EACxBgc,EAAcmU,EAAU,OAGxBC,EAAcla,EAAY,KAAK,SAAS,OACxCma,EAAe,KAAK,IAAI,GAAGF,CAAS,EACpCxS,EAAgB,GAAKyS,EAAcC,GAAgBD,EAEnD5Z,EADkBwF,GAAeoU,EAAcH,EAAY,GAC7B,GAAQtS,EAAgB,GAExDnH,EAAW,IACbJ,EAAS,KAAK,CACZ,SAAAE,EACA,YAAA0F,EACA,SAAAxF,EACA,eAAgB6Z,CAAA,CACjB,CACH,CACF,CACD,CAAA,CAIH,OAAOja,EAAS,KAAK,CAACqC,EAAGC,IAAMA,EAAE,SAAWD,EAAE,QAAQ,EAAE,MAAM,EAAG,CAAC,CAAA,CAQpE,0BAA0BvC,EAMxB,CACA,MAAMqO,EAAgBrO,EAAY,KAAK,oBAAsB,CAAC,EACxDsB,EAAiBtB,EAAY,KAAK,gBAAkB,CAAC,EAEvD,GAAAsB,EAAe,OAAS,EACnB,MAAA,CAAE,WAAY,GAAO,SAAU,EAAG,cAAe,GAAI,aAAc,EAAG,SAAU,CAAA,CAAG,EAE5F,MAAMd,EAAcc,EAAe,OAC7B8Y,EAAc,CAClB,MAAQ/L,EAAyC,MAAQ,GAAK7N,EAC9D,SAAW6N,EAAyC,SAAW,GAAK7N,EACpE,QAAU6N,EAAyC,QAAU,GAAK7N,CACpE,EAGM6Z,EAAgB,OAAO,QAAQD,CAAW,EAC7C,KAAK,CAAC,CAAE,CAAA7X,CAAC,EAAG,CAAE,CAAAC,CAAC,IAAMA,EAAID,CAAC,EAAE,CAAC,EAAE,CAAC,EAC7B+X,EAAgBF,EAAYC,CAAyC,EAGrEna,EAAqB,CAAC,EAGxBoa,EAAgB,IACTpa,EAAA,KAAK,sBAAsBma,CAAa,EAAE,EAI/C,MAAAnT,EAAe5F,EAAe,MAAM,EAAE,EAC5C,IAAIiZ,EAAgB,EAEpB,QAASpvB,EAAI,EAAGA,EAAI+b,EAAa,OAAQ/b,IAAK,CAC5C,MAAMmhB,EAAOpF,EAAa/b,EAAI,CAAC,EAAE,cAC3BohB,EAAOrF,EAAa/b,CAAC,EAAE,cAEzBmhB,IAASC,GACXgO,GACF,CAGI,MAAAC,EAAYD,GAAiBrT,EAAa,OAAS,GACrDsT,EAAY,IACdta,EAAS,KAAK,wBAAwB,EAIxC,IAAIua,EAAsB,EAC1B,QAAStvB,EAAI,EAAGA,EAAI+b,EAAa,OAAQ/b,IAAK,CAC5C,MAAMuvB,EAAS,CACbxT,EAAa/b,EAAI,CAAC,EAAE,cACpB+b,EAAa/b,EAAI,CAAC,EAAE,cACpB+b,EAAa/b,CAAC,EAAE,aAClB,GAGKuvB,EAAO,CAAC,IAAM,UAAYA,EAAO,CAAC,IAAM,QACxCA,EAAO,CAAC,IAAM,UAAYA,EAAO,CAAC,IAAM,QACxCA,EAAO,CAAC,IAAM,WAAaA,EAAO,CAAC,IAAM,QAAUA,EAAO,CAAC,IAAM,WACpED,GACF,CAGEA,EAAsB,GACxBva,EAAS,KAAK,uBAAuB,EAIjC,MAAAI,EAAW,KAAK,IAAI,EAAGga,EAAiBE,EAAY,GAAQC,EAAsB,EAAI,EACtFE,EAAe,KAAK,IAAI,IAAOL,CAAa,EAAI,EAE/C,MAAA,CACL,WAAYha,EAAW,GACvB,SAAAA,EACA,cAAA+Z,EACA,aAAAM,EACA,SAAAza,CACF,CAAA,CAQG,+BACHF,EACA0Z,EACsB,CACtB,MAAMvM,EAAwC,CAAC,EAE3C,GAAA,CAACuM,EAAqB,OAAAvM,EAG1B,MAAM7L,EAAiBtB,EAAY,KAAK,gBAAkB,CAAC,EACrD4a,EAAetZ,EAAe,aAAe7M,EAAE,SAAWilB,EAAa,MAAM,EAEnF,GAAIkB,EAAe,EAAG,CACd,MAAAxP,EAAgB9J,EAAesZ,EAAe,CAAC,EAGrD,GAAIxP,EAAc,YAAcsO,EAAa,WACzCtO,EAAc,gBAAkBsO,EAAa,cAAe,CAE9D,MAAMmB,EAAmB,KAAK,oBAC5BzP,EAAc,cACdsO,EAAa,aACf,EAYA,OAVAvM,EAAgB,KAAK,CACnB,KAAM,cACN,SAAU,kBACV,YAAa,0BAA0B/B,EAAc,aAAa,IAAIsO,EAAa,aAAa,YAAYtO,EAAc,SAAS,IAAIsO,EAAa,SAAS,GAC7J,aAAc,aACd,UAAW,EACX,SAAU,QAAA,CACX,EAGOmB,EAAkB,CACxB,IAAK,iBACH1N,EAAgB,KAAK,CACnB,KAAM,YACN,SAAU,OACV,SAAU,SACV,UAAW,EACX,SAAU,KAAA,CACX,EACD,MAEF,IAAK,iBACHA,EAAgB,KAAK,CACnB,KAAM,WACN,SAAU,SACV,gBAAiB,IACjB,cAAe,cACf,UAAW,EACX,SAAU,KAAA,CACX,EACD,KAAA,CACJ,CACF,CAGK,OAAAA,CAAA,CAKD,sCACNjN,EACA6C,EACsB,CACtB,MAAMoK,EAAwC,CAAC,EAE/C,OAAAjN,EAAS,QAAmBuC,GAAA,CACtBA,EAAQ,SAAS,SAASM,CAAM,IAClCoK,EAAgB,KAAK,CACnB,KAAM,cACN,SAAU,oBACV,YAAa,4BAA4B1K,EAAQ,SAAS,KAAK,GAAG,CAAC,MAAMA,EAAQ,WAAW,IAC5F,aAAc,aACd,UAAW,KAAK,KAAKA,EAAQ,SAAW,CAAC,EACzC,SAAU,QAAA,CACX,EAGGA,EAAQ,SAAW,IACrB0K,EAAgB,KAAK,CACnB,KAAM,YACN,SAAU,UACV,SAAU,QACV,UAAW,KAAK,KAAK1K,EAAQ,SAAW,CAAC,EACzC,SAAU,QAAA,CACX,EAEL,CACD,EAEM0K,CAAA,CAKD,yCACN2N,EACA/X,EACsB,CACtB,MAAMoK,EAAwC,CAAC,EAG/C,OAAAA,EAAgB,KAAK,CACnB,KAAM,cACN,SAAU,qBACV,YAAa,uCAAuCpK,CAAM,KAAK+X,EAAU,aAAa,mBACtF,aAAc,cACd,UAAW,KAAK,KAAKA,EAAU,SAAW,CAAC,EAC3C,SAAU,QAAA,CACX,EAGSA,EAAA,SAAS,QAAmBrY,GAAA,CACpC,OAAQA,EAAS,CACf,IAAK,yBACH0K,EAAgB,KAAK,CACnB,KAAM,WACN,SAAU,OACV,gBAAiB,KACjB,cAAe,SACf,UAAW,EACX,SAAU,KAAA,CACX,EACD,MAEF,IAAK,wBACHA,EAAgB,KAAK,CACnB,KAAM,UACN,SAAU,aACV,YAAa,wBACb,mBAAoB,GACpB,UAAW,EACX,SAAU,KAAA,CACX,EACD,MAEF,QACM,GAAA1K,EAAQ,WAAW,qBAAqB,EAAG,CAC7C,MAAMzB,EAAQyB,EAAQ,QAAQ,sBAAuB,EAAE,EACvD0K,EAAgB,KAAK,CACnB,KAAM,YACN,SAAUnM,EACV,SAAU,QACV,UAAW,EACX,SAAU,QAAA,CACX,CAAA,CACH,CACJ,CACD,EAEMmM,CAAA,CAMD,oBAAoB4N,EAAmBC,EAAyB,CACtE,MAAMC,EAAa,CAAE,KAAM,EAAG,QAAS,EAAG,OAAQ,CAAE,EAC9CC,EAAYD,EAAWF,CAAoC,EAAYI,EAAUF,EAAWD,CAAkC,EAEpI,OAAIE,EAAYC,EAAgB,GAAGJ,CAAS,OAAOC,CAAO,GACtDE,EAAYC,EAAgB,GAAGJ,CAAS,OAAOC,CAAO,GACnD,YAAA,CAMD,yBAAyBhL,EAA+G,CAC9I,IAAIoE,EAAW,GACXmD,EAAsD,YAE1D,OAAQvH,EAAe,KAAM,CAC3B,IAAK,UACQoE,EAAA,GACEmD,EAAA,UACb,MAEF,IAAK,WACQnD,EAAA,GACEmD,EAAA,SACb,MAEF,IAAK,SACQnD,EAAA,GACEmD,EAAA,YACb,MAEF,IAAK,YACQnD,EAAA,GACEmD,EAAA,WACb,MAEF,IAAK,cACQnD,EAAA,GACEmD,EAAA,YACb,KAAA,CAGG,MAAA,CAAE,SAAAnD,EAAU,WAAAmD,CAAW,CAAA,CAKxB,0BACNhnB,EACA2P,EACM,CACF,GAAA3P,EAAK,aAAe,UAAW,CAC3B,MAAA6qB,EAAkBlb,EAAS,KAAK7Q,GACpCA,EAAE,OAAS,YAAcA,EAAE,SAAW,EAAG,EACvC+rB,IACF7qB,EAAK,UAAY,KAAK,MAAM6qB,EAAgB,SAAW,EAAE,EAC3D,CACF,CAKM,4BACN7qB,EACA0R,EACA8K,EACM,CACN,GAAIxc,EAAK,aAAe,aAAeA,EAAK,eAAe,SAAU,CACnE,MAAM8qB,EAAmBpZ,EAAqB,KAC5CU,GAAA,OAAA,QAAAvZ,EAAA2jB,EAAU,iBAAV,YAAA3jB,EAA0B,SAASmH,EAAK,eAAe,YACvDwc,EAAU,kBAAkB,SAASpK,EAAW,SAAS,EAC3D,EAEI0Y,GAAoBA,EAAiB,gBAAkB,KACzD9qB,EAAK,UAAY,KAAK,OAAO8qB,EAAiB,gBAAkB,IAAM,CAAC,EACzE,CACF,CAEJ,CAKA,SAAStC,EAAavH,EAAwB,CACrC,OAAAA,EAAO,QAAQ,sBAAuB,MAAM,CACrD,CAGa,MAAA8J,GAAwB,IAAI/E,GCrzCnCtd,GAA2B,CAC/B,KAAM,CAAC,EACP,YAAa,GACb,QAAS,GACT,MAAO,KACP,kBAAmB,EACrB,EAGMsiB,GAA0B,CAC9B,CACE,GAAI,iBACJ,MAAO,oBACP,UAAW,gBACX,cAAe,EACf,mBAAoB,CAAC,iBAAkB,iBAAiB,EACxD,cAAe,oBACf,YAAa,4IACb,kBAAmB,CAAC,oBAAqB,kBAAmB,qBAAqB,EACjF,yBAA0B,CACxB,MAAO,EACP,QAAS,EACT,QAAS,EACT,WAAY,CAAA,CAEhB,EACA,CACE,GAAI,YACJ,MAAO,6BACP,UAAW,gBACX,cAAe,EACf,mBAAoB,CAAC,iBAAkB,mBAAoB,mBAAmB,EAC9E,cAAe,eACf,YAAa,8JACb,kBAAmB,CAAC,qBAAqB,EAAM,yBAA0B,CACvE,MAAO,EACP,QAAS,EACT,QAAS,EACT,WAAY,CAAA,CAEhB,EACA,CACE,GAAI,cACJ,MAAO,mBACP,UAAW,gBACX,cAAe,EACf,mBAAoB,CAAC,YAAa,mBAAoB,mBAAmB,EACzE,cAAe,iBACf,YAAa,0KACb,kBAAmB,CAAC,kBAAmB,mBAAoB,gBAAgB,EAC3E,yBAA0B,CACxB,MAAO,EACP,QAAS,EACT,QAAS,EACT,WAAY,CAAA,CAEhB,EACA,CACE,GAAI,cACJ,MAAO,sBACP,UAAW,gBACX,cAAe,EACf,mBAAoB,CAAC,YAAa,iBAAkB,cAAc,EAClE,cAAe,iBACf,YAAa,2KACb,kBAAmB,CAAC,uBAAwB,eAAgB,wBAAwB,EACpF,yBAA0B,CACxB,MAAO,EACP,QAAS,EACT,QAAS,EACT,WAAY,CACd,EACA,WAAY,GACZ,oBAAqB,MACvB,EACA,CACE,GAAI,iBACJ,MAAO,sBACP,UAAW,YACX,cAAe,EACf,mBAAoB,CAAC,iBAAkB,mBAAoB,iBAAiB,EAC5E,cAAe,oBACf,YAAa,mKACb,kBAAmB,CAAC,oBAAqB,kBAAkB,EAC3D,yBAA0B,CACxB,MAAO,EACP,QAAS,EACT,QAAS,EACT,WAAY,CAAA,CAEhB,EACA,CACE,GAAI,mBACJ,MAAO,wBACP,UAAW,YACX,cAAe,EACf,mBAAoB,CAAC,iBAAkB,YAAa,oBAAqB,gBAAgB,EACzF,cAAe,sBACf,YAAa,8JACb,kBAAmB,CAAC,mBAAoB,sBAAuB,oBAAoB,EACnF,yBAA0B,CACxB,MAAO,EACP,QAAS,EACT,QAAS,EACT,WAAY,CAAA,CAEhB,EACA,CACE,GAAI,iBACJ,MAAO,oBACP,UAAW,YACX,cAAe,EACf,mBAAoB,CAAC,mBAAoB,cAAe,cAAc,EACtE,cAAe,oBACf,YAAa,sKACb,kBAAmB,CAAC,4BAA6B,iBAAkB,qBAAqB,EACxF,yBAA0B,CACxB,MAAO,EACP,QAAS,EACT,QAAS,EACT,WAAY,CACd,EACA,WAAY,GACZ,oBAAqB,SACvB,EACA,CACE,GAAI,kBACJ,MAAO,kBACP,UAAW,YACX,cAAe,EACf,mBAAoB,CAAC,iBAAkB,iBAAkB,mBAAmB,EAC5E,cAAe,qBACf,YAAa,sJACb,kBAAmB,CAAC,sBAAuB,kBAAmB,kBAAkB,EAChF,yBAA0B,CACxB,MAAO,EACP,QAAS,EACT,QAAS,EACT,WAAY,CAAA,CAEhB,EACA,CACE,GAAI,oBACJ,MAAO,iBACP,UAAW,YACX,cAAe,EACf,mBAAoB,CAAC,kBAAmB,YAAa,mBAAoB,cAAc,EACvF,cAAe,uBACf,YAAa,6JACb,kBAAmB,CAAC,gBAAiB,iBAAiB,EACtD,yBAA0B,CACxB,MAAO,EACP,QAAS,EACT,QAAS,EACT,WAAY,CAAA,CAEhB,EACA,CACE,GAAI,eACJ,MAAO,mBACP,UAAW,YACX,cAAe,EACf,mBAAoB,CAAC,oBAAqB,cAAe,gBAAgB,EACzE,cAAe,kBACf,YAAa,wJACb,kBAAmB,CAAC,uBAAwB,iBAAkB,gBAAgB,EAAM,yBAA0B,CAC5G,MAAO,EACP,QAAS,EACT,QAAS,EACT,WAAY,CACd,EACA,WAAY,GACZ,oBAAqB,QACvB,EACA,CACE,GAAI,uBACJ,MAAO,uBACP,UAAW,gBACX,cAAe,EACf,mBAAoB,CAAC,iBAAkB,iBAAiB,EACxD,cAAe,0BACf,YAAa,kHACb,kBAAmB,CAAC,kBAAmB,kBAAkB,EACzD,yBAA0B,CACxB,MAAO,EACP,QAAS,EACT,QAAS,EACT,WAAY,CAAA,CACd,CAEJ,EAEaC,GAAkBxgB,GAC7B,mBACA,MAAOoB,EAAG,CAAE,gBAAAqf,KAAsB,CAC5B,GAAA,CAGK,OAAAF,EAAA,MACD,CACN,OAAOE,EAAgB,4BAA4B,CAAA,CACrD,CAEJ,EAEaC,GAAkB1gB,GAC7B,oBACA,MAAO+H,EAAgB,CAAE,SAAA9O,EAAU,gBAAAwnB,KAAsB,OACnD,GAAA,CAEF,MAAM7Z,EADQ3N,EAAS,EACJ,MAAM,KAAK8O,CAAM,EACpC,GAAI,CAACnB,EACI,OAAA6Z,EAAgB,gBAAgB1Y,CAAM,YAAY,EAE3D,MAAM4Y,EAAW,MAAM,MAAM,gBAAgB/Z,EAAK,aAAa,EAAE,EAC7D,GAAA,CAAC+Z,EAAS,GACZ,MAAM,IAAI,MAAM,+BAA+B/Z,EAAK,aAAa,EAAE,EAE/D,MAAAga,EAAO,MAAMD,EAAS,KAAK,EAG3BpG,EAAkBe,GAAsB,qBAAqBsF,CAAI,EAKjErQ,EAA6B,CAAC,EAC9ByJ,EAAQ4G,EAAK,MAAM,cAAc,EAEnC5G,EAAM,OAAS,GAAK,CAAC4G,EAAK,WAAW,MAAM,IAC3CrQ,EAAQ,CAAC,EAAIyJ,EAAM,CAAC,EAAE,KAAK,GAG/B,QAAS7pB,EAAI,EAAGA,EAAI6pB,EAAM,OAAQ7pB,GAAK,EAAG,CACxC,MAAM8X,EAAa,SAAS+R,EAAM7pB,CAAC,EAAG,EAAE,EAClC0wB,IAAczyB,EAAA4rB,EAAM7pB,EAAI,CAAC,IAAX,YAAA/B,EAAc,SAAU,GACvC,MAAM6Z,CAAU,IACjBsI,EAAQtI,CAAU,EAAI4Y,EAC1B,CAGF,OAAI,OAAO,KAAKtQ,CAAO,EAAE,SAAW,IAC1BA,EAAA,CAAC,EAAIqQ,EAAK,KAAK,GAGlB,CAAE,OAAA7Y,EAAQ,QAAAwI,EAAS,gBAAAgK,CAAgB,QACnC1sB,EAAgB,CACvB,MAAMizB,EAAUjzB,aAAiB,MAAQA,EAAM,QAAU,OAAOA,CAAK,EACrE,OAAO4yB,EAAgB,mCAAmC1Y,CAAM,KAAK+Y,CAAO,EAAE,CAAA,CAChF,CAEJ,EAEMC,GAAa1c,GAAY,CAC7B,KAAM,QAAA,aACNpG,GACA,SAAU,CACR,UAAW,CAAC/O,EAAOiK,IAAkC,CACnD,MAAM4O,EAAS5O,EAAO,QAChByN,EAAO1X,EAAM,KAAK6Y,CAAM,EAM9B,GAJI7Y,EAAM,oBACRA,EAAM,kBAAoB,IAGxB0X,GAcF,GAZAA,EAAK,YAAc,EAGfA,EAAK,aAAe,EACtBA,EAAK,aAAe,UACXA,EAAK,YAAcA,EAAK,yBAAyB,WAC1DA,EAAK,aAAe,aACXA,EAAK,YAAcA,EAAK,yBAAyB,QAC1DA,EAAK,aAAe,UACXA,EAAK,YAAcA,EAAK,yBAAyB,UAC1DA,EAAK,aAAe,aAElBA,EAAK,gBAAiB,CAGpB,IAAAoa,EAAkBpa,EAAK,gBAAgB,KAG3C,GAAI,OAAO,KAAKA,EAAK,gBAAgB,kBAAkB,EAAE,OAAS,EAAG,CAInE,MAAMgU,EAHkB,OAAO,KAAKhU,EAAK,gBAAgB,kBAAkB,EACxE,IAAI,MAAM,EACV,KAAK,CAACW,EAAGC,IAAMA,EAAID,CAAC,EACW,KAAc7B,GAAAkB,EAAK,YAAclB,CAAK,EACpEkV,IAAc,SACEoG,EAAApa,EAAK,gBAAgB,mBAAmBgU,CAAS,EACrE,CAGFhU,EAAK,eAAiBoa,CAAA,SACbpa,EAAK,QAAS,CAEvB,MAAM+T,EAAkB,OAAO,KAAK/T,EAAK,OAAO,EAC7C,IAAI,MAAM,EACV,KAAK,CAACW,EAAGC,IAAMA,EAAID,CAAC,EACjB0Z,EAAY,KAAK,IAAI,EAAGra,EAAK,WAAa,CAAC,EAC3CgU,EAAYD,EAAgB,KAAKjV,GAASub,GAAavb,CAAK,EAC9DkV,IAAc,SAEXhU,EAAA,eAAiBA,EAAK,QAAQgU,CAAS,EAC9C,EAGN,EAGA,iBAAkB,CAAC1rB,EAAOiK,IAAgE,CACxF,KAAM,CAAE,OAAA4O,EAAQ,SAAAmZ,CAAS,EAAI/nB,EAAO,QAC9ByN,EAAO1X,EAAM,KAAK6Y,CAAM,EAE1BnB,GAAQ,CAACA,EAAK,oBAAoB,SAASsa,CAAQ,GAChDta,EAAA,oBAAoB,KAAKsa,CAAQ,CAE1C,EAGA,oBAAqB,CAAChyB,EAAOiK,IAGtB,CACL,KAAM,CAAE,OAAA4O,EAAQ,eAAAiN,CAAe,EAAI7b,EAAO,QACpCyN,EAAO1X,EAAM,KAAK6Y,CAAM,EAE1BnB,IAEoBA,EAAK,gBAAgB,KACzCrX,GAAK,KAAK,UAAUA,EAAE,SAAS,IAAM,KAAK,UAAUylB,EAAe,SAAS,CAC9E,GAEOpO,EAAA,gBAAgB,KAAKoO,CAAc,EAG9C,EAGA,4BAA6B,CAAC9lB,EAAOiK,IAG9B,CACL,KAAM,CAAE,OAAA4O,EAAQ,YAAA/C,CAAY,EAAI7L,EAAO,QACjCyN,EAAO1X,EAAM,KAAK6Y,CAAM,EAE9B,GAAKnB,EAED,GAAA,CAEF,MAAMmQ,EAAwBjH,GAAsB,sBAAsBlJ,EAAM5B,CAAW,EAGrF0T,EAAsD3B,EAAsB,IAAeE,IAAA,CAC/F,UAAW,CAAE,eAAgB,EAAK,EAClC,gBAAiB,CAACA,EAAO,cAAc,CAAA,EACvC,EAGIkK,EAAyBb,GAAsB,gCACnDvY,EACA/C,CACF,EAGMoc,EAAmDD,EAAuB,IAAuBnM,IAAA,CACrG,UAAW,CAAE,WAAYpO,EAAK,UAAW,EACzC,gBAAiB,CAACoO,CAAc,CAAA,EAChC,EAGkB,CAAC,GAAG0D,EAA+B,GAAG0I,CAA0B,EAExE,QAAgBxM,GAAA,CAEJhO,EAAK,gBAAgB,QACpC,KAAK,UAAUrX,EAAE,SAAS,IAAM,KAAK,UAAUqlB,EAAK,SAAS,GAC7D,KAAK,UAAUrlB,EAAE,eAAe,IAAM,KAAK,UAAUqlB,EAAK,eAAe,CAChF,GAEOhO,EAAA,gBAAgB,KAAKgO,CAAI,CAChC,CACD,EAGD,MAAMyM,EAAiC,CACrC,qBAAsBrc,EAAY,KAAK,gBAAkBA,EAAY,KAAK,eAAe,OAAS,EAC9FA,EAAY,KAAK,eAAeA,EAAY,KAAK,eAAe,OAAS,CAAC,EAAE,UAC5E,OACJ,eAAgBA,EAAY,KAAK,SAAS,MAAM,EAAE,EAClD,mBAAoBA,EAAY,KAAK,SAAS,OAAS,EACnD,EAAK,IAAI,IAAIA,EAAY,KAAK,QAAQ,EAAE,KAAOA,EAAY,KAAK,SAAS,OACzE,EACJ,qBAAsB+R,EAAsB,OAAS,CACvD,EAEAnQ,EAAK,eAAiBya,EAEd,QAAA,IAAI,yDAAyDtZ,CAAM,IAAK,CAC9E,sBAAuBgP,EAAsB,OAC7C,uBAAwBoK,EAAuB,OAC/C,qBAAsBva,EAAK,gBAAgB,OAC3C,eAAAya,CAAA,CACD,QAEMxzB,EAAO,CACd,QAAQ,MAAM,gEAAgEka,CAAM,IAAKla,CAAK,CAAA,CAElG,EACA,wBAAyB,CAACqB,EAAOiK,IAG1B,CACL,KAAM,CAAE,OAAA4O,EAAQ,YAAA/C,CAAY,EAAI7L,EAAO,QACjCyN,EAAO1X,EAAM,KAAK6Y,CAAM,EAE9B,GAAInB,GAAQA,EAAK,SAAWA,EAAK,gBAAgB,OAAS,EAAG,CAE3D,MAAM+T,EAAkB,OAAO,KAAK/T,EAAK,OAAO,EAC7C,IAAI,MAAM,EACV,KAAK,CAACW,EAAGC,IAAMA,EAAID,CAAC,EAEjB0Z,EAAY,KAAK,IAAI,EAAGra,EAAK,WAAa,CAAC,EAC3CgU,EAAYD,EAAgB,KAAKjV,GAASub,GAAavb,CAAK,EAClE,GAAIkV,IAAc,OAAW,CACrB,MAAA5B,EAAcpS,EAAK,QAAQgU,CAAS,EAGpC0G,EAA+D,CACnE,oBAAqB,EACrB,kBAAmB,EACnB,sBAAuB,EACvB,mBAAoB,EACpB,oBAAqB,EACrB,mBAAoB,EACpB,sBAAuB,EACvB,qBAAsB,EACtB,4BAA6B,EAC7B,iBAAkB,EAClB,sBAAuB,EACvB,uBAAwB,EACxB,eAAgB,EAChB,yBAA0B,EAC1B,kBAAmB,EACnB,mBAAoB,EACpB,sBAAuB,EACvB,gBAAiB,EACjB,kBAAmB,EACnB,iBAAkB,CACpB,EAGMC,EAAmC,CACvC,KAAMvc,EAAY,KAClB,cAAeA,EAAY,cAC3B,eAAgBA,EAAY,KAAK,SAAS,OAAS,EACjDA,EAAY,KAAK,SAASA,EAAY,KAAK,SAAS,OAAS,CAAC,EAAI,KACpE,iBAAkBA,EAAY,iBAE9B,oBAAqB,CACnB,GAAGsc,EACH,GAAGtc,EAAY,KAAK,iBAAA,CAExB,EAGMwc,EAA4B5a,EAAK,gBACpC,UACCgT,GAAqB,kBAAkBhF,EAAK,UAAW2M,EAAqB3a,CAAI,CAEjF,EAAA,QAAgBgO,GAAAA,EAAK,eAAe,EAGnC4M,EAA0B,OAAS,EACrC5a,EAAK,eAAiBgT,GAAqB,qBACzCZ,EACAwI,CACF,EAEA5a,EAAK,eAAiBoS,CACxB,CACF,CACG,EACP,qBAAsB,CAAC9pB,EAAOiK,IAIvB,CACL,KAAM,CAAE,OAAA4O,EAAQ,QAAA1F,EAAS,gBAAA2e,GAAoB7nB,EAAO,QAC9CyN,EAAO1X,EAAM,KAAK6Y,CAAM,EAE1B,GAAAnB,GAAQA,EAAK,gBAEf,GAAIoa,EACFpa,EAAK,eAAiBoa,MACjB,CAEL,MAAMS,EAA2C,CAC/C,WAAY7a,EAAK,WACjB,qBAAsB,OACtB,eAAgB,CAAC,EACjB,kBAAmB,CAAC,EACpB,kBAAmB,CAAC,EACpB,mBAAoB,CACtB,EAGM8a,EAAmBrf,GAAWof,EAGpC7a,EAAK,eAAiB0U,GAAsB,qBAAqB1U,EAAK,gBAAiB8a,CAAgB,CAAA,CAG7G,EAEA,WAAaxyB,GAAU,CACrB,OAAO,KAAKA,EAAM,IAAI,EAAE,QAAkB6Y,GAAA,CAClC,MAAAnB,EAAO1X,EAAM,KAAK6Y,CAAM,EAC9BnB,EAAK,WAAa,EAClBA,EAAK,aAAe,YACpBA,EAAK,oBAAsB,CAAC,GAAGA,EAAK,kBAAkB,EACtDA,EAAK,gBAAkB,CAAC,EACxBA,EAAK,QAAU,KACfA,EAAK,gBAAkB,KACvBA,EAAK,eAAiB,IAAA,CACvB,EACD1X,EAAM,kBAAoB,EAC5B,EAGA,mBAAoB,CAACA,EAAOiK,IAAkC,OAC5D,MAAM4O,EAAS5O,EAAO,QAChByN,EAAO1X,EAAM,KAAK6Y,CAAM,EAE1BnB,GAAQA,EAAK,iBACP,QAAA,IAAI,4DAA4DmB,CAAM,IAAK,CACjF,eAAgBnB,EAAK,gBAAgB,OACrC,gBAAexY,EAAAwY,EAAK,iBAAL,YAAAxY,EAAqB,SAAU,EAC9C,oBAAqBwY,EAAK,mBAAA,CAC3B,EAGDA,EAAK,eAAiBA,EAAK,gBAC3BA,EAAK,uBAAyB,KAC9BA,EAAK,yBAA2B,CAAC,EACjCA,EAAK,oBAAsB,QACtBA,EAAA,gBAAkBA,EAAK,gBAAkB,GAAK,GAE3C,QAAA,MAAM,wDAAwDmB,CAAM,kCAAkC,CAElH,EAGA,oBAAqB,CAAC7Y,EAAOiK,IAAkC,CAC7D,MAAM4O,EAAS5O,EAAO,QAChByN,EAAO1X,EAAM,KAAK6Y,CAAM,EAE1BnB,GAAQA,EAAK,iBAEbA,EAAK,eAAe,SAAS,iBAAiB,GAC9CA,EAAK,eAAe,SAAS,WAAW,GACxCA,EAAK,eAAe,SAAS,sDAAsD,GACnFA,EAAK,eAAe,MAAM,iBAAiB,GAC3CA,EAAK,eAAe,OAAS,IAIrB,QAAA,KAAK,oDAAoDmB,CAAM,IAAK,CAC1E,cAAenB,EAAK,eAAe,OACnC,eAAgBA,EAAK,eAAe,UAAU,EAAG,GAAG,CAAA,CACrD,EACDA,EAAK,oBAAsB,aAE3BA,EAAK,oBAAsBA,EAAK,yBAAyB,OAAS,EAAI,cAAgB,QAE1F,CAEJ,EACA,cAAgBhJ,GAAY,CAE1BA,EAAQ,QAAQ4iB,GAAgB,QAAUtxB,GAAU,CAClDA,EAAM,QAAU,GAChBA,EAAM,MAAQ,IAAA,CACf,EACD0O,EAAQ,QAAQ4iB,GAAgB,UAAW,CAACtxB,EAAOiK,IAAW,CAC5DjK,EAAM,QAAU,GAChBA,EAAM,YAAc,GAEbiK,EAAA,QAAQ,QAAgByN,GAAA,CAAe1X,EAAA,KAAK0X,EAAK,EAAE,EAAI,CAC1D,GAAGA,EACH,WAAY,EACZ,WAAY,YACZ,aAAc,YACd,oBAAqB,CAAC,GAAGA,EAAK,kBAAkB,EAChD,gBAAiB,CAAC,EAClB,QAAS,KACT,gBAAiB,KACjB,eAAgB,KAGhB,gBAAiB,KACjB,uBAAwB,KACxB,yBAA0B,CAAC,EAC3B,eAAgB,EAChB,oBAAqB,OACvB,CAAA,CACD,CAAA,CACF,EACDhJ,EAAQ,QAAQ4iB,GAAgB,SAAU,CAACtxB,EAAOiK,IAAW,CAC3DjK,EAAM,QAAU,GAChBA,EAAM,MAAQiK,EAAO,OAAA,CACtB,EAEDyE,EAAQ,QAAQ8iB,GAAgB,QAAUxxB,GAAU,CAClDA,EAAM,QAAU,EAAA,CACjB,EAAM0O,EAAQ,QAAQ8iB,GAAgB,UAAW,CAACxxB,EAAOiK,IAAsH,CAC9K,KAAM,CAAE,OAAA4O,EAAQ,QAAAwI,EAAS,gBAAAgK,GAAoBphB,EAAO,QAC9CyN,EAAO1X,EAAM,KAAK6Y,CAAM,EAC9B,GAAInB,EAAM,CACNA,EAAK,QAAU2J,EACf3J,EAAK,gBAAkB2T,EAGvB,IAAIoH,EAAiC,KAEjC,GAAApH,GAAmBA,EAAgB,KACrCoH,EAAkBpH,EAAgB,SAC7B,CAEL,MAAMI,EAAkB,OAAO,KAAK/T,EAAK,OAAO,EAC3C,IAAI,MAAM,EACV,KAAK,CAACW,EAAGC,IAAMA,EAAID,CAAC,EACnB0Z,EAAY,KAAK,IAAI,EAAGra,EAAK,WAAa,CAAC,EAC3CgU,EAAYD,EAAgB,KAAKjV,GAASub,GAAavb,CAAK,EAC9DkV,IAAc,SACI+G,EAAA/a,EAAK,QAAQgU,CAAS,EAC5C,CAIE+G,GACF/a,EAAK,gBAAkB+a,EACvB/a,EAAK,eAAiB+a,EACtB/a,EAAK,uBAAyB,KAC9BA,EAAK,yBAA2B,CAAC,EAC5BA,EAAA,gBAAkBA,EAAK,gBAAkB,GAAK,EACnDA,EAAK,oBAAsB,QAEnB,QAAA,IAAI,wDAAwDmB,CAAM,IAAK,CAC7E,eAAgB4Z,EAAgB,OAChC,eAAgB/a,EAAK,eACrB,oBAAqBA,EAAK,oBAC1B,eAAgB+a,EAAgB,UAAU,EAAG,GAAG,EAAI,KAAA,CACrD,IAEO,QAAA,MAAM,mEAAmE5Z,CAAM,EAAE,EACzFnB,EAAK,eAAiB,KACtBA,EAAK,oBAAsB,YAC7B,CAEJ1X,EAAM,QAAU,EAAA,CACjB,EACD0O,EAAQ,QAAQ8iB,GAAgB,SAAU,CAACxxB,EAAOiK,IAAW,CAC3DjK,EAAM,QAAU,GAChBA,EAAM,MAAQiK,EAAO,OAAA,CACtB,CAAA,CAEL,CAAC,EAGY,CACX,UAAAyoB,GACA,iBAAAC,GACA,oBAAAC,GACA,wBAAAC,GACA,4BAAAC,GACA,qBAAAC,GACA,mBAAAC,GACA,oBAAAC,GACA,WAAAC,EACF,EAAIrB,GAAW,QAGFsB,GAAiB,CAACnzB,EAA8B6Y,IAC3D7Y,EAAM,MAAM,KAAK6Y,CAAM,EAYZua,GAAiB9pB,EAC3BtJ,GAAiCA,EAAM,MAAM,KAC7CqzB,GAAc,OAAO,OAAOA,CAAS,CACxC,EAGaC,GAAoBhqB,EAC9BtJ,GAAiCA,EAAM,MAAM,KAC7C+V,GAAU,CACT,MAAMwd,EAAqD,CAAC,EAE5D,cAAO,OAAOxd,CAAK,EAAE,QAAgB2B,GAAA,CAC9BA,EAAA,oBAAoB,QAAoBsa,GAAA,CAElBuB,EAAY,KAC1BC,GAAAA,EAAK,QAAU9b,EAAK,IAAM8b,EAAK,MAAQxB,GAAcwB,EAAK,QAAUxB,GAAYwB,EAAK,MAAQ9b,EAAK,EAC7G,GAGE6b,EAAY,KAAK,CACf,MAAO7b,EAAK,GACZ,IAAKsa,CAAA,CACN,CACH,CACD,CAAA,CACF,EAEMuB,CAAA,CAEX,EAGaE,GAA2BnqB,EACtC,CAAC8pB,EAAc,EACdrd,GAA+B,CAE9B,MAAM2d,EAAW3d,EAAM,OACjB4d,EAAS,GACf,OAAO5d,EAAM,IAAI,CAAC2B,EAAM5X,IAAU,CAChC,MAAM8zB,EAAS9zB,EAAQ4zB,EAAY,EAAI,KAAK,GACtCnzB,EAAIozB,EAAS,KAAK,IAAIC,CAAK,EAC3BpzB,EAAImzB,EAAS,KAAK,IAAIC,CAAK,EAGjC,IAAIC,EAAQ,UACR,OAAAnc,EAAK,YAAc,kBAAyBmc,EAAA,WAC5Cnc,EAAK,YAAc,cAAqBmc,EAAA,WACxCnc,EAAK,YAAc,cAAqBmc,EAAA,WAErC,CACL,GAAGnc,EACH,EAAAnX,EACA,EAAAC,EACA,MAAAqzB,CACF,CAAA,CACD,CAAA,CAEL,EAEeC,GAAAjC,GAAW,QCvanB,SAASkC,GAAiBpV,EAAsC,CACjE,OAAAA,GAAiB,EAAU,OAC3BA,GAAiB,EAAU,UACxB,QACT,CC3UA,MAAMqV,GAAkC,CACtC,SAAU,CAAC,EACX,gBAAiB,CAAC,EAClB,kBAAmB,CAAC,EAGpB,eAAgB,CAAC,EACjB,YAAa,CAAC,EACd,eAAgB,CAAC,EACjB,mBAAoB,CAAC,EACrB,iBAAkB,CAChB,kBAAmB,CAAC,EACpB,mBAAoB,CAAC,EACrB,kBAAmB,CAAA,CAAC,CAExB,EAGMjlB,GAA4B,CAChC,KAAMilB,GACN,cAAe,KACf,eAAgB,KAChB,iBAAkB,CAChB,KAAM,EACN,QAAS,EACT,OAAQ,CACV,EACA,oBAAqB,CAAC,EACtB,QAAS,CAAA,CAEX,EAGMC,GAAc9e,GAAY,CAC9B,KAAM,SAAA,aACNpG,GACA,SAAU,CAER,eAAgB,CAAC/O,EAAOiK,IAKjB,CACL,KAAM,CAAE,OAAA4O,EAAQ,UAAAtC,EAAW,cAAAoI,GAAkB1U,EAAO,QAC9CiqB,EAAgBH,GAAiBpV,CAAa,EAGpD,GAAI3e,EAAM,cAAe,CAGvB,MAAMm0B,EAA6B,CACjC,KAAMn0B,EAAM,cACZ,GAAI6Y,EACJ,kBAAmB,CAAA,CACrB,EACK7Y,EAAM,KAAK,cACRA,EAAA,KAAK,YAAc,CAAC,GAEtBA,EAAA,KAAK,YAAY,KAAKm0B,CAAU,EAEtCn0B,EAAM,eAAiBA,EAAM,aAAA,CAI/BA,EAAM,cAAgB6Y,EAGhB7Y,EAAA,KAAK,SAAS,KAAK6Y,CAAM,EAG/B,MAAMub,GAAgBp0B,EAAM,KAAK,gBAAgB6Y,CAAM,GAAK,GAAK,EAC3D7Y,EAAA,KAAK,gBAAgB6Y,CAAM,EAAIub,EAGhCp0B,EAAM,KAAK,iBACRA,EAAA,KAAK,eAAiB,CAAC,GAEzBA,EAAA,KAAK,eAAeuW,CAAS,GAAKvW,EAAM,KAAK,eAAeuW,CAAS,GAAK,GAAK,EAEhFvW,EAAM,KAAK,qBACRA,EAAA,KAAK,mBAAqB,CAAC,GAE7BA,EAAA,KAAK,mBAAmBk0B,CAAa,GAAKl0B,EAAM,KAAK,mBAAmBk0B,CAAa,GAAK,GAAK,EAGrG,MAAMtc,EAAmB,CACvB,OAAAiB,EACA,UAAAtC,EACA,cAAA2d,EACA,kBAAmB,CAAC,EACpB,MAAOl0B,EAAM,KAAK,SAAS,OAAS,EACpC,aAAAo0B,CACF,EACKp0B,EAAM,KAAK,iBACRA,EAAA,KAAK,eAAiB,CAAC,GAEzBA,EAAA,KAAK,eAAe,KAAK4X,CAAK,EAI/B5X,EAAM,KAAK,mBACdA,EAAM,KAAK,iBAAmB,CAC5B,kBAAmB,CAAC,EACpB,mBAAoB,CAAC,EACrB,kBAAmB,CAAA,CACrB,GAEG,MAAM,QAAQA,EAAM,KAAK,iBAAiB,kBAAkB,IACzDA,EAAA,KAAK,iBAAiB,mBAAqB,CAAC,GAE/C,MAAM,QAAQA,EAAM,KAAK,iBAAiB,iBAAiB,IACxDA,EAAA,KAAK,iBAAiB,kBAAoB,CAAC,GAInD,MAAM2W,EAAoB3W,EAAM,KAAK,iBAAiB,mBAAmB,CAAC,GAAK,CAAC,EAChF2W,EAAkB,KAAKJ,CAAS,EAChCvW,EAAM,KAAK,iBAAiB,mBAAmB,CAAC,EAAI2W,EAEpD,MAAMK,EAAmBhX,EAAM,KAAK,iBAAiB,kBAAkB,CAAC,GAAK,CAAC,EAC9EgX,EAAiB,KAAKkd,CAAa,EACnCl0B,EAAM,KAAK,iBAAiB,kBAAkB,CAAC,EAAIgX,CACrD,EAKA,eAAgB,CAAChX,EAAOiK,IAAuC,CAC7D,MAAMyN,EAAOzN,EAAO,QACdoqB,EAAUr0B,EAAM,SAAW,CAAC,EAC9B,GAAAq0B,EAAQ,OAAS,GAAKA,EAAQ,CAAC,EAAE,KAAO3c,EAAK,GAE/C,OAEF,MAAM4c,EAAUD,EAAQ,UAAY9pB,EAAE,KAAOmN,EAAK,EAAE,EAC9C1X,EAAA,QAAU,CAAC0X,EAAM,GAAG4c,CAAO,EAAE,MAAM,EAAG,EAAE,CAChD,EAGA,gBAAiB,CAACt0B,EAAOiK,IAA4C,CACnE,MAAMsN,EAAYtN,EAAO,QAOzB,GAJMjK,EAAA,KAAK,kBAAkBuX,CAAS,GAAKvX,EAAM,KAAK,kBAAkBuX,CAAS,GAAK,GAAK,EAC3FvX,EAAM,oBAAoBuX,CAAS,GAAKvX,EAAM,oBAAoBuX,CAAS,GAAK,GAAK,EAGjFvX,EAAM,KAAK,gBAAkBA,EAAM,KAAK,eAAe,OAAS,EAAG,CAC/D,MAAAwvB,EAAexvB,EAAM,KAAK,eAAeA,EAAM,KAAK,eAAe,OAAS,CAAC,EAC9EwvB,EAAa,kBAAkB,SAASjY,CAAS,GACvCiY,EAAA,kBAAkB,KAAKjY,CAAS,CAC/C,CAGF,GAAIvX,EAAM,KAAK,aAAeA,EAAM,KAAK,YAAY,OAAS,EAAG,CACzD,MAAAu0B,EAAoBv0B,EAAM,KAAK,YAAYA,EAAM,KAAK,YAAY,OAAS,CAAC,EAC7Eu0B,EAAkB,kBAAkB,SAAShd,CAAS,GACvCgd,EAAA,kBAAkB,KAAKhd,CAAS,CACpD,CAEJ,EAGA,uBAAwB,CAACvX,EAAOiK,IAGzB,CACL,KAAM,CAAE,YAAA2Z,EAAa,MAAA7kB,CAAM,EAAIkL,EAAO,QAChCjK,EAAA,iBAAiB4jB,CAAW,EAAI,KAAK,IAAI,IAAK,KAAK,IAAI,EAAG7kB,CAAK,CAAC,CACxE,EAKA,YAAciB,GAAU,CACtBA,EAAM,KAAOg0B,GACbh0B,EAAM,cAAgB,KACtBA,EAAM,eAAiB,KACvBA,EAAM,iBAAmB,CACvB,KAAM,EACN,QAAS,EACT,OAAQ,CACV,EACAA,EAAM,oBAAsB,CAAC,CAE/B,EAGA,gBAAkBA,GAAU,CAEpB,KAAA,CAAE,SAAAkW,GAAalW,EAAM,KAGvB,GAAAkW,EAAS,QAAU,EAAG,CACxB,MAAMD,EAAgC,CAAC,EAG9B,QAAAnP,EAAS,EAAGA,GAAU,KAAK,MAAMoP,EAAS,OAAS,CAAC,EAAGpP,IAE9D,QAAS7F,EAAI,EAAGA,GAAKiV,EAAS,OAASpP,EAAS,EAAG7F,IAAK,CACtD,MAAMuzB,EAAUte,EAAS,MAAMjV,EAAGA,EAAI6F,CAAM,EAG5C,QAASid,EAAI9iB,EAAI6F,EAAQid,GAAK7N,EAAS,OAASpP,EAAQid,IAAK,CAC3D,MAAM0Q,EAAUve,EAAS,MAAM6N,EAAGA,EAAIjd,CAAM,EAGxC,GAAA0tB,EAAQ,MAAM,CAACrkB,EAAI+L,IAAQ/L,IAAOskB,EAAQvY,CAAG,CAAC,EAAG,CAE3BjG,EAAkB,KACxCye,GAAAA,EAAI,SAAWF,EAAQ,QACvBE,EAAI,MAAM,CAACvkB,EAAI+L,IAAQ/L,IAAOqkB,EAAQtY,CAAG,CAAC,CAC5C,GAGEjG,EAAkB,KAAKue,CAAO,EAIhC,KAAA,CACF,CACF,CAICx0B,EAAM,KAAK,mBACdA,EAAM,KAAK,iBAAmB,CAC5B,kBAAmB,CAAC,EACpB,mBAAoB,CAAC,EACrB,kBAAmB,CAAA,CACrB,GAEIA,EAAA,KAAK,iBAAiB,kBAAoBiW,CAAA,CAClD,CAIF,CAIJ,CAAC,EAGY,CACX,eAAA0e,GACA,gBAAAC,GACA,uBAAAC,GACA,YAAAC,GACA,gBAAAC,GACA,eAAAC,EACF,EAAIf,GAAY,QAGHgB,GAAuBj1B,GAClCA,EAAM,OAAO,cAiCFk1B,GAAyB,CAACl1B,EAAgC6Y,IAC9D7Y,EAAM,OAAO,KAAK,gBAAgB6Y,CAAM,GAAK,EA8EzCsc,GAAiBn1B,GAC7BA,EAAM,OAAO,QAECo1B,GAAAnB,GAAY,QClYrBllB,GAA+B,CACnC,SAAU,gBACV,sBAAuB,GACvB,kBAAmB,GACnB,cAAe,KACf,eAAgB,KAChB,gBAAiB,EACjB,sBAAuB,GACvB,kBAAmB,EACnB,sBAAuB,CACrB,EAAG,EACH,EAAG,EACH,EAAG,CACL,EACA,SAAU,SACV,aAAc,GACd,WAAY,OACZ,gBAAiB,IACjB,cAAe,GACf,eAAgB,GAChB,qBAAsB,EACxB,EAEMsmB,GAAiBlgB,GAAY,CACjC,KAAM,YACN,aAAApG,GACA,SAAU,CACR,YAAa,CAAC/O,EAAOiK,IAAoC,CACvDjK,EAAM,SAAWiK,EAAO,OAC1B,EACA,wBAA0BjK,GAAU,CAC5BA,EAAA,sBAAwB,CAACA,EAAM,qBACvC,EACA,oBAAsBA,GAAU,CACxBA,EAAA,kBAAoB,CAACA,EAAM,iBACnC,EACA,wBAA0BA,GAAU,CAC5BA,EAAA,sBAAwB,CAACA,EAAM,qBACvC,EACA,qBAAsB,CAACA,EAAOiK,IAAkC,CACxDjK,EAAA,kBAAoB,KAAK,IAAI,GAAK,KAAK,IAAI,IAAKiK,EAAO,OAAO,CAAC,CACvE,EACA,yBAA0B,CACxBjK,EACAiK,IACG,CACH,KAAM,CAAE,EAAA1J,EAAG,EAAAC,EAAG,EAAA80B,GAAMrrB,EAAO,QACvB1J,IAAM,SAAiBP,EAAA,sBAAsB,EAAIO,GACjDC,IAAM,SAAiBR,EAAA,sBAAsB,EAAIQ,GACjD80B,IAAM,SAAiBt1B,EAAA,sBAAsB,EAAIs1B,EACvD,EACA,YAAa,CACXt1B,EACAiK,IACG,CACHjK,EAAM,SAAWiK,EAAO,OAC1B,EACA,mBAAqBjK,GAAU,CACvBA,EAAA,aAAe,CAACA,EAAM,YAC9B,EACA,cAAe,CAACA,EAAOiK,IAA8C,CACnEjK,EAAM,WAAaiK,EAAO,OAC5B,EACA,mBAAoB,CAACjK,EAAOiK,IAAkC,CACtDjK,EAAA,gBAAkB,KAAK,IAAI,EAAG,KAAK,IAAI,IAAMiK,EAAO,OAAO,CAAC,CACpE,EACA,gBAAkBjK,GAAU,CACpBA,EAAA,cAAgB,CAACA,EAAM,aAC/B,EACA,iBAAmBA,GAAU,CACrBA,EAAA,eAAiB,CAACA,EAAM,cAChC,EACA,eAAgB,IACP+O,GAET,YAAa,CAAC/O,EAAOiK,IAAkC,CACrDjK,EAAM,cAAgBiK,EAAO,QACvBjK,EAAA,gBAAkB,KAAK,IAAI,CACnC,EACA,cAAgBA,GAAU,CACxBA,EAAM,cAAgB,IACxB,EACA,aAAc,CAACA,EAAOiK,IAAkC,CAClDjK,EAAM,iBAAmBiK,EAAO,UAIpCjK,EAAM,eAAiBiK,EAAO,QAC9BjK,EAAM,SAAW,UACXA,EAAA,gBAAkB,KAAK,IAAI,EAC7BA,EAAM,uBACRA,EAAM,qBAAuB,IAEjC,EACA,sBAAwBA,GAAU,CAChCA,EAAM,SAAW,eACnB,EACA,+BAAiCA,GAAU,CACzCA,EAAM,qBAAuB,EAAA,CAC/B,CAEJ,CAAC,EAEY,CACX,YAAAu1B,GACA,wBAAAC,GACA,oBAAAC,GACA,wBAAAC,GACA,qBAAAC,GACA,yBAAAC,GACA,YAAAC,GACA,mBAAAC,GACA,cAAAC,GACA,mBAAAC,GACA,gBAAAC,GACA,iBAAAC,GACA,eAAAC,GACA,YAAAC,GACA,cAAAC,GACA,aAAAC,GACA,sBAAAC,GACA,+BAAAC,EACF,EAAInB,GAAe,QAENoB,GAAkBz2B,GAAqBA,EAAM,UAAU,SAsBvD02B,GAAuB12B,GAClCA,EAAM,UAAU,cACL22B,GAAwB32B,GACnCA,EAAM,UAAU,eACL42B,GAA8B52B,GAAqBA,EAAM,UAAU,qBAEjE62B,GAAAxB,GAAe","x_google_ignoreList":[0,1,2,3]}