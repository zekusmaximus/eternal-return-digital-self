{"version":3,"mappings":"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","names":["ThreeJSComponents","lazy","__vitePreload","ConstellationLoading","jsxs","jsx","WebGLErrorNotification","onDismiss","ConstellationView","dispatch","useDispatch","webGLError","setWebGLError","useState","nodes","useSelector","selectConstellationNodes","connections","selectConnections","instancedMeshRef","useRef","contextId","setContextId","useEffect","viewManager","webGLContextManager","mappedConnections","useMemo","c","connectionObjects","nodePositions","positions","node","index","numNodes","radius","offset","increment","y","r","phi","x","z","handleWebGLContextCreated","renderer","id","handleContextLoss","event","lostContextId","type","Suspense","error","setViewMode"],"ignoreList":[],"sources":["../../src/components/Constellation/ConstellationView.tsx"],"sourcesContent":["import { useSelector, useDispatch } from 'react-redux';\r\nimport { selectConstellationNodes, selectConnections } from '../../store/slices/nodesSlice';\r\nimport { setViewMode } from '../../store/slices/interfaceSlice';\r\nimport './ConstellationView.css';\r\nimport { useMemo, useRef, lazy, Suspense, useState, useEffect } from 'react';\r\nimport { InstancedMesh } from 'three';\r\nimport * as THREE from 'three';\r\nimport { Connection } from '../../types';\r\nimport { webGLContextManager } from '../../services/WebGLContextManager';\r\nimport { viewManager } from '../../services/ViewManager';\r\n\r\n// Dynamically import Three.js related dependencies\r\n// Use explicit path with extension to help TypeScript\r\nconst ThreeJSComponents = lazy(() => import('./ThreeJSComponents.tsx'));\r\n\r\n// Loading component for Suspense fallback\r\nconst ConstellationLoading = () => (\r\n  <div className=\"constellation-loading\">\r\n    <div className=\"loading-spinner\"></div>\r\n    <p>Generating constellation view...</p>\r\n  </div>\r\n);\r\n\r\n// WebGL error notification component\r\nconst WebGLErrorNotification = ({ onDismiss }: { onDismiss: () => void }) => {\r\n  return (\r\n    <div className=\"webgl-error-container\">\r\n      <div className=\"webgl-error-header\">WebGL Error Detected</div>\r\n      <div className=\"webgl-error-message\">\r\n        A graphics rendering error occurred. This may affect the constellation display.\r\n        You can continue using the application in text-only mode.\r\n      </div>\r\n      <div className=\"webgl-error-actions\">\r\n        <button className=\"webgl-error-action\" onClick={onDismiss}>\r\n          Continue in Text Mode\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst ConstellationView = () => {\r\n  const dispatch = useDispatch();\r\n  const [webGLError, setWebGLError] = useState<Error | null>(null);\r\n  const nodes = useSelector(selectConstellationNodes);\r\n  const connections = useSelector(selectConnections);\r\n  const instancedMeshRef = useRef<InstancedMesh>(null!);\r\n  const [contextId, setContextId] = useState<string | null>(null);\r\n  \r\n  // Register this component with ViewManager\r\n  useEffect(() => {\r\n    viewManager.registerViewMount('constellation', true);\r\n    \r\n    return () => {\r\n      // Inform ViewManager when unmounting\r\n      viewManager.registerViewMount('constellation', false);\r\n      \r\n      // Make sure to clean up WebGL context when unmounting\r\n      if (contextId) {\r\n        console.log(`[ConstellationView] Unmounting, disposing WebGL context: ${contextId}`);\r\n        webGLContextManager.disposeContext(contextId);\r\n      }\r\n    };\r\n  }, [contextId]);\r\n\r\n  // Create formatted connections for ThreeJSComponents\r\n  // Convert from {start, end} format to {source, target} format\r\n  const mappedConnections = useMemo(() =>\r\n    connections.map(c => ({ source: c.start, target: c.end })),\r\n  [connections]);\r\n  \r\n  // Create Connection objects with correct types for ThreeJSComponents\r\n  const connectionObjects = useMemo(() =>\r\n    connections.map(c => ({ source: c.start, target: c.end } as Connection)),\r\n  [connections]);\r\n\r\n  const nodePositions = useMemo(() => {\r\n    // Debug\r\n    console.log(\"Calculating positions for nodes:\", nodes.length);\r\n    \r\n    const positions: { [key: string]: [number, number, number] } = {};\r\n    \r\n    // Special case for empty nodes array to avoid issues\r\n    if (nodes.length === 0) {\r\n      console.warn(\"No nodes to position\");\r\n      return positions;\r\n    }\r\n    \r\n    // Generate distinct positions for each node in a spherical layout\r\n    nodes.forEach((node, index) => {\r\n      const numNodes = nodes.length;\r\n      // Reduce radius to fit within viewport better\r\n      const radius = 8;\r\n      \r\n      // Fibonacci sphere algorithm for more even distribution\r\n      const offset = 2.0 / numNodes;\r\n      const increment = Math.PI * (3.0 - Math.sqrt(5.0));\r\n      \r\n      const y = ((index * offset) - 1) + (offset / 2);\r\n      const r = Math.sqrt(1 - y * y);\r\n      const phi = index * increment;\r\n      \r\n      const x = Math.cos(phi) * r * radius;\r\n      const z = Math.sin(phi) * r * radius;\r\n      \r\n      positions[node.id] = [x, y * radius, z];\r\n    });\r\n    \r\n    return positions;\r\n  }, [nodes]);\r\n\r\n  // Handle WebGL context registration\r\n  const handleWebGLContextCreated = (renderer: THREE.WebGLRenderer) => {\r\n    // Register with the WebGL context manager\r\n    const id = webGLContextManager.registerContext(\r\n      renderer,\r\n      'constellation',\r\n      2, // High priority\r\n      // Suspend function\r\n      () => {\r\n        console.log('[ConstellationView] Suspending WebGL rendering');\r\n        // Logic to pause rendering or reduce frame rate\r\n      },\r\n      // Resume function\r\n      () => {\r\n        console.log('[ConstellationView] Resuming WebGL rendering');\r\n        // Logic to resume normal rendering\r\n      }\r\n    );\r\n    \r\n    setContextId(id);\r\n    console.log(`[ConstellationView] Registered WebGL context: ${id}`);\r\n  };\r\n\r\n  // Listen for application-wide WebGL context loss events\r\n  useEffect(() => {\r\n    const handleContextLoss = (event: CustomEvent) => {\r\n      const { contextId: lostContextId, type } = event.detail;\r\n      \r\n      // Only handle if this matches our context or is constellation type\r\n      if (contextId === lostContextId || type === 'constellation') {\r\n        console.error(\"[ConstellationView] Received WebGL context loss event\");\r\n        setWebGLError(new Error(\"WebGL context lost - application event\"));\r\n      }\r\n    };\r\n    \r\n    // Add event listener for context loss\r\n    window.addEventListener(\r\n      'webgl-context-loss',\r\n      handleContextLoss as EventListener\r\n    );\r\n    \r\n    return () => {\r\n      window.removeEventListener(\r\n        'webgl-context-loss',\r\n        handleContextLoss as EventListener\r\n      );\r\n    };\r\n  }, [contextId]);\r\n\r\n  return (\r\n    <div className=\"constellation-container\">\r\n      <Suspense fallback={<ConstellationLoading />}>\r\n        <ThreeJSComponents\r\n          nodes={nodes}\r\n          nodePositions={nodePositions}\r\n          connections={connectionObjects}\r\n          mappedConnections={mappedConnections}\r\n          instancedMeshRef={instancedMeshRef}\r\n          onWebGLContextCreated={handleWebGLContextCreated}\r\n          onWebGLError={(error) => {\r\n            console.error(\"[ConstellationView] WebGL error reported:\", error);\r\n            setWebGLError(error);\r\n          }}\r\n        />\r\n      </Suspense>\r\n      \r\n      {/* Show WebGL error notification when an error occurs */}\r\n      {webGLError && (\r\n        <WebGLErrorNotification\r\n          onDismiss={() => {\r\n            // Switch to reading mode to avoid WebGL rendering\r\n            dispatch(setViewMode('reading'));\r\n            setWebGLError(null);\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\n// Component has been refactored to integrate with WebGLContextManager and ViewManager\r\n\r\nexport default ConstellationView;"],"file":"assets/ConstellationView-CEQ12AU_.js"}