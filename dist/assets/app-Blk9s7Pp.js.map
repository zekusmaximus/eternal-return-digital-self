{"version":3,"mappings":"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","names":["_WebGLContextManager","__publicField","renderer","type","priority","suspendFn","resumeFn","existingContextId","id","context","contextId","THREE.SRGBColorSpace","canvas","handleContextLost","event","handleContextRestored","error","glContext","activeContexts","ctx","a","b","i","contexts","totalMemory","c","gl","e","rendererRef","result","gl1","extensions","debugInfo","rendererString","_a","gl2","WebGLContextManager","webGLContextManager","_ViewManager","viewType","previousView","needsNewKey","callbacks","isMounted","currentTime","lastMountTime","timeSinceLastMount","mountedViews","mountedViewNames","mounted","newView","ViewManager","viewManager","_typeof","obj","_classCallCheck","instance","Constructor","_defineProperties","target","props","descriptor","_createClass","protoProps","staticProps","_possibleConstructorReturn","self","call","_assertThisInitialized","_getPrototypeOf","o","_inherits","subClass","superClass","_setPrototypeOf","p","_defineProperty","key","value","PersistGate","_PureComponent","_getPrototypeOf2","_this","_len","args","_key","persistor","_persistor$getState","bootstrapped","PureComponent","getStorage_1","getStorage","noop","noopStorage","hasStorage","storageType","storage","testKey","createWebStorage_1","createWebStorage","_getStorage","_interopRequireDefault","require$$0","resolve","reject","item","_createWebStorage","_default","persistConfig","rootReducer","combineReducers","nodesReducer","readerReducer","interfaceReducer","persistedReducer","persistReducer","store","configureStore","getDefaultMiddleware","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","persistStore","hasMemory","performance","ConstellationView","lazy","NodeView","Onboarding","LoadingView","jsxs","jsx","AppContent","dispatch","useAppDispatch","viewMode","useSelector","selectViewMode","viewTransitions","setViewTransitions","useState","prevViewModeRef","useRef","performanceRecords","setPerformanceRecords","performanceMonitorRef","latestRecordsRef","useEffect","lastUpdateTime","THROTTLE_MS","monitorPerformance","now","records","fps","memoryInfo","prev","newRecords","newTransitions","latestRecord","initializeNodes","handleWebGLContextLoss","handleWebGLContextLossEvent","from","to","Suspense","App","Provider"],"ignoreList":[2,3,4,5],"sources":["../../src/services/WebGLContextManager.ts","../../src/services/ViewManager.ts","../../node_modules/redux-persist/es/integration/react.js","../../node_modules/redux-persist/lib/storage/getStorage.js","../../node_modules/redux-persist/lib/storage/createWebStorage.js","../../node_modules/redux-persist/lib/storage/index.js","../../src/store/index.ts","../../src/app.tsx"],"sourcesContent":["/**\r\n * WebGLContextManager Service\r\n * \r\n * Centralized service to manage WebGL contexts across the application.\r\n * Prevents resource contention between multiple WebGL contexts by\r\n * enforcing a single active WebGL context at a time.\r\n * \r\n * This service:\r\n * 1. Tracks all WebGL context creations and disposals\r\n * 2. Enforces proper resource cleanup during component unmounts\r\n * 3. Provides diagnostic information about WebGL resource usage\r\n * 4. Implements recovery strategies for context loss events\r\n */\r\n\r\nimport { MutableRefObject } from 'react';\r\nimport * as THREE from 'three';\r\n\r\n// Types for WebGL context tracking\r\ntype ContextType = 'constellation' | 'narramorph' | 'minimap' | 'other';\r\n\r\ninterface WebGLContextInfo {\r\n  id: string;\r\n  type: ContextType;\r\n  gl: THREE.WebGLRenderer;\r\n  active: boolean;\r\n  createdAt: number;\r\n  memoryUsage?: {\r\n    geometries: number;\r\n    textures: number;\r\n  };\r\n  priority: number; // Higher number means higher priority\r\n  suspend: () => void; // Function to suspend rendering\r\n  resume: () => void; // Function to resume rendering\r\n}\r\n\r\nclass WebGLContextManager {\r\n  private static instance: WebGLContextManager;\r\n  private contexts: Map<string, WebGLContextInfo> = new Map();\r\n  private activeContextId: string | null = null;\r\n  private contextCounter = 0;\r\n  private contextLossEvents = 0;\r\n  private maxAllowedContexts = 1; // Stricter limit - only allow ONE active WebGL context at a time\r\n  private diagnosticsEnabled = false; // Disable diagnostics by default to reduce overhead\r\n  private memoryCheckInterval: NodeJS.Timeout | null = null;\r\n  private isInitialized = false; // Track initialization state\r\n\r\n  // Singleton pattern\r\n  private constructor() {\r\n    if (!this.isInitialized) {\r\n      this.startMemoryMonitoring();\r\n      console.log('[WebGLContextManager] Initialized');\r\n      this.isInitialized = true;\r\n      \r\n      // Add a cleanup handler for page unload to ensure proper context disposal\r\n      window.addEventListener('beforeunload', () => {\r\n        this.disposeAllContexts();\r\n      });\r\n    }\r\n  }\r\n\r\n  public static getInstance(): WebGLContextManager {\r\n    if (!WebGLContextManager.instance) {\r\n      WebGLContextManager.instance = new WebGLContextManager();\r\n    }\r\n    return WebGLContextManager.instance;\r\n  }\r\n\r\n  /**\r\n   * Register a new WebGL context with the manager\r\n   */\r\n  public registerContext(\r\n    renderer: THREE.WebGLRenderer,\r\n    type: ContextType,\r\n    priority: number = 1,\r\n    suspendFn: () => void = () => {},\r\n    resumeFn: () => void = () => {}\r\n  ): string {\r\n    // Check if there's already a context of this type\r\n    let existingContextId: string | null = null;\r\n    \r\n    // Look for an existing context of the same type\r\n    for (const [id, context] of this.contexts.entries()) {\r\n      if (context.type === type) {\r\n        existingContextId = id;\r\n        break;\r\n      }\r\n    }\r\n    \r\n    // If we found an existing context of the same type, dispose it first\r\n    if (existingContextId) {\r\n      console.log(`[WebGLContextManager] Found existing ${type} context, disposing it first`);\r\n      this.disposeContext(existingContextId);\r\n    }\r\n    \r\n    const contextId = `webgl-context-${++this.contextCounter}-${type}-${Date.now()}`;\r\n    \r\n    console.log(`[WebGLContextManager] Registering new ${type} WebGL context: ${contextId}`);\r\n    \r\n    // Configure renderer for better stability\r\n    renderer.outputColorSpace = THREE.SRGBColorSpace;\r\n    renderer.shadowMap.enabled = false; // Disable shadows for better performance\r\n    \r\n    // Store context information\r\n    this.contexts.set(contextId, {\r\n      id: contextId,\r\n      type,\r\n      gl: renderer,\r\n      active: true,\r\n      createdAt: Date.now(),\r\n      priority,\r\n      suspend: suspendFn,\r\n      resume: resumeFn,\r\n      memoryUsage: {\r\n        geometries: 0,\r\n        textures: 0\r\n      }\r\n    });\r\n    \r\n    // Manage active contexts - if we have too many, suspend lowest priority ones\r\n    this.enforceContextLimits();\r\n    \r\n    // Update memory usage for the new context\r\n    this.updateContextMemoryUsage(contextId);\r\n    \r\n    // Add context loss detection with improved error handling\r\n    const canvas = renderer.domElement;\r\n    \r\n    const handleContextLost = (event: Event) => {\r\n      event.preventDefault(); // Prevent default behavior first\r\n      this.handleContextLoss(contextId, event);\r\n    };\r\n    \r\n    const handleContextRestored = () => {\r\n      this.handleContextRestoration(contextId);\r\n    };\r\n    \r\n    // Remove any existing listeners first\r\n    canvas.removeEventListener('webglcontextlost', handleContextLost);\r\n    canvas.removeEventListener('webglcontextrestored', handleContextRestored);\r\n    \r\n    // Add new listeners\r\n    canvas.addEventListener('webglcontextlost', handleContextLost);\r\n    canvas.addEventListener('webglcontextrestored', handleContextRestored);\r\n    \r\n    return contextId;\r\n  }\r\n\r\n  /**\r\n   * Notify the manager that a context is being disposed\r\n   */\r\n  public disposeContext(contextId: string): boolean {\r\n    const context = this.contexts.get(contextId);\r\n    if (!context) {\r\n      console.warn(`[WebGLContextManager] Attempted to dispose unknown context: ${contextId}`);\r\n      return false;\r\n    }\r\n    \r\n    console.log(`[WebGLContextManager] Disposing ${context.type} WebGL context: ${contextId}`);\r\n    \r\n    try {\r\n      // Force proper THREE.js cleanup\r\n      context.gl.dispose();\r\n      \r\n      // Remove from tracking\r\n      this.contexts.delete(contextId);\r\n      \r\n      // If this was the active context, clear it\r\n      if (this.activeContextId === contextId) {\r\n        this.activeContextId = null;\r\n      }\r\n      \r\n      // Re-evaluate which contexts should be active\r\n      this.enforceContextLimits();\r\n      \r\n      return true;\r\n    } catch (error) {\r\n      console.error(`[WebGLContextManager] Error disposing context ${contextId}:`, error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Suspend a WebGL context to free resources\r\n   */\r\n  public suspendContext(contextId: string): boolean {\r\n    const context = this.contexts.get(contextId);\r\n    if (!context) return false;\r\n    \r\n    if (context.active) {\r\n      console.log(`[WebGLContextManager] Suspending ${context.type} WebGL context: ${contextId}`);\r\n      context.active = false;\r\n      context.suspend();\r\n      \r\n      // Set renderer properties to minimize resource usage while suspended\r\n      context.gl.setPixelRatio(0.5); // Lower resolution\r\n      context.gl.setSize(1, 1, false); // Minimal size\r\n      \r\n      // Signal the WebGL system to prioritize other contexts\r\n      try {\r\n        const glContext = context.gl.getContext();\r\n        if (glContext && 'UNPACK_COLORSPACE_CONVERSION_WEBGL' in glContext) {\r\n          // This is a hint to the browser that this context is less important\r\n          glContext.hint(glContext.GENERATE_MIPMAP_HINT, glContext.FASTEST);\r\n        }\r\n      } catch {\r\n        // Ignore context access errors\r\n      }\r\n      \r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Resume a previously suspended WebGL context\r\n   */\r\n  public resumeContext(contextId: string): boolean {\r\n    const context = this.contexts.get(contextId);\r\n    if (!context) return false;\r\n    \r\n    if (!context.active) {\r\n      console.log(`[WebGLContextManager] Resuming ${context.type} WebGL context: ${contextId}`);\r\n      context.active = true;\r\n      context.resume();\r\n      \r\n      // Make this the active context\r\n      this.activeContextId = contextId;\r\n      \r\n      // May need to suspend other contexts to stay within limits\r\n      this.enforceContextLimits();\r\n      \r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Check if a specific context type is currently active\r\n   */\r\n  public isContextTypeActive(type: ContextType): boolean {\r\n    for (const [, context] of this.contexts.entries()) {\r\n      if (context.type === type && context.active) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Handle WebGL context loss events\r\n   */\r\n  private handleContextLoss(contextId: string, event: Event): void {\r\n    const context = this.contexts.get(contextId);\r\n    if (!context) return;\r\n    \r\n    this.contextLossEvents++;\r\n    console.error(`[WebGLContextManager] WebGL context loss detected for ${context.type} context: ${contextId}`);\r\n    console.error(`[WebGLContextManager] Total context loss events: ${this.contextLossEvents}`);\r\n    \r\n    // Prevent default behavior which attempts automatic recovery\r\n    event.preventDefault();\r\n    \r\n    // Mark context as inactive\r\n    context.active = false;\r\n    \r\n    // Attempt to free other contexts to help recovery\r\n    this.emergencyResourceRecovery();\r\n    \r\n    // Dispatch application-wide event for context loss\r\n    window.dispatchEvent(new CustomEvent('webgl-context-loss', { \r\n      detail: { contextId, type: context.type } \r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Handle WebGL context restoration events\r\n   */\r\n  private handleContextRestoration(contextId: string): void {\r\n    const context = this.contexts.get(contextId);\r\n    if (!context) return;\r\n    \r\n    console.log(`[WebGLContextManager] WebGL context restored for ${context.type} context: ${contextId}`);\r\n    \r\n    // Mark context as active again\r\n    context.active = true;\r\n    \r\n    // Dispatch application-wide event for context restoration\r\n    window.dispatchEvent(new CustomEvent('webgl-context-restored', { \r\n      detail: { contextId, type: context.type } \r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Enforce limits on the number of concurrent active WebGL contexts\r\n   */\r\n  private enforceContextLimits(): void {\r\n    // Count active contexts\r\n    const activeContexts = Array.from(this.contexts.values())\r\n      .filter(ctx => ctx.active)\r\n      .sort((a, b) => b.priority - a.priority); // Sort by priority (highest first)\r\n    \r\n    if (activeContexts.length > this.maxAllowedContexts) {\r\n      console.log(`[WebGLContextManager] Too many active contexts (${activeContexts.length}/${this.maxAllowedContexts}), suspending lower priority contexts`);\r\n      \r\n      // Suspend lowest priority contexts\r\n      for (let i = this.maxAllowedContexts; i < activeContexts.length; i++) {\r\n        this.suspendContext(activeContexts[i].id);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Emergency recovery procedure for WebGL context loss\r\n   */\r\n  private emergencyResourceRecovery(): void {\r\n    console.log('[WebGLContextManager] Performing emergency resource recovery');\r\n    \r\n    // Force garbage collection hint\r\n    if (window.gc) {\r\n      try {\r\n        window.gc();\r\n      } catch {\r\n        // Ignore if gc is not available\r\n      }\r\n    }\r\n    \r\n    // Suspend all but the highest priority context\r\n    const contexts = Array.from(this.contexts.values())\r\n      .sort((a, b) => b.priority - a.priority);\r\n    \r\n    if (contexts.length > 0) {\r\n      // Keep only the highest priority context active\r\n      for (let i = 1; i < contexts.length; i++) {\r\n        this.suspendContext(contexts[i].id);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Start periodic memory monitoring for all contexts\r\n   */\r\n  private startMemoryMonitoring(): void {\r\n    if (this.memoryCheckInterval) {\r\n      clearInterval(this.memoryCheckInterval);\r\n    }\r\n    \r\n    this.memoryCheckInterval = setInterval(() => {\r\n      if (!this.diagnosticsEnabled) return;\r\n      \r\n      for (const [id] of this.contexts.entries()) {\r\n        this.updateContextMemoryUsage(id);\r\n      }\r\n      \r\n      // Log total memory usage across all contexts\r\n      const totalMemory = {\r\n        geometries: 0,\r\n        textures: 0,\r\n        contexts: this.contexts.size,\r\n        active: Array.from(this.contexts.values()).filter(c => c.active).length\r\n      };\r\n      \r\n      for (const context of this.contexts.values()) {\r\n        if (context.memoryUsage) {\r\n          totalMemory.geometries += context.memoryUsage.geometries;\r\n          totalMemory.textures += context.memoryUsage.textures;\r\n        }\r\n      }\r\n      \r\n      if (totalMemory.contexts > 0 && this.diagnosticsEnabled) {\r\n        console.log('[WebGLContextManager] Memory usage:', totalMemory);\r\n      }\r\n    }, 30000); // Reduced frequency - check every 30 seconds\r\n  }\r\n\r\n  /**\r\n   * Update memory usage information for a specific context\r\n   */\r\n  private updateContextMemoryUsage(contextId: string): void {\r\n    const context = this.contexts.get(contextId);\r\n    if (!context) return;\r\n    \r\n    try {\r\n      const gl = context.gl;\r\n      if (gl && gl.info) {\r\n        context.memoryUsage = {\r\n          geometries: gl.info.memory.geometries,\r\n          textures: gl.info.memory.textures\r\n        };\r\n      }\r\n    } catch {\r\n      // Ignore errors accessing gl.info\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the currently highest priority active context\r\n   */\r\n  public getActiveContext(): WebGLContextInfo | null {\r\n    const activeContexts = Array.from(this.contexts.values())\r\n      .filter(ctx => ctx.active)\r\n      .sort((a, b) => b.priority - a.priority);\r\n    \r\n    return activeContexts.length > 0 ? activeContexts[0] : null;\r\n  }\r\n\r\n  /**\r\n   * Cleanup all WebGL contexts - call this when application unloads\r\n   */\r\n  public disposeAllContexts(): void {\r\n    console.log(`[WebGLContextManager] Disposing all WebGL contexts (${this.contexts.size})`);\r\n    \r\n    for (const [id, context] of this.contexts.entries()) {\r\n      try {\r\n        context.gl.dispose();\r\n      } catch (e) {\r\n        console.error(`[WebGLContextManager] Error disposing context ${id}:`, e);\r\n      }\r\n    }\r\n    \r\n    this.contexts.clear();\r\n    this.activeContextId = null;\r\n    \r\n    if (this.memoryCheckInterval) {\r\n      clearInterval(this.memoryCheckInterval);\r\n      this.memoryCheckInterval = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get renderer from a component ref - utility function\r\n   */\r\n  public getRendererFromRef(rendererRef: MutableRefObject<THREE.WebGLRenderer | null>): THREE.WebGLRenderer | null {\r\n    return rendererRef.current;\r\n  }\r\n\r\n  /**\r\n   * Check if WebGL is available and what level of support exists\r\n   */\r\n  public checkWebGLSupport(): { \r\n    webgl: boolean; \r\n    webgl2: boolean; \r\n    extensions: string[]; \r\n    maxTextures: number;\r\n    vendor?: string;\r\n    renderer?: string;\r\n    isLowEndDevice: boolean;\r\n  } {\r\n    const result = {\r\n      webgl: false,\r\n      webgl2: false,\r\n      extensions: [] as string[],\r\n      maxTextures: 0,\r\n      vendor: undefined as string | undefined,\r\n      renderer: undefined as string | undefined,\r\n      isLowEndDevice: false\r\n    };\r\n    \r\n    try {\r\n      // Check WebGL 1 support\r\n      const canvas = document.createElement('canvas');\r\n      const gl1 = canvas.getContext('webgl');\r\n      result.webgl = !!gl1;\r\n      \r\n      if (gl1) {\r\n        // Get extensions\r\n        const extensions = gl1.getSupportedExtensions();\r\n        result.extensions = extensions || [];\r\n        \r\n        // Check max textures\r\n        result.maxTextures = gl1.getParameter(gl1.MAX_TEXTURE_IMAGE_UNITS);\r\n        \r\n        // Try to get GPU info\r\n        const debugInfo = gl1.getExtension('WEBGL_debug_renderer_info');\r\n        if (debugInfo) {\r\n          result.vendor = gl1.getParameter(debugInfo.UNMASKED_VENDOR_WEBGL);\r\n          result.renderer = gl1.getParameter(debugInfo.UNMASKED_RENDERER_WEBGL);\r\n          \r\n          // Check if this is likely a low-end device\r\n          const rendererString = result.renderer?.toLowerCase() || '';\r\n          result.isLowEndDevice = \r\n            rendererString.includes('intel') || \r\n            rendererString.includes('hd graphics') ||\r\n            rendererString.includes('mobile') ||\r\n            !result.extensions.includes('OES_texture_float');\r\n        }\r\n      }\r\n      \r\n      // Check WebGL 2 support\r\n      const gl2 = canvas.getContext('webgl2');\r\n      result.webgl2 = !!gl2;\r\n      \r\n      canvas.remove();\r\n    } catch (e) {\r\n      console.error('[WebGLContextManager] Error checking WebGL support:', e);\r\n    }\r\n    \r\n    return result;\r\n  }\r\n}\r\n\r\n// Export a singleton instance\r\nexport const webGLContextManager = WebGLContextManager.getInstance();\r\n\r\n// Also export the class for testing purposes\r\nexport default WebGLContextManager;","/**\r\n * ViewManager Service\r\n * \r\n * Centralized service to manage view transitions and component lifecycle.\r\n * Ensures only one active view component at a time and proper cleanup\r\n * of resources during transitions.\r\n * \r\n * This service:\r\n * 1. Controls which view is active (constellation or reading)\r\n * 2. Manages transition states between views\r\n * 3. Enforces proper unmounting of previous views before mounting new ones\r\n * 4. Coordinates with WebGLContextManager to suspend inactive views\r\n */\r\n\r\nimport { webGLContextManager } from './WebGLContextManager';\r\n\r\n// View types\r\nexport type ViewType = 'constellation' | 'reading' | 'loading';\r\n\r\n// View state management\r\ninterface ViewState {\r\n  activeView: ViewType;\r\n  previousView: ViewType | null;\r\n  isTransitioning: boolean;\r\n  transitionStartTime: number;\r\n  uniqueViewKey: string; // For forcing unmount/remount\r\n  transitionCount: number;\r\n}\r\n\r\n// Transition callbacks\r\ninterface TransitionCallbacks {\r\n  onBeforeTransition?: (from: ViewType, to: ViewType) => void;\r\n  onAfterTransition?: (from: ViewType, to: ViewType) => void;\r\n}\r\n\r\nclass ViewManager {\r\n  private static instance: ViewManager;\r\n  private state: ViewState = {\r\n    activeView: 'loading',\r\n    previousView: null,\r\n    isTransitioning: false,\r\n    transitionStartTime: 0,\r\n    uniqueViewKey: 'view-0',\r\n    transitionCount: 0\r\n  };\r\n  \r\n  private transitionCallbacks: TransitionCallbacks = {};\r\n  private transitionTimeout: NodeJS.Timeout | null = null;\r\n  private viewComponents: Map<ViewType, boolean> = new Map();\r\n  private transitionDuration = 300; // ms\r\n  \r\n  // Singleton pattern\r\n  private constructor() {\r\n    console.log('[ViewManager] Initialized');\r\n    \r\n    // Initialize view components tracking\r\n    this.viewComponents.set('constellation', false);\r\n    this.viewComponents.set('reading', false);\r\n    this.viewComponents.set('loading', false);\r\n  }\r\n\r\n  public static getInstance(): ViewManager {\r\n    if (!ViewManager.instance) {\r\n      ViewManager.instance = new ViewManager();\r\n    }\r\n    return ViewManager.instance;\r\n  }\r\n\r\n  /**\r\n   * Get current view state\r\n   */\r\n  public getViewState(): Readonly<ViewState> {\r\n    return { ...this.state };\r\n  }\r\n\r\n  /**\r\n   * Set the active view with proper transition handling\r\n   */\r\n  public setActiveView(viewType: ViewType): void {\r\n    if (viewType === this.state.activeView && !this.state.isTransitioning) {\r\n      console.log(`[ViewManager] View ${viewType} is already active, ignoring`);\r\n      return;\r\n    }\r\n    \r\n    console.log(`[ViewManager] Transitioning from ${this.state.activeView} to ${viewType}`);\r\n    \r\n    // Cancel any pending transition\r\n    if (this.transitionTimeout) {\r\n      clearTimeout(this.transitionTimeout);\r\n      this.transitionTimeout = null;\r\n    }\r\n    \r\n    const previousView = this.state.activeView;\r\n    \r\n    // Only generate a new key if transitioning between different views\r\n    // This prevents unnecessary remounting when the same view is re-activated\r\n    const needsNewKey = previousView !== viewType;\r\n    \r\n    // Set transitioning state\r\n    this.state = {\r\n      ...this.state,\r\n      previousView,\r\n      activeView: viewType,\r\n      isTransitioning: true,\r\n      transitionStartTime: Date.now(),\r\n      transitionCount: this.state.transitionCount + 1,      // Only generate a new key when actually changing views\r\n      // Using crypto.randomUUID() for better uniqueness guarantees than Math.random()\r\n      uniqueViewKey: needsNewKey\r\n        ? `view-${Date.now()}-${crypto.randomUUID().slice(0, 8)}`\r\n        : this.state.uniqueViewKey\r\n    };\r\n    \r\n    // Call before transition callback\r\n    if (this.transitionCallbacks.onBeforeTransition) {\r\n      this.transitionCallbacks.onBeforeTransition(previousView, viewType);\r\n    }\r\n    \r\n    // Handle WebGL context management\r\n    this.manageWebGLContexts(previousView, viewType);\r\n    \r\n    // Set timeout to clear transition state\r\n    this.transitionTimeout = setTimeout(() => {\r\n      this.state = {\r\n        ...this.state,\r\n        isTransitioning: false\r\n      };\r\n      \r\n      // Call after transition callback\r\n      if (this.transitionCallbacks.onAfterTransition) {\r\n        this.transitionCallbacks.onAfterTransition(previousView, viewType);\r\n      }\r\n      \r\n      console.log(`[ViewManager] Transition to ${viewType} complete (${Date.now() - this.state.transitionStartTime}ms)`);\r\n      this.transitionTimeout = null;\r\n    }, this.transitionDuration);\r\n  }\r\n\r\n  /**\r\n   * Register transition callbacks\r\n   */\r\n  public registerTransitionCallbacks(callbacks: TransitionCallbacks): void {\r\n    this.transitionCallbacks = { ...callbacks };\r\n  }\r\n\r\n  /**\r\n   * Register view component mount status\r\n   */\r\n  // Track last mount time to prevent rapid mount/unmount cycles\r\n  private lastMountTimes = new Map<ViewType, number>();\r\n  private mountThrottleMs = 500; // Minimum time between mount/unmount (500ms)\r\n  \r\n  public registerViewMount(viewType: ViewType, isMounted: boolean): void {\r\n    const currentTime = Date.now();\r\n    const lastMountTime = this.lastMountTimes.get(viewType) || 0;\r\n    const timeSinceLastMount = currentTime - lastMountTime;\r\n    \r\n    // If this is an unmount operation that happens too quickly after a mount,\r\n    // ignore it to prevent rapid mount/unmount cycles\r\n    if (!isMounted && timeSinceLastMount < this.mountThrottleMs) {\r\n      console.log(`[ViewManager] Ignoring rapid unmount of ${viewType} (${timeSinceLastMount}ms after mount)`);\r\n      return;\r\n    }\r\n    \r\n    // Update last mount time for mounts\r\n    if (isMounted) {\r\n      this.lastMountTimes.set(viewType, currentTime);\r\n    }\r\n    \r\n    // Update view component state\r\n    this.viewComponents.set(viewType, isMounted);\r\n    console.log(`[ViewManager] View ${viewType} ${isMounted ? 'mounted' : 'unmounted'}`);\r\n    \r\n    // Check for conflicting mounts\r\n    let mountedViews = 0;\r\n    const mountedViewNames: string[] = [];\r\n    \r\n    this.viewComponents.forEach((mounted, type) => {\r\n      if (mounted) {\r\n        mountedViews++;\r\n        mountedViewNames.push(type);\r\n      }\r\n    });\r\n    \r\n    // Log a warning if multiple main views are mounted simultaneously\r\n    if (mountedViews > 1 &&\r\n        mountedViewNames.includes('constellation') &&\r\n        mountedViewNames.includes('reading')) {\r\n      console.warn('[ViewManager] Multiple main views mounted simultaneously:', mountedViewNames.join(', '));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if a specific view is active\r\n   */\r\n  public isViewActive(viewType: ViewType): boolean {\r\n    return this.state.activeView === viewType;\r\n  }\r\n\r\n  /**\r\n   * Get unique key for the current view\r\n   * Used to force proper unmount/remount\r\n   */\r\n  public getUniqueViewKey(): string {\r\n    return this.state.uniqueViewKey;\r\n  }\r\n\r\n  /**\r\n   * Manage WebGL contexts during view transitions\r\n   */\r\n  private manageWebGLContexts(previousView: ViewType, newView: ViewType): void {\r\n    // Suspend constellation WebGL context when transitioning to reading\r\n    if (previousView === 'constellation' && newView === 'reading') {\r\n      if (webGLContextManager.isContextTypeActive('constellation')) {\r\n        console.log('[ViewManager] Suspending constellation WebGL context during transition to reading view');\r\n        // Context will be suspended by individual components using WebGLContextManager\r\n      }\r\n    }\r\n    \r\n    // Resume constellation WebGL context when transitioning back\r\n    if (previousView === 'reading' && newView === 'constellation') {\r\n      console.log('[ViewManager] Will resume constellation WebGL context');\r\n      // Context will be resumed by ConstellationView component\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Check for problematic transition patterns\r\n   */\r\n  public getViewTransitionMetrics(): {\r\n    transitionCount: number;\r\n    averageTransitionTime: number;\r\n    problematicTransitions: number;\r\n  } {\r\n    return {\r\n      transitionCount: this.state.transitionCount,\r\n      averageTransitionTime: 0, // Would track this in a real implementation\r\n      problematicTransitions: 0 // Would track rapid back-and-forth transitions\r\n    };\r\n  }\r\n}\r\n\r\n// Export a singleton instance\r\nexport const viewManager = ViewManager.getInstance();\r\n\r\n// Also export the class for testing purposes\r\nexport default ViewManager;","function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\r\n\r\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\r\n\r\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\r\n\r\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\r\n\r\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\r\n\r\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\r\n\r\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\r\n\r\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\r\n\r\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\r\n\r\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\r\n\r\nimport React, { PureComponent } from 'react'; // eslint-disable-line import/no-unresolved\r\n\r\nexport var PersistGate =\r\n/*#__PURE__*/\r\nfunction (_PureComponent) {\r\n  _inherits(PersistGate, _PureComponent);\r\n\r\n  function PersistGate() {\r\n    var _getPrototypeOf2;\r\n\r\n    var _this;\r\n\r\n    _classCallCheck(this, PersistGate);\r\n\r\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\r\n      args[_key] = arguments[_key];\r\n    }\r\n\r\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(PersistGate)).call.apply(_getPrototypeOf2, [this].concat(args)));\r\n\r\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\r\n      bootstrapped: false\r\n    });\r\n\r\n    _defineProperty(_assertThisInitialized(_this), \"_unsubscribe\", void 0);\r\n\r\n    _defineProperty(_assertThisInitialized(_this), \"handlePersistorState\", function () {\r\n      var persistor = _this.props.persistor;\r\n\r\n      var _persistor$getState = persistor.getState(),\r\n          bootstrapped = _persistor$getState.bootstrapped;\r\n\r\n      if (bootstrapped) {\r\n        if (_this.props.onBeforeLift) {\r\n          Promise.resolve(_this.props.onBeforeLift()).finally(function () {\r\n            return _this.setState({\r\n              bootstrapped: true\r\n            });\r\n          });\r\n        } else {\r\n          _this.setState({\r\n            bootstrapped: true\r\n          });\r\n        }\r\n\r\n        _this._unsubscribe && _this._unsubscribe();\r\n      }\r\n    });\r\n\r\n    return _this;\r\n  }\r\n\r\n  _createClass(PersistGate, [{\r\n    key: \"componentDidMount\",\r\n    value: function componentDidMount() {\r\n      this._unsubscribe = this.props.persistor.subscribe(this.handlePersistorState);\r\n      this.handlePersistorState();\r\n    }\r\n  }, {\r\n    key: \"componentWillUnmount\",\r\n    value: function componentWillUnmount() {\r\n      this._unsubscribe && this._unsubscribe();\r\n    }\r\n  }, {\r\n    key: \"render\",\r\n    value: function render() {\r\n      if (process.env.NODE_ENV !== 'production') {\r\n        if (typeof this.props.children === 'function' && this.props.loading) console.error('redux-persist: PersistGate expects either a function child or loading prop, but not both. The loading prop will be ignored.');\r\n      }\r\n\r\n      if (typeof this.props.children === 'function') {\r\n        return this.props.children(this.state.bootstrapped);\r\n      }\r\n\r\n      return this.state.bootstrapped ? this.props.children : this.props.loading;\r\n    }\r\n  }]);\r\n\r\n  return PersistGate;\r\n}(PureComponent);\r\n\r\n_defineProperty(PersistGate, \"defaultProps\", {\r\n  children: null,\r\n  loading: null\r\n});","\"use strict\";\r\n\r\nexports.__esModule = true;\r\nexports.default = getStorage;\r\n\r\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\r\n\r\nfunction noop() {}\r\n\r\nvar noopStorage = {\r\n  getItem: noop,\r\n  setItem: noop,\r\n  removeItem: noop\r\n};\r\n\r\nfunction hasStorage(storageType) {\r\n  if ((typeof self === \"undefined\" ? \"undefined\" : _typeof(self)) !== 'object' || !(storageType in self)) {\r\n    return false;\r\n  }\r\n\r\n  try {\r\n    var storage = self[storageType];\r\n    var testKey = \"redux-persist \".concat(storageType, \" test\");\r\n    storage.setItem(testKey, 'test');\r\n    storage.getItem(testKey);\r\n    storage.removeItem(testKey);\r\n  } catch (e) {\r\n    if (process.env.NODE_ENV !== 'production') console.warn(\"redux-persist \".concat(storageType, \" test failed, persistence will be disabled.\"));\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction getStorage(type) {\r\n  var storageType = \"\".concat(type, \"Storage\");\r\n  if (hasStorage(storageType)) return self[storageType];else {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      console.error(\"redux-persist failed to create sync storage. falling back to noop storage.\");\r\n    }\r\n\r\n    return noopStorage;\r\n  }\r\n}","\"use strict\";\r\n\r\nexports.__esModule = true;\r\nexports.default = createWebStorage;\r\n\r\nvar _getStorage = _interopRequireDefault(require(\"./getStorage\"));\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nfunction createWebStorage(type) {\r\n  var storage = (0, _getStorage.default)(type);\r\n  return {\r\n    getItem: function getItem(key) {\r\n      return new Promise(function (resolve, reject) {\r\n        resolve(storage.getItem(key));\r\n      });\r\n    },\r\n    setItem: function setItem(key, item) {\r\n      return new Promise(function (resolve, reject) {\r\n        resolve(storage.setItem(key, item));\r\n      });\r\n    },\r\n    removeItem: function removeItem(key) {\r\n      return new Promise(function (resolve, reject) {\r\n        resolve(storage.removeItem(key));\r\n      });\r\n    }\r\n  };\r\n}","\"use strict\";\r\n\r\nexports.__esModule = true;\r\nexports.default = void 0;\r\n\r\nvar _createWebStorage = _interopRequireDefault(require(\"./createWebStorage\"));\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nvar _default = (0, _createWebStorage.default)('local');\r\n\r\nexports.default = _default;","declare const process: { env: { NODE_ENV?: string } };\r\n\r\n/**\r\n * Redux store configuration for Eternal Return of the Digital Self\r\n * Implements state management for node transformations and reader journey tracking\r\n */\r\n\r\nimport { configureStore, combineReducers } from '@reduxjs/toolkit';\r\nimport { \r\n  persistStore, \r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport nodesReducer, { NodesState } from './slices/nodesSlice'; // Import NodesState type\r\nimport readerReducer, { ReaderState } from './slices/readerSlice'; // Import ReaderState type\r\nimport interfaceReducer, { InterfaceState } from './slices/interfaceSlice';\r\n\r\n// Persist configuration\r\nconst persistConfig = {\r\n  key: 'eternal-return',\r\n  version: 1,\r\n  storage,\r\n  // Only blacklist UI state that doesn't need to persist\r\n  blacklist: ['interface'],\r\n};\r\n\r\n// Combine reducers from different slices\r\nconst rootReducer = combineReducers({\r\n  nodes: nodesReducer,\r\n  reader: readerReducer,\r\n  interface: interfaceReducer,\r\n});\r\n\r\n// Let TypeScript infer RootState from rootReducer\r\nexport type RootState = {\r\n  nodes: NodesState;\r\n  reader: ReaderState;\r\n  interface: InterfaceState;\r\n};\r\n\r\n// Create a persisted reducer to maintain state between sessions\r\nconst persistedReducer = persistReducer(\r\n  persistConfig,\r\n  rootReducer\r\n);\r\n\r\n// Configure store with middleware and devtools\r\nexport const store = configureStore({\r\n  reducer: persistedReducer,\r\n  middleware: (getDefaultMiddleware) => \r\n    getDefaultMiddleware({\r\n      serializableCheck: {\r\n        // Ignore non-serializable values in redux-persist actions\r\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n      },\r\n    }),\r\n  devTools:\r\n    (typeof process !== 'undefined' && process?.env?.NODE_ENV !== 'production') ||\r\n    (typeof window !== 'undefined' && 'process' in window && typeof (window as { process: { env: { NODE_ENV?: string } } }).process.env.NODE_ENV !== 'undefined' && (window as { process: { env: { NODE_ENV?: string } } }).process.env.NODE_ENV !== 'production'),\r\n});\r\n\r\n// Create persistor for redux-persist\r\nexport const persistor = persistStore(store);\r\n\r\n// Export types for hooks\r\nexport type AppDispatch = typeof store.dispatch;\r\n\r\n/**\r\n * Calculate node state based on visit history and reading patterns\r\n * This function will be used by the NodeStateCalculator service\r\n * \r\n * @param nodeId The ID of the node to calculate state for\r\n * @returns The calculated visual state for the node\r\n */\r\nexport const calculateNodeState = (nodeId: string): string => {\r\n  const state = store.getState();\r\n  const node = state.nodes.data[nodeId];\r\n  // Removed unused 'path' variable\r\n  \r\n  if (!node) return 'unvisited';\r\n  \r\n  // Basic visit count logic for initial implementation\r\n  if (node.visitCount === 0) return 'unvisited';\r\n  if (node.visitCount === 1) return 'visited';\r\n  if (node.visitCount > 1 && node.visitCount < node.transformationThresholds.complex) {\r\n    return 'revisited';\r\n  }\r\n  if (node.visitCount >= node.transformationThresholds.complex && \r\n      node.visitCount < node.transformationThresholds.fragmented) {\r\n    return 'complex';\r\n  }\r\n  if (node.visitCount >= node.transformationThresholds.fragmented) {\r\n    return 'fragmented';\r\n  }\r\n  \r\n  // Default fallback\r\n  return 'unvisited';\r\n};\r\n\r\n/**\r\n * Get the transformed content for a node based on its current state\r\n * This is a placeholder for the more complex content transformation logic\r\n * that will be implemented in a separate service\r\n * \r\n * @param nodeId The ID of the node to get content for\r\n * @returns The transformed content for the current state\r\n */\r\nexport const getNodeContent = (nodeId: string) => {\r\n  // Placeholder implementation using nodeId\r\n  return `Content for node ${nodeId}`;\r\n};\r\n\r\nexport default store;","import { useEffect, lazy, Suspense, useState, useRef } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { useAppDispatch } from './store/hooks'; // Ensure './store/hooks' exists or correct the path\r\nimport { viewManager } from './services/ViewManager';\r\nimport { webGLContextManager } from './services/WebGLContextManager';\r\nimport { Provider } from 'react-redux';\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\nimport { store, persistor } from './store';\r\nimport { initializeNodes } from './store/slices/nodesSlice';\r\nimport { selectViewMode } from './store/slices/interfaceSlice';\r\nimport './App.css';\r\n\r\n// Interface to track view transitions for debugging\r\ninterface ViewTransition {\r\n  from: string;\r\n  to: string;\r\n  timestamp: number;\r\n}\r\n\r\n// Memory API types\r\ninterface MemoryInfo {\r\n  jsHeapSizeLimit: number;\r\n  totalJSHeapSize: number;\r\n  usedJSHeapSize: number;\r\n}\r\n\r\n// Extended Performance interface to include non-standard memory property\r\ninterface ExtendedPerformance extends Performance {\r\n  memory?: MemoryInfo;\r\n}\r\n\r\n// Type guard for checking if performance has memory property\r\nfunction hasMemory(performance: Performance): performance is ExtendedPerformance {\r\n  return 'memory' in performance;\r\n}\r\n\r\n// Interface for performance tracking\r\ninterface PerformanceRecord {\r\n  timestamp: number;\r\n  fps: number;\r\n  memory?: MemoryInfo;\r\n}\r\n\r\n// Dynamically import main view components\r\nconst ConstellationView = lazy(() => import('./components/Constellation/ConstellationView'));\r\nconst NodeView = lazy(() => import('./components/NodeView/NodeView'));\r\nconst Onboarding = lazy(() => import('./components/Onboarding/Onboarding'));\r\n\r\n// Loading component for Suspense fallback\r\nconst LoadingView = () => (\r\n  <div className=\"loading-container\">\r\n    <div className=\"loading-spinner\"></div>\r\n    <p>Loading view...</p>\r\n  </div>\r\n);\r\n\r\n// Inner App component that uses Redux hooks\r\nfunction AppContent() {\r\n  const dispatch = useAppDispatch();\r\n  const viewMode = useSelector(selectViewMode);\r\n  \r\n  // State to track view transitions for debugging\r\n  const [viewTransitions, setViewTransitions] = useState<ViewTransition[]>([]);\r\n  const prevViewModeRef = useRef<string>(viewMode);\r\n  \r\n  // Performance monitoring\r\n  const [performanceRecords, setPerformanceRecords] = useState<PerformanceRecord[]>([]);\r\n  const performanceMonitorRef = useRef<number | null>(null);\r\n  const latestRecordsRef = useRef<PerformanceRecord[]>([]);\r\n  \r\n  // Keep the ref updated with the latest state value\r\n  useEffect(() => {\r\n    latestRecordsRef.current = performanceRecords;\r\n  }, [performanceRecords]);\r\n  \r\n  // Monitor performance metrics - with performance tracking throttle\r\n  useEffect(() => {\r\n    // Start performance monitoring\r\n    if (!performanceMonitorRef.current) {\r\n      console.log('[App] Starting performance monitoring');\r\n      \r\n      // Use a throttled update approach to prevent infinite loops\r\n      let lastUpdateTime = 0;\r\n      const THROTTLE_MS = 5000; // Increased to 5 seconds to reduce overhead\r\n      \r\n      const monitorPerformance = () => {\r\n        const now = performance.now();\r\n        \r\n        // Only update state if enough time has passed\r\n        if (now - lastUpdateTime > THROTTLE_MS) {\r\n          lastUpdateTime = now;\r\n          \r\n          // Calculate FPS based on frame timing using the ref instead of state\r\n          const records = latestRecordsRef.current;\r\n          const fps = 1000 / (now - (records[records.length - 1]?.timestamp || now - 1000));\r\n          \r\n          // Get memory info if available\r\n          let memoryInfo = undefined;\r\n          if (hasMemory(performance) && performance.memory) {\r\n            memoryInfo = {\r\n              jsHeapSizeLimit: performance.memory.jsHeapSizeLimit,\r\n              totalJSHeapSize: performance.memory.totalJSHeapSize,\r\n              usedJSHeapSize: performance.memory.usedJSHeapSize\r\n            };\r\n          }\r\n          \r\n          // Record performance data\r\n          setPerformanceRecords(prev => {\r\n            const newRecords = [...prev, {\r\n              timestamp: now,\r\n              fps: Math.min(60, fps), // Cap at 60 FPS for readable data\r\n              memory: memoryInfo\r\n            }];\r\n            \r\n            // Keep only last 10 records instead of 100\r\n            if (newRecords.length > 10) {\r\n              return newRecords.slice(-10);\r\n            }\r\n            return newRecords;\r\n          });\r\n        }\r\n        \r\n        // Request next frame\r\n        performanceMonitorRef.current = requestAnimationFrame(monitorPerformance);\r\n      };\r\n      \r\n      // Start monitoring\r\n      performanceMonitorRef.current = requestAnimationFrame(monitorPerformance);\r\n    }\r\n    \r\n    // Clean up on unmount\r\n    return () => {\r\n      if (performanceMonitorRef.current) {\r\n        cancelAnimationFrame(performanceMonitorRef.current);\r\n        performanceMonitorRef.current = null;\r\n      }\r\n    };\r\n  }, []); // No need for performanceRecords dependency now that we use the ref\r\n  \r\n  // Track view mode changes using ViewManager\r\n  useEffect(() => {\r\n    if (prevViewModeRef.current !== viewMode) {\r\n      // Update ViewManager with the new view state\r\n      viewManager.setActiveView(viewMode as 'constellation' | 'reading');\r\n      \r\n      // Log the transition\r\n      console.log(`[App] View transition: ${prevViewModeRef.current} -> ${viewMode}`);\r\n      \r\n      // Record the transition for debugging\r\n      setViewTransitions(prev => {\r\n        const newTransitions = [...prev, {\r\n          from: prevViewModeRef.current,\r\n          to: viewMode,\r\n          timestamp: Date.now()\r\n        }];\r\n\r\n        // Log performance data at transition using the ref for latest data\r\n        const records = latestRecordsRef.current;\r\n        if (records.length > 0) {\r\n          const latestRecord = records[records.length - 1];\r\n          console.log('[App] Performance at transition:', {\r\n            fps: latestRecord.fps.toFixed(1),\r\n            memory: latestRecord.memory ? {\r\n              used: (latestRecord.memory.usedJSHeapSize / (1024 * 1024)).toFixed(1) + 'MB',\r\n              total: (latestRecord.memory.totalJSHeapSize / (1024 * 1024)).toFixed(1) + 'MB'\r\n            } : 'unavailable',\r\n            transitions: newTransitions.length\r\n          });\r\n        }\r\n        return newTransitions;\r\n      });\r\n      \r\n      // Update previous value\r\n      prevViewModeRef.current = viewMode;\r\n    }\r\n  }, [viewMode]); // Only re-run when viewMode changes\r\n  \r\n  // Initialize nodes on mount\r\n  useEffect(() => {\r\n    console.log('[App] Initializing application');\r\n    dispatch(initializeNodes());\r\n  }, [dispatch]);\r\n  \r\n  // Listen for WebGL context loss at app level\r\n  useEffect(() => {\r\n    // Traditional error event handling\r\n    const handleWebGLContextLoss = (event: ErrorEvent) => {\r\n      if (event.message &&\r\n          (event.message.includes('WebGL context lost') ||\r\n           event.message.includes('THREE.WebGLRenderer'))) {\r\n        console.error('[App] WebGL context loss detected at app level!', {\r\n          message: event.message,\r\n          viewMode: viewMode,\r\n          transitions: viewTransitions.length,\r\n          timestamp: Date.now()\r\n        });\r\n      }\r\n    };\r\n    \r\n    // Custom event handling for centralized WebGLContextManager events\r\n    const handleWebGLContextLossEvent = (event: CustomEvent) => {\r\n      const { contextId, type } = event.detail;\r\n      console.error('[App] WebGL context loss event received from WebGLContextManager', {\r\n        contextId,\r\n        type,\r\n        viewMode: viewMode,\r\n        timestamp: Date.now()\r\n      });\r\n      \r\n      // Force a check on WebGL availability\r\n      const webGLSupport = webGLContextManager.checkWebGLSupport();\r\n      if (webGLSupport.isLowEndDevice) {\r\n        console.warn('[App] Device seems to be low-end, may need to disable visual effects');\r\n      }\r\n    };\r\n    \r\n    window.addEventListener('error', handleWebGLContextLoss);\r\n    window.addEventListener('webgl-context-loss', handleWebGLContextLossEvent as EventListener);\r\n    \r\n    // Register transition callbacks with ViewManager\r\n    viewManager.registerTransitionCallbacks({\r\n      onBeforeTransition: (from, to) => {\r\n        console.log(`[App] ViewManager transition started: ${from} → ${to}`);\r\n      },\r\n      onAfterTransition: (from, to) => {\r\n        console.log(`[App] ViewManager transition completed: ${from} → ${to}`);\r\n      }\r\n    });\r\n    \r\n    // Set up cleanup for application shutdown\r\n    return () => {\r\n      window.removeEventListener('error', handleWebGLContextLoss);\r\n      window.removeEventListener('webgl-context-loss', handleWebGLContextLossEvent as EventListener);\r\n      \r\n      // The disposeAllContexts call has been removed from here to prevent race conditions.\r\n      // The WebGLContextManager's own beforeunload handler is sufficient for final cleanup.\r\n      console.log('[App] Unmounting');\r\n    };\r\n  }, [viewMode, viewTransitions.length]); // Re-register listeners if viewMode or transitions change to ensure handlers have fresh data.\r\n  \r\n  return (\r\n    <div className=\"app-container\">\r\n      <header className=\"app-header\">\r\n        <h1 className=\"app-title\">The Eternal Return of the Digital Self</h1>\r\n      </header>\r\n      <div className=\"stars-container\">\r\n        <div className=\"stars\"></div>\r\n        <div className=\"stars2\"></div>\r\n        <div className=\"stars3\"></div>\r\n      </div>\r\n      \r\n      {/* Use ViewManager's unique keys to force complete unmount/remount of components */}\r\n      <Suspense fallback={<LoadingView />}>\r\n        {viewMode === 'constellation' ? (\r\n          <ConstellationView key={`constellation-${viewManager.getUniqueViewKey()}`} />\r\n        ) : (\r\n          <NodeView key={`node-${viewManager.getUniqueViewKey()}`} />\r\n        )}\r\n      </Suspense>\r\n      <Suspense fallback={<div></div>}>\r\n        <Onboarding />\r\n      </Suspense>\r\n      \r\n      {/* Debug overlay - only visible in development */}\r\n      {process.env.NODE_ENV === 'development' && performanceRecords.length > 0 && (\r\n        <div className=\"app-debug-overlay\">\r\n          <div className=\"performance-stats\">\r\n            <span>FPS: {performanceRecords[performanceRecords.length - 1].fps.toFixed(1)}</span>\r\n            <span>View: {viewMode}</span>\r\n            <span>Transitions: {viewTransitions.length}</span>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\n// Main App component with Redux providers\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n      <PersistGate loading={<div>Loading...</div>} persistor={persistor}>\r\n        <AppContent />\r\n      </PersistGate>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;"],"file":"assets/app-Blk9s7Pp.js"}