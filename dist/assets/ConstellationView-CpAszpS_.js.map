{"version":3,"mappings":"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","names":["_PositionSynchronizer","__publicField","positions","time","isMinimap","nodeId","basePos","nx","ny","nz","maxOffset","xOffset","yOffset","zOffset","newPos","callback","error","PositionSynchronizer","ThreeJSComponents","lazy","__vitePreload","ConstellationLoading","jsxs","jsx","WebGLErrorNotification","onDismiss","ConstellationView","dispatch","useDispatch","webGLError","setWebGLError","useState","nodes","useSelector","selectConstellationNodes","connections","selectConnections","isInitialChoicePhase","instancedMeshRef","useRef","contextIdRef","useEffect","viewManager","webGLContextManager","mappedConnections","useMemo","c","connectionObjects","positionSynchronizer","synchronizedPositions","setSynchronizedPositions","nodePositions","node","index","numNodes","radius","offset","increment","y","r","phi","x","z","unsubscribe","newPositions","finalNodePositions","handleWebGLContextCreated","useCallback","renderer","id","handleContextLoss","event","lostContextId","type","Suspense","setViewMode"],"ignoreList":[],"sources":["../../src/components/Constellation/ConstellationView.tsx"],"sourcesContent":["import { useSelector, useDispatch } from 'react-redux';\r\nimport { selectConstellationNodes, selectConnections } from '../../store/slices/nodesSlice';\r\nimport { setViewMode } from '../../store/slices/interfaceSlice';\r\nimport './ConstellationView.css';\r\nimport { useMemo, useRef, lazy, Suspense, useState, useEffect, useCallback } from 'react';\r\nimport { InstancedMesh } from 'three';\r\nimport * as THREE from 'three';\r\nimport { Connection } from '../../types';\r\nimport { webGLContextManager } from '../../services/WebGLContextManager';\r\nimport { viewManager } from '../../services/ViewManager';\r\n\r\n// Centralized position management system\r\nclass PositionSynchronizer {\r\n  private static instance: PositionSynchronizer;\r\n  private basePositions: { [key: string]: [number, number, number] } = {};\r\n  private currentPositions: { [key: string]: [number, number, number] } = {};\r\n  private lastUpdateTime: number = 0;\r\n  private updateCallbacks: Set<(positions: { [key: string]: [number, number, number] }) => void> = new Set();\r\n  private isUpdating: boolean = false;\r\n  \r\n  static getInstance(): PositionSynchronizer {\r\n    if (!PositionSynchronizer.instance) {\r\n      PositionSynchronizer.instance = new PositionSynchronizer();\r\n    }\r\n    return PositionSynchronizer.instance;\r\n  }\r\n  \r\n  setBasePositions(positions: { [key: string]: [number, number, number] }) {\r\n    this.basePositions = { ...positions };\r\n    this.currentPositions = { ...positions };\r\n  }\r\n  \r\n  updatePositions(time: number, isMinimap: boolean = false) {\r\n    if (this.isUpdating) return this.currentPositions;\r\n    \r\n    this.isUpdating = true;\r\n    const UPDATE_INTERVAL = 0.15; // 150ms in seconds\r\n    \r\n    if (time - this.lastUpdateTime >= UPDATE_INTERVAL) {\r\n      this.lastUpdateTime = time;\r\n      \r\n      // Calculate new positions with noise (same algorithm as before)\r\n      Object.keys(this.basePositions).forEach(nodeId => {\r\n        const basePos = this.basePositions[nodeId];\r\n        if (!basePos) return;\r\n        \r\n        if (isMinimap) {\r\n          // For minimap: completely fixed positions\r\n          this.currentPositions[nodeId] = [...basePos];\r\n        } else {\r\n          // For main view: apply very subtle movement\r\n          const nx = Math.sin(basePos[0] * 0.1 + time * 0.02) * 0.01;\r\n          const ny = Math.sin((basePos[1] + 100) * 0.1 + time * 0.02) * 0.01;\r\n          const nz = Math.sin((basePos[2] + 200) * 0.1 + time * 0.02) * 0.01;\r\n          \r\n          // Much smaller maximum offset to keep nodes more stable\r\n          const maxOffset = 0.01;\r\n          const xOffset = Math.min(Math.abs(nx), maxOffset) * Math.sign(nx);\r\n          const yOffset = Math.min(Math.abs(ny), maxOffset) * Math.sign(ny);\r\n          const zOffset = Math.min(Math.abs(nz), maxOffset) * Math.sign(nz);\r\n          \r\n          // Store the exact same position for all components\r\n          const newPos = [\r\n            basePos[0] + xOffset,\r\n            basePos[1] + yOffset,\r\n            basePos[2] + zOffset\r\n          ] as [number, number, number];\r\n          \r\n          this.currentPositions[nodeId] = newPos;\r\n        }\r\n      });\r\n      \r\n      // Notify all subscribers\r\n      this.updateCallbacks.forEach(callback => {\r\n        try {\r\n          callback({ ...this.currentPositions });\r\n        } catch (error) {\r\n          console.error('Error in position update callback:', error);\r\n        }\r\n      });\r\n    }\r\n    \r\n    this.isUpdating = false;\r\n    return this.currentPositions;\r\n  }\r\n  \r\n  getCurrentPositions() {\r\n    return { ...this.currentPositions };\r\n  }\r\n  \r\n  subscribeToUpdates(callback: (positions: { [key: string]: [number, number, number] }) => void) {\r\n    this.updateCallbacks.add(callback);\r\n    return () => this.updateCallbacks.delete(callback);\r\n  }\r\n  \r\n  reset() {\r\n    this.basePositions = {};\r\n    this.currentPositions = {};\r\n    this.lastUpdateTime = 0;\r\n    this.updateCallbacks.clear();\r\n    this.isUpdating = false;\r\n  }\r\n}\r\n\r\n// Dynamically import Three.js related dependencies\r\n// Use explicit path with extension to help TypeScript\r\nconst ThreeJSComponents = lazy(() => import('./ThreeJSComponents.tsx'));\r\n\r\n// Loading component for Suspense fallback\r\nconst ConstellationLoading = () => (\r\n  <div className=\"constellation-loading\">\r\n    <div className=\"loading-spinner\"></div>\r\n    <p>Generating constellation view...</p>\r\n  </div>\r\n);\r\n\r\n// WebGL error notification component\r\nconst WebGLErrorNotification = ({ onDismiss }: { onDismiss: () => void }) => {\r\n  return (\r\n    <div className=\"webgl-error-container\">\r\n      <div className=\"webgl-error-header\">WebGL Error Detected</div>\r\n      <div className=\"webgl-error-message\">\r\n        A graphics rendering error occurred. This may affect the constellation display.\r\n        You can continue using the application in text-only mode.\r\n      </div>\r\n      <div className=\"webgl-error-actions\">\r\n        <button className=\"webgl-error-action\" onClick={onDismiss}>\r\n          Continue in Text Mode\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst ConstellationView = () => {\r\n  const dispatch = useDispatch();\r\n  const [webGLError, setWebGLError] = useState<Error | null>(null);\r\n  const nodes = useSelector(selectConstellationNodes);\r\n  const connections = useSelector(selectConnections);\r\n  // Temporarily use a default value for isInitialChoicePhase to focus on connection alignment fix\r\n  const isInitialChoicePhase = false;\r\n  const instancedMeshRef = useRef<InstancedMesh>(null!);\r\n  const contextIdRef = useRef<string | null>(null);\r\n  \r\n  // Register this component with ViewManager only once on mount/unmount\r\n  useEffect(() => {\r\n    console.log('[ConstellationView] Component mounted');\r\n    viewManager.registerViewMount('constellation', true);\r\n    \r\n    return () => {\r\n      // Inform ViewManager when unmounting\r\n      console.log('[ConstellationView] Component unmounting');\r\n      viewManager.registerViewMount('constellation', false);\r\n      \r\n      // Make sure to clean up WebGL context when unmounting\r\n      if (contextIdRef.current) {\r\n        console.log(`[ConstellationView] Unmounting, disposing WebGL context: ${contextIdRef.current}`);\r\n        webGLContextManager.disposeContext(contextIdRef.current);\r\n        contextIdRef.current = null;\r\n      }\r\n    };\r\n  }, []); // Empty dependency array ensures this only runs on mount/unmount\r\n\r\n  // Create formatted connections for ThreeJSComponents\r\n  // Convert from {start, end} format to {source, target} format\r\n  const mappedConnections = useMemo(() =>\r\n    connections.map(c => ({ source: c.start, target: c.end })),\r\n  [connections]);\r\n  \r\n  // Create Connection objects with correct types for ThreeJSComponents\r\n  const connectionObjects = useMemo(() =>\r\n    connections.map(c => ({ source: c.start, target: c.end } as Connection)),\r\n  [connections]);\r\n\r\n  // Centralized position management\r\n  const positionSynchronizer = useRef(PositionSynchronizer.getInstance());\r\n  const [synchronizedPositions, setSynchronizedPositions] = useState<{ [key: string]: [number, number, number] }>({});\r\n  \r\n  const nodePositions = useMemo(() => {\r\n    // Debug\r\n    console.log(\"Calculating positions for nodes:\", nodes.length);\r\n    \r\n    const positions: { [key: string]: [number, number, number] } = {};\r\n    \r\n    // Special case for empty nodes array to avoid issues\r\n    if (nodes.length === 0) {\r\n      console.warn(\"No nodes to position\");\r\n      return positions;\r\n    }\r\n    \r\n    // Generate distinct positions for each node in a spherical layout\r\n    nodes.forEach((node, index) => {\r\n      const numNodes = nodes.length;\r\n      // Increased radius to spread nodes out more\r\n      const radius = 15;\r\n      \r\n      // Fibonacci sphere algorithm for more even distribution\r\n      const offset = 2.0 / numNodes;\r\n      const increment = Math.PI * (3.0 - Math.sqrt(5.0));\r\n      \r\n      const y = ((index * offset) - 1) + (offset / 2);\r\n      const r = Math.sqrt(1 - y * y);\r\n      const phi = index * increment;\r\n      \r\n      const x = Math.cos(phi) * r * radius;\r\n      const z = Math.sin(phi) * r * radius;\r\n      \r\n      positions[node.id] = [x, y * radius, z];\r\n    });\r\n    \r\n    // Set base positions in synchronizer\r\n    positionSynchronizer.current.setBasePositions(positions);\r\n    \r\n    return positions;\r\n  }, [nodes]);\r\n  \r\n  // Subscribe to position updates\r\n  useEffect(() => {\r\n    const unsubscribe = positionSynchronizer.current.subscribeToUpdates((newPositions) => {\r\n      setSynchronizedPositions(newPositions);\r\n    });\r\n    \r\n    return () => {\r\n      unsubscribe();\r\n    };\r\n  }, []);\r\n  \r\n  // Use synchronized positions if available, otherwise fall back to base positions\r\n  const finalNodePositions = Object.keys(synchronizedPositions).length > 0 ? synchronizedPositions : nodePositions;\r\n\r\n  // Handle WebGL context registration - memoized to prevent recreating on each render\r\n  const handleWebGLContextCreated = useCallback((renderer: THREE.WebGLRenderer) => {\r\n    // Don't re-register if we already have a context ID\r\n    if (contextIdRef.current) {\r\n      console.log(`[ConstellationView] Context already registered: ${contextIdRef.current}`);\r\n      return;\r\n    }\r\n    \r\n    // Register with the WebGL context manager\r\n    const id = webGLContextManager.registerContext(\r\n      renderer,\r\n      'constellation',\r\n      2, // High priority\r\n      // Suspend function\r\n      () => {\r\n        console.log('[ConstellationView] Suspending WebGL rendering');\r\n        // Logic to pause rendering or reduce frame rate\r\n      },\r\n      // Resume function\r\n      () => {\r\n        console.log('[ConstellationView] Resuming WebGL rendering');\r\n        // Logic to resume normal rendering\r\n      }\r\n    );\r\n    \r\n    contextIdRef.current = id;\r\n    console.log(`[ConstellationView] Registered WebGL context: ${id}`);\r\n  }, []); // Empty dependency array ensures stable callback\r\n\r\n  // Listen for application-wide WebGL context loss events\r\n  useEffect(() => {\r\n    const handleContextLoss = (event: CustomEvent) => {\r\n      const { contextId: lostContextId, type } = event.detail;\r\n      \r\n      // Only handle if this matches our context or is constellation type\r\n      if ((contextIdRef.current && contextIdRef.current === lostContextId) || type === 'constellation') {\r\n        console.error(\"[ConstellationView] Received WebGL context loss event\");\r\n        setWebGLError(new Error(\"WebGL context lost - application event\"));\r\n      }\r\n    };\r\n    \r\n    // Add event listener for context loss\r\n    window.addEventListener(\r\n      'webgl-context-loss',\r\n      handleContextLoss as EventListener\r\n    );\r\n    \r\n    return () => {\r\n      window.removeEventListener(\r\n        'webgl-context-loss',\r\n        handleContextLoss as EventListener\r\n      );\r\n    };\r\n  }, []); // Empty dependency array - we use ref instead of state\r\n\r\n  return (\r\n    <div className=\"constellation-container\">\r\n      <Suspense fallback={<ConstellationLoading />}>\r\n        <ThreeJSComponents\r\n          nodes={nodes}\r\n          nodePositions={finalNodePositions}\r\n          connections={connectionObjects}\r\n          mappedConnections={mappedConnections}\r\n          instancedMeshRef={instancedMeshRef}\r\n          isInitialChoicePhase={isInitialChoicePhase}\r\n          onWebGLContextCreated={handleWebGLContextCreated}\r\n          onWebGLError={(error) => {\r\n            console.error(\"[ConstellationView] WebGL error reported:\", error);\r\n            setWebGLError(error);\r\n          }}\r\n          positionSynchronizer={positionSynchronizer.current}\r\n        />\r\n      </Suspense>\r\n      \r\n      {/* Show WebGL error notification when an error occurs */}\r\n      {webGLError && (\r\n        <WebGLErrorNotification\r\n          onDismiss={() => {\r\n            // Switch to reading mode to avoid WebGL rendering\r\n            dispatch(setViewMode('reading'));\r\n            setWebGLError(null);\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\n// Component has been refactored to integrate with WebGLContextManager and ViewManager\r\n\r\nexport default ConstellationView;"],"file":"assets/ConstellationView-CpAszpS_.js"}