{"version":3,"file":"markdown-vendor-CHcODoc4.js","sources":["../../node_modules/comma-separated-tokens/index.js","../../node_modules/estree-util-is-identifier-name/lib/index.js","../../node_modules/hast-util-whitespace/lib/index.js","../../node_modules/property-information/lib/util/schema.js","../../node_modules/property-information/lib/util/merge.js","../../node_modules/property-information/lib/normalize.js","../../node_modules/property-information/lib/util/info.js","../../node_modules/property-information/lib/util/types.js","../../node_modules/property-information/lib/util/defined-info.js","../../node_modules/property-information/lib/util/create.js","../../node_modules/property-information/lib/aria.js","../../node_modules/property-information/lib/util/case-sensitive-transform.js","../../node_modules/property-information/lib/util/case-insensitive-transform.js","../../node_modules/property-information/lib/html.js","../../node_modules/property-information/lib/svg.js","../../node_modules/property-information/lib/xlink.js","../../node_modules/property-information/lib/xmlns.js","../../node_modules/property-information/lib/xml.js","../../node_modules/property-information/lib/hast-to-react.js","../../node_modules/property-information/lib/find.js","../../node_modules/property-information/index.js","../../node_modules/space-separated-tokens/index.js","../../node_modules/inline-style-parser/index.js","../../node_modules/style-to-object/cjs/index.js","../../node_modules/style-to-js/cjs/utilities.js","../../node_modules/style-to-js/cjs/index.js","../../node_modules/unist-util-position/lib/index.js","../../node_modules/unist-util-stringify-position/lib/index.js","../../node_modules/vfile-message/lib/index.js","../../node_modules/hast-util-to-jsx-runtime/lib/index.js","../../node_modules/html-url-attributes/lib/index.js","../../node_modules/mdast-util-to-string/lib/index.js","../../node_modules/decode-named-character-reference/index.dom.js","../../node_modules/micromark-util-chunked/index.js","../../node_modules/micromark-util-combine-extensions/index.js","../../node_modules/micromark-util-decode-numeric-character-reference/index.js","../../node_modules/micromark-util-normalize-identifier/index.js","../../node_modules/micromark-util-character/index.js","../../node_modules/micromark-util-sanitize-uri/index.js","../../node_modules/micromark-factory-space/index.js","../../node_modules/micromark/lib/initialize/content.js","../../node_modules/micromark/lib/initialize/document.js","../../node_modules/micromark-util-classify-character/index.js","../../node_modules/micromark-util-resolve-all/index.js","../../node_modules/micromark-core-commonmark/lib/attention.js","../../node_modules/micromark-core-commonmark/lib/autolink.js","../../node_modules/micromark-core-commonmark/lib/blank-line.js","../../node_modules/micromark-core-commonmark/lib/block-quote.js","../../node_modules/micromark-core-commonmark/lib/character-escape.js","../../node_modules/micromark-core-commonmark/lib/character-reference.js","../../node_modules/micromark-core-commonmark/lib/code-fenced.js","../../node_modules/micromark-core-commonmark/lib/code-indented.js","../../node_modules/micromark-core-commonmark/lib/code-text.js","../../node_modules/micromark-util-subtokenize/lib/splice-buffer.js","../../node_modules/micromark-util-subtokenize/index.js","../../node_modules/micromark-core-commonmark/lib/content.js","../../node_modules/micromark-factory-destination/index.js","../../node_modules/micromark-factory-label/index.js","../../node_modules/micromark-factory-title/index.js","../../node_modules/micromark-factory-whitespace/index.js","../../node_modules/micromark-core-commonmark/lib/definition.js","../../node_modules/micromark-core-commonmark/lib/hard-break-escape.js","../../node_modules/micromark-core-commonmark/lib/heading-atx.js","../../node_modules/micromark-util-html-tag-name/index.js","../../node_modules/micromark-core-commonmark/lib/html-flow.js","../../node_modules/micromark-core-commonmark/lib/html-text.js","../../node_modules/micromark-core-commonmark/lib/label-end.js","../../node_modules/micromark-core-commonmark/lib/label-start-image.js","../../node_modules/micromark-core-commonmark/lib/label-start-link.js","../../node_modules/micromark-core-commonmark/lib/line-ending.js","../../node_modules/micromark-core-commonmark/lib/thematic-break.js","../../node_modules/micromark-core-commonmark/lib/list.js","../../node_modules/micromark-core-commonmark/lib/setext-underline.js","../../node_modules/micromark/lib/initialize/flow.js","../../node_modules/micromark/lib/initialize/text.js","../../node_modules/micromark/lib/constructs.js","../../node_modules/micromark/lib/create-tokenizer.js","../../node_modules/micromark/lib/parse.js","../../node_modules/micromark/lib/postprocess.js","../../node_modules/micromark/lib/preprocess.js","../../node_modules/micromark-util-decode-string/index.js","../../node_modules/mdast-util-from-markdown/lib/index.js","../../node_modules/remark-parse/lib/index.js","../../node_modules/mdast-util-to-hast/lib/handlers/blockquote.js","../../node_modules/mdast-util-to-hast/lib/handlers/break.js","../../node_modules/mdast-util-to-hast/lib/handlers/code.js","../../node_modules/mdast-util-to-hast/lib/handlers/delete.js","../../node_modules/mdast-util-to-hast/lib/handlers/emphasis.js","../../node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js","../../node_modules/mdast-util-to-hast/lib/handlers/heading.js","../../node_modules/mdast-util-to-hast/lib/handlers/html.js","../../node_modules/mdast-util-to-hast/lib/revert.js","../../node_modules/mdast-util-to-hast/lib/handlers/image-reference.js","../../node_modules/mdast-util-to-hast/lib/handlers/image.js","../../node_modules/mdast-util-to-hast/lib/handlers/inline-code.js","../../node_modules/mdast-util-to-hast/lib/handlers/link-reference.js","../../node_modules/mdast-util-to-hast/lib/handlers/link.js","../../node_modules/mdast-util-to-hast/lib/handlers/list-item.js","../../node_modules/mdast-util-to-hast/lib/handlers/list.js","../../node_modules/mdast-util-to-hast/lib/handlers/paragraph.js","../../node_modules/mdast-util-to-hast/lib/handlers/root.js","../../node_modules/mdast-util-to-hast/lib/handlers/strong.js","../../node_modules/mdast-util-to-hast/lib/handlers/table.js","../../node_modules/mdast-util-to-hast/lib/handlers/table-row.js","../../node_modules/mdast-util-to-hast/lib/handlers/table-cell.js","../../node_modules/trim-lines/index.js","../../node_modules/mdast-util-to-hast/lib/handlers/text.js","../../node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js","../../node_modules/mdast-util-to-hast/lib/handlers/index.js","../../node_modules/@ungap/structured-clone/esm/types.js","../../node_modules/@ungap/structured-clone/esm/deserialize.js","../../node_modules/@ungap/structured-clone/esm/serialize.js","../../node_modules/@ungap/structured-clone/esm/index.js","../../node_modules/mdast-util-to-hast/lib/footer.js","../../node_modules/unist-util-is/lib/index.js","../../node_modules/unist-util-visit-parents/lib/index.js","../../node_modules/unist-util-visit/lib/index.js","../../node_modules/mdast-util-to-hast/lib/state.js","../../node_modules/mdast-util-to-hast/lib/index.js","../../node_modules/remark-rehype/lib/index.js","../../node_modules/bail/index.js","../../node_modules/extend/index.js","../../node_modules/is-plain-obj/index.js","../../node_modules/trough/lib/index.js","../../node_modules/vfile/lib/minpath.browser.js","../../node_modules/vfile/lib/minproc.browser.js","../../node_modules/vfile/lib/minurl.shared.js","../../node_modules/vfile/lib/minurl.browser.js","../../node_modules/vfile/lib/index.js","../../node_modules/unified/lib/callable-instance.js","../../node_modules/unified/lib/index.js","../../node_modules/react-markdown/lib/index.js","../../node_modules/ccount/index.js","../../node_modules/mdast-util-find-and-replace/node_modules/escape-string-regexp/index.js","../../node_modules/mdast-util-find-and-replace/lib/index.js","../../node_modules/mdast-util-gfm-autolink-literal/lib/index.js","../../node_modules/mdast-util-gfm-footnote/lib/index.js","../../node_modules/mdast-util-gfm-strikethrough/lib/index.js","../../node_modules/markdown-table/index.js","../../node_modules/mdast-util-to-markdown/lib/handle/blockquote.js","../../node_modules/mdast-util-to-markdown/lib/util/pattern-in-scope.js","../../node_modules/mdast-util-to-markdown/lib/handle/break.js","../../node_modules/longest-streak/index.js","../../node_modules/mdast-util-to-markdown/lib/util/format-code-as-indented.js","../../node_modules/mdast-util-to-markdown/lib/util/check-fence.js","../../node_modules/mdast-util-to-markdown/lib/handle/code.js","../../node_modules/mdast-util-to-markdown/lib/util/check-quote.js","../../node_modules/mdast-util-to-markdown/lib/handle/definition.js","../../node_modules/mdast-util-to-markdown/lib/util/check-emphasis.js","../../node_modules/mdast-util-to-markdown/lib/util/encode-character-reference.js","../../node_modules/mdast-util-to-markdown/lib/util/encode-info.js","../../node_modules/mdast-util-to-markdown/lib/handle/emphasis.js","../../node_modules/mdast-util-to-markdown/lib/util/format-heading-as-setext.js","../../node_modules/mdast-util-to-markdown/lib/handle/heading.js","../../node_modules/mdast-util-to-markdown/lib/handle/html.js","../../node_modules/mdast-util-to-markdown/lib/handle/image.js","../../node_modules/mdast-util-to-markdown/lib/handle/image-reference.js","../../node_modules/mdast-util-to-markdown/lib/handle/inline-code.js","../../node_modules/mdast-util-to-markdown/lib/util/format-link-as-autolink.js","../../node_modules/mdast-util-to-markdown/lib/handle/link.js","../../node_modules/mdast-util-to-markdown/lib/handle/link-reference.js","../../node_modules/mdast-util-to-markdown/lib/util/check-bullet.js","../../node_modules/mdast-util-to-markdown/lib/util/check-bullet-other.js","../../node_modules/mdast-util-to-markdown/lib/util/check-bullet-ordered.js","../../node_modules/mdast-util-to-markdown/lib/util/check-rule.js","../../node_modules/mdast-util-to-markdown/lib/handle/list.js","../../node_modules/mdast-util-to-markdown/lib/util/check-list-item-indent.js","../../node_modules/mdast-util-to-markdown/lib/handle/list-item.js","../../node_modules/mdast-util-to-markdown/lib/handle/paragraph.js","../../node_modules/mdast-util-phrasing/lib/index.js","../../node_modules/mdast-util-to-markdown/lib/handle/root.js","../../node_modules/mdast-util-to-markdown/lib/util/check-strong.js","../../node_modules/mdast-util-to-markdown/lib/handle/strong.js","../../node_modules/mdast-util-to-markdown/lib/handle/text.js","../../node_modules/mdast-util-to-markdown/lib/util/check-rule-repetition.js","../../node_modules/mdast-util-to-markdown/lib/handle/thematic-break.js","../../node_modules/mdast-util-to-markdown/lib/handle/index.js","../../node_modules/mdast-util-gfm-table/lib/index.js","../../node_modules/mdast-util-gfm-task-list-item/lib/index.js","../../node_modules/mdast-util-gfm/lib/index.js","../../node_modules/micromark-extension-gfm-autolink-literal/lib/syntax.js","../../node_modules/micromark-extension-gfm-footnote/lib/syntax.js","../../node_modules/micromark-extension-gfm-strikethrough/lib/syntax.js","../../node_modules/micromark-extension-gfm-table/lib/edit-map.js","../../node_modules/micromark-extension-gfm-table/lib/infer.js","../../node_modules/micromark-extension-gfm-table/lib/syntax.js","../../node_modules/micromark-extension-gfm-task-list-item/lib/syntax.js","../../node_modules/micromark-extension-gfm/index.js","../../node_modules/remark-gfm/lib/index.js"],"sourcesContent":["/**\r\n * @typedef Options\r\n *   Configuration for `stringify`.\r\n * @property {boolean} [padLeft=true]\r\n *   Whether to pad a space before a token.\r\n * @property {boolean} [padRight=false]\r\n *   Whether to pad a space after a token.\r\n */\r\n\r\n/**\r\n * @typedef {Options} StringifyOptions\r\n *   Please use `StringifyOptions` instead.\r\n */\r\n\r\n/**\r\n * Parse comma-separated tokens to an array.\r\n *\r\n * @param {string} value\r\n *   Comma-separated tokens.\r\n * @returns {Array<string>}\r\n *   List of tokens.\r\n */\r\nexport function parse(value) {\r\n  /** @type {Array<string>} */\r\n  const tokens = []\r\n  const input = String(value || '')\r\n  let index = input.indexOf(',')\r\n  let start = 0\r\n  /** @type {boolean} */\r\n  let end = false\r\n\r\n  while (!end) {\r\n    if (index === -1) {\r\n      index = input.length\r\n      end = true\r\n    }\r\n\r\n    const token = input.slice(start, index).trim()\r\n\r\n    if (token || !end) {\r\n      tokens.push(token)\r\n    }\r\n\r\n    start = index + 1\r\n    index = input.indexOf(',', start)\r\n  }\r\n\r\n  return tokens\r\n}\r\n\r\n/**\r\n * Serialize an array of strings or numbers to comma-separated tokens.\r\n *\r\n * @param {Array<string|number>} values\r\n *   List of tokens.\r\n * @param {Options} [options]\r\n *   Configuration for `stringify` (optional).\r\n * @returns {string}\r\n *   Comma-separated tokens.\r\n */\r\nexport function stringify(values, options) {\r\n  const settings = options || {}\r\n\r\n  // Ensure the last empty entry is seen.\r\n  const input = values[values.length - 1] === '' ? [...values, ''] : values\r\n\r\n  return input\r\n    .join(\r\n      (settings.padRight ? ' ' : '') +\r\n        ',' +\r\n        (settings.padLeft === false ? '' : ' ')\r\n    )\r\n    .trim()\r\n}\r\n","/**\r\n * @typedef Options\r\n *   Configuration.\r\n * @property {boolean | null | undefined} [jsx=false]\r\n *   Support JSX identifiers (default: `false`).\r\n */\r\n\r\nconst startRe = /[$_\\p{ID_Start}]/u\r\nconst contRe = /[$_\\u{200C}\\u{200D}\\p{ID_Continue}]/u\r\nconst contReJsx = /[-$_\\u{200C}\\u{200D}\\p{ID_Continue}]/u\r\nconst nameRe = /^[$_\\p{ID_Start}][$_\\u{200C}\\u{200D}\\p{ID_Continue}]*$/u\r\nconst nameReJsx = /^[$_\\p{ID_Start}][-$_\\u{200C}\\u{200D}\\p{ID_Continue}]*$/u\r\n\r\n/** @type {Options} */\r\nconst emptyOptions = {}\r\n\r\n/**\r\n * Checks if the given code point can start an identifier.\r\n *\r\n * @param {number | undefined} code\r\n *   Code point to check.\r\n * @returns {boolean}\r\n *   Whether `code` can start an identifier.\r\n */\r\n// Note: `undefined` is supported so you can pass the result from `''.codePointAt`.\r\nexport function start(code) {\r\n  return code ? startRe.test(String.fromCodePoint(code)) : false\r\n}\r\n\r\n/**\r\n * Checks if the given code point can continue an identifier.\r\n *\r\n * @param {number | undefined} code\r\n *   Code point to check.\r\n * @param {Options | null | undefined} [options]\r\n *   Configuration (optional).\r\n * @returns {boolean}\r\n *   Whether `code` can continue an identifier.\r\n */\r\n// Note: `undefined` is supported so you can pass the result from `''.codePointAt`.\r\nexport function cont(code, options) {\r\n  const settings = options || emptyOptions\r\n  const re = settings.jsx ? contReJsx : contRe\r\n  return code ? re.test(String.fromCodePoint(code)) : false\r\n}\r\n\r\n/**\r\n * Checks if the given value is a valid identifier name.\r\n *\r\n * @param {string} name\r\n *   Identifier to check.\r\n * @param {Options | null | undefined} [options]\r\n *   Configuration (optional).\r\n * @returns {boolean}\r\n *   Whether `name` can be an identifier.\r\n */\r\nexport function name(name, options) {\r\n  const settings = options || emptyOptions\r\n  const re = settings.jsx ? nameReJsx : nameRe\r\n  return re.test(name)\r\n}\r\n","/**\r\n * @typedef {import('hast').Nodes} Nodes\r\n */\r\n\r\n// HTML whitespace expression.\r\n// See <https://infra.spec.whatwg.org/#ascii-whitespace>.\r\nconst re = /[ \\t\\n\\f\\r]/g\r\n\r\n/**\r\n * Check if the given value is *inter-element whitespace*.\r\n *\r\n * @param {Nodes | string} thing\r\n *   Thing to check (`Node` or `string`).\r\n * @returns {boolean}\r\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\r\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\r\n *   (`\\r`), or form feed (`\\f`); if a node is passed it must be a `Text` node,\r\n *   whose `value` field is checked.\r\n */\r\nexport function whitespace(thing) {\r\n  return typeof thing === 'object'\r\n    ? thing.type === 'text'\r\n      ? empty(thing.value)\r\n      : false\r\n    : empty(thing)\r\n}\r\n\r\n/**\r\n * @param {string} value\r\n * @returns {boolean}\r\n */\r\nfunction empty(value) {\r\n  return value.replace(re, '') === ''\r\n}\r\n","/**\r\n * @import {Schema as SchemaType, Space} from 'property-information'\r\n */\r\n\r\n/** @type {SchemaType} */\r\nexport class Schema {\r\n  /**\r\n   * @param {SchemaType['property']} property\r\n   *   Property.\r\n   * @param {SchemaType['normal']} normal\r\n   *   Normal.\r\n   * @param {Space | undefined} [space]\r\n   *   Space.\r\n   * @returns\r\n   *   Schema.\r\n   */\r\n  constructor(property, normal, space) {\r\n    this.normal = normal\r\n    this.property = property\r\n\r\n    if (space) {\r\n      this.space = space\r\n    }\r\n  }\r\n}\r\n\r\nSchema.prototype.normal = {}\r\nSchema.prototype.property = {}\r\nSchema.prototype.space = undefined\r\n","/**\r\n * @import {Info, Space} from 'property-information'\r\n */\r\n\r\nimport {Schema} from './schema.js'\r\n\r\n/**\r\n * @param {ReadonlyArray<Schema>} definitions\r\n *   Definitions.\r\n * @param {Space | undefined} [space]\r\n *   Space.\r\n * @returns {Schema}\r\n *   Schema.\r\n */\r\nexport function merge(definitions, space) {\r\n  /** @type {Record<string, Info>} */\r\n  const property = {}\r\n  /** @type {Record<string, string>} */\r\n  const normal = {}\r\n\r\n  for (const definition of definitions) {\r\n    Object.assign(property, definition.property)\r\n    Object.assign(normal, definition.normal)\r\n  }\r\n\r\n  return new Schema(property, normal, space)\r\n}\r\n","/**\r\n * Get the cleaned case insensitive form of an attribute or property.\r\n *\r\n * @param {string} value\r\n *   An attribute-like or property-like name.\r\n * @returns {string}\r\n *   Value that can be used to look up the properly cased property on a\r\n *   `Schema`.\r\n */\r\nexport function normalize(value) {\r\n  return value.toLowerCase()\r\n}\r\n","/**\r\n * @import {Info as InfoType} from 'property-information'\r\n */\r\n\r\n/** @type {InfoType} */\r\nexport class Info {\r\n  /**\r\n   * @param {string} property\r\n   *   Property.\r\n   * @param {string} attribute\r\n   *   Attribute.\r\n   * @returns\r\n   *   Info.\r\n   */\r\n  constructor(property, attribute) {\r\n    this.attribute = attribute\r\n    this.property = property\r\n  }\r\n}\r\n\r\nInfo.prototype.attribute = ''\r\nInfo.prototype.booleanish = false\r\nInfo.prototype.boolean = false\r\nInfo.prototype.commaOrSpaceSeparated = false\r\nInfo.prototype.commaSeparated = false\r\nInfo.prototype.defined = false\r\nInfo.prototype.mustUseProperty = false\r\nInfo.prototype.number = false\r\nInfo.prototype.overloadedBoolean = false\r\nInfo.prototype.property = ''\r\nInfo.prototype.spaceSeparated = false\r\nInfo.prototype.space = undefined\r\n","let powers = 0\r\n\r\nexport const boolean = increment()\r\nexport const booleanish = increment()\r\nexport const overloadedBoolean = increment()\r\nexport const number = increment()\r\nexport const spaceSeparated = increment()\r\nexport const commaSeparated = increment()\r\nexport const commaOrSpaceSeparated = increment()\r\n\r\nfunction increment() {\r\n  return 2 ** ++powers\r\n}\r\n","/**\r\n * @import {Space} from 'property-information'\r\n */\r\n\r\nimport {Info} from './info.js'\r\nimport * as types from './types.js'\r\n\r\nconst checks = /** @type {ReadonlyArray<keyof typeof types>} */ (\r\n  Object.keys(types)\r\n)\r\n\r\nexport class DefinedInfo extends Info {\r\n  /**\r\n   * @constructor\r\n   * @param {string} property\r\n   *   Property.\r\n   * @param {string} attribute\r\n   *   Attribute.\r\n   * @param {number | null | undefined} [mask]\r\n   *   Mask.\r\n   * @param {Space | undefined} [space]\r\n   *   Space.\r\n   * @returns\r\n   *   Info.\r\n   */\r\n  constructor(property, attribute, mask, space) {\r\n    let index = -1\r\n\r\n    super(property, attribute)\r\n\r\n    mark(this, 'space', space)\r\n\r\n    if (typeof mask === 'number') {\r\n      while (++index < checks.length) {\r\n        const check = checks[index]\r\n        mark(this, checks[index], (mask & types[check]) === types[check])\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nDefinedInfo.prototype.defined = true\r\n\r\n/**\r\n * @template {keyof DefinedInfo} Key\r\n *   Key type.\r\n * @param {DefinedInfo} values\r\n *   Info.\r\n * @param {Key} key\r\n *   Key.\r\n * @param {DefinedInfo[Key]} value\r\n *   Value.\r\n * @returns {undefined}\r\n *   Nothing.\r\n */\r\nfunction mark(values, key, value) {\r\n  if (value) {\r\n    values[key] = value\r\n  }\r\n}\r\n","/**\r\n * @import {Info, Space} from 'property-information'\r\n */\r\n\r\n/**\r\n * @typedef Definition\r\n *   Definition of a schema.\r\n * @property {Record<string, string> | undefined} [attributes]\r\n *   Normalzed names to special attribute case.\r\n * @property {ReadonlyArray<string> | undefined} [mustUseProperty]\r\n *   Normalized names that must be set as properties.\r\n * @property {Record<string, number | null>} properties\r\n *   Property names to their types.\r\n * @property {Space | undefined} [space]\r\n *   Space.\r\n * @property {Transform} transform\r\n *   Transform a property name.\r\n */\r\n\r\n/**\r\n * @callback Transform\r\n *   Transform.\r\n * @param {Record<string, string>} attributes\r\n *   Attributes.\r\n * @param {string} property\r\n *   Property.\r\n * @returns {string}\r\n *   Attribute.\r\n */\r\n\r\nimport {normalize} from '../normalize.js'\r\nimport {DefinedInfo} from './defined-info.js'\r\nimport {Schema} from './schema.js'\r\n\r\n/**\r\n * @param {Definition} definition\r\n *   Definition.\r\n * @returns {Schema}\r\n *   Schema.\r\n */\r\nexport function create(definition) {\r\n  /** @type {Record<string, Info>} */\r\n  const properties = {}\r\n  /** @type {Record<string, string>} */\r\n  const normals = {}\r\n\r\n  for (const [property, value] of Object.entries(definition.properties)) {\r\n    const info = new DefinedInfo(\r\n      property,\r\n      definition.transform(definition.attributes || {}, property),\r\n      value,\r\n      definition.space\r\n    )\r\n\r\n    if (\r\n      definition.mustUseProperty &&\r\n      definition.mustUseProperty.includes(property)\r\n    ) {\r\n      info.mustUseProperty = true\r\n    }\r\n\r\n    properties[property] = info\r\n\r\n    normals[normalize(property)] = property\r\n    normals[normalize(info.attribute)] = property\r\n  }\r\n\r\n  return new Schema(properties, normals, definition.space)\r\n}\r\n","import {create} from './util/create.js'\r\nimport {booleanish, number, spaceSeparated} from './util/types.js'\r\n\r\nexport const aria = create({\r\n  properties: {\r\n    ariaActiveDescendant: null,\r\n    ariaAtomic: booleanish,\r\n    ariaAutoComplete: null,\r\n    ariaBusy: booleanish,\r\n    ariaChecked: booleanish,\r\n    ariaColCount: number,\r\n    ariaColIndex: number,\r\n    ariaColSpan: number,\r\n    ariaControls: spaceSeparated,\r\n    ariaCurrent: null,\r\n    ariaDescribedBy: spaceSeparated,\r\n    ariaDetails: null,\r\n    ariaDisabled: booleanish,\r\n    ariaDropEffect: spaceSeparated,\r\n    ariaErrorMessage: null,\r\n    ariaExpanded: booleanish,\r\n    ariaFlowTo: spaceSeparated,\r\n    ariaGrabbed: booleanish,\r\n    ariaHasPopup: null,\r\n    ariaHidden: booleanish,\r\n    ariaInvalid: null,\r\n    ariaKeyShortcuts: null,\r\n    ariaLabel: null,\r\n    ariaLabelledBy: spaceSeparated,\r\n    ariaLevel: number,\r\n    ariaLive: null,\r\n    ariaModal: booleanish,\r\n    ariaMultiLine: booleanish,\r\n    ariaMultiSelectable: booleanish,\r\n    ariaOrientation: null,\r\n    ariaOwns: spaceSeparated,\r\n    ariaPlaceholder: null,\r\n    ariaPosInSet: number,\r\n    ariaPressed: booleanish,\r\n    ariaReadOnly: booleanish,\r\n    ariaRelevant: null,\r\n    ariaRequired: booleanish,\r\n    ariaRoleDescription: spaceSeparated,\r\n    ariaRowCount: number,\r\n    ariaRowIndex: number,\r\n    ariaRowSpan: number,\r\n    ariaSelected: booleanish,\r\n    ariaSetSize: number,\r\n    ariaSort: null,\r\n    ariaValueMax: number,\r\n    ariaValueMin: number,\r\n    ariaValueNow: number,\r\n    ariaValueText: null,\r\n    role: null\r\n  },\r\n  transform(_, property) {\r\n    return property === 'role'\r\n      ? property\r\n      : 'aria-' + property.slice(4).toLowerCase()\r\n  }\r\n})\r\n","/**\r\n * @param {Record<string, string>} attributes\r\n *   Attributes.\r\n * @param {string} attribute\r\n *   Attribute.\r\n * @returns {string}\r\n *   Transformed attribute.\r\n */\r\nexport function caseSensitiveTransform(attributes, attribute) {\r\n  return attribute in attributes ? attributes[attribute] : attribute\r\n}\r\n","import {caseSensitiveTransform} from './case-sensitive-transform.js'\r\n\r\n/**\r\n * @param {Record<string, string>} attributes\r\n *   Attributes.\r\n * @param {string} property\r\n *   Property.\r\n * @returns {string}\r\n *   Transformed property.\r\n */\r\nexport function caseInsensitiveTransform(attributes, property) {\r\n  return caseSensitiveTransform(attributes, property.toLowerCase())\r\n}\r\n","import {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\r\nimport {create} from './util/create.js'\r\nimport {\r\n  booleanish,\r\n  boolean,\r\n  commaSeparated,\r\n  number,\r\n  overloadedBoolean,\r\n  spaceSeparated\r\n} from './util/types.js'\r\n\r\nexport const html = create({\r\n  attributes: {\r\n    acceptcharset: 'accept-charset',\r\n    classname: 'class',\r\n    htmlfor: 'for',\r\n    httpequiv: 'http-equiv'\r\n  },\r\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\r\n  properties: {\r\n    // Standard Properties.\r\n    abbr: null,\r\n    accept: commaSeparated,\r\n    acceptCharset: spaceSeparated,\r\n    accessKey: spaceSeparated,\r\n    action: null,\r\n    allow: null,\r\n    allowFullScreen: boolean,\r\n    allowPaymentRequest: boolean,\r\n    allowUserMedia: boolean,\r\n    alt: null,\r\n    as: null,\r\n    async: boolean,\r\n    autoCapitalize: null,\r\n    autoComplete: spaceSeparated,\r\n    autoFocus: boolean,\r\n    autoPlay: boolean,\r\n    blocking: spaceSeparated,\r\n    capture: null,\r\n    charSet: null,\r\n    checked: boolean,\r\n    cite: null,\r\n    className: spaceSeparated,\r\n    cols: number,\r\n    colSpan: null,\r\n    content: null,\r\n    contentEditable: booleanish,\r\n    controls: boolean,\r\n    controlsList: spaceSeparated,\r\n    coords: number | commaSeparated,\r\n    crossOrigin: null,\r\n    data: null,\r\n    dateTime: null,\r\n    decoding: null,\r\n    default: boolean,\r\n    defer: boolean,\r\n    dir: null,\r\n    dirName: null,\r\n    disabled: boolean,\r\n    download: overloadedBoolean,\r\n    draggable: booleanish,\r\n    encType: null,\r\n    enterKeyHint: null,\r\n    fetchPriority: null,\r\n    form: null,\r\n    formAction: null,\r\n    formEncType: null,\r\n    formMethod: null,\r\n    formNoValidate: boolean,\r\n    formTarget: null,\r\n    headers: spaceSeparated,\r\n    height: number,\r\n    hidden: overloadedBoolean,\r\n    high: number,\r\n    href: null,\r\n    hrefLang: null,\r\n    htmlFor: spaceSeparated,\r\n    httpEquiv: spaceSeparated,\r\n    id: null,\r\n    imageSizes: null,\r\n    imageSrcSet: null,\r\n    inert: boolean,\r\n    inputMode: null,\r\n    integrity: null,\r\n    is: null,\r\n    isMap: boolean,\r\n    itemId: null,\r\n    itemProp: spaceSeparated,\r\n    itemRef: spaceSeparated,\r\n    itemScope: boolean,\r\n    itemType: spaceSeparated,\r\n    kind: null,\r\n    label: null,\r\n    lang: null,\r\n    language: null,\r\n    list: null,\r\n    loading: null,\r\n    loop: boolean,\r\n    low: number,\r\n    manifest: null,\r\n    max: null,\r\n    maxLength: number,\r\n    media: null,\r\n    method: null,\r\n    min: null,\r\n    minLength: number,\r\n    multiple: boolean,\r\n    muted: boolean,\r\n    name: null,\r\n    nonce: null,\r\n    noModule: boolean,\r\n    noValidate: boolean,\r\n    onAbort: null,\r\n    onAfterPrint: null,\r\n    onAuxClick: null,\r\n    onBeforeMatch: null,\r\n    onBeforePrint: null,\r\n    onBeforeToggle: null,\r\n    onBeforeUnload: null,\r\n    onBlur: null,\r\n    onCancel: null,\r\n    onCanPlay: null,\r\n    onCanPlayThrough: null,\r\n    onChange: null,\r\n    onClick: null,\r\n    onClose: null,\r\n    onContextLost: null,\r\n    onContextMenu: null,\r\n    onContextRestored: null,\r\n    onCopy: null,\r\n    onCueChange: null,\r\n    onCut: null,\r\n    onDblClick: null,\r\n    onDrag: null,\r\n    onDragEnd: null,\r\n    onDragEnter: null,\r\n    onDragExit: null,\r\n    onDragLeave: null,\r\n    onDragOver: null,\r\n    onDragStart: null,\r\n    onDrop: null,\r\n    onDurationChange: null,\r\n    onEmptied: null,\r\n    onEnded: null,\r\n    onError: null,\r\n    onFocus: null,\r\n    onFormData: null,\r\n    onHashChange: null,\r\n    onInput: null,\r\n    onInvalid: null,\r\n    onKeyDown: null,\r\n    onKeyPress: null,\r\n    onKeyUp: null,\r\n    onLanguageChange: null,\r\n    onLoad: null,\r\n    onLoadedData: null,\r\n    onLoadedMetadata: null,\r\n    onLoadEnd: null,\r\n    onLoadStart: null,\r\n    onMessage: null,\r\n    onMessageError: null,\r\n    onMouseDown: null,\r\n    onMouseEnter: null,\r\n    onMouseLeave: null,\r\n    onMouseMove: null,\r\n    onMouseOut: null,\r\n    onMouseOver: null,\r\n    onMouseUp: null,\r\n    onOffline: null,\r\n    onOnline: null,\r\n    onPageHide: null,\r\n    onPageShow: null,\r\n    onPaste: null,\r\n    onPause: null,\r\n    onPlay: null,\r\n    onPlaying: null,\r\n    onPopState: null,\r\n    onProgress: null,\r\n    onRateChange: null,\r\n    onRejectionHandled: null,\r\n    onReset: null,\r\n    onResize: null,\r\n    onScroll: null,\r\n    onScrollEnd: null,\r\n    onSecurityPolicyViolation: null,\r\n    onSeeked: null,\r\n    onSeeking: null,\r\n    onSelect: null,\r\n    onSlotChange: null,\r\n    onStalled: null,\r\n    onStorage: null,\r\n    onSubmit: null,\r\n    onSuspend: null,\r\n    onTimeUpdate: null,\r\n    onToggle: null,\r\n    onUnhandledRejection: null,\r\n    onUnload: null,\r\n    onVolumeChange: null,\r\n    onWaiting: null,\r\n    onWheel: null,\r\n    open: boolean,\r\n    optimum: number,\r\n    pattern: null,\r\n    ping: spaceSeparated,\r\n    placeholder: null,\r\n    playsInline: boolean,\r\n    popover: null,\r\n    popoverTarget: null,\r\n    popoverTargetAction: null,\r\n    poster: null,\r\n    preload: null,\r\n    readOnly: boolean,\r\n    referrerPolicy: null,\r\n    rel: spaceSeparated,\r\n    required: boolean,\r\n    reversed: boolean,\r\n    rows: number,\r\n    rowSpan: number,\r\n    sandbox: spaceSeparated,\r\n    scope: null,\r\n    scoped: boolean,\r\n    seamless: boolean,\r\n    selected: boolean,\r\n    shadowRootClonable: boolean,\r\n    shadowRootDelegatesFocus: boolean,\r\n    shadowRootMode: null,\r\n    shape: null,\r\n    size: number,\r\n    sizes: null,\r\n    slot: null,\r\n    span: number,\r\n    spellCheck: booleanish,\r\n    src: null,\r\n    srcDoc: null,\r\n    srcLang: null,\r\n    srcSet: null,\r\n    start: number,\r\n    step: null,\r\n    style: null,\r\n    tabIndex: number,\r\n    target: null,\r\n    title: null,\r\n    translate: null,\r\n    type: null,\r\n    typeMustMatch: boolean,\r\n    useMap: null,\r\n    value: booleanish,\r\n    width: number,\r\n    wrap: null,\r\n    writingSuggestions: null,\r\n\r\n    // Legacy.\r\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\r\n    align: null, // Several. Use CSS `text-align` instead,\r\n    aLink: null, // `<body>`. Use CSS `a:active {color}` instead\r\n    archive: spaceSeparated, // `<object>`. List of URIs to archives\r\n    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`\r\n    background: null, // `<body>`. Use CSS `background-image` instead\r\n    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead\r\n    border: number, // `<table>`. Use CSS `border-width` instead,\r\n    borderColor: null, // `<table>`. Use CSS `border-color` instead,\r\n    bottomMargin: number, // `<body>`\r\n    cellPadding: null, // `<table>`\r\n    cellSpacing: null, // `<table>`\r\n    char: null, // Several table elements. When `align=char`, sets the character to align on\r\n    charOff: null, // Several table elements. When `char`, offsets the alignment\r\n    classId: null, // `<object>`\r\n    clear: null, // `<br>`. Use CSS `clear` instead\r\n    code: null, // `<object>`\r\n    codeBase: null, // `<object>`\r\n    codeType: null, // `<object>`\r\n    color: null, // `<font>` and `<hr>`. Use CSS instead\r\n    compact: boolean, // Lists. Use CSS to reduce space between items instead\r\n    declare: boolean, // `<object>`\r\n    event: null, // `<script>`\r\n    face: null, // `<font>`. Use CSS instead\r\n    frame: null, // `<table>`\r\n    frameBorder: null, // `<iframe>`. Use CSS `border` instead\r\n    hSpace: number, // `<img>` and `<object>`\r\n    leftMargin: number, // `<body>`\r\n    link: null, // `<body>`. Use CSS `a:link {color: *}` instead\r\n    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\r\n    lowSrc: null, // `<img>`. Use a `<picture>`\r\n    marginHeight: number, // `<body>`\r\n    marginWidth: number, // `<body>`\r\n    noResize: boolean, // `<frame>`\r\n    noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`\r\n    noShade: boolean, // `<hr>`. Use background-color and height instead of borders\r\n    noWrap: boolean, // `<td>` and `<th>`\r\n    object: null, // `<applet>`\r\n    profile: null, // `<head>`\r\n    prompt: null, // `<isindex>`\r\n    rev: null, // `<link>`\r\n    rightMargin: number, // `<body>`\r\n    rules: null, // `<table>`\r\n    scheme: null, // `<meta>`\r\n    scrolling: booleanish, // `<frame>`. Use overflow in the child context\r\n    standby: null, // `<object>`\r\n    summary: null, // `<table>`\r\n    text: null, // `<body>`. Use CSS `color` instead\r\n    topMargin: number, // `<body>`\r\n    valueType: null, // `<param>`\r\n    version: null, // `<html>`. Use a doctype.\r\n    vAlign: null, // Several. Use CSS `vertical-align` instead\r\n    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead\r\n    vSpace: number, // `<img>` and `<object>`\r\n\r\n    // Non-standard Properties.\r\n    allowTransparency: null,\r\n    autoCorrect: null,\r\n    autoSave: null,\r\n    disablePictureInPicture: boolean,\r\n    disableRemotePlayback: boolean,\r\n    prefix: null,\r\n    property: null,\r\n    results: number,\r\n    security: null,\r\n    unselectable: null\r\n  },\r\n  space: 'html',\r\n  transform: caseInsensitiveTransform\r\n})\r\n","import {caseSensitiveTransform} from './util/case-sensitive-transform.js'\r\nimport {create} from './util/create.js'\r\nimport {\r\n  boolean,\r\n  commaOrSpaceSeparated,\r\n  commaSeparated,\r\n  number,\r\n  spaceSeparated\r\n} from './util/types.js'\r\n\r\nexport const svg = create({\r\n  attributes: {\r\n    accentHeight: 'accent-height',\r\n    alignmentBaseline: 'alignment-baseline',\r\n    arabicForm: 'arabic-form',\r\n    baselineShift: 'baseline-shift',\r\n    capHeight: 'cap-height',\r\n    className: 'class',\r\n    clipPath: 'clip-path',\r\n    clipRule: 'clip-rule',\r\n    colorInterpolation: 'color-interpolation',\r\n    colorInterpolationFilters: 'color-interpolation-filters',\r\n    colorProfile: 'color-profile',\r\n    colorRendering: 'color-rendering',\r\n    crossOrigin: 'crossorigin',\r\n    dataType: 'datatype',\r\n    dominantBaseline: 'dominant-baseline',\r\n    enableBackground: 'enable-background',\r\n    fillOpacity: 'fill-opacity',\r\n    fillRule: 'fill-rule',\r\n    floodColor: 'flood-color',\r\n    floodOpacity: 'flood-opacity',\r\n    fontFamily: 'font-family',\r\n    fontSize: 'font-size',\r\n    fontSizeAdjust: 'font-size-adjust',\r\n    fontStretch: 'font-stretch',\r\n    fontStyle: 'font-style',\r\n    fontVariant: 'font-variant',\r\n    fontWeight: 'font-weight',\r\n    glyphName: 'glyph-name',\r\n    glyphOrientationHorizontal: 'glyph-orientation-horizontal',\r\n    glyphOrientationVertical: 'glyph-orientation-vertical',\r\n    hrefLang: 'hreflang',\r\n    horizAdvX: 'horiz-adv-x',\r\n    horizOriginX: 'horiz-origin-x',\r\n    horizOriginY: 'horiz-origin-y',\r\n    imageRendering: 'image-rendering',\r\n    letterSpacing: 'letter-spacing',\r\n    lightingColor: 'lighting-color',\r\n    markerEnd: 'marker-end',\r\n    markerMid: 'marker-mid',\r\n    markerStart: 'marker-start',\r\n    navDown: 'nav-down',\r\n    navDownLeft: 'nav-down-left',\r\n    navDownRight: 'nav-down-right',\r\n    navLeft: 'nav-left',\r\n    navNext: 'nav-next',\r\n    navPrev: 'nav-prev',\r\n    navRight: 'nav-right',\r\n    navUp: 'nav-up',\r\n    navUpLeft: 'nav-up-left',\r\n    navUpRight: 'nav-up-right',\r\n    onAbort: 'onabort',\r\n    onActivate: 'onactivate',\r\n    onAfterPrint: 'onafterprint',\r\n    onBeforePrint: 'onbeforeprint',\r\n    onBegin: 'onbegin',\r\n    onCancel: 'oncancel',\r\n    onCanPlay: 'oncanplay',\r\n    onCanPlayThrough: 'oncanplaythrough',\r\n    onChange: 'onchange',\r\n    onClick: 'onclick',\r\n    onClose: 'onclose',\r\n    onCopy: 'oncopy',\r\n    onCueChange: 'oncuechange',\r\n    onCut: 'oncut',\r\n    onDblClick: 'ondblclick',\r\n    onDrag: 'ondrag',\r\n    onDragEnd: 'ondragend',\r\n    onDragEnter: 'ondragenter',\r\n    onDragExit: 'ondragexit',\r\n    onDragLeave: 'ondragleave',\r\n    onDragOver: 'ondragover',\r\n    onDragStart: 'ondragstart',\r\n    onDrop: 'ondrop',\r\n    onDurationChange: 'ondurationchange',\r\n    onEmptied: 'onemptied',\r\n    onEnd: 'onend',\r\n    onEnded: 'onended',\r\n    onError: 'onerror',\r\n    onFocus: 'onfocus',\r\n    onFocusIn: 'onfocusin',\r\n    onFocusOut: 'onfocusout',\r\n    onHashChange: 'onhashchange',\r\n    onInput: 'oninput',\r\n    onInvalid: 'oninvalid',\r\n    onKeyDown: 'onkeydown',\r\n    onKeyPress: 'onkeypress',\r\n    onKeyUp: 'onkeyup',\r\n    onLoad: 'onload',\r\n    onLoadedData: 'onloadeddata',\r\n    onLoadedMetadata: 'onloadedmetadata',\r\n    onLoadStart: 'onloadstart',\r\n    onMessage: 'onmessage',\r\n    onMouseDown: 'onmousedown',\r\n    onMouseEnter: 'onmouseenter',\r\n    onMouseLeave: 'onmouseleave',\r\n    onMouseMove: 'onmousemove',\r\n    onMouseOut: 'onmouseout',\r\n    onMouseOver: 'onmouseover',\r\n    onMouseUp: 'onmouseup',\r\n    onMouseWheel: 'onmousewheel',\r\n    onOffline: 'onoffline',\r\n    onOnline: 'ononline',\r\n    onPageHide: 'onpagehide',\r\n    onPageShow: 'onpageshow',\r\n    onPaste: 'onpaste',\r\n    onPause: 'onpause',\r\n    onPlay: 'onplay',\r\n    onPlaying: 'onplaying',\r\n    onPopState: 'onpopstate',\r\n    onProgress: 'onprogress',\r\n    onRateChange: 'onratechange',\r\n    onRepeat: 'onrepeat',\r\n    onReset: 'onreset',\r\n    onResize: 'onresize',\r\n    onScroll: 'onscroll',\r\n    onSeeked: 'onseeked',\r\n    onSeeking: 'onseeking',\r\n    onSelect: 'onselect',\r\n    onShow: 'onshow',\r\n    onStalled: 'onstalled',\r\n    onStorage: 'onstorage',\r\n    onSubmit: 'onsubmit',\r\n    onSuspend: 'onsuspend',\r\n    onTimeUpdate: 'ontimeupdate',\r\n    onToggle: 'ontoggle',\r\n    onUnload: 'onunload',\r\n    onVolumeChange: 'onvolumechange',\r\n    onWaiting: 'onwaiting',\r\n    onZoom: 'onzoom',\r\n    overlinePosition: 'overline-position',\r\n    overlineThickness: 'overline-thickness',\r\n    paintOrder: 'paint-order',\r\n    panose1: 'panose-1',\r\n    pointerEvents: 'pointer-events',\r\n    referrerPolicy: 'referrerpolicy',\r\n    renderingIntent: 'rendering-intent',\r\n    shapeRendering: 'shape-rendering',\r\n    stopColor: 'stop-color',\r\n    stopOpacity: 'stop-opacity',\r\n    strikethroughPosition: 'strikethrough-position',\r\n    strikethroughThickness: 'strikethrough-thickness',\r\n    strokeDashArray: 'stroke-dasharray',\r\n    strokeDashOffset: 'stroke-dashoffset',\r\n    strokeLineCap: 'stroke-linecap',\r\n    strokeLineJoin: 'stroke-linejoin',\r\n    strokeMiterLimit: 'stroke-miterlimit',\r\n    strokeOpacity: 'stroke-opacity',\r\n    strokeWidth: 'stroke-width',\r\n    tabIndex: 'tabindex',\r\n    textAnchor: 'text-anchor',\r\n    textDecoration: 'text-decoration',\r\n    textRendering: 'text-rendering',\r\n    transformOrigin: 'transform-origin',\r\n    typeOf: 'typeof',\r\n    underlinePosition: 'underline-position',\r\n    underlineThickness: 'underline-thickness',\r\n    unicodeBidi: 'unicode-bidi',\r\n    unicodeRange: 'unicode-range',\r\n    unitsPerEm: 'units-per-em',\r\n    vAlphabetic: 'v-alphabetic',\r\n    vHanging: 'v-hanging',\r\n    vIdeographic: 'v-ideographic',\r\n    vMathematical: 'v-mathematical',\r\n    vectorEffect: 'vector-effect',\r\n    vertAdvY: 'vert-adv-y',\r\n    vertOriginX: 'vert-origin-x',\r\n    vertOriginY: 'vert-origin-y',\r\n    wordSpacing: 'word-spacing',\r\n    writingMode: 'writing-mode',\r\n    xHeight: 'x-height',\r\n    // These were camelcased in Tiny. Now lowercased in SVG 2\r\n    playbackOrder: 'playbackorder',\r\n    timelineBegin: 'timelinebegin'\r\n  },\r\n  properties: {\r\n    about: commaOrSpaceSeparated,\r\n    accentHeight: number,\r\n    accumulate: null,\r\n    additive: null,\r\n    alignmentBaseline: null,\r\n    alphabetic: number,\r\n    amplitude: number,\r\n    arabicForm: null,\r\n    ascent: number,\r\n    attributeName: null,\r\n    attributeType: null,\r\n    azimuth: number,\r\n    bandwidth: null,\r\n    baselineShift: null,\r\n    baseFrequency: null,\r\n    baseProfile: null,\r\n    bbox: null,\r\n    begin: null,\r\n    bias: number,\r\n    by: null,\r\n    calcMode: null,\r\n    capHeight: number,\r\n    className: spaceSeparated,\r\n    clip: null,\r\n    clipPath: null,\r\n    clipPathUnits: null,\r\n    clipRule: null,\r\n    color: null,\r\n    colorInterpolation: null,\r\n    colorInterpolationFilters: null,\r\n    colorProfile: null,\r\n    colorRendering: null,\r\n    content: null,\r\n    contentScriptType: null,\r\n    contentStyleType: null,\r\n    crossOrigin: null,\r\n    cursor: null,\r\n    cx: null,\r\n    cy: null,\r\n    d: null,\r\n    dataType: null,\r\n    defaultAction: null,\r\n    descent: number,\r\n    diffuseConstant: number,\r\n    direction: null,\r\n    display: null,\r\n    dur: null,\r\n    divisor: number,\r\n    dominantBaseline: null,\r\n    download: boolean,\r\n    dx: null,\r\n    dy: null,\r\n    edgeMode: null,\r\n    editable: null,\r\n    elevation: number,\r\n    enableBackground: null,\r\n    end: null,\r\n    event: null,\r\n    exponent: number,\r\n    externalResourcesRequired: null,\r\n    fill: null,\r\n    fillOpacity: number,\r\n    fillRule: null,\r\n    filter: null,\r\n    filterRes: null,\r\n    filterUnits: null,\r\n    floodColor: null,\r\n    floodOpacity: null,\r\n    focusable: null,\r\n    focusHighlight: null,\r\n    fontFamily: null,\r\n    fontSize: null,\r\n    fontSizeAdjust: null,\r\n    fontStretch: null,\r\n    fontStyle: null,\r\n    fontVariant: null,\r\n    fontWeight: null,\r\n    format: null,\r\n    fr: null,\r\n    from: null,\r\n    fx: null,\r\n    fy: null,\r\n    g1: commaSeparated,\r\n    g2: commaSeparated,\r\n    glyphName: commaSeparated,\r\n    glyphOrientationHorizontal: null,\r\n    glyphOrientationVertical: null,\r\n    glyphRef: null,\r\n    gradientTransform: null,\r\n    gradientUnits: null,\r\n    handler: null,\r\n    hanging: number,\r\n    hatchContentUnits: null,\r\n    hatchUnits: null,\r\n    height: null,\r\n    href: null,\r\n    hrefLang: null,\r\n    horizAdvX: number,\r\n    horizOriginX: number,\r\n    horizOriginY: number,\r\n    id: null,\r\n    ideographic: number,\r\n    imageRendering: null,\r\n    initialVisibility: null,\r\n    in: null,\r\n    in2: null,\r\n    intercept: number,\r\n    k: number,\r\n    k1: number,\r\n    k2: number,\r\n    k3: number,\r\n    k4: number,\r\n    kernelMatrix: commaOrSpaceSeparated,\r\n    kernelUnitLength: null,\r\n    keyPoints: null, // SEMI_COLON_SEPARATED\r\n    keySplines: null, // SEMI_COLON_SEPARATED\r\n    keyTimes: null, // SEMI_COLON_SEPARATED\r\n    kerning: null,\r\n    lang: null,\r\n    lengthAdjust: null,\r\n    letterSpacing: null,\r\n    lightingColor: null,\r\n    limitingConeAngle: number,\r\n    local: null,\r\n    markerEnd: null,\r\n    markerMid: null,\r\n    markerStart: null,\r\n    markerHeight: null,\r\n    markerUnits: null,\r\n    markerWidth: null,\r\n    mask: null,\r\n    maskContentUnits: null,\r\n    maskUnits: null,\r\n    mathematical: null,\r\n    max: null,\r\n    media: null,\r\n    mediaCharacterEncoding: null,\r\n    mediaContentEncodings: null,\r\n    mediaSize: number,\r\n    mediaTime: null,\r\n    method: null,\r\n    min: null,\r\n    mode: null,\r\n    name: null,\r\n    navDown: null,\r\n    navDownLeft: null,\r\n    navDownRight: null,\r\n    navLeft: null,\r\n    navNext: null,\r\n    navPrev: null,\r\n    navRight: null,\r\n    navUp: null,\r\n    navUpLeft: null,\r\n    navUpRight: null,\r\n    numOctaves: null,\r\n    observer: null,\r\n    offset: null,\r\n    onAbort: null,\r\n    onActivate: null,\r\n    onAfterPrint: null,\r\n    onBeforePrint: null,\r\n    onBegin: null,\r\n    onCancel: null,\r\n    onCanPlay: null,\r\n    onCanPlayThrough: null,\r\n    onChange: null,\r\n    onClick: null,\r\n    onClose: null,\r\n    onCopy: null,\r\n    onCueChange: null,\r\n    onCut: null,\r\n    onDblClick: null,\r\n    onDrag: null,\r\n    onDragEnd: null,\r\n    onDragEnter: null,\r\n    onDragExit: null,\r\n    onDragLeave: null,\r\n    onDragOver: null,\r\n    onDragStart: null,\r\n    onDrop: null,\r\n    onDurationChange: null,\r\n    onEmptied: null,\r\n    onEnd: null,\r\n    onEnded: null,\r\n    onError: null,\r\n    onFocus: null,\r\n    onFocusIn: null,\r\n    onFocusOut: null,\r\n    onHashChange: null,\r\n    onInput: null,\r\n    onInvalid: null,\r\n    onKeyDown: null,\r\n    onKeyPress: null,\r\n    onKeyUp: null,\r\n    onLoad: null,\r\n    onLoadedData: null,\r\n    onLoadedMetadata: null,\r\n    onLoadStart: null,\r\n    onMessage: null,\r\n    onMouseDown: null,\r\n    onMouseEnter: null,\r\n    onMouseLeave: null,\r\n    onMouseMove: null,\r\n    onMouseOut: null,\r\n    onMouseOver: null,\r\n    onMouseUp: null,\r\n    onMouseWheel: null,\r\n    onOffline: null,\r\n    onOnline: null,\r\n    onPageHide: null,\r\n    onPageShow: null,\r\n    onPaste: null,\r\n    onPause: null,\r\n    onPlay: null,\r\n    onPlaying: null,\r\n    onPopState: null,\r\n    onProgress: null,\r\n    onRateChange: null,\r\n    onRepeat: null,\r\n    onReset: null,\r\n    onResize: null,\r\n    onScroll: null,\r\n    onSeeked: null,\r\n    onSeeking: null,\r\n    onSelect: null,\r\n    onShow: null,\r\n    onStalled: null,\r\n    onStorage: null,\r\n    onSubmit: null,\r\n    onSuspend: null,\r\n    onTimeUpdate: null,\r\n    onToggle: null,\r\n    onUnload: null,\r\n    onVolumeChange: null,\r\n    onWaiting: null,\r\n    onZoom: null,\r\n    opacity: null,\r\n    operator: null,\r\n    order: null,\r\n    orient: null,\r\n    orientation: null,\r\n    origin: null,\r\n    overflow: null,\r\n    overlay: null,\r\n    overlinePosition: number,\r\n    overlineThickness: number,\r\n    paintOrder: null,\r\n    panose1: null,\r\n    path: null,\r\n    pathLength: number,\r\n    patternContentUnits: null,\r\n    patternTransform: null,\r\n    patternUnits: null,\r\n    phase: null,\r\n    ping: spaceSeparated,\r\n    pitch: null,\r\n    playbackOrder: null,\r\n    pointerEvents: null,\r\n    points: null,\r\n    pointsAtX: number,\r\n    pointsAtY: number,\r\n    pointsAtZ: number,\r\n    preserveAlpha: null,\r\n    preserveAspectRatio: null,\r\n    primitiveUnits: null,\r\n    propagate: null,\r\n    property: commaOrSpaceSeparated,\r\n    r: null,\r\n    radius: null,\r\n    referrerPolicy: null,\r\n    refX: null,\r\n    refY: null,\r\n    rel: commaOrSpaceSeparated,\r\n    rev: commaOrSpaceSeparated,\r\n    renderingIntent: null,\r\n    repeatCount: null,\r\n    repeatDur: null,\r\n    requiredExtensions: commaOrSpaceSeparated,\r\n    requiredFeatures: commaOrSpaceSeparated,\r\n    requiredFonts: commaOrSpaceSeparated,\r\n    requiredFormats: commaOrSpaceSeparated,\r\n    resource: null,\r\n    restart: null,\r\n    result: null,\r\n    rotate: null,\r\n    rx: null,\r\n    ry: null,\r\n    scale: null,\r\n    seed: null,\r\n    shapeRendering: null,\r\n    side: null,\r\n    slope: null,\r\n    snapshotTime: null,\r\n    specularConstant: number,\r\n    specularExponent: number,\r\n    spreadMethod: null,\r\n    spacing: null,\r\n    startOffset: null,\r\n    stdDeviation: null,\r\n    stemh: null,\r\n    stemv: null,\r\n    stitchTiles: null,\r\n    stopColor: null,\r\n    stopOpacity: null,\r\n    strikethroughPosition: number,\r\n    strikethroughThickness: number,\r\n    string: null,\r\n    stroke: null,\r\n    strokeDashArray: commaOrSpaceSeparated,\r\n    strokeDashOffset: null,\r\n    strokeLineCap: null,\r\n    strokeLineJoin: null,\r\n    strokeMiterLimit: number,\r\n    strokeOpacity: number,\r\n    strokeWidth: null,\r\n    style: null,\r\n    surfaceScale: number,\r\n    syncBehavior: null,\r\n    syncBehaviorDefault: null,\r\n    syncMaster: null,\r\n    syncTolerance: null,\r\n    syncToleranceDefault: null,\r\n    systemLanguage: commaOrSpaceSeparated,\r\n    tabIndex: number,\r\n    tableValues: null,\r\n    target: null,\r\n    targetX: number,\r\n    targetY: number,\r\n    textAnchor: null,\r\n    textDecoration: null,\r\n    textRendering: null,\r\n    textLength: null,\r\n    timelineBegin: null,\r\n    title: null,\r\n    transformBehavior: null,\r\n    type: null,\r\n    typeOf: commaOrSpaceSeparated,\r\n    to: null,\r\n    transform: null,\r\n    transformOrigin: null,\r\n    u1: null,\r\n    u2: null,\r\n    underlinePosition: number,\r\n    underlineThickness: number,\r\n    unicode: null,\r\n    unicodeBidi: null,\r\n    unicodeRange: null,\r\n    unitsPerEm: number,\r\n    values: null,\r\n    vAlphabetic: number,\r\n    vMathematical: number,\r\n    vectorEffect: null,\r\n    vHanging: number,\r\n    vIdeographic: number,\r\n    version: null,\r\n    vertAdvY: number,\r\n    vertOriginX: number,\r\n    vertOriginY: number,\r\n    viewBox: null,\r\n    viewTarget: null,\r\n    visibility: null,\r\n    width: null,\r\n    widths: null,\r\n    wordSpacing: null,\r\n    writingMode: null,\r\n    x: null,\r\n    x1: null,\r\n    x2: null,\r\n    xChannelSelector: null,\r\n    xHeight: number,\r\n    y: null,\r\n    y1: null,\r\n    y2: null,\r\n    yChannelSelector: null,\r\n    z: null,\r\n    zoomAndPan: null\r\n  },\r\n  space: 'svg',\r\n  transform: caseSensitiveTransform\r\n})\r\n","import {create} from './util/create.js'\r\n\r\nexport const xlink = create({\r\n  properties: {\r\n    xLinkActuate: null,\r\n    xLinkArcRole: null,\r\n    xLinkHref: null,\r\n    xLinkRole: null,\r\n    xLinkShow: null,\r\n    xLinkTitle: null,\r\n    xLinkType: null\r\n  },\r\n  space: 'xlink',\r\n  transform(_, property) {\r\n    return 'xlink:' + property.slice(5).toLowerCase()\r\n  }\r\n})\r\n","import {create} from './util/create.js'\r\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\r\n\r\nexport const xmlns = create({\r\n  attributes: {xmlnsxlink: 'xmlns:xlink'},\r\n  properties: {xmlnsXLink: null, xmlns: null},\r\n  space: 'xmlns',\r\n  transform: caseInsensitiveTransform\r\n})\r\n","import {create} from './util/create.js'\r\n\r\nexport const xml = create({\r\n  properties: {xmlBase: null, xmlLang: null, xmlSpace: null},\r\n  space: 'xml',\r\n  transform(_, property) {\r\n    return 'xml:' + property.slice(3).toLowerCase()\r\n  }\r\n})\r\n","/**\r\n * Special cases for React (`Record<string, string>`).\r\n *\r\n * `hast` is close to `React` but differs in a couple of cases.\r\n * To get a React property from a hast property,\r\n * check if it is in `hastToReact`.\r\n * If it is, use the corresponding value;\r\n * otherwise, use the hast property.\r\n *\r\n * @type {Record<string, string>}\r\n */\r\nexport const hastToReact = {\r\n  classId: 'classID',\r\n  dataType: 'datatype',\r\n  itemId: 'itemID',\r\n  strokeDashArray: 'strokeDasharray',\r\n  strokeDashOffset: 'strokeDashoffset',\r\n  strokeLineCap: 'strokeLinecap',\r\n  strokeLineJoin: 'strokeLinejoin',\r\n  strokeMiterLimit: 'strokeMiterlimit',\r\n  typeOf: 'typeof',\r\n  xLinkActuate: 'xlinkActuate',\r\n  xLinkArcRole: 'xlinkArcrole',\r\n  xLinkHref: 'xlinkHref',\r\n  xLinkRole: 'xlinkRole',\r\n  xLinkShow: 'xlinkShow',\r\n  xLinkTitle: 'xlinkTitle',\r\n  xLinkType: 'xlinkType',\r\n  xmlnsXLink: 'xmlnsXlink'\r\n}\r\n","/**\r\n * @import {Schema} from 'property-information'\r\n */\r\n\r\nimport {DefinedInfo} from './util/defined-info.js'\r\nimport {Info} from './util/info.js'\r\nimport {normalize} from './normalize.js'\r\n\r\nconst cap = /[A-Z]/g\r\nconst dash = /-[a-z]/g\r\nconst valid = /^data[-\\w.:]+$/i\r\n\r\n/**\r\n * Look up info on a property.\r\n *\r\n * In most cases the given `schema` contains info on the property.\r\n * All standard,\r\n * most legacy,\r\n * and some non-standard properties are supported.\r\n * For these cases,\r\n * the returned `Info` has hints about the value of the property.\r\n *\r\n * `name` can also be a valid data attribute or property,\r\n * in which case an `Info` object with the correctly cased `attribute` and\r\n * `property` is returned.\r\n *\r\n * `name` can be an unknown attribute,\r\n * in which case an `Info` object with `attribute` and `property` set to the\r\n * given name is returned.\r\n * It is not recommended to provide unsupported legacy or recently specced\r\n * properties.\r\n *\r\n *\r\n * @param {Schema} schema\r\n *   Schema;\r\n *   either the `html` or `svg` export.\r\n * @param {string} value\r\n *   An attribute-like or property-like name;\r\n *   it will be passed through `normalize` to hopefully find the correct info.\r\n * @returns {Info}\r\n *   Info.\r\n */\r\nexport function find(schema, value) {\r\n  const normal = normalize(value)\r\n  let property = value\r\n  let Type = Info\r\n\r\n  if (normal in schema.normal) {\r\n    return schema.property[schema.normal[normal]]\r\n  }\r\n\r\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\r\n    // Attribute or property.\r\n    if (value.charAt(4) === '-') {\r\n      // Turn it into a property.\r\n      const rest = value.slice(5).replace(dash, camelcase)\r\n      property = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1)\r\n    } else {\r\n      // Turn it into an attribute.\r\n      const rest = value.slice(4)\r\n\r\n      if (!dash.test(rest)) {\r\n        let dashes = rest.replace(cap, kebab)\r\n\r\n        if (dashes.charAt(0) !== '-') {\r\n          dashes = '-' + dashes\r\n        }\r\n\r\n        value = 'data' + dashes\r\n      }\r\n    }\r\n\r\n    Type = DefinedInfo\r\n  }\r\n\r\n  return new Type(property, value)\r\n}\r\n\r\n/**\r\n * @param {string} $0\r\n *   Value.\r\n * @returns {string}\r\n *   Kebab.\r\n */\r\nfunction kebab($0) {\r\n  return '-' + $0.toLowerCase()\r\n}\r\n\r\n/**\r\n * @param {string} $0\r\n *   Value.\r\n * @returns {string}\r\n *   Camel.\r\n */\r\nfunction camelcase($0) {\r\n  return $0.charAt(1).toUpperCase()\r\n}\r\n","// Note: types exposed from `index.d.ts`.\r\nimport {merge} from './lib/util/merge.js'\r\nimport {aria} from './lib/aria.js'\r\nimport {html as htmlBase} from './lib/html.js'\r\nimport {svg as svgBase} from './lib/svg.js'\r\nimport {xlink} from './lib/xlink.js'\r\nimport {xmlns} from './lib/xmlns.js'\r\nimport {xml} from './lib/xml.js'\r\n\r\nexport {hastToReact} from './lib/hast-to-react.js'\r\n\r\nexport const html = merge([aria, htmlBase, xlink, xmlns, xml], 'html')\r\n\r\nexport {find} from './lib/find.js'\r\nexport {normalize} from './lib/normalize.js'\r\n\r\nexport const svg = merge([aria, svgBase, xlink, xmlns, xml], 'svg')\r\n","/**\r\n * Parse space-separated tokens to an array of strings.\r\n *\r\n * @param {string} value\r\n *   Space-separated tokens.\r\n * @returns {Array<string>}\r\n *   List of tokens.\r\n */\r\nexport function parse(value) {\r\n  const input = String(value || '').trim()\r\n  return input ? input.split(/[ \\t\\n\\r\\f]+/g) : []\r\n}\r\n\r\n/**\r\n * Serialize an array of strings as space separated-tokens.\r\n *\r\n * @param {Array<string|number>} values\r\n *   List of tokens.\r\n * @returns {string}\r\n *   Space-separated tokens.\r\n */\r\nexport function stringify(values) {\r\n  return values.join(' ').trim()\r\n}\r\n","// http://www.w3.org/TR/CSS21/grammar.html\r\n// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027\r\nvar COMMENT_REGEX = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\r\n\r\nvar NEWLINE_REGEX = /\\n/g;\r\nvar WHITESPACE_REGEX = /^\\s*/;\r\n\r\n// declaration\r\nvar PROPERTY_REGEX = /^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/;\r\nvar COLON_REGEX = /^:\\s*/;\r\nvar VALUE_REGEX = /^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};])+)/;\r\nvar SEMICOLON_REGEX = /^[;\\s]*/;\r\n\r\n// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\r\nvar TRIM_REGEX = /^\\s+|\\s+$/g;\r\n\r\n// strings\r\nvar NEWLINE = '\\n';\r\nvar FORWARD_SLASH = '/';\r\nvar ASTERISK = '*';\r\nvar EMPTY_STRING = '';\r\n\r\n// types\r\nvar TYPE_COMMENT = 'comment';\r\nvar TYPE_DECLARATION = 'declaration';\r\n\r\n/**\r\n * @param {String} style\r\n * @param {Object} [options]\r\n * @return {Object[]}\r\n * @throws {TypeError}\r\n * @throws {Error}\r\n */\r\nmodule.exports = function (style, options) {\r\n  if (typeof style !== 'string') {\r\n    throw new TypeError('First argument must be a string');\r\n  }\r\n\r\n  if (!style) return [];\r\n\r\n  options = options || {};\r\n\r\n  /**\r\n   * Positional.\r\n   */\r\n  var lineno = 1;\r\n  var column = 1;\r\n\r\n  /**\r\n   * Update lineno and column based on `str`.\r\n   *\r\n   * @param {String} str\r\n   */\r\n  function updatePosition(str) {\r\n    var lines = str.match(NEWLINE_REGEX);\r\n    if (lines) lineno += lines.length;\r\n    var i = str.lastIndexOf(NEWLINE);\r\n    column = ~i ? str.length - i : column + str.length;\r\n  }\r\n\r\n  /**\r\n   * Mark position and patch `node.position`.\r\n   *\r\n   * @return {Function}\r\n   */\r\n  function position() {\r\n    var start = { line: lineno, column: column };\r\n    return function (node) {\r\n      node.position = new Position(start);\r\n      whitespace();\r\n      return node;\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Store position information for a node.\r\n   *\r\n   * @constructor\r\n   * @property {Object} start\r\n   * @property {Object} end\r\n   * @property {undefined|String} source\r\n   */\r\n  function Position(start) {\r\n    this.start = start;\r\n    this.end = { line: lineno, column: column };\r\n    this.source = options.source;\r\n  }\r\n\r\n  /**\r\n   * Non-enumerable source string.\r\n   */\r\n  Position.prototype.content = style;\r\n\r\n  var errorsList = [];\r\n\r\n  /**\r\n   * Error `msg`.\r\n   *\r\n   * @param {String} msg\r\n   * @throws {Error}\r\n   */\r\n  function error(msg) {\r\n    var err = new Error(\r\n      options.source + ':' + lineno + ':' + column + ': ' + msg\r\n    );\r\n    err.reason = msg;\r\n    err.filename = options.source;\r\n    err.line = lineno;\r\n    err.column = column;\r\n    err.source = style;\r\n\r\n    if (options.silent) {\r\n      errorsList.push(err);\r\n    } else {\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Match `re` and return captures.\r\n   *\r\n   * @param {RegExp} re\r\n   * @return {undefined|Array}\r\n   */\r\n  function match(re) {\r\n    var m = re.exec(style);\r\n    if (!m) return;\r\n    var str = m[0];\r\n    updatePosition(str);\r\n    style = style.slice(str.length);\r\n    return m;\r\n  }\r\n\r\n  /**\r\n   * Parse whitespace.\r\n   */\r\n  function whitespace() {\r\n    match(WHITESPACE_REGEX);\r\n  }\r\n\r\n  /**\r\n   * Parse comments.\r\n   *\r\n   * @param {Object[]} [rules]\r\n   * @return {Object[]}\r\n   */\r\n  function comments(rules) {\r\n    var c;\r\n    rules = rules || [];\r\n    while ((c = comment())) {\r\n      if (c !== false) {\r\n        rules.push(c);\r\n      }\r\n    }\r\n    return rules;\r\n  }\r\n\r\n  /**\r\n   * Parse comment.\r\n   *\r\n   * @return {Object}\r\n   * @throws {Error}\r\n   */\r\n  function comment() {\r\n    var pos = position();\r\n    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;\r\n\r\n    var i = 2;\r\n    while (\r\n      EMPTY_STRING != style.charAt(i) &&\r\n      (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))\r\n    ) {\r\n      ++i;\r\n    }\r\n    i += 2;\r\n\r\n    if (EMPTY_STRING === style.charAt(i - 1)) {\r\n      return error('End of comment missing');\r\n    }\r\n\r\n    var str = style.slice(2, i - 2);\r\n    column += 2;\r\n    updatePosition(str);\r\n    style = style.slice(i);\r\n    column += 2;\r\n\r\n    return pos({\r\n      type: TYPE_COMMENT,\r\n      comment: str\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Parse declaration.\r\n   *\r\n   * @return {Object}\r\n   * @throws {Error}\r\n   */\r\n  function declaration() {\r\n    var pos = position();\r\n\r\n    // prop\r\n    var prop = match(PROPERTY_REGEX);\r\n    if (!prop) return;\r\n    comment();\r\n\r\n    // :\r\n    if (!match(COLON_REGEX)) return error(\"property missing ':'\");\r\n\r\n    // val\r\n    var val = match(VALUE_REGEX);\r\n\r\n    var ret = pos({\r\n      type: TYPE_DECLARATION,\r\n      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),\r\n      value: val\r\n        ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING))\r\n        : EMPTY_STRING\r\n    });\r\n\r\n    // ;\r\n    match(SEMICOLON_REGEX);\r\n\r\n    return ret;\r\n  }\r\n\r\n  /**\r\n   * Parse declarations.\r\n   *\r\n   * @return {Object[]}\r\n   */\r\n  function declarations() {\r\n    var decls = [];\r\n\r\n    comments(decls);\r\n\r\n    // declarations\r\n    var decl;\r\n    while ((decl = declaration())) {\r\n      if (decl !== false) {\r\n        decls.push(decl);\r\n        comments(decls);\r\n      }\r\n    }\r\n\r\n    return decls;\r\n  }\r\n\r\n  whitespace();\r\n  return declarations();\r\n};\r\n\r\n/**\r\n * Trim `str`.\r\n *\r\n * @param {String} str\r\n * @return {String}\r\n */\r\nfunction trim(str) {\r\n  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;\r\n}\r\n","\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.default = StyleToObject;\r\nvar inline_style_parser_1 = __importDefault(require(\"inline-style-parser\"));\r\n/**\r\n * Parses inline style to object.\r\n *\r\n * @param style - Inline style.\r\n * @param iterator - Iterator.\r\n * @returns - Style object or null.\r\n *\r\n * @example Parsing inline style to object:\r\n *\r\n * ```js\r\n * import parse from 'style-to-object';\r\n * parse('line-height: 42;'); // { 'line-height': '42' }\r\n * ```\r\n */\r\nfunction StyleToObject(style, iterator) {\r\n    var styleObject = null;\r\n    if (!style || typeof style !== 'string') {\r\n        return styleObject;\r\n    }\r\n    var declarations = (0, inline_style_parser_1.default)(style);\r\n    var hasIterator = typeof iterator === 'function';\r\n    declarations.forEach(function (declaration) {\r\n        if (declaration.type !== 'declaration') {\r\n            return;\r\n        }\r\n        var property = declaration.property, value = declaration.value;\r\n        if (hasIterator) {\r\n            iterator(property, value, declaration);\r\n        }\r\n        else if (value) {\r\n            styleObject = styleObject || {};\r\n            styleObject[property] = value;\r\n        }\r\n    });\r\n    return styleObject;\r\n}\r\n//# sourceMappingURL=index.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.camelCase = void 0;\r\nvar CUSTOM_PROPERTY_REGEX = /^--[a-zA-Z0-9_-]+$/;\r\nvar HYPHEN_REGEX = /-([a-z])/g;\r\nvar NO_HYPHEN_REGEX = /^[^-]+$/;\r\nvar VENDOR_PREFIX_REGEX = /^-(webkit|moz|ms|o|khtml)-/;\r\nvar MS_VENDOR_PREFIX_REGEX = /^-(ms)-/;\r\n/**\r\n * Checks whether to skip camelCase.\r\n */\r\nvar skipCamelCase = function (property) {\r\n    return !property ||\r\n        NO_HYPHEN_REGEX.test(property) ||\r\n        CUSTOM_PROPERTY_REGEX.test(property);\r\n};\r\n/**\r\n * Replacer that capitalizes first character.\r\n */\r\nvar capitalize = function (match, character) {\r\n    return character.toUpperCase();\r\n};\r\n/**\r\n * Replacer that removes beginning hyphen of vendor prefix property.\r\n */\r\nvar trimHyphen = function (match, prefix) { return \"\".concat(prefix, \"-\"); };\r\n/**\r\n * CamelCases a CSS property.\r\n */\r\nvar camelCase = function (property, options) {\r\n    if (options === void 0) { options = {}; }\r\n    if (skipCamelCase(property)) {\r\n        return property;\r\n    }\r\n    property = property.toLowerCase();\r\n    if (options.reactCompat) {\r\n        // `-ms` vendor prefix should not be capitalized\r\n        property = property.replace(MS_VENDOR_PREFIX_REGEX, trimHyphen);\r\n    }\r\n    else {\r\n        // for non-React, remove first hyphen so vendor prefix is not capitalized\r\n        property = property.replace(VENDOR_PREFIX_REGEX, trimHyphen);\r\n    }\r\n    return property.replace(HYPHEN_REGEX, capitalize);\r\n};\r\nexports.camelCase = camelCase;\r\n//# sourceMappingURL=utilities.js.map","\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nvar style_to_object_1 = __importDefault(require(\"style-to-object\"));\r\nvar utilities_1 = require(\"./utilities\");\r\n/**\r\n * Parses CSS inline style to JavaScript object (camelCased).\r\n */\r\nfunction StyleToJS(style, options) {\r\n    var output = {};\r\n    if (!style || typeof style !== 'string') {\r\n        return output;\r\n    }\r\n    (0, style_to_object_1.default)(style, function (property, value) {\r\n        // skip CSS comment\r\n        if (property && value) {\r\n            output[(0, utilities_1.camelCase)(property, options)] = value;\r\n        }\r\n    });\r\n    return output;\r\n}\r\nStyleToJS.default = StyleToJS;\r\nmodule.exports = StyleToJS;\r\n//# sourceMappingURL=index.js.map","/**\r\n * @typedef {import('unist').Node} Node\r\n * @typedef {import('unist').Point} Point\r\n * @typedef {import('unist').Position} Position\r\n */\r\n\r\n/**\r\n * @typedef NodeLike\r\n * @property {string} type\r\n * @property {PositionLike | null | undefined} [position]\r\n *\r\n * @typedef PositionLike\r\n * @property {PointLike | null | undefined} [start]\r\n * @property {PointLike | null | undefined} [end]\r\n *\r\n * @typedef PointLike\r\n * @property {number | null | undefined} [line]\r\n * @property {number | null | undefined} [column]\r\n * @property {number | null | undefined} [offset]\r\n */\r\n\r\n/**\r\n * Get the ending point of `node`.\r\n *\r\n * @param node\r\n *   Node.\r\n * @returns\r\n *   Point.\r\n */\r\nexport const pointEnd = point('end')\r\n\r\n/**\r\n * Get the starting point of `node`.\r\n *\r\n * @param node\r\n *   Node.\r\n * @returns\r\n *   Point.\r\n */\r\nexport const pointStart = point('start')\r\n\r\n/**\r\n * Get the positional info of `node`.\r\n *\r\n * @param {'end' | 'start'} type\r\n *   Side.\r\n * @returns\r\n *   Getter.\r\n */\r\nfunction point(type) {\r\n  return point\r\n\r\n  /**\r\n   * Get the point info of `node` at a bound side.\r\n   *\r\n   * @param {Node | NodeLike | null | undefined} [node]\r\n   * @returns {Point | undefined}\r\n   */\r\n  function point(node) {\r\n    const point = (node && node.position && node.position[type]) || {}\r\n\r\n    if (\r\n      typeof point.line === 'number' &&\r\n      point.line > 0 &&\r\n      typeof point.column === 'number' &&\r\n      point.column > 0\r\n    ) {\r\n      return {\r\n        line: point.line,\r\n        column: point.column,\r\n        offset:\r\n          typeof point.offset === 'number' && point.offset > -1\r\n            ? point.offset\r\n            : undefined\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Get the positional info of `node`.\r\n *\r\n * @param {Node | NodeLike | null | undefined} [node]\r\n *   Node.\r\n * @returns {Position | undefined}\r\n *   Position.\r\n */\r\nexport function position(node) {\r\n  const start = pointStart(node)\r\n  const end = pointEnd(node)\r\n\r\n  if (start && end) {\r\n    return {start, end}\r\n  }\r\n}\r\n","/**\r\n * @typedef {import('unist').Node} Node\r\n * @typedef {import('unist').Point} Point\r\n * @typedef {import('unist').Position} Position\r\n */\r\n\r\n/**\r\n * @typedef NodeLike\r\n * @property {string} type\r\n * @property {PositionLike | null | undefined} [position]\r\n *\r\n * @typedef PointLike\r\n * @property {number | null | undefined} [line]\r\n * @property {number | null | undefined} [column]\r\n * @property {number | null | undefined} [offset]\r\n *\r\n * @typedef PositionLike\r\n * @property {PointLike | null | undefined} [start]\r\n * @property {PointLike | null | undefined} [end]\r\n */\r\n\r\n/**\r\n * Serialize the positional info of a point, position (start and end points),\r\n * or node.\r\n *\r\n * @param {Node | NodeLike | Point | PointLike | Position | PositionLike | null | undefined} [value]\r\n *   Node, position, or point.\r\n * @returns {string}\r\n *   Pretty printed positional info of a node (`string`).\r\n *\r\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\r\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\r\n *   column, `s` for `start`, and `e` for end.\r\n *   An empty string (`''`) is returned if the given value is neither `node`,\r\n *   `position`, nor `point`.\r\n */\r\nexport function stringifyPosition(value) {\r\n  // Nothing.\r\n  if (!value || typeof value !== 'object') {\r\n    return ''\r\n  }\r\n\r\n  // Node.\r\n  if ('position' in value || 'type' in value) {\r\n    return position(value.position)\r\n  }\r\n\r\n  // Position.\r\n  if ('start' in value || 'end' in value) {\r\n    return position(value)\r\n  }\r\n\r\n  // Point.\r\n  if ('line' in value || 'column' in value) {\r\n    return point(value)\r\n  }\r\n\r\n  // ?\r\n  return ''\r\n}\r\n\r\n/**\r\n * @param {Point | PointLike | null | undefined} point\r\n * @returns {string}\r\n */\r\nfunction point(point) {\r\n  return index(point && point.line) + ':' + index(point && point.column)\r\n}\r\n\r\n/**\r\n * @param {Position | PositionLike | null | undefined} pos\r\n * @returns {string}\r\n */\r\nfunction position(pos) {\r\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\r\n}\r\n\r\n/**\r\n * @param {number | null | undefined} value\r\n * @returns {number}\r\n */\r\nfunction index(value) {\r\n  return value && typeof value === 'number' ? value : 1\r\n}\r\n","/**\r\n * @typedef {import('unist').Node} Node\r\n * @typedef {import('unist').Point} Point\r\n * @typedef {import('unist').Position} Position\r\n */\r\n\r\n/**\r\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\r\n *\r\n * @typedef Options\r\n *   Configuration.\r\n * @property {Array<Node> | null | undefined} [ancestors]\r\n *   Stack of (inclusive) ancestor nodes surrounding the message (optional).\r\n * @property {Error | null | undefined} [cause]\r\n *   Original error cause of the message (optional).\r\n * @property {Point | Position | null | undefined} [place]\r\n *   Place of message (optional).\r\n * @property {string | null | undefined} [ruleId]\r\n *   Category of message (optional, example: `'my-rule'`).\r\n * @property {string | null | undefined} [source]\r\n *   Namespace of who sent the message (optional, example: `'my-package'`).\r\n */\r\n\r\nimport {stringifyPosition} from 'unist-util-stringify-position'\r\n\r\n/**\r\n * Message.\r\n */\r\nexport class VFileMessage extends Error {\r\n  /**\r\n   * Create a message for `reason`.\r\n   *\r\n   * > 🪦 **Note**: also has obsolete signatures.\r\n   *\r\n   * @overload\r\n   * @param {string} reason\r\n   * @param {Options | null | undefined} [options]\r\n   * @returns\r\n   *\r\n   * @overload\r\n   * @param {string} reason\r\n   * @param {Node | NodeLike | null | undefined} parent\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns\r\n   *\r\n   * @overload\r\n   * @param {string} reason\r\n   * @param {Point | Position | null | undefined} place\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns\r\n   *\r\n   * @overload\r\n   * @param {string} reason\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns\r\n   *\r\n   * @overload\r\n   * @param {Error | VFileMessage} cause\r\n   * @param {Node | NodeLike | null | undefined} parent\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns\r\n   *\r\n   * @overload\r\n   * @param {Error | VFileMessage} cause\r\n   * @param {Point | Position | null | undefined} place\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns\r\n   *\r\n   * @overload\r\n   * @param {Error | VFileMessage} cause\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns\r\n   *\r\n   * @param {Error | VFileMessage | string} causeOrReason\r\n   *   Reason for message, should use markdown.\r\n   * @param {Node | NodeLike | Options | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\r\n   *   Configuration (optional).\r\n   * @param {string | null | undefined} [origin]\r\n   *   Place in code where the message originates (example:\r\n   *   `'my-package:my-rule'` or `'my-rule'`).\r\n   * @returns\r\n   *   Instance of `VFileMessage`.\r\n   */\r\n  // eslint-disable-next-line complexity\r\n  constructor(causeOrReason, optionsOrParentOrPlace, origin) {\r\n    super()\r\n\r\n    if (typeof optionsOrParentOrPlace === 'string') {\r\n      origin = optionsOrParentOrPlace\r\n      optionsOrParentOrPlace = undefined\r\n    }\r\n\r\n    /** @type {string} */\r\n    let reason = ''\r\n    /** @type {Options} */\r\n    let options = {}\r\n    let legacyCause = false\r\n\r\n    if (optionsOrParentOrPlace) {\r\n      // Point.\r\n      if (\r\n        'line' in optionsOrParentOrPlace &&\r\n        'column' in optionsOrParentOrPlace\r\n      ) {\r\n        options = {place: optionsOrParentOrPlace}\r\n      }\r\n      // Position.\r\n      else if (\r\n        'start' in optionsOrParentOrPlace &&\r\n        'end' in optionsOrParentOrPlace\r\n      ) {\r\n        options = {place: optionsOrParentOrPlace}\r\n      }\r\n      // Node.\r\n      else if ('type' in optionsOrParentOrPlace) {\r\n        options = {\r\n          ancestors: [optionsOrParentOrPlace],\r\n          place: optionsOrParentOrPlace.position\r\n        }\r\n      }\r\n      // Options.\r\n      else {\r\n        options = {...optionsOrParentOrPlace}\r\n      }\r\n    }\r\n\r\n    if (typeof causeOrReason === 'string') {\r\n      reason = causeOrReason\r\n    }\r\n    // Error.\r\n    else if (!options.cause && causeOrReason) {\r\n      legacyCause = true\r\n      reason = causeOrReason.message\r\n      options.cause = causeOrReason\r\n    }\r\n\r\n    if (!options.ruleId && !options.source && typeof origin === 'string') {\r\n      const index = origin.indexOf(':')\r\n\r\n      if (index === -1) {\r\n        options.ruleId = origin\r\n      } else {\r\n        options.source = origin.slice(0, index)\r\n        options.ruleId = origin.slice(index + 1)\r\n      }\r\n    }\r\n\r\n    if (!options.place && options.ancestors && options.ancestors) {\r\n      const parent = options.ancestors[options.ancestors.length - 1]\r\n\r\n      if (parent) {\r\n        options.place = parent.position\r\n      }\r\n    }\r\n\r\n    const start =\r\n      options.place && 'start' in options.place\r\n        ? options.place.start\r\n        : options.place\r\n\r\n    /* eslint-disable no-unused-expressions */\r\n    /**\r\n     * Stack of ancestor nodes surrounding the message.\r\n     *\r\n     * @type {Array<Node> | undefined}\r\n     */\r\n    this.ancestors = options.ancestors || undefined\r\n\r\n    /**\r\n     * Original error cause of the message.\r\n     *\r\n     * @type {Error | undefined}\r\n     */\r\n    this.cause = options.cause || undefined\r\n\r\n    /**\r\n     * Starting column of message.\r\n     *\r\n     * @type {number | undefined}\r\n     */\r\n    this.column = start ? start.column : undefined\r\n\r\n    /**\r\n     * State of problem.\r\n     *\r\n     * * `true` — error, file not usable\r\n     * * `false` — warning, change may be needed\r\n     * * `undefined` — change likely not needed\r\n     *\r\n     * @type {boolean | null | undefined}\r\n     */\r\n    this.fatal = undefined\r\n\r\n    /**\r\n     * Path of a file (used throughout the `VFile` ecosystem).\r\n     *\r\n     * @type {string | undefined}\r\n     */\r\n    this.file\r\n\r\n    // Field from `Error`.\r\n    /**\r\n     * Reason for message.\r\n     *\r\n     * @type {string}\r\n     */\r\n    this.message = reason\r\n\r\n    /**\r\n     * Starting line of error.\r\n     *\r\n     * @type {number | undefined}\r\n     */\r\n    this.line = start ? start.line : undefined\r\n\r\n    // Field from `Error`.\r\n    /**\r\n     * Serialized positional info of message.\r\n     *\r\n     * On normal errors, this would be something like `ParseError`, buit in\r\n     * `VFile` messages we use this space to show where an error happened.\r\n     */\r\n    this.name = stringifyPosition(options.place) || '1:1'\r\n\r\n    /**\r\n     * Place of message.\r\n     *\r\n     * @type {Point | Position | undefined}\r\n     */\r\n    this.place = options.place || undefined\r\n\r\n    /**\r\n     * Reason for message, should use markdown.\r\n     *\r\n     * @type {string}\r\n     */\r\n    this.reason = this.message\r\n\r\n    /**\r\n     * Category of message (example: `'my-rule'`).\r\n     *\r\n     * @type {string | undefined}\r\n     */\r\n    this.ruleId = options.ruleId || undefined\r\n\r\n    /**\r\n     * Namespace of message (example: `'my-package'`).\r\n     *\r\n     * @type {string | undefined}\r\n     */\r\n    this.source = options.source || undefined\r\n\r\n    // Field from `Error`.\r\n    /**\r\n     * Stack of message.\r\n     *\r\n     * This is used by normal errors to show where something happened in\r\n     * programming code, irrelevant for `VFile` messages,\r\n     *\r\n     * @type {string}\r\n     */\r\n    this.stack =\r\n      legacyCause && options.cause && typeof options.cause.stack === 'string'\r\n        ? options.cause.stack\r\n        : ''\r\n\r\n    // The following fields are “well known”.\r\n    // Not standard.\r\n    // Feel free to add other non-standard fields to your messages.\r\n\r\n    /**\r\n     * Specify the source value that’s being reported, which is deemed\r\n     * incorrect.\r\n     *\r\n     * @type {string | undefined}\r\n     */\r\n    this.actual\r\n\r\n    /**\r\n     * Suggest acceptable values that can be used instead of `actual`.\r\n     *\r\n     * @type {Array<string> | undefined}\r\n     */\r\n    this.expected\r\n\r\n    /**\r\n     * Long form description of the message (you should use markdown).\r\n     *\r\n     * @type {string | undefined}\r\n     */\r\n    this.note\r\n\r\n    /**\r\n     * Link to docs for the message.\r\n     *\r\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\r\n     * > to `new URL(x)`.\r\n     *\r\n     * @type {string | undefined}\r\n     */\r\n    this.url\r\n    /* eslint-enable no-unused-expressions */\r\n  }\r\n}\r\n\r\nVFileMessage.prototype.file = ''\r\nVFileMessage.prototype.name = ''\r\nVFileMessage.prototype.reason = ''\r\nVFileMessage.prototype.message = ''\r\nVFileMessage.prototype.stack = ''\r\nVFileMessage.prototype.column = undefined\r\nVFileMessage.prototype.line = undefined\r\nVFileMessage.prototype.ancestors = undefined\r\nVFileMessage.prototype.cause = undefined\r\nVFileMessage.prototype.fatal = undefined\r\nVFileMessage.prototype.place = undefined\r\nVFileMessage.prototype.ruleId = undefined\r\nVFileMessage.prototype.source = undefined\r\n","/**\r\n * @import {Identifier, Literal, MemberExpression} from 'estree'\r\n * @import {Jsx, JsxDev, Options, Props} from 'hast-util-to-jsx-runtime'\r\n * @import {Element, Nodes, Parents, Root, Text} from 'hast'\r\n * @import {MdxFlowExpressionHast, MdxTextExpressionHast} from 'mdast-util-mdx-expression'\r\n * @import {MdxJsxFlowElementHast, MdxJsxTextElementHast} from 'mdast-util-mdx-jsx'\r\n * @import {MdxjsEsmHast} from 'mdast-util-mdxjs-esm'\r\n * @import {Position} from 'unist'\r\n * @import {Child, Create, Field, JsxElement, State, Style} from './types.js'\r\n */\r\n\r\nimport {stringify as commas} from 'comma-separated-tokens'\r\nimport {ok as assert} from 'devlop'\r\nimport {name as isIdentifierName} from 'estree-util-is-identifier-name'\r\nimport {whitespace} from 'hast-util-whitespace'\r\nimport {find, hastToReact, html, svg} from 'property-information'\r\nimport {stringify as spaces} from 'space-separated-tokens'\r\nimport styleToJs from 'style-to-js'\r\nimport {pointStart} from 'unist-util-position'\r\nimport {VFileMessage} from 'vfile-message'\r\n\r\n// To do: next major: `Object.hasOwn`.\r\nconst own = {}.hasOwnProperty\r\n\r\n/** @type {Map<string, number>} */\r\nconst emptyMap = new Map()\r\n\r\nconst cap = /[A-Z]/g\r\n\r\n// `react-dom` triggers a warning for *any* white space in tables.\r\n// To follow GFM, `mdast-util-to-hast` injects line endings between elements.\r\n// Other tools might do so too, but they don’t do here, so we remove all of\r\n// that.\r\n\r\n// See: <https://github.com/facebook/react/pull/7081>.\r\n// See: <https://github.com/facebook/react/pull/7515>.\r\n// See: <https://github.com/remarkjs/remark-react/issues/64>.\r\n// See: <https://github.com/rehypejs/rehype-react/pull/29>.\r\n// See: <https://github.com/rehypejs/rehype-react/pull/32>.\r\n// See: <https://github.com/rehypejs/rehype-react/pull/45>.\r\nconst tableElements = new Set(['table', 'tbody', 'thead', 'tfoot', 'tr'])\r\n\r\nconst tableCellElement = new Set(['td', 'th'])\r\n\r\nconst docs = 'https://github.com/syntax-tree/hast-util-to-jsx-runtime'\r\n\r\n/**\r\n * Transform a hast tree to preact, react, solid, svelte, vue, etc.,\r\n * with an automatic JSX runtime.\r\n *\r\n * @param {Nodes} tree\r\n *   Tree to transform.\r\n * @param {Options} options\r\n *   Configuration (required).\r\n * @returns {JsxElement}\r\n *   JSX element.\r\n */\r\n\r\nexport function toJsxRuntime(tree, options) {\r\n  if (!options || options.Fragment === undefined) {\r\n    throw new TypeError('Expected `Fragment` in options')\r\n  }\r\n\r\n  const filePath = options.filePath || undefined\r\n  /** @type {Create} */\r\n  let create\r\n\r\n  if (options.development) {\r\n    if (typeof options.jsxDEV !== 'function') {\r\n      throw new TypeError(\r\n        'Expected `jsxDEV` in options when `development: true`'\r\n      )\r\n    }\r\n\r\n    create = developmentCreate(filePath, options.jsxDEV)\r\n  } else {\r\n    if (typeof options.jsx !== 'function') {\r\n      throw new TypeError('Expected `jsx` in production options')\r\n    }\r\n\r\n    if (typeof options.jsxs !== 'function') {\r\n      throw new TypeError('Expected `jsxs` in production options')\r\n    }\r\n\r\n    create = productionCreate(filePath, options.jsx, options.jsxs)\r\n  }\r\n\r\n  /** @type {State} */\r\n  const state = {\r\n    Fragment: options.Fragment,\r\n    ancestors: [],\r\n    components: options.components || {},\r\n    create,\r\n    elementAttributeNameCase: options.elementAttributeNameCase || 'react',\r\n    evaluater: options.createEvaluater ? options.createEvaluater() : undefined,\r\n    filePath,\r\n    ignoreInvalidStyle: options.ignoreInvalidStyle || false,\r\n    passKeys: options.passKeys !== false,\r\n    passNode: options.passNode || false,\r\n    schema: options.space === 'svg' ? svg : html,\r\n    stylePropertyNameCase: options.stylePropertyNameCase || 'dom',\r\n    tableCellAlignToStyle: options.tableCellAlignToStyle !== false\r\n  }\r\n\r\n  const result = one(state, tree, undefined)\r\n\r\n  // JSX element.\r\n  if (result && typeof result !== 'string') {\r\n    return result\r\n  }\r\n\r\n  // Text node or something that turned into nothing.\r\n  return state.create(\r\n    tree,\r\n    state.Fragment,\r\n    {children: result || undefined},\r\n    undefined\r\n  )\r\n}\r\n\r\n/**\r\n * Transform a node.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {Nodes} node\r\n *   Current node.\r\n * @param {string | undefined} key\r\n *   Key.\r\n * @returns {Child | undefined}\r\n *   Child, optional.\r\n */\r\nfunction one(state, node, key) {\r\n  if (node.type === 'element') {\r\n    return element(state, node, key)\r\n  }\r\n\r\n  if (node.type === 'mdxFlowExpression' || node.type === 'mdxTextExpression') {\r\n    return mdxExpression(state, node)\r\n  }\r\n\r\n  if (node.type === 'mdxJsxFlowElement' || node.type === 'mdxJsxTextElement') {\r\n    return mdxJsxElement(state, node, key)\r\n  }\r\n\r\n  if (node.type === 'mdxjsEsm') {\r\n    return mdxEsm(state, node)\r\n  }\r\n\r\n  if (node.type === 'root') {\r\n    return root(state, node, key)\r\n  }\r\n\r\n  if (node.type === 'text') {\r\n    return text(state, node)\r\n  }\r\n}\r\n\r\n/**\r\n * Handle element.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {Element} node\r\n *   Current node.\r\n * @param {string | undefined} key\r\n *   Key.\r\n * @returns {Child | undefined}\r\n *   Child, optional.\r\n */\r\nfunction element(state, node, key) {\r\n  const parentSchema = state.schema\r\n  let schema = parentSchema\r\n\r\n  if (node.tagName.toLowerCase() === 'svg' && parentSchema.space === 'html') {\r\n    schema = svg\r\n    state.schema = schema\r\n  }\r\n\r\n  state.ancestors.push(node)\r\n\r\n  const type = findComponentFromName(state, node.tagName, false)\r\n  const props = createElementProps(state, node)\r\n  let children = createChildren(state, node)\r\n\r\n  if (tableElements.has(node.tagName)) {\r\n    children = children.filter(function (child) {\r\n      return typeof child === 'string' ? !whitespace(child) : true\r\n    })\r\n  }\r\n\r\n  addNode(state, props, type, node)\r\n  addChildren(props, children)\r\n\r\n  // Restore.\r\n  state.ancestors.pop()\r\n  state.schema = parentSchema\r\n\r\n  return state.create(node, type, props, key)\r\n}\r\n\r\n/**\r\n * Handle MDX expression.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {MdxFlowExpressionHast | MdxTextExpressionHast} node\r\n *   Current node.\r\n * @returns {Child | undefined}\r\n *   Child, optional.\r\n */\r\nfunction mdxExpression(state, node) {\r\n  if (node.data && node.data.estree && state.evaluater) {\r\n    const program = node.data.estree\r\n    const expression = program.body[0]\r\n    assert(expression.type === 'ExpressionStatement')\r\n\r\n    // Assume result is a child.\r\n    return /** @type {Child | undefined} */ (\r\n      state.evaluater.evaluateExpression(expression.expression)\r\n    )\r\n  }\r\n\r\n  crashEstree(state, node.position)\r\n}\r\n\r\n/**\r\n * Handle MDX ESM.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {MdxjsEsmHast} node\r\n *   Current node.\r\n * @returns {Child | undefined}\r\n *   Child, optional.\r\n */\r\nfunction mdxEsm(state, node) {\r\n  if (node.data && node.data.estree && state.evaluater) {\r\n    // Assume result is a child.\r\n    return /** @type {Child | undefined} */ (\r\n      state.evaluater.evaluateProgram(node.data.estree)\r\n    )\r\n  }\r\n\r\n  crashEstree(state, node.position)\r\n}\r\n\r\n/**\r\n * Handle MDX JSX.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {MdxJsxFlowElementHast | MdxJsxTextElementHast} node\r\n *   Current node.\r\n * @param {string | undefined} key\r\n *   Key.\r\n * @returns {Child | undefined}\r\n *   Child, optional.\r\n */\r\nfunction mdxJsxElement(state, node, key) {\r\n  const parentSchema = state.schema\r\n  let schema = parentSchema\r\n\r\n  if (node.name === 'svg' && parentSchema.space === 'html') {\r\n    schema = svg\r\n    state.schema = schema\r\n  }\r\n\r\n  state.ancestors.push(node)\r\n\r\n  const type =\r\n    node.name === null\r\n      ? state.Fragment\r\n      : findComponentFromName(state, node.name, true)\r\n  const props = createJsxElementProps(state, node)\r\n  const children = createChildren(state, node)\r\n\r\n  addNode(state, props, type, node)\r\n  addChildren(props, children)\r\n\r\n  // Restore.\r\n  state.ancestors.pop()\r\n  state.schema = parentSchema\r\n\r\n  return state.create(node, type, props, key)\r\n}\r\n\r\n/**\r\n * Handle root.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {Root} node\r\n *   Current node.\r\n * @param {string | undefined} key\r\n *   Key.\r\n * @returns {Child | undefined}\r\n *   Child, optional.\r\n */\r\nfunction root(state, node, key) {\r\n  /** @type {Props} */\r\n  const props = {}\r\n\r\n  addChildren(props, createChildren(state, node))\r\n\r\n  return state.create(node, state.Fragment, props, key)\r\n}\r\n\r\n/**\r\n * Handle text.\r\n *\r\n * @param {State} _\r\n *   Info passed around.\r\n * @param {Text} node\r\n *   Current node.\r\n * @returns {Child | undefined}\r\n *   Child, optional.\r\n */\r\nfunction text(_, node) {\r\n  return node.value\r\n}\r\n\r\n/**\r\n * Add `node` to props.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {Props} props\r\n *   Props.\r\n * @param {unknown} type\r\n *   Type.\r\n * @param {Element | MdxJsxFlowElementHast | MdxJsxTextElementHast} node\r\n *   Node.\r\n * @returns {undefined}\r\n *   Nothing.\r\n */\r\nfunction addNode(state, props, type, node) {\r\n  // If this is swapped out for a component:\r\n  if (typeof type !== 'string' && type !== state.Fragment && state.passNode) {\r\n    props.node = node\r\n  }\r\n}\r\n\r\n/**\r\n * Add children to props.\r\n *\r\n * @param {Props} props\r\n *   Props.\r\n * @param {Array<Child>} children\r\n *   Children.\r\n * @returns {undefined}\r\n *   Nothing.\r\n */\r\nfunction addChildren(props, children) {\r\n  if (children.length > 0) {\r\n    const value = children.length > 1 ? children : children[0]\r\n\r\n    if (value) {\r\n      props.children = value\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @param {string | undefined} _\r\n *   Path to file.\r\n * @param {Jsx} jsx\r\n *   Dynamic.\r\n * @param {Jsx} jsxs\r\n *   Static.\r\n * @returns {Create}\r\n *   Create a production element.\r\n */\r\nfunction productionCreate(_, jsx, jsxs) {\r\n  return create\r\n  /** @type {Create} */\r\n  function create(_, type, props, key) {\r\n    // Only an array when there are 2 or more children.\r\n    const isStaticChildren = Array.isArray(props.children)\r\n    const fn = isStaticChildren ? jsxs : jsx\r\n    return key ? fn(type, props, key) : fn(type, props)\r\n  }\r\n}\r\n\r\n/**\r\n * @param {string | undefined} filePath\r\n *   Path to file.\r\n * @param {JsxDev} jsxDEV\r\n *   Development.\r\n * @returns {Create}\r\n *   Create a development element.\r\n */\r\nfunction developmentCreate(filePath, jsxDEV) {\r\n  return create\r\n  /** @type {Create} */\r\n  function create(node, type, props, key) {\r\n    // Only an array when there are 2 or more children.\r\n    const isStaticChildren = Array.isArray(props.children)\r\n    const point = pointStart(node)\r\n    return jsxDEV(\r\n      type,\r\n      props,\r\n      key,\r\n      isStaticChildren,\r\n      {\r\n        columnNumber: point ? point.column - 1 : undefined,\r\n        fileName: filePath,\r\n        lineNumber: point ? point.line : undefined\r\n      },\r\n      undefined\r\n    )\r\n  }\r\n}\r\n\r\n/**\r\n * Create props from an element.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {Element} node\r\n *   Current element.\r\n * @returns {Props}\r\n *   Props.\r\n */\r\nfunction createElementProps(state, node) {\r\n  /** @type {Props} */\r\n  const props = {}\r\n  /** @type {string | undefined} */\r\n  let alignValue\r\n  /** @type {string} */\r\n  let prop\r\n\r\n  for (prop in node.properties) {\r\n    if (prop !== 'children' && own.call(node.properties, prop)) {\r\n      const result = createProperty(state, prop, node.properties[prop])\r\n\r\n      if (result) {\r\n        const [key, value] = result\r\n\r\n        if (\r\n          state.tableCellAlignToStyle &&\r\n          key === 'align' &&\r\n          typeof value === 'string' &&\r\n          tableCellElement.has(node.tagName)\r\n        ) {\r\n          alignValue = value\r\n        } else {\r\n          props[key] = value\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  if (alignValue) {\r\n    // Assume style is an object.\r\n    const style = /** @type {Style} */ (props.style || (props.style = {}))\r\n    style[state.stylePropertyNameCase === 'css' ? 'text-align' : 'textAlign'] =\r\n      alignValue\r\n  }\r\n\r\n  return props\r\n}\r\n\r\n/**\r\n * Create props from a JSX element.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {MdxJsxFlowElementHast | MdxJsxTextElementHast} node\r\n *   Current JSX element.\r\n * @returns {Props}\r\n *   Props.\r\n */\r\nfunction createJsxElementProps(state, node) {\r\n  /** @type {Props} */\r\n  const props = {}\r\n\r\n  for (const attribute of node.attributes) {\r\n    if (attribute.type === 'mdxJsxExpressionAttribute') {\r\n      if (attribute.data && attribute.data.estree && state.evaluater) {\r\n        const program = attribute.data.estree\r\n        const expression = program.body[0]\r\n        assert(expression.type === 'ExpressionStatement')\r\n        const objectExpression = expression.expression\r\n        assert(objectExpression.type === 'ObjectExpression')\r\n        const property = objectExpression.properties[0]\r\n        assert(property.type === 'SpreadElement')\r\n\r\n        Object.assign(\r\n          props,\r\n          state.evaluater.evaluateExpression(property.argument)\r\n        )\r\n      } else {\r\n        crashEstree(state, node.position)\r\n      }\r\n    } else {\r\n      // For JSX, the author is responsible of passing in the correct values.\r\n      const name = attribute.name\r\n      /** @type {unknown} */\r\n      let value\r\n\r\n      if (attribute.value && typeof attribute.value === 'object') {\r\n        if (\r\n          attribute.value.data &&\r\n          attribute.value.data.estree &&\r\n          state.evaluater\r\n        ) {\r\n          const program = attribute.value.data.estree\r\n          const expression = program.body[0]\r\n          assert(expression.type === 'ExpressionStatement')\r\n          value = state.evaluater.evaluateExpression(expression.expression)\r\n        } else {\r\n          crashEstree(state, node.position)\r\n        }\r\n      } else {\r\n        value = attribute.value === null ? true : attribute.value\r\n      }\r\n\r\n      // Assume a prop.\r\n      props[name] = /** @type {Props[keyof Props]} */ (value)\r\n    }\r\n  }\r\n\r\n  return props\r\n}\r\n\r\n/**\r\n * Create children.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {Parents} node\r\n *   Current element.\r\n * @returns {Array<Child>}\r\n *   Children.\r\n */\r\nfunction createChildren(state, node) {\r\n  /** @type {Array<Child>} */\r\n  const children = []\r\n  let index = -1\r\n  /** @type {Map<string, number>} */\r\n  // Note: test this when Solid doesn’t want to merge my upcoming PR.\r\n  /* c8 ignore next */\r\n  const countsByName = state.passKeys ? new Map() : emptyMap\r\n\r\n  while (++index < node.children.length) {\r\n    const child = node.children[index]\r\n    /** @type {string | undefined} */\r\n    let key\r\n\r\n    if (state.passKeys) {\r\n      const name =\r\n        child.type === 'element'\r\n          ? child.tagName\r\n          : child.type === 'mdxJsxFlowElement' ||\r\n              child.type === 'mdxJsxTextElement'\r\n            ? child.name\r\n            : undefined\r\n\r\n      if (name) {\r\n        const count = countsByName.get(name) || 0\r\n        key = name + '-' + count\r\n        countsByName.set(name, count + 1)\r\n      }\r\n    }\r\n\r\n    const result = one(state, child, key)\r\n    if (result !== undefined) children.push(result)\r\n  }\r\n\r\n  return children\r\n}\r\n\r\n/**\r\n * Handle a property.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {string} prop\r\n *   Key.\r\n * @param {Array<number | string> | boolean | number | string | null | undefined} value\r\n *   hast property value.\r\n * @returns {Field | undefined}\r\n *   Field for runtime, optional.\r\n */\r\nfunction createProperty(state, prop, value) {\r\n  const info = find(state.schema, prop)\r\n\r\n  // Ignore nullish and `NaN` values.\r\n  if (\r\n    value === null ||\r\n    value === undefined ||\r\n    (typeof value === 'number' && Number.isNaN(value))\r\n  ) {\r\n    return\r\n  }\r\n\r\n  if (Array.isArray(value)) {\r\n    // Accept `array`.\r\n    // Most props are space-separated.\r\n    value = info.commaSeparated ? commas(value) : spaces(value)\r\n  }\r\n\r\n  // React only accepts `style` as object.\r\n  if (info.property === 'style') {\r\n    let styleObject =\r\n      typeof value === 'object' ? value : parseStyle(state, String(value))\r\n\r\n    if (state.stylePropertyNameCase === 'css') {\r\n      styleObject = transformStylesToCssCasing(styleObject)\r\n    }\r\n\r\n    return ['style', styleObject]\r\n  }\r\n\r\n  return [\r\n    state.elementAttributeNameCase === 'react' && info.space\r\n      ? hastToReact[info.property] || info.property\r\n      : info.attribute,\r\n    value\r\n  ]\r\n}\r\n\r\n/**\r\n * Parse a CSS declaration to an object.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {string} value\r\n *   CSS declarations.\r\n * @returns {Style}\r\n *   Properties.\r\n * @throws\r\n *   Throws `VFileMessage` when CSS cannot be parsed.\r\n */\r\nfunction parseStyle(state, value) {\r\n  try {\r\n    return styleToJs(value, {reactCompat: true})\r\n  } catch (error) {\r\n    if (state.ignoreInvalidStyle) {\r\n      return {}\r\n    }\r\n\r\n    const cause = /** @type {Error} */ (error)\r\n    const message = new VFileMessage('Cannot parse `style` attribute', {\r\n      ancestors: state.ancestors,\r\n      cause,\r\n      ruleId: 'style',\r\n      source: 'hast-util-to-jsx-runtime'\r\n    })\r\n    message.file = state.filePath || undefined\r\n    message.url = docs + '#cannot-parse-style-attribute'\r\n\r\n    throw message\r\n  }\r\n}\r\n\r\n/**\r\n * Create a JSX name from a string.\r\n *\r\n * @param {State} state\r\n *   To do.\r\n * @param {string} name\r\n *   Name.\r\n * @param {boolean} allowExpression\r\n *   Allow member expressions and identifiers.\r\n * @returns {unknown}\r\n *   To do.\r\n */\r\nfunction findComponentFromName(state, name, allowExpression) {\r\n  /** @type {Identifier | Literal | MemberExpression} */\r\n  let result\r\n\r\n  if (!allowExpression) {\r\n    result = {type: 'Literal', value: name}\r\n  } else if (name.includes('.')) {\r\n    const identifiers = name.split('.')\r\n    let index = -1\r\n    /** @type {Identifier | Literal | MemberExpression | undefined} */\r\n    let node\r\n\r\n    while (++index < identifiers.length) {\r\n      /** @type {Identifier | Literal} */\r\n      const prop = isIdentifierName(identifiers[index])\r\n        ? {type: 'Identifier', name: identifiers[index]}\r\n        : {type: 'Literal', value: identifiers[index]}\r\n      node = node\r\n        ? {\r\n            type: 'MemberExpression',\r\n            object: node,\r\n            property: prop,\r\n            computed: Boolean(index && prop.type === 'Literal'),\r\n            optional: false\r\n          }\r\n        : prop\r\n    }\r\n\r\n    assert(node, 'always a result')\r\n    result = node\r\n  } else {\r\n    result =\r\n      isIdentifierName(name) && !/^[a-z]/.test(name)\r\n        ? {type: 'Identifier', name}\r\n        : {type: 'Literal', value: name}\r\n  }\r\n\r\n  // Only literals can be passed in `components` currently.\r\n  // No identifiers / member expressions.\r\n  if (result.type === 'Literal') {\r\n    const name = /** @type {string | number} */ (result.value)\r\n    return own.call(state.components, name) ? state.components[name] : name\r\n  }\r\n\r\n  // Assume component.\r\n  if (state.evaluater) {\r\n    return state.evaluater.evaluateExpression(result)\r\n  }\r\n\r\n  crashEstree(state)\r\n}\r\n\r\n/**\r\n * @param {State} state\r\n * @param {Position | undefined} [place]\r\n * @returns {never}\r\n */\r\nfunction crashEstree(state, place) {\r\n  const message = new VFileMessage(\r\n    'Cannot handle MDX estrees without `createEvaluater`',\r\n    {\r\n      ancestors: state.ancestors,\r\n      place,\r\n      ruleId: 'mdx-estree',\r\n      source: 'hast-util-to-jsx-runtime'\r\n    }\r\n  )\r\n  message.file = state.filePath || undefined\r\n  message.url = docs + '#cannot-handle-mdx-estrees-without-createevaluater'\r\n\r\n  throw message\r\n}\r\n\r\n/**\r\n * Transform a DOM casing style object to a CSS casing style object.\r\n *\r\n * @param {Style} domCasing\r\n * @returns {Style}\r\n */\r\nfunction transformStylesToCssCasing(domCasing) {\r\n  /** @type {Style} */\r\n  const cssCasing = {}\r\n  /** @type {string} */\r\n  let from\r\n\r\n  for (from in domCasing) {\r\n    if (own.call(domCasing, from)) {\r\n      cssCasing[transformStyleToCssCasing(from)] = domCasing[from]\r\n    }\r\n  }\r\n\r\n  return cssCasing\r\n}\r\n\r\n/**\r\n * Transform a DOM casing style field to a CSS casing style field.\r\n *\r\n * @param {string} from\r\n * @returns {string}\r\n */\r\nfunction transformStyleToCssCasing(from) {\r\n  let to = from.replace(cap, toDash)\r\n  // Handle `ms-xxx` -> `-ms-xxx`.\r\n  if (to.slice(0, 3) === 'ms-') to = '-' + to\r\n  return to\r\n}\r\n\r\n/**\r\n * Make `$0` dash cased.\r\n *\r\n * @param {string} $0\r\n *   Capitalized ASCII leter.\r\n * @returns {string}\r\n *   Dash and lower letter.\r\n */\r\nfunction toDash($0) {\r\n  return '-' + $0.toLowerCase()\r\n}\r\n","/**\r\n * HTML URL properties.\r\n *\r\n * Each key is a property name and each value is a list of tag names it applies\r\n * to or `null` if it applies to all elements.\r\n *\r\n * @type {Record<string, Array<string> | null>}\r\n */\r\nexport const urlAttributes = {\r\n  action: ['form'],\r\n  cite: ['blockquote', 'del', 'ins', 'q'],\r\n  data: ['object'],\r\n  formAction: ['button', 'input'],\r\n  href: ['a', 'area', 'base', 'link'],\r\n  icon: ['menuitem'],\r\n  itemId: null,\r\n  manifest: ['html'],\r\n  ping: ['a', 'area'],\r\n  poster: ['video'],\r\n  src: [\r\n    'audio',\r\n    'embed',\r\n    'iframe',\r\n    'img',\r\n    'input',\r\n    'script',\r\n    'source',\r\n    'track',\r\n    'video'\r\n  ]\r\n}\r\n","/**\r\n * @typedef {import('mdast').Nodes} Nodes\r\n *\r\n * @typedef Options\r\n *   Configuration (optional).\r\n * @property {boolean | null | undefined} [includeImageAlt=true]\r\n *   Whether to use `alt` for `image`s (default: `true`).\r\n * @property {boolean | null | undefined} [includeHtml=true]\r\n *   Whether to use `value` of HTML (default: `true`).\r\n */\r\n\r\n/** @type {Options} */\r\nconst emptyOptions = {}\r\n\r\n/**\r\n * Get the text content of a node or list of nodes.\r\n *\r\n * Prefers the node’s plain-text fields, otherwise serializes its children,\r\n * and if the given value is an array, serialize the nodes in it.\r\n *\r\n * @param {unknown} [value]\r\n *   Thing to serialize, typically `Node`.\r\n * @param {Options | null | undefined} [options]\r\n *   Configuration (optional).\r\n * @returns {string}\r\n *   Serialized `value`.\r\n */\r\nexport function toString(value, options) {\r\n  const settings = options || emptyOptions\r\n  const includeImageAlt =\r\n    typeof settings.includeImageAlt === 'boolean'\r\n      ? settings.includeImageAlt\r\n      : true\r\n  const includeHtml =\r\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\r\n\r\n  return one(value, includeImageAlt, includeHtml)\r\n}\r\n\r\n/**\r\n * One node or several nodes.\r\n *\r\n * @param {unknown} value\r\n *   Thing to serialize.\r\n * @param {boolean} includeImageAlt\r\n *   Include image `alt`s.\r\n * @param {boolean} includeHtml\r\n *   Include HTML.\r\n * @returns {string}\r\n *   Serialized node.\r\n */\r\nfunction one(value, includeImageAlt, includeHtml) {\r\n  if (node(value)) {\r\n    if ('value' in value) {\r\n      return value.type === 'html' && !includeHtml ? '' : value.value\r\n    }\r\n\r\n    if (includeImageAlt && 'alt' in value && value.alt) {\r\n      return value.alt\r\n    }\r\n\r\n    if ('children' in value) {\r\n      return all(value.children, includeImageAlt, includeHtml)\r\n    }\r\n  }\r\n\r\n  if (Array.isArray(value)) {\r\n    return all(value, includeImageAlt, includeHtml)\r\n  }\r\n\r\n  return ''\r\n}\r\n\r\n/**\r\n * Serialize a list of nodes.\r\n *\r\n * @param {Array<unknown>} values\r\n *   Thing to serialize.\r\n * @param {boolean} includeImageAlt\r\n *   Include image `alt`s.\r\n * @param {boolean} includeHtml\r\n *   Include HTML.\r\n * @returns {string}\r\n *   Serialized nodes.\r\n */\r\nfunction all(values, includeImageAlt, includeHtml) {\r\n  /** @type {Array<string>} */\r\n  const result = []\r\n  let index = -1\r\n\r\n  while (++index < values.length) {\r\n    result[index] = one(values[index], includeImageAlt, includeHtml)\r\n  }\r\n\r\n  return result.join('')\r\n}\r\n\r\n/**\r\n * Check if `value` looks like a node.\r\n *\r\n * @param {unknown} value\r\n *   Thing.\r\n * @returns {value is Nodes}\r\n *   Whether `value` is a node.\r\n */\r\nfunction node(value) {\r\n  return Boolean(value && typeof value === 'object')\r\n}\r\n","/// <reference lib=\"dom\" />\r\n\r\n/* eslint-env browser */\r\n\r\nconst element = document.createElement('i')\r\n\r\n/**\r\n * @param {string} value\r\n * @returns {string | false}\r\n */\r\nexport function decodeNamedCharacterReference(value) {\r\n  const characterReference = '&' + value + ';'\r\n  element.innerHTML = characterReference\r\n  const character = element.textContent\r\n\r\n  // Some named character references do not require the closing semicolon\r\n  // (`&not`, for instance), which leads to situations where parsing the assumed\r\n  // named reference of `&notit;` will result in the string `¬it;`.\r\n  // When we encounter a trailing semicolon after parsing, and the character\r\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\r\n  // matching was not complete.\r\n  if (\r\n    // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\r\n    // yield `null`.\r\n    character.charCodeAt(character.length - 1) === 59 /* `;` */ &&\r\n    value !== 'semi'\r\n  ) {\r\n    return false\r\n  }\r\n\r\n  // If the decoded string is equal to the input, the character reference was\r\n  // not valid.\r\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\r\n  // yield `null`.\r\n  return character === characterReference ? false : character\r\n}\r\n","/**\r\n * Like `Array#splice`, but smarter for giant arrays.\r\n *\r\n * `Array#splice` takes all items to be inserted as individual argument which\r\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\r\n *\r\n * Otherwise, this does not return the removed items, and takes `items` as an\r\n * array instead of rest parameters.\r\n *\r\n * @template {unknown} T\r\n *   Item type.\r\n * @param {Array<T>} list\r\n *   List to operate on.\r\n * @param {number} start\r\n *   Index to remove/insert at (can be negative).\r\n * @param {number} remove\r\n *   Number of items to remove.\r\n * @param {Array<T>} items\r\n *   Items to inject into `list`.\r\n * @returns {undefined}\r\n *   Nothing.\r\n */\r\nexport function splice(list, start, remove, items) {\r\n  const end = list.length;\r\n  let chunkStart = 0;\r\n  /** @type {Array<unknown>} */\r\n  let parameters;\r\n\r\n  // Make start between zero and `end` (included).\r\n  if (start < 0) {\r\n    start = -start > end ? 0 : end + start;\r\n  } else {\r\n    start = start > end ? end : start;\r\n  }\r\n  remove = remove > 0 ? remove : 0;\r\n\r\n  // No need to chunk the items if there’s only a couple (10k) items.\r\n  if (items.length < 10000) {\r\n    parameters = Array.from(items);\r\n    parameters.unshift(start, remove);\r\n    // @ts-expect-error Hush, it’s fine.\r\n    list.splice(...parameters);\r\n  } else {\r\n    // Delete `remove` items starting from `start`\r\n    if (remove) list.splice(start, remove);\r\n\r\n    // Insert the items in chunks to not cause stack overflows.\r\n    while (chunkStart < items.length) {\r\n      parameters = items.slice(chunkStart, chunkStart + 10000);\r\n      parameters.unshift(start, 0);\r\n      // @ts-expect-error Hush, it’s fine.\r\n      list.splice(...parameters);\r\n      chunkStart += 10000;\r\n      start += 10000;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Append `items` (an array) at the end of `list` (another array).\r\n * When `list` was empty, returns `items` instead.\r\n *\r\n * This prevents a potentially expensive operation when `list` is empty,\r\n * and adds items in batches to prevent V8 from hanging.\r\n *\r\n * @template {unknown} T\r\n *   Item type.\r\n * @param {Array<T>} list\r\n *   List to operate on.\r\n * @param {Array<T>} items\r\n *   Items to add to `list`.\r\n * @returns {Array<T>}\r\n *   Either `list` or `items`.\r\n */\r\nexport function push(list, items) {\r\n  if (list.length > 0) {\r\n    splice(list, list.length, 0, items);\r\n    return list;\r\n  }\r\n  return items;\r\n}","/**\r\n * @import {\r\n *   Extension,\r\n *   Handles,\r\n *   HtmlExtension,\r\n *   NormalizedExtension\r\n * } from 'micromark-util-types'\r\n */\r\n\r\nimport {splice} from 'micromark-util-chunked'\r\n\r\nconst hasOwnProperty = {}.hasOwnProperty\r\n\r\n/**\r\n * Combine multiple syntax extensions into one.\r\n *\r\n * @param {ReadonlyArray<Extension>} extensions\r\n *   List of syntax extensions.\r\n * @returns {NormalizedExtension}\r\n *   A single combined extension.\r\n */\r\nexport function combineExtensions(extensions) {\r\n  /** @type {NormalizedExtension} */\r\n  const all = {}\r\n  let index = -1\r\n\r\n  while (++index < extensions.length) {\r\n    syntaxExtension(all, extensions[index])\r\n  }\r\n\r\n  return all\r\n}\r\n\r\n/**\r\n * Merge `extension` into `all`.\r\n *\r\n * @param {NormalizedExtension} all\r\n *   Extension to merge into.\r\n * @param {Extension} extension\r\n *   Extension to merge.\r\n * @returns {undefined}\r\n *   Nothing.\r\n */\r\nfunction syntaxExtension(all, extension) {\r\n  /** @type {keyof Extension} */\r\n  let hook\r\n\r\n  for (hook in extension) {\r\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\r\n    /** @type {Record<string, unknown>} */\r\n    const left = maybe || (all[hook] = {})\r\n    /** @type {Record<string, unknown> | undefined} */\r\n    const right = extension[hook]\r\n    /** @type {string} */\r\n    let code\r\n\r\n    if (right) {\r\n      for (code in right) {\r\n        if (!hasOwnProperty.call(left, code)) left[code] = []\r\n        const value = right[code]\r\n        constructs(\r\n          // @ts-expect-error Looks like a list.\r\n          left[code],\r\n          Array.isArray(value) ? value : value ? [value] : []\r\n        )\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Merge `list` into `existing` (both lists of constructs).\r\n * Mutates `existing`.\r\n *\r\n * @param {Array<unknown>} existing\r\n *   List of constructs to merge into.\r\n * @param {Array<unknown>} list\r\n *   List of constructs to merge.\r\n * @returns {undefined}\r\n *   Nothing.\r\n */\r\nfunction constructs(existing, list) {\r\n  let index = -1\r\n  /** @type {Array<unknown>} */\r\n  const before = []\r\n\r\n  while (++index < list.length) {\r\n    // @ts-expect-error Looks like an object.\r\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\r\n  }\r\n\r\n  splice(existing, 0, 0, before)\r\n}\r\n\r\n/**\r\n * Combine multiple HTML extensions into one.\r\n *\r\n * @param {ReadonlyArray<HtmlExtension>} htmlExtensions\r\n *   List of HTML extensions.\r\n * @returns {HtmlExtension}\r\n *   Single combined HTML extension.\r\n */\r\nexport function combineHtmlExtensions(htmlExtensions) {\r\n  /** @type {HtmlExtension} */\r\n  const handlers = {}\r\n  let index = -1\r\n\r\n  while (++index < htmlExtensions.length) {\r\n    htmlExtension(handlers, htmlExtensions[index])\r\n  }\r\n\r\n  return handlers\r\n}\r\n\r\n/**\r\n * Merge `extension` into `all`.\r\n *\r\n * @param {HtmlExtension} all\r\n *   Extension to merge into.\r\n * @param {HtmlExtension} extension\r\n *   Extension to merge.\r\n * @returns {undefined}\r\n *   Nothing.\r\n */\r\nfunction htmlExtension(all, extension) {\r\n  /** @type {keyof HtmlExtension} */\r\n  let hook\r\n\r\n  for (hook in extension) {\r\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\r\n    const left = maybe || (all[hook] = {})\r\n    const right = extension[hook]\r\n    /** @type {keyof Handles} */\r\n    let type\r\n\r\n    if (right) {\r\n      for (type in right) {\r\n        // @ts-expect-error assume document vs regular handler are managed correctly.\r\n        left[type] = right[type]\r\n      }\r\n    }\r\n  }\r\n}\r\n","/**\r\n * Turn the number (in string form as either hexa- or plain decimal) coming from\r\n * a numeric character reference into a character.\r\n *\r\n * Sort of like `String.fromCodePoint(Number.parseInt(value, base))`, but makes\r\n * non-characters and control characters safe.\r\n *\r\n * @param {string} value\r\n *   Value to decode.\r\n * @param {number} base\r\n *   Numeric base.\r\n * @returns {string}\r\n *   Character.\r\n */\r\nexport function decodeNumericCharacterReference(value, base) {\r\n  const code = Number.parseInt(value, base);\r\n  if (\r\n  // C0 except for HT, LF, FF, CR, space.\r\n  code < 9 || code === 11 || code > 13 && code < 32 ||\r\n  // Control character (DEL) of C0, and C1 controls.\r\n  code > 126 && code < 160 ||\r\n  // Lone high surrogates and low surrogates.\r\n  code > 55_295 && code < 57_344 ||\r\n  // Noncharacters.\r\n  code > 64_975 && code < 65_008 || /* eslint-disable no-bitwise */\r\n  (code & 65_535) === 65_535 || (code & 65_535) === 65_534 || /* eslint-enable no-bitwise */\r\n  // Out of range\r\n  code > 1_114_111) {\r\n    return \"\\uFFFD\";\r\n  }\r\n  return String.fromCodePoint(code);\r\n}","/**\r\n * Normalize an identifier (as found in references, definitions).\r\n *\r\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\r\n *\r\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\r\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\r\n * uppercase character (U+0398 (`Θ`)).\r\n * So, to get a canonical form, we perform both lower- and uppercase.\r\n *\r\n * Using uppercase last makes sure keys will never interact with default\r\n * prototypal values (such as `constructor`): nothing in the prototype of\r\n * `Object` is uppercase.\r\n *\r\n * @param {string} value\r\n *   Identifier to normalize.\r\n * @returns {string}\r\n *   Normalized identifier.\r\n */\r\nexport function normalizeIdentifier(value) {\r\n  return value\r\n  // Collapse markdown whitespace.\r\n  .replace(/[\\t\\n\\r ]+/g, \" \")\r\n  // Trim.\r\n  .replace(/^ | $/g, '')\r\n  // Some characters are considered “uppercase”, but if their lowercase\r\n  // counterpart is uppercased will result in a different uppercase\r\n  // character.\r\n  // Hence, to get that form, we perform both lower- and uppercase.\r\n  // Upper case makes sure keys will not interact with default prototypal\r\n  // methods: no method is uppercase.\r\n  .toLowerCase().toUpperCase();\r\n}","/**\r\n * @import {Code} from 'micromark-util-types'\r\n */\r\n\r\n/**\r\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\r\n * case insensitive).\r\n *\r\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\r\n *\r\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\r\n * to U+005A (`Z`).\r\n *\r\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\r\n * to U+007A (`z`).\r\n *\r\n * @param code\r\n *   Code.\r\n * @returns {boolean}\r\n *   Whether it matches.\r\n */\r\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\r\n\r\n/**\r\n * Check whether the character code represents an ASCII alphanumeric (`a`\r\n * through `z`, case insensitive, or `0` through `9`).\r\n *\r\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\r\n * (see `asciiAlpha`).\r\n *\r\n * @param code\r\n *   Code.\r\n * @returns {boolean}\r\n *   Whether it matches.\r\n */\r\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\r\n\r\n/**\r\n * Check whether the character code represents an ASCII atext.\r\n *\r\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\r\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\r\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\r\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\r\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\r\n * (`{`) to U+007E TILDE (`~`).\r\n *\r\n * See:\r\n * **\\[RFC5322]**:\r\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\r\n * P. Resnick.\r\n * IETF.\r\n *\r\n * @param code\r\n *   Code.\r\n * @returns {boolean}\r\n *   Whether it matches.\r\n */\r\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\r\n\r\n/**\r\n * Check whether a character code is an ASCII control character.\r\n *\r\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\r\n * to U+001F (US), or U+007F (DEL).\r\n *\r\n * @param {Code} code\r\n *   Code.\r\n * @returns {boolean}\r\n *   Whether it matches.\r\n */\r\nexport function asciiControl(code) {\r\n  return (\r\n    // Special whitespace codes (which have negative values), C0 and Control\r\n    // character DEL\r\n    code !== null && (code < 32 || code === 127)\r\n  );\r\n}\r\n\r\n/**\r\n * Check whether the character code represents an ASCII digit (`0` through `9`).\r\n *\r\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\r\n * U+0039 (`9`).\r\n *\r\n * @param code\r\n *   Code.\r\n * @returns {boolean}\r\n *   Whether it matches.\r\n */\r\nexport const asciiDigit = regexCheck(/\\d/);\r\n\r\n/**\r\n * Check whether the character code represents an ASCII hex digit (`a` through\r\n * `f`, case insensitive, or `0` through `9`).\r\n *\r\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\r\n * digit, or an ASCII lower hex digit.\r\n *\r\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\r\n * (`A`) to U+0046 (`F`).\r\n *\r\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\r\n * (`a`) to U+0066 (`f`).\r\n *\r\n * @param code\r\n *   Code.\r\n * @returns {boolean}\r\n *   Whether it matches.\r\n */\r\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\r\n\r\n/**\r\n * Check whether the character code represents ASCII punctuation.\r\n *\r\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\r\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\r\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\r\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\r\n *\r\n * @param code\r\n *   Code.\r\n * @returns {boolean}\r\n *   Whether it matches.\r\n */\r\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\r\n\r\n/**\r\n * Check whether a character code is a markdown line ending.\r\n *\r\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\r\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\r\n *\r\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\r\n * RETURN (CR) are replaced by these virtual characters depending on whether\r\n * they occurred together.\r\n *\r\n * @param {Code} code\r\n *   Code.\r\n * @returns {boolean}\r\n *   Whether it matches.\r\n */\r\nexport function markdownLineEnding(code) {\r\n  return code !== null && code < -2;\r\n}\r\n\r\n/**\r\n * Check whether a character code is a markdown line ending (see\r\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\r\n *\r\n * @param {Code} code\r\n *   Code.\r\n * @returns {boolean}\r\n *   Whether it matches.\r\n */\r\nexport function markdownLineEndingOrSpace(code) {\r\n  return code !== null && (code < 0 || code === 32);\r\n}\r\n\r\n/**\r\n * Check whether a character code is a markdown space.\r\n *\r\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\r\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\r\n *\r\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\r\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\r\n * SPACE (VS) characters, depending on the column at which the tab occurred.\r\n *\r\n * @param {Code} code\r\n *   Code.\r\n * @returns {boolean}\r\n *   Whether it matches.\r\n */\r\nexport function markdownSpace(code) {\r\n  return code === -2 || code === -1 || code === 32;\r\n}\r\n\r\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\r\n// In fact adds to the bundle size.\r\n/**\r\n * Check whether the character code represents Unicode punctuation.\r\n *\r\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\r\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\r\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\r\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\r\n * punctuation (see `asciiPunctuation`).\r\n *\r\n * See:\r\n * **\\[UNICODE]**:\r\n * [The Unicode Standard](https://www.unicode.org/versions/).\r\n * Unicode Consortium.\r\n *\r\n * @param code\r\n *   Code.\r\n * @returns\r\n *   Whether it matches.\r\n */\r\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\r\n\r\n/**\r\n * Check whether the character code represents Unicode whitespace.\r\n *\r\n * Note that this does handle micromark specific markdown whitespace characters.\r\n * See `markdownLineEndingOrSpace` to check that.\r\n *\r\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\r\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\r\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\r\n *\r\n * See:\r\n * **\\[UNICODE]**:\r\n * [The Unicode Standard](https://www.unicode.org/versions/).\r\n * Unicode Consortium.\r\n *\r\n * @param code\r\n *   Code.\r\n * @returns\r\n *   Whether it matches.\r\n */\r\nexport const unicodeWhitespace = regexCheck(/\\s/);\r\n\r\n/**\r\n * Create a code check from a regex.\r\n *\r\n * @param {RegExp} regex\r\n *   Expression.\r\n * @returns {(code: Code) => boolean}\r\n *   Check.\r\n */\r\nfunction regexCheck(regex) {\r\n  return check;\r\n\r\n  /**\r\n   * Check whether a code matches the bound regex.\r\n   *\r\n   * @param {Code} code\r\n   *   Character code.\r\n   * @returns {boolean}\r\n   *   Whether the character code matches the bound regex.\r\n   */\r\n  function check(code) {\r\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\r\n  }\r\n}","import { asciiAlphanumeric } from 'micromark-util-character';\r\nimport { encode } from 'micromark-util-encode';\r\n/**\r\n * Make a value safe for injection as a URL.\r\n *\r\n * This encodes unsafe characters with percent-encoding and skips already\r\n * encoded sequences (see `normalizeUri`).\r\n * Further unsafe characters are encoded as character references (see\r\n * `micromark-util-encode`).\r\n *\r\n * A regex of allowed protocols can be given, in which case the URL is\r\n * sanitized.\r\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`, or\r\n * `/^https?$/i` for `img[src]` (this is what `github.com` allows).\r\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\r\n * as a dangerous example, `javascript:`), the value is ignored.\r\n *\r\n * @param {string | null | undefined} url\r\n *   URI to sanitize.\r\n * @param {RegExp | null | undefined} [protocol]\r\n *   Allowed protocols.\r\n * @returns {string}\r\n *   Sanitized URI.\r\n */\r\nexport function sanitizeUri(url, protocol) {\r\n  const value = encode(normalizeUri(url || ''));\r\n  if (!protocol) {\r\n    return value;\r\n  }\r\n  const colon = value.indexOf(':');\r\n  const questionMark = value.indexOf('?');\r\n  const numberSign = value.indexOf('#');\r\n  const slash = value.indexOf('/');\r\n  if (\r\n  // If there is no protocol, it’s relative.\r\n  colon < 0 ||\r\n  // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\r\n  slash > -1 && colon > slash || questionMark > -1 && colon > questionMark || numberSign > -1 && colon > numberSign ||\r\n  // It is a protocol, it should be allowed.\r\n  protocol.test(value.slice(0, colon))) {\r\n    return value;\r\n  }\r\n  return '';\r\n}\r\n\r\n/**\r\n * Normalize a URL.\r\n *\r\n * Encode unsafe characters with percent-encoding, skipping already encoded\r\n * sequences.\r\n *\r\n * @param {string} value\r\n *   URI to normalize.\r\n * @returns {string}\r\n *   Normalized URI.\r\n */\r\nexport function normalizeUri(value) {\r\n  /** @type {Array<string>} */\r\n  const result = [];\r\n  let index = -1;\r\n  let start = 0;\r\n  let skip = 0;\r\n  while (++index < value.length) {\r\n    const code = value.charCodeAt(index);\r\n    /** @type {string} */\r\n    let replace = '';\r\n\r\n    // A correct percent encoded value.\r\n    if (code === 37 && asciiAlphanumeric(value.charCodeAt(index + 1)) && asciiAlphanumeric(value.charCodeAt(index + 2))) {\r\n      skip = 2;\r\n    }\r\n    // ASCII.\r\n    else if (code < 128) {\r\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\r\n        replace = String.fromCharCode(code);\r\n      }\r\n    }\r\n    // Astral.\r\n    else if (code > 55_295 && code < 57_344) {\r\n      const next = value.charCodeAt(index + 1);\r\n\r\n      // A correct surrogate pair.\r\n      if (code < 56_320 && next > 56_319 && next < 57_344) {\r\n        replace = String.fromCharCode(code, next);\r\n        skip = 1;\r\n      }\r\n      // Lone surrogate.\r\n      else {\r\n        replace = \"\\uFFFD\";\r\n      }\r\n    }\r\n    // Unicode.\r\n    else {\r\n      replace = String.fromCharCode(code);\r\n    }\r\n    if (replace) {\r\n      result.push(value.slice(start, index), encodeURIComponent(replace));\r\n      start = index + skip + 1;\r\n      replace = '';\r\n    }\r\n    if (skip) {\r\n      index += skip;\r\n      skip = 0;\r\n    }\r\n  }\r\n  return result.join('') + value.slice(start);\r\n}","/**\r\n * @import {Effects, State, TokenType} from 'micromark-util-types'\r\n */\r\n\r\nimport { markdownSpace } from 'micromark-util-character';\r\n\r\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\r\n\r\n/**\r\n * Parse spaces and tabs.\r\n *\r\n * There is no `nok` parameter:\r\n *\r\n * *   spaces in markdown are often optional, in which case this factory can be\r\n *     used and `ok` will be switched to whether spaces were found or not\r\n * *   one line ending or space can be detected with `markdownSpace(code)` right\r\n *     before using `factorySpace`\r\n *\r\n * ###### Examples\r\n *\r\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\r\n * single space.\r\n *\r\n * ```markdown\r\n * ␉\r\n * ␠␠␠␠\r\n * ␉␠\r\n * ```\r\n *\r\n * @param {Effects} effects\r\n *   Context.\r\n * @param {State} ok\r\n *   State switched to when successful.\r\n * @param {TokenType} type\r\n *   Type (`' \\t'`).\r\n * @param {number | undefined} [max=Infinity]\r\n *   Max (exclusive).\r\n * @returns {State}\r\n *   Start state.\r\n */\r\nexport function factorySpace(effects, ok, type, max) {\r\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY;\r\n  let size = 0;\r\n  return start;\r\n\r\n  /** @type {State} */\r\n  function start(code) {\r\n    if (markdownSpace(code)) {\r\n      effects.enter(type);\r\n      return prefix(code);\r\n    }\r\n    return ok(code);\r\n  }\r\n\r\n  /** @type {State} */\r\n  function prefix(code) {\r\n    if (markdownSpace(code) && size++ < limit) {\r\n      effects.consume(code);\r\n      return prefix;\r\n    }\r\n    effects.exit(type);\r\n    return ok(code);\r\n  }\r\n}","/**\r\n * @import {\r\n *   InitialConstruct,\r\n *   Initializer,\r\n *   State,\r\n *   TokenizeContext,\r\n *   Token\r\n * } from 'micromark-util-types'\r\n */\r\n\r\nimport { factorySpace } from 'micromark-factory-space';\r\nimport { markdownLineEnding } from 'micromark-util-character';\r\n/** @type {InitialConstruct} */\r\nexport const content = {\r\n  tokenize: initializeContent\r\n};\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n *   Context.\r\n * @type {Initializer}\r\n *   Content.\r\n */\r\nfunction initializeContent(effects) {\r\n  const contentStart = effects.attempt(this.parser.constructs.contentInitial, afterContentStartConstruct, paragraphInitial);\r\n  /** @type {Token} */\r\n  let previous;\r\n  return contentStart;\r\n\r\n  /** @type {State} */\r\n  function afterContentStartConstruct(code) {\r\n    if (code === null) {\r\n      effects.consume(code);\r\n      return;\r\n    }\r\n    effects.enter(\"lineEnding\");\r\n    effects.consume(code);\r\n    effects.exit(\"lineEnding\");\r\n    return factorySpace(effects, contentStart, \"linePrefix\");\r\n  }\r\n\r\n  /** @type {State} */\r\n  function paragraphInitial(code) {\r\n    effects.enter(\"paragraph\");\r\n    return lineStart(code);\r\n  }\r\n\r\n  /** @type {State} */\r\n  function lineStart(code) {\r\n    const token = effects.enter(\"chunkText\", {\r\n      contentType: \"text\",\r\n      previous\r\n    });\r\n    if (previous) {\r\n      previous.next = token;\r\n    }\r\n    previous = token;\r\n    return data(code);\r\n  }\r\n\r\n  /** @type {State} */\r\n  function data(code) {\r\n    if (code === null) {\r\n      effects.exit(\"chunkText\");\r\n      effects.exit(\"paragraph\");\r\n      effects.consume(code);\r\n      return;\r\n    }\r\n    if (markdownLineEnding(code)) {\r\n      effects.consume(code);\r\n      effects.exit(\"chunkText\");\r\n      return lineStart;\r\n    }\r\n\r\n    // Data.\r\n    effects.consume(code);\r\n    return data;\r\n  }\r\n}","/**\r\n * @import {\r\n *   Construct,\r\n *   ContainerState,\r\n *   InitialConstruct,\r\n *   Initializer,\r\n *   Point,\r\n *   State,\r\n *   TokenizeContext,\r\n *   Tokenizer,\r\n *   Token\r\n * } from 'micromark-util-types'\r\n */\r\n\r\n/**\r\n * @typedef {[Construct, ContainerState]} StackItem\r\n *   Construct and its state.\r\n */\r\n\r\nimport { factorySpace } from 'micromark-factory-space';\r\nimport { markdownLineEnding } from 'micromark-util-character';\r\nimport { splice } from 'micromark-util-chunked';\r\n/** @type {InitialConstruct} */\r\nexport const document = {\r\n  tokenize: initializeDocument\r\n};\r\n\r\n/** @type {Construct} */\r\nconst containerConstruct = {\r\n  tokenize: tokenizeContainer\r\n};\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n *   Self.\r\n * @type {Initializer}\r\n *   Initializer.\r\n */\r\nfunction initializeDocument(effects) {\r\n  const self = this;\r\n  /** @type {Array<StackItem>} */\r\n  const stack = [];\r\n  let continued = 0;\r\n  /** @type {TokenizeContext | undefined} */\r\n  let childFlow;\r\n  /** @type {Token | undefined} */\r\n  let childToken;\r\n  /** @type {number} */\r\n  let lineStartOffset;\r\n  return start;\r\n\r\n  /** @type {State} */\r\n  function start(code) {\r\n    // First we iterate through the open blocks, starting with the root\r\n    // document, and descending through last children down to the last open\r\n    // block.\r\n    // Each block imposes a condition that the line must satisfy if the block is\r\n    // to remain open.\r\n    // For example, a block quote requires a `>` character.\r\n    // A paragraph requires a non-blank line.\r\n    // In this phase we may match all or just some of the open blocks.\r\n    // But we cannot close unmatched blocks yet, because we may have a lazy\r\n    // continuation line.\r\n    if (continued < stack.length) {\r\n      const item = stack[continued];\r\n      self.containerState = item[1];\r\n      return effects.attempt(item[0].continuation, documentContinue, checkNewContainers)(code);\r\n    }\r\n\r\n    // Done.\r\n    return checkNewContainers(code);\r\n  }\r\n\r\n  /** @type {State} */\r\n  function documentContinue(code) {\r\n    continued++;\r\n\r\n    // Note: this field is called `_closeFlow` but it also closes containers.\r\n    // Perhaps a good idea to rename it but it’s already used in the wild by\r\n    // extensions.\r\n    if (self.containerState._closeFlow) {\r\n      self.containerState._closeFlow = undefined;\r\n      if (childFlow) {\r\n        closeFlow();\r\n      }\r\n\r\n      // Note: this algorithm for moving events around is similar to the\r\n      // algorithm when dealing with lazy lines in `writeToChild`.\r\n      const indexBeforeExits = self.events.length;\r\n      let indexBeforeFlow = indexBeforeExits;\r\n      /** @type {Point | undefined} */\r\n      let point;\r\n\r\n      // Find the flow chunk.\r\n      while (indexBeforeFlow--) {\r\n        if (self.events[indexBeforeFlow][0] === 'exit' && self.events[indexBeforeFlow][1].type === \"chunkFlow\") {\r\n          point = self.events[indexBeforeFlow][1].end;\r\n          break;\r\n        }\r\n      }\r\n      exitContainers(continued);\r\n\r\n      // Fix positions.\r\n      let index = indexBeforeExits;\r\n      while (index < self.events.length) {\r\n        self.events[index][1].end = {\r\n          ...point\r\n        };\r\n        index++;\r\n      }\r\n\r\n      // Inject the exits earlier (they’re still also at the end).\r\n      splice(self.events, indexBeforeFlow + 1, 0, self.events.slice(indexBeforeExits));\r\n\r\n      // Discard the duplicate exits.\r\n      self.events.length = index;\r\n      return checkNewContainers(code);\r\n    }\r\n    return start(code);\r\n  }\r\n\r\n  /** @type {State} */\r\n  function checkNewContainers(code) {\r\n    // Next, after consuming the continuation markers for existing blocks, we\r\n    // look for new block starts (e.g. `>` for a block quote).\r\n    // If we encounter a new block start, we close any blocks unmatched in\r\n    // step 1 before creating the new block as a child of the last matched\r\n    // block.\r\n    if (continued === stack.length) {\r\n      // No need to `check` whether there’s a container, of `exitContainers`\r\n      // would be moot.\r\n      // We can instead immediately `attempt` to parse one.\r\n      if (!childFlow) {\r\n        return documentContinued(code);\r\n      }\r\n\r\n      // If we have concrete content, such as block HTML or fenced code,\r\n      // we can’t have containers “pierce” into them, so we can immediately\r\n      // start.\r\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\r\n        return flowStart(code);\r\n      }\r\n\r\n      // If we do have flow, it could still be a blank line,\r\n      // but we’d be interrupting it w/ a new container if there’s a current\r\n      // construct.\r\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\r\n      // needed in micromark-extension-gfm-table@1.0.6).\r\n      self.interrupt = Boolean(childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack);\r\n    }\r\n\r\n    // Check if there is a new container.\r\n    self.containerState = {};\r\n    return effects.check(containerConstruct, thereIsANewContainer, thereIsNoNewContainer)(code);\r\n  }\r\n\r\n  /** @type {State} */\r\n  function thereIsANewContainer(code) {\r\n    if (childFlow) closeFlow();\r\n    exitContainers(continued);\r\n    return documentContinued(code);\r\n  }\r\n\r\n  /** @type {State} */\r\n  function thereIsNoNewContainer(code) {\r\n    self.parser.lazy[self.now().line] = continued !== stack.length;\r\n    lineStartOffset = self.now().offset;\r\n    return flowStart(code);\r\n  }\r\n\r\n  /** @type {State} */\r\n  function documentContinued(code) {\r\n    // Try new containers.\r\n    self.containerState = {};\r\n    return effects.attempt(containerConstruct, containerContinue, flowStart)(code);\r\n  }\r\n\r\n  /** @type {State} */\r\n  function containerContinue(code) {\r\n    continued++;\r\n    stack.push([self.currentConstruct, self.containerState]);\r\n    // Try another.\r\n    return documentContinued(code);\r\n  }\r\n\r\n  /** @type {State} */\r\n  function flowStart(code) {\r\n    if (code === null) {\r\n      if (childFlow) closeFlow();\r\n      exitContainers(0);\r\n      effects.consume(code);\r\n      return;\r\n    }\r\n    childFlow = childFlow || self.parser.flow(self.now());\r\n    effects.enter(\"chunkFlow\", {\r\n      _tokenizer: childFlow,\r\n      contentType: \"flow\",\r\n      previous: childToken\r\n    });\r\n    return flowContinue(code);\r\n  }\r\n\r\n  /** @type {State} */\r\n  function flowContinue(code) {\r\n    if (code === null) {\r\n      writeToChild(effects.exit(\"chunkFlow\"), true);\r\n      exitContainers(0);\r\n      effects.consume(code);\r\n      return;\r\n    }\r\n    if (markdownLineEnding(code)) {\r\n      effects.consume(code);\r\n      writeToChild(effects.exit(\"chunkFlow\"));\r\n      // Get ready for the next line.\r\n      continued = 0;\r\n      self.interrupt = undefined;\r\n      return start;\r\n    }\r\n    effects.consume(code);\r\n    return flowContinue;\r\n  }\r\n\r\n  /**\r\n   * @param {Token} token\r\n   *   Token.\r\n   * @param {boolean | undefined} [endOfFile]\r\n   *   Whether the token is at the end of the file (default: `false`).\r\n   * @returns {undefined}\r\n   *   Nothing.\r\n   */\r\n  function writeToChild(token, endOfFile) {\r\n    const stream = self.sliceStream(token);\r\n    if (endOfFile) stream.push(null);\r\n    token.previous = childToken;\r\n    if (childToken) childToken.next = token;\r\n    childToken = token;\r\n    childFlow.defineSkip(token.start);\r\n    childFlow.write(stream);\r\n\r\n    // Alright, so we just added a lazy line:\r\n    //\r\n    // ```markdown\r\n    // > a\r\n    // b.\r\n    //\r\n    // Or:\r\n    //\r\n    // > ~~~c\r\n    // d\r\n    //\r\n    // Or:\r\n    //\r\n    // > | e |\r\n    // f\r\n    // ```\r\n    //\r\n    // The construct in the second example (fenced code) does not accept lazy\r\n    // lines, so it marked itself as done at the end of its first line, and\r\n    // then the content construct parses `d`.\r\n    // Most constructs in markdown match on the first line: if the first line\r\n    // forms a construct, a non-lazy line can’t “unmake” it.\r\n    //\r\n    // The construct in the third example is potentially a GFM table, and\r\n    // those are *weird*.\r\n    // It *could* be a table, from the first line, if the following line\r\n    // matches a condition.\r\n    // In this case, that second line is lazy, which “unmakes” the first line\r\n    // and turns the whole into one content block.\r\n    //\r\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\r\n    // whether the lazy line started a new flow block.\r\n    // If it did, we exit the current containers between the two flow blocks.\r\n    if (self.parser.lazy[token.start.line]) {\r\n      let index = childFlow.events.length;\r\n      while (index--) {\r\n        if (\r\n        // The token starts before the line ending…\r\n        childFlow.events[index][1].start.offset < lineStartOffset && (\r\n        // …and either is not ended yet…\r\n        !childFlow.events[index][1].end ||\r\n        // …or ends after it.\r\n        childFlow.events[index][1].end.offset > lineStartOffset)) {\r\n          // Exit: there’s still something open, which means it’s a lazy line\r\n          // part of something.\r\n          return;\r\n        }\r\n      }\r\n\r\n      // Note: this algorithm for moving events around is similar to the\r\n      // algorithm when closing flow in `documentContinue`.\r\n      const indexBeforeExits = self.events.length;\r\n      let indexBeforeFlow = indexBeforeExits;\r\n      /** @type {boolean | undefined} */\r\n      let seen;\r\n      /** @type {Point | undefined} */\r\n      let point;\r\n\r\n      // Find the previous chunk (the one before the lazy line).\r\n      while (indexBeforeFlow--) {\r\n        if (self.events[indexBeforeFlow][0] === 'exit' && self.events[indexBeforeFlow][1].type === \"chunkFlow\") {\r\n          if (seen) {\r\n            point = self.events[indexBeforeFlow][1].end;\r\n            break;\r\n          }\r\n          seen = true;\r\n        }\r\n      }\r\n      exitContainers(continued);\r\n\r\n      // Fix positions.\r\n      index = indexBeforeExits;\r\n      while (index < self.events.length) {\r\n        self.events[index][1].end = {\r\n          ...point\r\n        };\r\n        index++;\r\n      }\r\n\r\n      // Inject the exits earlier (they’re still also at the end).\r\n      splice(self.events, indexBeforeFlow + 1, 0, self.events.slice(indexBeforeExits));\r\n\r\n      // Discard the duplicate exits.\r\n      self.events.length = index;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} size\r\n   *   Size.\r\n   * @returns {undefined}\r\n   *   Nothing.\r\n   */\r\n  function exitContainers(size) {\r\n    let index = stack.length;\r\n\r\n    // Exit open containers.\r\n    while (index-- > size) {\r\n      const entry = stack[index];\r\n      self.containerState = entry[1];\r\n      entry[0].exit.call(self, effects);\r\n    }\r\n    stack.length = size;\r\n  }\r\n  function closeFlow() {\r\n    childFlow.write([null]);\r\n    childToken = undefined;\r\n    childFlow = undefined;\r\n    self.containerState._closeFlow = undefined;\r\n  }\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n *   Context.\r\n * @type {Tokenizer}\r\n *   Tokenizer.\r\n */\r\nfunction tokenizeContainer(effects, ok, nok) {\r\n  // Always populated by defaults.\r\n\r\n  return factorySpace(effects, effects.attempt(this.parser.constructs.document, ok, nok), \"linePrefix\", this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4);\r\n}","/**\r\n * @import {Code} from 'micromark-util-types'\r\n */\r\n\r\nimport { markdownLineEndingOrSpace, unicodePunctuation, unicodeWhitespace } from 'micromark-util-character';\r\n/**\r\n * Classify whether a code represents whitespace, punctuation, or something\r\n * else.\r\n *\r\n * Used for attention (emphasis, strong), whose sequences can open or close\r\n * based on the class of surrounding characters.\r\n *\r\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\r\n *\r\n * @param {Code} code\r\n *   Code.\r\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\r\n *   Group.\r\n */\r\nexport function classifyCharacter(code) {\r\n  if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\r\n    return 1;\r\n  }\r\n  if (unicodePunctuation(code)) {\r\n    return 2;\r\n  }\r\n}","/**\r\n * @import {Event, Resolver, TokenizeContext} from 'micromark-util-types'\r\n */\r\n\r\n/**\r\n * Call all `resolveAll`s.\r\n *\r\n * @param {ReadonlyArray<{resolveAll?: Resolver | undefined}>} constructs\r\n *   List of constructs, optionally with `resolveAll`s.\r\n * @param {Array<Event>} events\r\n *   List of events.\r\n * @param {TokenizeContext} context\r\n *   Context used by `tokenize`.\r\n * @returns {Array<Event>}\r\n *   Changed events.\r\n */\r\nexport function resolveAll(constructs, events, context) {\r\n  /** @type {Array<Resolver>} */\r\n  const called = []\r\n  let index = -1\r\n\r\n  while (++index < constructs.length) {\r\n    const resolve = constructs[index].resolveAll\r\n\r\n    if (resolve && !called.includes(resolve)) {\r\n      events = resolve(events, context)\r\n      called.push(resolve)\r\n    }\r\n  }\r\n\r\n  return events\r\n}\r\n","/**\r\n * @import {\r\n *   Code,\r\n *   Construct,\r\n *   Event,\r\n *   Point,\r\n *   Resolver,\r\n *   State,\r\n *   TokenizeContext,\r\n *   Tokenizer,\r\n *   Token\r\n * } from 'micromark-util-types'\r\n */\r\n\r\nimport { push, splice } from 'micromark-util-chunked';\r\nimport { classifyCharacter } from 'micromark-util-classify-character';\r\nimport { resolveAll } from 'micromark-util-resolve-all';\r\n/** @type {Construct} */\r\nexport const attention = {\r\n  name: 'attention',\r\n  resolveAll: resolveAllAttention,\r\n  tokenize: tokenizeAttention\r\n};\r\n\r\n/**\r\n * Take all events and resolve attention to emphasis or strong.\r\n *\r\n * @type {Resolver}\r\n */\r\n// eslint-disable-next-line complexity\r\nfunction resolveAllAttention(events, context) {\r\n  let index = -1;\r\n  /** @type {number} */\r\n  let open;\r\n  /** @type {Token} */\r\n  let group;\r\n  /** @type {Token} */\r\n  let text;\r\n  /** @type {Token} */\r\n  let openingSequence;\r\n  /** @type {Token} */\r\n  let closingSequence;\r\n  /** @type {number} */\r\n  let use;\r\n  /** @type {Array<Event>} */\r\n  let nextEvents;\r\n  /** @type {number} */\r\n  let offset;\r\n\r\n  // Walk through all events.\r\n  //\r\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\r\n  // a bottleneck for malicious stuff.\r\n  while (++index < events.length) {\r\n    // Find a token that can close.\r\n    if (events[index][0] === 'enter' && events[index][1].type === 'attentionSequence' && events[index][1]._close) {\r\n      open = index;\r\n\r\n      // Now walk back to find an opener.\r\n      while (open--) {\r\n        // Find a token that can open the closer.\r\n        if (events[open][0] === 'exit' && events[open][1].type === 'attentionSequence' && events[open][1]._open &&\r\n        // If the markers are the same:\r\n        context.sliceSerialize(events[open][1]).charCodeAt(0) === context.sliceSerialize(events[index][1]).charCodeAt(0)) {\r\n          // If the opening can close or the closing can open,\r\n          // and the close size *is not* a multiple of three,\r\n          // but the sum of the opening and closing size *is* multiple of three,\r\n          // then don’t match.\r\n          if ((events[open][1]._close || events[index][1]._open) && (events[index][1].end.offset - events[index][1].start.offset) % 3 && !((events[open][1].end.offset - events[open][1].start.offset + events[index][1].end.offset - events[index][1].start.offset) % 3)) {\r\n            continue;\r\n          }\r\n\r\n          // Number of markers to use from the sequence.\r\n          use = events[open][1].end.offset - events[open][1].start.offset > 1 && events[index][1].end.offset - events[index][1].start.offset > 1 ? 2 : 1;\r\n          const start = {\r\n            ...events[open][1].end\r\n          };\r\n          const end = {\r\n            ...events[index][1].start\r\n          };\r\n          movePoint(start, -use);\r\n          movePoint(end, use);\r\n          openingSequence = {\r\n            type: use > 1 ? \"strongSequence\" : \"emphasisSequence\",\r\n            start,\r\n            end: {\r\n              ...events[open][1].end\r\n            }\r\n          };\r\n          closingSequence = {\r\n            type: use > 1 ? \"strongSequence\" : \"emphasisSequence\",\r\n            start: {\r\n              ...events[index][1].start\r\n            },\r\n            end\r\n          };\r\n          text = {\r\n            type: use > 1 ? \"strongText\" : \"emphasisText\",\r\n            start: {\r\n              ...events[open][1].end\r\n            },\r\n            end: {\r\n              ...events[index][1].start\r\n            }\r\n          };\r\n          group = {\r\n            type: use > 1 ? \"strong\" : \"emphasis\",\r\n            start: {\r\n              ...openingSequence.start\r\n            },\r\n            end: {\r\n              ...closingSequence.end\r\n            }\r\n          };\r\n          events[open][1].end = {\r\n            ...openingSequence.start\r\n          };\r\n          events[index][1].start = {\r\n            ...closingSequence.end\r\n          };\r\n          nextEvents = [];\r\n\r\n          // If there are more markers in the opening, add them before.\r\n          if (events[open][1].end.offset - events[open][1].start.offset) {\r\n            nextEvents = push(nextEvents, [['enter', events[open][1], context], ['exit', events[open][1], context]]);\r\n          }\r\n\r\n          // Opening.\r\n          nextEvents = push(nextEvents, [['enter', group, context], ['enter', openingSequence, context], ['exit', openingSequence, context], ['enter', text, context]]);\r\n\r\n          // Always populated by defaults.\r\n\r\n          // Between.\r\n          nextEvents = push(nextEvents, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + 1, index), context));\r\n\r\n          // Closing.\r\n          nextEvents = push(nextEvents, [['exit', text, context], ['enter', closingSequence, context], ['exit', closingSequence, context], ['exit', group, context]]);\r\n\r\n          // If there are more markers in the closing, add them after.\r\n          if (events[index][1].end.offset - events[index][1].start.offset) {\r\n            offset = 2;\r\n            nextEvents = push(nextEvents, [['enter', events[index][1], context], ['exit', events[index][1], context]]);\r\n          } else {\r\n            offset = 0;\r\n          }\r\n          splice(events, open - 1, index - open + 3, nextEvents);\r\n          index = open + nextEvents.length - offset - 2;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Remove remaining sequences.\r\n  index = -1;\r\n  while (++index < events.length) {\r\n    if (events[index][1].type === 'attentionSequence') {\r\n      events[index][1].type = 'data';\r\n    }\r\n  }\r\n  return events;\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n *   Context.\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeAttention(effects, ok) {\r\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null;\r\n  const previous = this.previous;\r\n  const before = classifyCharacter(previous);\r\n\r\n  /** @type {NonNullable<Code>} */\r\n  let marker;\r\n  return start;\r\n\r\n  /**\r\n   * Before a sequence.\r\n   *\r\n   * ```markdown\r\n   * > | **\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    marker = code;\r\n    effects.enter('attentionSequence');\r\n    return inside(code);\r\n  }\r\n\r\n  /**\r\n   * In a sequence.\r\n   *\r\n   * ```markdown\r\n   * > | **\r\n   *     ^^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function inside(code) {\r\n    if (code === marker) {\r\n      effects.consume(code);\r\n      return inside;\r\n    }\r\n    const token = effects.exit('attentionSequence');\r\n\r\n    // To do: next major: move this to resolver, just like `markdown-rs`.\r\n    const after = classifyCharacter(code);\r\n\r\n    // Always populated by defaults.\r\n\r\n    const open = !after || after === 2 && before || attentionMarkers.includes(code);\r\n    const close = !before || before === 2 && after || attentionMarkers.includes(previous);\r\n    token._open = Boolean(marker === 42 ? open : open && (before || !close));\r\n    token._close = Boolean(marker === 42 ? close : close && (after || !open));\r\n    return ok(code);\r\n  }\r\n}\r\n\r\n/**\r\n * Move a point a bit.\r\n *\r\n * Note: `move` only works inside lines! It’s not possible to move past other\r\n * chunks (replacement characters, tabs, or line endings).\r\n *\r\n * @param {Point} point\r\n *   Point.\r\n * @param {number} offset\r\n *   Amount to move.\r\n * @returns {undefined}\r\n *   Nothing.\r\n */\r\nfunction movePoint(point, offset) {\r\n  point.column += offset;\r\n  point.offset += offset;\r\n  point._bufferIndex += offset;\r\n}","/**\r\n * @import {\r\n *   Construct,\r\n *   State,\r\n *   TokenizeContext,\r\n *   Tokenizer\r\n * } from 'micromark-util-types'\r\n */\r\n\r\nimport { asciiAlphanumeric, asciiAlpha, asciiAtext, asciiControl } from 'micromark-util-character';\r\n/** @type {Construct} */\r\nexport const autolink = {\r\n  name: 'autolink',\r\n  tokenize: tokenizeAutolink\r\n};\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n *   Context.\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeAutolink(effects, ok, nok) {\r\n  let size = 0;\r\n  return start;\r\n\r\n  /**\r\n   * Start of an autolink.\r\n   *\r\n   * ```markdown\r\n   * > | a<https://example.com>b\r\n   *      ^\r\n   * > | a<user@example.com>b\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    effects.enter(\"autolink\");\r\n    effects.enter(\"autolinkMarker\");\r\n    effects.consume(code);\r\n    effects.exit(\"autolinkMarker\");\r\n    effects.enter(\"autolinkProtocol\");\r\n    return open;\r\n  }\r\n\r\n  /**\r\n   * After `<`, at protocol or atext.\r\n   *\r\n   * ```markdown\r\n   * > | a<https://example.com>b\r\n   *       ^\r\n   * > | a<user@example.com>b\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function open(code) {\r\n    if (asciiAlpha(code)) {\r\n      effects.consume(code);\r\n      return schemeOrEmailAtext;\r\n    }\r\n    if (code === 64) {\r\n      return nok(code);\r\n    }\r\n    return emailAtext(code);\r\n  }\r\n\r\n  /**\r\n   * At second byte of protocol or atext.\r\n   *\r\n   * ```markdown\r\n   * > | a<https://example.com>b\r\n   *        ^\r\n   * > | a<user@example.com>b\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function schemeOrEmailAtext(code) {\r\n    // ASCII alphanumeric and `+`, `-`, and `.`.\r\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\r\n      // Count the previous alphabetical from `open` too.\r\n      size = 1;\r\n      return schemeInsideOrEmailAtext(code);\r\n    }\r\n    return emailAtext(code);\r\n  }\r\n\r\n  /**\r\n   * In ambiguous protocol or atext.\r\n   *\r\n   * ```markdown\r\n   * > | a<https://example.com>b\r\n   *        ^\r\n   * > | a<user@example.com>b\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function schemeInsideOrEmailAtext(code) {\r\n    if (code === 58) {\r\n      effects.consume(code);\r\n      size = 0;\r\n      return urlInside;\r\n    }\r\n\r\n    // ASCII alphanumeric and `+`, `-`, and `.`.\r\n    if ((code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) && size++ < 32) {\r\n      effects.consume(code);\r\n      return schemeInsideOrEmailAtext;\r\n    }\r\n    size = 0;\r\n    return emailAtext(code);\r\n  }\r\n\r\n  /**\r\n   * After protocol, in URL.\r\n   *\r\n   * ```markdown\r\n   * > | a<https://example.com>b\r\n   *             ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function urlInside(code) {\r\n    if (code === 62) {\r\n      effects.exit(\"autolinkProtocol\");\r\n      effects.enter(\"autolinkMarker\");\r\n      effects.consume(code);\r\n      effects.exit(\"autolinkMarker\");\r\n      effects.exit(\"autolink\");\r\n      return ok;\r\n    }\r\n\r\n    // ASCII control, space, or `<`.\r\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\r\n      return nok(code);\r\n    }\r\n    effects.consume(code);\r\n    return urlInside;\r\n  }\r\n\r\n  /**\r\n   * In email atext.\r\n   *\r\n   * ```markdown\r\n   * > | a<user.name@example.com>b\r\n   *              ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function emailAtext(code) {\r\n    if (code === 64) {\r\n      effects.consume(code);\r\n      return emailAtSignOrDot;\r\n    }\r\n    if (asciiAtext(code)) {\r\n      effects.consume(code);\r\n      return emailAtext;\r\n    }\r\n    return nok(code);\r\n  }\r\n\r\n  /**\r\n   * In label, after at-sign or dot.\r\n   *\r\n   * ```markdown\r\n   * > | a<user.name@example.com>b\r\n   *                 ^       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function emailAtSignOrDot(code) {\r\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code);\r\n  }\r\n\r\n  /**\r\n   * In label, where `.` and `>` are allowed.\r\n   *\r\n   * ```markdown\r\n   * > | a<user.name@example.com>b\r\n   *                   ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function emailLabel(code) {\r\n    if (code === 46) {\r\n      effects.consume(code);\r\n      size = 0;\r\n      return emailAtSignOrDot;\r\n    }\r\n    if (code === 62) {\r\n      // Exit, then change the token type.\r\n      effects.exit(\"autolinkProtocol\").type = \"autolinkEmail\";\r\n      effects.enter(\"autolinkMarker\");\r\n      effects.consume(code);\r\n      effects.exit(\"autolinkMarker\");\r\n      effects.exit(\"autolink\");\r\n      return ok;\r\n    }\r\n    return emailValue(code);\r\n  }\r\n\r\n  /**\r\n   * In label, where `.` and `>` are *not* allowed.\r\n   *\r\n   * Though, this is also used in `emailLabel` to parse other values.\r\n   *\r\n   * ```markdown\r\n   * > | a<user.name@ex-ample.com>b\r\n   *                    ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function emailValue(code) {\r\n    // ASCII alphanumeric or `-`.\r\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\r\n      const next = code === 45 ? emailValue : emailLabel;\r\n      effects.consume(code);\r\n      return next;\r\n    }\r\n    return nok(code);\r\n  }\r\n}","/**\r\n * @import {\r\n *   Construct,\r\n *   State,\r\n *   TokenizeContext,\r\n *   Tokenizer\r\n * } from 'micromark-util-types'\r\n */\r\n\r\nimport { factorySpace } from 'micromark-factory-space';\r\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\r\n/** @type {Construct} */\r\nexport const blankLine = {\r\n  partial: true,\r\n  tokenize: tokenizeBlankLine\r\n};\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n *   Context.\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeBlankLine(effects, ok, nok) {\r\n  return start;\r\n\r\n  /**\r\n   * Start of blank line.\r\n   *\r\n   * > 👉 **Note**: `␠` represents a space character.\r\n   *\r\n   * ```markdown\r\n   * > | ␠␠␊\r\n   *     ^\r\n   * > | ␊\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    return markdownSpace(code) ? factorySpace(effects, after, \"linePrefix\")(code) : after(code);\r\n  }\r\n\r\n  /**\r\n   * At eof/eol, after optional whitespace.\r\n   *\r\n   * > 👉 **Note**: `␠` represents a space character.\r\n   *\r\n   * ```markdown\r\n   * > | ␠␠␊\r\n   *       ^\r\n   * > | ␊\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function after(code) {\r\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\r\n  }\r\n}","/**\r\n * @import {\r\n *   Construct,\r\n *   Exiter,\r\n *   State,\r\n *   TokenizeContext,\r\n *   Tokenizer\r\n * } from 'micromark-util-types'\r\n */\r\n\r\nimport { factorySpace } from 'micromark-factory-space';\r\nimport { markdownSpace } from 'micromark-util-character';\r\n/** @type {Construct} */\r\nexport const blockQuote = {\r\n  continuation: {\r\n    tokenize: tokenizeBlockQuoteContinuation\r\n  },\r\n  exit,\r\n  name: 'blockQuote',\r\n  tokenize: tokenizeBlockQuoteStart\r\n};\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n *   Context.\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\r\n  const self = this;\r\n  return start;\r\n\r\n  /**\r\n   * Start of block quote.\r\n   *\r\n   * ```markdown\r\n   * > | > a\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    if (code === 62) {\r\n      const state = self.containerState;\r\n      if (!state.open) {\r\n        effects.enter(\"blockQuote\", {\r\n          _container: true\r\n        });\r\n        state.open = true;\r\n      }\r\n      effects.enter(\"blockQuotePrefix\");\r\n      effects.enter(\"blockQuoteMarker\");\r\n      effects.consume(code);\r\n      effects.exit(\"blockQuoteMarker\");\r\n      return after;\r\n    }\r\n    return nok(code);\r\n  }\r\n\r\n  /**\r\n   * After `>`, before optional whitespace.\r\n   *\r\n   * ```markdown\r\n   * > | > a\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function after(code) {\r\n    if (markdownSpace(code)) {\r\n      effects.enter(\"blockQuotePrefixWhitespace\");\r\n      effects.consume(code);\r\n      effects.exit(\"blockQuotePrefixWhitespace\");\r\n      effects.exit(\"blockQuotePrefix\");\r\n      return ok;\r\n    }\r\n    effects.exit(\"blockQuotePrefix\");\r\n    return ok(code);\r\n  }\r\n}\r\n\r\n/**\r\n * Start of block quote continuation.\r\n *\r\n * ```markdown\r\n *   | > a\r\n * > | > b\r\n *     ^\r\n * ```\r\n *\r\n * @this {TokenizeContext}\r\n *   Context.\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\r\n  const self = this;\r\n  return contStart;\r\n\r\n  /**\r\n   * Start of block quote continuation.\r\n   *\r\n   * Also used to parse the first block quote opening.\r\n   *\r\n   * ```markdown\r\n   *   | > a\r\n   * > | > b\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function contStart(code) {\r\n    if (markdownSpace(code)) {\r\n      // Always populated by defaults.\r\n\r\n      return factorySpace(effects, contBefore, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\r\n    }\r\n    return contBefore(code);\r\n  }\r\n\r\n  /**\r\n   * At `>`, after optional whitespace.\r\n   *\r\n   * Also used to parse the first block quote opening.\r\n   *\r\n   * ```markdown\r\n   *   | > a\r\n   * > | > b\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function contBefore(code) {\r\n    return effects.attempt(blockQuote, ok, nok)(code);\r\n  }\r\n}\r\n\r\n/** @type {Exiter} */\r\nfunction exit(effects) {\r\n  effects.exit(\"blockQuote\");\r\n}","/**\r\n * @import {\r\n *   Construct,\r\n *   State,\r\n *   TokenizeContext,\r\n *   Tokenizer\r\n * } from 'micromark-util-types'\r\n */\r\n\r\nimport { asciiPunctuation } from 'micromark-util-character';\r\n/** @type {Construct} */\r\nexport const characterEscape = {\r\n  name: 'characterEscape',\r\n  tokenize: tokenizeCharacterEscape\r\n};\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n *   Context.\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeCharacterEscape(effects, ok, nok) {\r\n  return start;\r\n\r\n  /**\r\n   * Start of character escape.\r\n   *\r\n   * ```markdown\r\n   * > | a\\*b\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    effects.enter(\"characterEscape\");\r\n    effects.enter(\"escapeMarker\");\r\n    effects.consume(code);\r\n    effects.exit(\"escapeMarker\");\r\n    return inside;\r\n  }\r\n\r\n  /**\r\n   * After `\\`, at punctuation.\r\n   *\r\n   * ```markdown\r\n   * > | a\\*b\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function inside(code) {\r\n    // ASCII punctuation.\r\n    if (asciiPunctuation(code)) {\r\n      effects.enter(\"characterEscapeValue\");\r\n      effects.consume(code);\r\n      effects.exit(\"characterEscapeValue\");\r\n      effects.exit(\"characterEscape\");\r\n      return ok;\r\n    }\r\n    return nok(code);\r\n  }\r\n}","/**\r\n * @import {\r\n *   Code,\r\n *   Construct,\r\n *   State,\r\n *   TokenizeContext,\r\n *   Tokenizer\r\n * } from 'micromark-util-types'\r\n */\r\n\r\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\r\nimport { asciiAlphanumeric, asciiDigit, asciiHexDigit } from 'micromark-util-character';\r\n/** @type {Construct} */\r\nexport const characterReference = {\r\n  name: 'characterReference',\r\n  tokenize: tokenizeCharacterReference\r\n};\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n *   Context.\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeCharacterReference(effects, ok, nok) {\r\n  const self = this;\r\n  let size = 0;\r\n  /** @type {number} */\r\n  let max;\r\n  /** @type {(code: Code) => boolean} */\r\n  let test;\r\n  return start;\r\n\r\n  /**\r\n   * Start of character reference.\r\n   *\r\n   * ```markdown\r\n   * > | a&amp;b\r\n   *      ^\r\n   * > | a&#123;b\r\n   *      ^\r\n   * > | a&#x9;b\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    effects.enter(\"characterReference\");\r\n    effects.enter(\"characterReferenceMarker\");\r\n    effects.consume(code);\r\n    effects.exit(\"characterReferenceMarker\");\r\n    return open;\r\n  }\r\n\r\n  /**\r\n   * After `&`, at `#` for numeric references or alphanumeric for named\r\n   * references.\r\n   *\r\n   * ```markdown\r\n   * > | a&amp;b\r\n   *       ^\r\n   * > | a&#123;b\r\n   *       ^\r\n   * > | a&#x9;b\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function open(code) {\r\n    if (code === 35) {\r\n      effects.enter(\"characterReferenceMarkerNumeric\");\r\n      effects.consume(code);\r\n      effects.exit(\"characterReferenceMarkerNumeric\");\r\n      return numeric;\r\n    }\r\n    effects.enter(\"characterReferenceValue\");\r\n    max = 31;\r\n    test = asciiAlphanumeric;\r\n    return value(code);\r\n  }\r\n\r\n  /**\r\n   * After `#`, at `x` for hexadecimals or digit for decimals.\r\n   *\r\n   * ```markdown\r\n   * > | a&#123;b\r\n   *        ^\r\n   * > | a&#x9;b\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function numeric(code) {\r\n    if (code === 88 || code === 120) {\r\n      effects.enter(\"characterReferenceMarkerHexadecimal\");\r\n      effects.consume(code);\r\n      effects.exit(\"characterReferenceMarkerHexadecimal\");\r\n      effects.enter(\"characterReferenceValue\");\r\n      max = 6;\r\n      test = asciiHexDigit;\r\n      return value;\r\n    }\r\n    effects.enter(\"characterReferenceValue\");\r\n    max = 7;\r\n    test = asciiDigit;\r\n    return value(code);\r\n  }\r\n\r\n  /**\r\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\r\n   *\r\n   * The character reference kind defines what and how many characters are\r\n   * allowed.\r\n   *\r\n   * ```markdown\r\n   * > | a&amp;b\r\n   *       ^^^\r\n   * > | a&#123;b\r\n   *        ^^^\r\n   * > | a&#x9;b\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function value(code) {\r\n    if (code === 59 && size) {\r\n      const token = effects.exit(\"characterReferenceValue\");\r\n      if (test === asciiAlphanumeric && !decodeNamedCharacterReference(self.sliceSerialize(token))) {\r\n        return nok(code);\r\n      }\r\n\r\n      // To do: `markdown-rs` uses a different name:\r\n      // `CharacterReferenceMarkerSemi`.\r\n      effects.enter(\"characterReferenceMarker\");\r\n      effects.consume(code);\r\n      effects.exit(\"characterReferenceMarker\");\r\n      effects.exit(\"characterReference\");\r\n      return ok;\r\n    }\r\n    if (test(code) && size++ < max) {\r\n      effects.consume(code);\r\n      return value;\r\n    }\r\n    return nok(code);\r\n  }\r\n}","/**\r\n * @import {\r\n *   Code,\r\n *   Construct,\r\n *   State,\r\n *   TokenizeContext,\r\n *   Tokenizer\r\n * } from 'micromark-util-types'\r\n */\r\n\r\nimport { factorySpace } from 'micromark-factory-space';\r\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\r\n/** @type {Construct} */\r\nconst nonLazyContinuation = {\r\n  partial: true,\r\n  tokenize: tokenizeNonLazyContinuation\r\n};\r\n\r\n/** @type {Construct} */\r\nexport const codeFenced = {\r\n  concrete: true,\r\n  name: 'codeFenced',\r\n  tokenize: tokenizeCodeFenced\r\n};\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n *   Context.\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeCodeFenced(effects, ok, nok) {\r\n  const self = this;\r\n  /** @type {Construct} */\r\n  const closeStart = {\r\n    partial: true,\r\n    tokenize: tokenizeCloseStart\r\n  };\r\n  let initialPrefix = 0;\r\n  let sizeOpen = 0;\r\n  /** @type {NonNullable<Code>} */\r\n  let marker;\r\n  return start;\r\n\r\n  /**\r\n   * Start of code.\r\n   *\r\n   * ```markdown\r\n   * > | ~~~js\r\n   *     ^\r\n   *   | alert(1)\r\n   *   | ~~~\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    // To do: parse whitespace like `markdown-rs`.\r\n    return beforeSequenceOpen(code);\r\n  }\r\n\r\n  /**\r\n   * In opening fence, after prefix, at sequence.\r\n   *\r\n   * ```markdown\r\n   * > | ~~~js\r\n   *     ^\r\n   *   | alert(1)\r\n   *   | ~~~\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function beforeSequenceOpen(code) {\r\n    const tail = self.events[self.events.length - 1];\r\n    initialPrefix = tail && tail[1].type === \"linePrefix\" ? tail[2].sliceSerialize(tail[1], true).length : 0;\r\n    marker = code;\r\n    effects.enter(\"codeFenced\");\r\n    effects.enter(\"codeFencedFence\");\r\n    effects.enter(\"codeFencedFenceSequence\");\r\n    return sequenceOpen(code);\r\n  }\r\n\r\n  /**\r\n   * In opening fence sequence.\r\n   *\r\n   * ```markdown\r\n   * > | ~~~js\r\n   *      ^\r\n   *   | alert(1)\r\n   *   | ~~~\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function sequenceOpen(code) {\r\n    if (code === marker) {\r\n      sizeOpen++;\r\n      effects.consume(code);\r\n      return sequenceOpen;\r\n    }\r\n    if (sizeOpen < 3) {\r\n      return nok(code);\r\n    }\r\n    effects.exit(\"codeFencedFenceSequence\");\r\n    return markdownSpace(code) ? factorySpace(effects, infoBefore, \"whitespace\")(code) : infoBefore(code);\r\n  }\r\n\r\n  /**\r\n   * In opening fence, after the sequence (and optional whitespace), before info.\r\n   *\r\n   * ```markdown\r\n   * > | ~~~js\r\n   *        ^\r\n   *   | alert(1)\r\n   *   | ~~~\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function infoBefore(code) {\r\n    if (code === null || markdownLineEnding(code)) {\r\n      effects.exit(\"codeFencedFence\");\r\n      return self.interrupt ? ok(code) : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\r\n    }\r\n    effects.enter(\"codeFencedFenceInfo\");\r\n    effects.enter(\"chunkString\", {\r\n      contentType: \"string\"\r\n    });\r\n    return info(code);\r\n  }\r\n\r\n  /**\r\n   * In info.\r\n   *\r\n   * ```markdown\r\n   * > | ~~~js\r\n   *        ^\r\n   *   | alert(1)\r\n   *   | ~~~\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function info(code) {\r\n    if (code === null || markdownLineEnding(code)) {\r\n      effects.exit(\"chunkString\");\r\n      effects.exit(\"codeFencedFenceInfo\");\r\n      return infoBefore(code);\r\n    }\r\n    if (markdownSpace(code)) {\r\n      effects.exit(\"chunkString\");\r\n      effects.exit(\"codeFencedFenceInfo\");\r\n      return factorySpace(effects, metaBefore, \"whitespace\")(code);\r\n    }\r\n    if (code === 96 && code === marker) {\r\n      return nok(code);\r\n    }\r\n    effects.consume(code);\r\n    return info;\r\n  }\r\n\r\n  /**\r\n   * In opening fence, after info and whitespace, before meta.\r\n   *\r\n   * ```markdown\r\n   * > | ~~~js eval\r\n   *           ^\r\n   *   | alert(1)\r\n   *   | ~~~\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function metaBefore(code) {\r\n    if (code === null || markdownLineEnding(code)) {\r\n      return infoBefore(code);\r\n    }\r\n    effects.enter(\"codeFencedFenceMeta\");\r\n    effects.enter(\"chunkString\", {\r\n      contentType: \"string\"\r\n    });\r\n    return meta(code);\r\n  }\r\n\r\n  /**\r\n   * In meta.\r\n   *\r\n   * ```markdown\r\n   * > | ~~~js eval\r\n   *           ^\r\n   *   | alert(1)\r\n   *   | ~~~\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function meta(code) {\r\n    if (code === null || markdownLineEnding(code)) {\r\n      effects.exit(\"chunkString\");\r\n      effects.exit(\"codeFencedFenceMeta\");\r\n      return infoBefore(code);\r\n    }\r\n    if (code === 96 && code === marker) {\r\n      return nok(code);\r\n    }\r\n    effects.consume(code);\r\n    return meta;\r\n  }\r\n\r\n  /**\r\n   * At eol/eof in code, before a non-lazy closing fence or content.\r\n   *\r\n   * ```markdown\r\n   * > | ~~~js\r\n   *          ^\r\n   * > | alert(1)\r\n   *             ^\r\n   *   | ~~~\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function atNonLazyBreak(code) {\r\n    return effects.attempt(closeStart, after, contentBefore)(code);\r\n  }\r\n\r\n  /**\r\n   * Before code content, not a closing fence, at eol.\r\n   *\r\n   * ```markdown\r\n   *   | ~~~js\r\n   * > | alert(1)\r\n   *             ^\r\n   *   | ~~~\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function contentBefore(code) {\r\n    effects.enter(\"lineEnding\");\r\n    effects.consume(code);\r\n    effects.exit(\"lineEnding\");\r\n    return contentStart;\r\n  }\r\n\r\n  /**\r\n   * Before code content, not a closing fence.\r\n   *\r\n   * ```markdown\r\n   *   | ~~~js\r\n   * > | alert(1)\r\n   *     ^\r\n   *   | ~~~\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function contentStart(code) {\r\n    return initialPrefix > 0 && markdownSpace(code) ? factorySpace(effects, beforeContentChunk, \"linePrefix\", initialPrefix + 1)(code) : beforeContentChunk(code);\r\n  }\r\n\r\n  /**\r\n   * Before code content, after optional prefix.\r\n   *\r\n   * ```markdown\r\n   *   | ~~~js\r\n   * > | alert(1)\r\n   *     ^\r\n   *   | ~~~\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function beforeContentChunk(code) {\r\n    if (code === null || markdownLineEnding(code)) {\r\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\r\n    }\r\n    effects.enter(\"codeFlowValue\");\r\n    return contentChunk(code);\r\n  }\r\n\r\n  /**\r\n   * In code content.\r\n   *\r\n   * ```markdown\r\n   *   | ~~~js\r\n   * > | alert(1)\r\n   *     ^^^^^^^^\r\n   *   | ~~~\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function contentChunk(code) {\r\n    if (code === null || markdownLineEnding(code)) {\r\n      effects.exit(\"codeFlowValue\");\r\n      return beforeContentChunk(code);\r\n    }\r\n    effects.consume(code);\r\n    return contentChunk;\r\n  }\r\n\r\n  /**\r\n   * After code.\r\n   *\r\n   * ```markdown\r\n   *   | ~~~js\r\n   *   | alert(1)\r\n   * > | ~~~\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function after(code) {\r\n    effects.exit(\"codeFenced\");\r\n    return ok(code);\r\n  }\r\n\r\n  /**\r\n   * @this {TokenizeContext}\r\n   *   Context.\r\n   * @type {Tokenizer}\r\n   */\r\n  function tokenizeCloseStart(effects, ok, nok) {\r\n    let size = 0;\r\n    return startBefore;\r\n\r\n    /**\r\n     *\r\n     *\r\n     * @type {State}\r\n     */\r\n    function startBefore(code) {\r\n      effects.enter(\"lineEnding\");\r\n      effects.consume(code);\r\n      effects.exit(\"lineEnding\");\r\n      return start;\r\n    }\r\n\r\n    /**\r\n     * Before closing fence, at optional whitespace.\r\n     *\r\n     * ```markdown\r\n     *   | ~~~js\r\n     *   | alert(1)\r\n     * > | ~~~\r\n     *     ^\r\n     * ```\r\n     *\r\n     * @type {State}\r\n     */\r\n    function start(code) {\r\n      // Always populated by defaults.\r\n\r\n      // To do: `enter` here or in next state?\r\n      effects.enter(\"codeFencedFence\");\r\n      return markdownSpace(code) ? factorySpace(effects, beforeSequenceClose, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code) : beforeSequenceClose(code);\r\n    }\r\n\r\n    /**\r\n     * In closing fence, after optional whitespace, at sequence.\r\n     *\r\n     * ```markdown\r\n     *   | ~~~js\r\n     *   | alert(1)\r\n     * > | ~~~\r\n     *     ^\r\n     * ```\r\n     *\r\n     * @type {State}\r\n     */\r\n    function beforeSequenceClose(code) {\r\n      if (code === marker) {\r\n        effects.enter(\"codeFencedFenceSequence\");\r\n        return sequenceClose(code);\r\n      }\r\n      return nok(code);\r\n    }\r\n\r\n    /**\r\n     * In closing fence sequence.\r\n     *\r\n     * ```markdown\r\n     *   | ~~~js\r\n     *   | alert(1)\r\n     * > | ~~~\r\n     *     ^\r\n     * ```\r\n     *\r\n     * @type {State}\r\n     */\r\n    function sequenceClose(code) {\r\n      if (code === marker) {\r\n        size++;\r\n        effects.consume(code);\r\n        return sequenceClose;\r\n      }\r\n      if (size >= sizeOpen) {\r\n        effects.exit(\"codeFencedFenceSequence\");\r\n        return markdownSpace(code) ? factorySpace(effects, sequenceCloseAfter, \"whitespace\")(code) : sequenceCloseAfter(code);\r\n      }\r\n      return nok(code);\r\n    }\r\n\r\n    /**\r\n     * After closing fence sequence, after optional whitespace.\r\n     *\r\n     * ```markdown\r\n     *   | ~~~js\r\n     *   | alert(1)\r\n     * > | ~~~\r\n     *        ^\r\n     * ```\r\n     *\r\n     * @type {State}\r\n     */\r\n    function sequenceCloseAfter(code) {\r\n      if (code === null || markdownLineEnding(code)) {\r\n        effects.exit(\"codeFencedFence\");\r\n        return ok(code);\r\n      }\r\n      return nok(code);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n *   Context.\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\r\n  const self = this;\r\n  return start;\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    if (code === null) {\r\n      return nok(code);\r\n    }\r\n    effects.enter(\"lineEnding\");\r\n    effects.consume(code);\r\n    effects.exit(\"lineEnding\");\r\n    return lineStart;\r\n  }\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @type {State}\r\n   */\r\n  function lineStart(code) {\r\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\r\n  }\r\n}","/**\r\n * @import {\r\n *   Construct,\r\n *   State,\r\n *   TokenizeContext,\r\n *   Tokenizer\r\n * } from 'micromark-util-types'\r\n */\r\n\r\nimport { factorySpace } from 'micromark-factory-space';\r\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\r\n/** @type {Construct} */\r\nexport const codeIndented = {\r\n  name: 'codeIndented',\r\n  tokenize: tokenizeCodeIndented\r\n};\r\n\r\n/** @type {Construct} */\r\nconst furtherStart = {\r\n  partial: true,\r\n  tokenize: tokenizeFurtherStart\r\n};\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n *   Context.\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeCodeIndented(effects, ok, nok) {\r\n  const self = this;\r\n  return start;\r\n\r\n  /**\r\n   * Start of code (indented).\r\n   *\r\n   * > **Parsing note**: it is not needed to check if this first line is a\r\n   * > filled line (that it has a non-whitespace character), because blank lines\r\n   * > are parsed already, so we never run into that.\r\n   *\r\n   * ```markdown\r\n   * > |     aaa\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    // To do: manually check if interrupting like `markdown-rs`.\r\n\r\n    effects.enter(\"codeIndented\");\r\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\r\n    // so that we can drop the next state.\r\n    return factorySpace(effects, afterPrefix, \"linePrefix\", 4 + 1)(code);\r\n  }\r\n\r\n  /**\r\n   * At start, after 1 or 4 spaces.\r\n   *\r\n   * ```markdown\r\n   * > |     aaa\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function afterPrefix(code) {\r\n    const tail = self.events[self.events.length - 1];\r\n    return tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? atBreak(code) : nok(code);\r\n  }\r\n\r\n  /**\r\n   * At a break.\r\n   *\r\n   * ```markdown\r\n   * > |     aaa\r\n   *         ^  ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function atBreak(code) {\r\n    if (code === null) {\r\n      return after(code);\r\n    }\r\n    if (markdownLineEnding(code)) {\r\n      return effects.attempt(furtherStart, atBreak, after)(code);\r\n    }\r\n    effects.enter(\"codeFlowValue\");\r\n    return inside(code);\r\n  }\r\n\r\n  /**\r\n   * In code content.\r\n   *\r\n   * ```markdown\r\n   * > |     aaa\r\n   *         ^^^^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function inside(code) {\r\n    if (code === null || markdownLineEnding(code)) {\r\n      effects.exit(\"codeFlowValue\");\r\n      return atBreak(code);\r\n    }\r\n    effects.consume(code);\r\n    return inside;\r\n  }\r\n\r\n  /** @type {State} */\r\n  function after(code) {\r\n    effects.exit(\"codeIndented\");\r\n    // To do: allow interrupting like `markdown-rs`.\r\n    // Feel free to interrupt.\r\n    // tokenizer.interrupt = false\r\n    return ok(code);\r\n  }\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n *   Context.\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeFurtherStart(effects, ok, nok) {\r\n  const self = this;\r\n  return furtherStart;\r\n\r\n  /**\r\n   * At eol, trying to parse another indent.\r\n   *\r\n   * ```markdown\r\n   * > |     aaa\r\n   *            ^\r\n   *   |     bbb\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function furtherStart(code) {\r\n    // To do: improve `lazy` / `pierce` handling.\r\n    // If this is a lazy line, it can’t be code.\r\n    if (self.parser.lazy[self.now().line]) {\r\n      return nok(code);\r\n    }\r\n    if (markdownLineEnding(code)) {\r\n      effects.enter(\"lineEnding\");\r\n      effects.consume(code);\r\n      effects.exit(\"lineEnding\");\r\n      return furtherStart;\r\n    }\r\n\r\n    // To do: the code here in `micromark-js` is a bit different from\r\n    // `markdown-rs` because there it can attempt spaces.\r\n    // We can’t yet.\r\n    //\r\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\r\n    // so that we can drop the next state.\r\n    return factorySpace(effects, afterPrefix, \"linePrefix\", 4 + 1)(code);\r\n  }\r\n\r\n  /**\r\n   * At start, after 1 or 4 spaces.\r\n   *\r\n   * ```markdown\r\n   * > |     aaa\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function afterPrefix(code) {\r\n    const tail = self.events[self.events.length - 1];\r\n    return tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? ok(code) : markdownLineEnding(code) ? furtherStart(code) : nok(code);\r\n  }\r\n}","/**\r\n * @import {\r\n *   Construct,\r\n *   Previous,\r\n *   Resolver,\r\n *   State,\r\n *   TokenizeContext,\r\n *   Tokenizer,\r\n *   Token\r\n * } from 'micromark-util-types'\r\n */\r\n\r\nimport { markdownLineEnding } from 'micromark-util-character';\r\n/** @type {Construct} */\r\nexport const codeText = {\r\n  name: 'codeText',\r\n  previous,\r\n  resolve: resolveCodeText,\r\n  tokenize: tokenizeCodeText\r\n};\r\n\r\n// To do: next major: don’t resolve, like `markdown-rs`.\r\n/** @type {Resolver} */\r\nfunction resolveCodeText(events) {\r\n  let tailExitIndex = events.length - 4;\r\n  let headEnterIndex = 3;\r\n  /** @type {number} */\r\n  let index;\r\n  /** @type {number | undefined} */\r\n  let enter;\r\n\r\n  // If we start and end with an EOL or a space.\r\n  if ((events[headEnterIndex][1].type === \"lineEnding\" || events[headEnterIndex][1].type === 'space') && (events[tailExitIndex][1].type === \"lineEnding\" || events[tailExitIndex][1].type === 'space')) {\r\n    index = headEnterIndex;\r\n\r\n    // And we have data.\r\n    while (++index < tailExitIndex) {\r\n      if (events[index][1].type === \"codeTextData\") {\r\n        // Then we have padding.\r\n        events[headEnterIndex][1].type = \"codeTextPadding\";\r\n        events[tailExitIndex][1].type = \"codeTextPadding\";\r\n        headEnterIndex += 2;\r\n        tailExitIndex -= 2;\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Merge adjacent spaces and data.\r\n  index = headEnterIndex - 1;\r\n  tailExitIndex++;\r\n  while (++index <= tailExitIndex) {\r\n    if (enter === undefined) {\r\n      if (index !== tailExitIndex && events[index][1].type !== \"lineEnding\") {\r\n        enter = index;\r\n      }\r\n    } else if (index === tailExitIndex || events[index][1].type === \"lineEnding\") {\r\n      events[enter][1].type = \"codeTextData\";\r\n      if (index !== enter + 2) {\r\n        events[enter][1].end = events[index - 1][1].end;\r\n        events.splice(enter + 2, index - enter - 2);\r\n        tailExitIndex -= index - enter - 2;\r\n        index = enter + 2;\r\n      }\r\n      enter = undefined;\r\n    }\r\n  }\r\n  return events;\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n *   Context.\r\n * @type {Previous}\r\n */\r\nfunction previous(code) {\r\n  // If there is a previous code, there will always be a tail.\r\n  return code !== 96 || this.events[this.events.length - 1][1].type === \"characterEscape\";\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n *   Context.\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeCodeText(effects, ok, nok) {\r\n  const self = this;\r\n  let sizeOpen = 0;\r\n  /** @type {number} */\r\n  let size;\r\n  /** @type {Token} */\r\n  let token;\r\n  return start;\r\n\r\n  /**\r\n   * Start of code (text).\r\n   *\r\n   * ```markdown\r\n   * > | `a`\r\n   *     ^\r\n   * > | \\`a`\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    effects.enter(\"codeText\");\r\n    effects.enter(\"codeTextSequence\");\r\n    return sequenceOpen(code);\r\n  }\r\n\r\n  /**\r\n   * In opening sequence.\r\n   *\r\n   * ```markdown\r\n   * > | `a`\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function sequenceOpen(code) {\r\n    if (code === 96) {\r\n      effects.consume(code);\r\n      sizeOpen++;\r\n      return sequenceOpen;\r\n    }\r\n    effects.exit(\"codeTextSequence\");\r\n    return between(code);\r\n  }\r\n\r\n  /**\r\n   * Between something and something else.\r\n   *\r\n   * ```markdown\r\n   * > | `a`\r\n   *      ^^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function between(code) {\r\n    // EOF.\r\n    if (code === null) {\r\n      return nok(code);\r\n    }\r\n\r\n    // To do: next major: don’t do spaces in resolve, but when compiling,\r\n    // like `markdown-rs`.\r\n    // Tabs don’t work, and virtual spaces don’t make sense.\r\n    if (code === 32) {\r\n      effects.enter('space');\r\n      effects.consume(code);\r\n      effects.exit('space');\r\n      return between;\r\n    }\r\n\r\n    // Closing fence? Could also be data.\r\n    if (code === 96) {\r\n      token = effects.enter(\"codeTextSequence\");\r\n      size = 0;\r\n      return sequenceClose(code);\r\n    }\r\n    if (markdownLineEnding(code)) {\r\n      effects.enter(\"lineEnding\");\r\n      effects.consume(code);\r\n      effects.exit(\"lineEnding\");\r\n      return between;\r\n    }\r\n\r\n    // Data.\r\n    effects.enter(\"codeTextData\");\r\n    return data(code);\r\n  }\r\n\r\n  /**\r\n   * In data.\r\n   *\r\n   * ```markdown\r\n   * > | `a`\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function data(code) {\r\n    if (code === null || code === 32 || code === 96 || markdownLineEnding(code)) {\r\n      effects.exit(\"codeTextData\");\r\n      return between(code);\r\n    }\r\n    effects.consume(code);\r\n    return data;\r\n  }\r\n\r\n  /**\r\n   * In closing sequence.\r\n   *\r\n   * ```markdown\r\n   * > | `a`\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function sequenceClose(code) {\r\n    // More.\r\n    if (code === 96) {\r\n      effects.consume(code);\r\n      size++;\r\n      return sequenceClose;\r\n    }\r\n\r\n    // Done!\r\n    if (size === sizeOpen) {\r\n      effects.exit(\"codeTextSequence\");\r\n      effects.exit(\"codeText\");\r\n      return ok(code);\r\n    }\r\n\r\n    // More or less accents: mark as data.\r\n    token.type = \"codeTextData\";\r\n    return data(code);\r\n  }\r\n}","/**\r\n * Some of the internal operations of micromark do lots of editing\r\n * operations on very large arrays. This runs into problems with two\r\n * properties of most circa-2020 JavaScript interpreters:\r\n *\r\n *  - Array-length modifications at the high end of an array (push/pop) are\r\n *    expected to be common and are implemented in (amortized) time\r\n *    proportional to the number of elements added or removed, whereas\r\n *    other operations (shift/unshift and splice) are much less efficient.\r\n *  - Function arguments are passed on the stack, so adding tens of thousands\r\n *    of elements to an array with `arr.push(...newElements)` will frequently\r\n *    cause stack overflows. (see <https://stackoverflow.com/questions/22123769/rangeerror-maximum-call-stack-size-exceeded-why>)\r\n *\r\n * SpliceBuffers are an implementation of gap buffers, which are a\r\n * generalization of the \"queue made of two stacks\" idea. The splice buffer\r\n * maintains a cursor, and moving the cursor has cost proportional to the\r\n * distance the cursor moves, but inserting, deleting, or splicing in\r\n * new information at the cursor is as efficient as the push/pop operation.\r\n * This allows for an efficient sequence of splices (or pushes, pops, shifts,\r\n * or unshifts) as long such edits happen at the same part of the array or\r\n * generally sweep through the array from the beginning to the end.\r\n *\r\n * The interface for splice buffers also supports large numbers of inputs by\r\n * passing a single array argument rather passing multiple arguments on the\r\n * function call stack.\r\n *\r\n * @template T\r\n *   Item type.\r\n */\r\nexport class SpliceBuffer {\r\n  /**\r\n   * @param {ReadonlyArray<T> | null | undefined} [initial]\r\n   *   Initial items (optional).\r\n   * @returns\r\n   *   Splice buffer.\r\n   */\r\n  constructor(initial) {\r\n    /** @type {Array<T>} */\r\n    this.left = initial ? [...initial] : [];\r\n    /** @type {Array<T>} */\r\n    this.right = [];\r\n  }\r\n\r\n  /**\r\n   * Array access;\r\n   * does not move the cursor.\r\n   *\r\n   * @param {number} index\r\n   *   Index.\r\n   * @return {T}\r\n   *   Item.\r\n   */\r\n  get(index) {\r\n    if (index < 0 || index >= this.left.length + this.right.length) {\r\n      throw new RangeError('Cannot access index `' + index + '` in a splice buffer of size `' + (this.left.length + this.right.length) + '`');\r\n    }\r\n    if (index < this.left.length) return this.left[index];\r\n    return this.right[this.right.length - index + this.left.length - 1];\r\n  }\r\n\r\n  /**\r\n   * The length of the splice buffer, one greater than the largest index in the\r\n   * array.\r\n   */\r\n  get length() {\r\n    return this.left.length + this.right.length;\r\n  }\r\n\r\n  /**\r\n   * Remove and return `list[0]`;\r\n   * moves the cursor to `0`.\r\n   *\r\n   * @returns {T | undefined}\r\n   *   Item, optional.\r\n   */\r\n  shift() {\r\n    this.setCursor(0);\r\n    return this.right.pop();\r\n  }\r\n\r\n  /**\r\n   * Slice the buffer to get an array;\r\n   * does not move the cursor.\r\n   *\r\n   * @param {number} start\r\n   *   Start.\r\n   * @param {number | null | undefined} [end]\r\n   *   End (optional).\r\n   * @returns {Array<T>}\r\n   *   Array of items.\r\n   */\r\n  slice(start, end) {\r\n    /** @type {number} */\r\n    const stop = end === null || end === undefined ? Number.POSITIVE_INFINITY : end;\r\n    if (stop < this.left.length) {\r\n      return this.left.slice(start, stop);\r\n    }\r\n    if (start > this.left.length) {\r\n      return this.right.slice(this.right.length - stop + this.left.length, this.right.length - start + this.left.length).reverse();\r\n    }\r\n    return this.left.slice(start).concat(this.right.slice(this.right.length - stop + this.left.length).reverse());\r\n  }\r\n\r\n  /**\r\n   * Mimics the behavior of Array.prototype.splice() except for the change of\r\n   * interface necessary to avoid segfaults when patching in very large arrays.\r\n   *\r\n   * This operation moves cursor is moved to `start` and results in the cursor\r\n   * placed after any inserted items.\r\n   *\r\n   * @param {number} start\r\n   *   Start;\r\n   *   zero-based index at which to start changing the array;\r\n   *   negative numbers count backwards from the end of the array and values\r\n   *   that are out-of bounds are clamped to the appropriate end of the array.\r\n   * @param {number | null | undefined} [deleteCount=0]\r\n   *   Delete count (default: `0`);\r\n   *   maximum number of elements to delete, starting from start.\r\n   * @param {Array<T> | null | undefined} [items=[]]\r\n   *   Items to include in place of the deleted items (default: `[]`).\r\n   * @return {Array<T>}\r\n   *   Any removed items.\r\n   */\r\n  splice(start, deleteCount, items) {\r\n    /** @type {number} */\r\n    const count = deleteCount || 0;\r\n    this.setCursor(Math.trunc(start));\r\n    const removed = this.right.splice(this.right.length - count, Number.POSITIVE_INFINITY);\r\n    if (items) chunkedPush(this.left, items);\r\n    return removed.reverse();\r\n  }\r\n\r\n  /**\r\n   * Remove and return the highest-numbered item in the array, so\r\n   * `list[list.length - 1]`;\r\n   * Moves the cursor to `length`.\r\n   *\r\n   * @returns {T | undefined}\r\n   *   Item, optional.\r\n   */\r\n  pop() {\r\n    this.setCursor(Number.POSITIVE_INFINITY);\r\n    return this.left.pop();\r\n  }\r\n\r\n  /**\r\n   * Inserts a single item to the high-numbered side of the array;\r\n   * moves the cursor to `length`.\r\n   *\r\n   * @param {T} item\r\n   *   Item.\r\n   * @returns {undefined}\r\n   *   Nothing.\r\n   */\r\n  push(item) {\r\n    this.setCursor(Number.POSITIVE_INFINITY);\r\n    this.left.push(item);\r\n  }\r\n\r\n  /**\r\n   * Inserts many items to the high-numbered side of the array.\r\n   * Moves the cursor to `length`.\r\n   *\r\n   * @param {Array<T>} items\r\n   *   Items.\r\n   * @returns {undefined}\r\n   *   Nothing.\r\n   */\r\n  pushMany(items) {\r\n    this.setCursor(Number.POSITIVE_INFINITY);\r\n    chunkedPush(this.left, items);\r\n  }\r\n\r\n  /**\r\n   * Inserts a single item to the low-numbered side of the array;\r\n   * Moves the cursor to `0`.\r\n   *\r\n   * @param {T} item\r\n   *   Item.\r\n   * @returns {undefined}\r\n   *   Nothing.\r\n   */\r\n  unshift(item) {\r\n    this.setCursor(0);\r\n    this.right.push(item);\r\n  }\r\n\r\n  /**\r\n   * Inserts many items to the low-numbered side of the array;\r\n   * moves the cursor to `0`.\r\n   *\r\n   * @param {Array<T>} items\r\n   *   Items.\r\n   * @returns {undefined}\r\n   *   Nothing.\r\n   */\r\n  unshiftMany(items) {\r\n    this.setCursor(0);\r\n    chunkedPush(this.right, items.reverse());\r\n  }\r\n\r\n  /**\r\n   * Move the cursor to a specific position in the array. Requires\r\n   * time proportional to the distance moved.\r\n   *\r\n   * If `n < 0`, the cursor will end up at the beginning.\r\n   * If `n > length`, the cursor will end up at the end.\r\n   *\r\n   * @param {number} n\r\n   *   Position.\r\n   * @return {undefined}\r\n   *   Nothing.\r\n   */\r\n  setCursor(n) {\r\n    if (n === this.left.length || n > this.left.length && this.right.length === 0 || n < 0 && this.left.length === 0) return;\r\n    if (n < this.left.length) {\r\n      // Move cursor to the this.left\r\n      const removed = this.left.splice(n, Number.POSITIVE_INFINITY);\r\n      chunkedPush(this.right, removed.reverse());\r\n    } else {\r\n      // Move cursor to the this.right\r\n      const removed = this.right.splice(this.left.length + this.right.length - n, Number.POSITIVE_INFINITY);\r\n      chunkedPush(this.left, removed.reverse());\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Avoid stack overflow by pushing items onto the stack in segments\r\n *\r\n * @template T\r\n *   Item type.\r\n * @param {Array<T>} list\r\n *   List to inject into.\r\n * @param {ReadonlyArray<T>} right\r\n *   Items to inject.\r\n * @return {undefined}\r\n *   Nothing.\r\n */\r\nfunction chunkedPush(list, right) {\r\n  /** @type {number} */\r\n  let chunkStart = 0;\r\n  if (right.length < 10000) {\r\n    list.push(...right);\r\n  } else {\r\n    while (chunkStart < right.length) {\r\n      list.push(...right.slice(chunkStart, chunkStart + 10000));\r\n      chunkStart += 10000;\r\n    }\r\n  }\r\n}","/**\r\n * @import {Chunk, Event, Token} from 'micromark-util-types'\r\n */\r\n\r\nimport { splice } from 'micromark-util-chunked';\r\nimport { SpliceBuffer } from './lib/splice-buffer.js';\r\n\r\n// Hidden API exposed for testing.\r\nexport { SpliceBuffer } from './lib/splice-buffer.js';\r\n\r\n/**\r\n * Tokenize subcontent.\r\n *\r\n * @param {Array<Event>} eventsArray\r\n *   List of events.\r\n * @returns {boolean}\r\n *   Whether subtokens were found.\r\n */\r\n// eslint-disable-next-line complexity\r\nexport function subtokenize(eventsArray) {\r\n  /** @type {Record<string, number>} */\r\n  const jumps = {};\r\n  let index = -1;\r\n  /** @type {Event} */\r\n  let event;\r\n  /** @type {number | undefined} */\r\n  let lineIndex;\r\n  /** @type {number} */\r\n  let otherIndex;\r\n  /** @type {Event} */\r\n  let otherEvent;\r\n  /** @type {Array<Event>} */\r\n  let parameters;\r\n  /** @type {Array<Event>} */\r\n  let subevents;\r\n  /** @type {boolean | undefined} */\r\n  let more;\r\n  const events = new SpliceBuffer(eventsArray);\r\n  while (++index < events.length) {\r\n    while (index in jumps) {\r\n      index = jumps[index];\r\n    }\r\n    event = events.get(index);\r\n\r\n    // Add a hook for the GFM tasklist extension, which needs to know if text\r\n    // is in the first content of a list item.\r\n    if (index && event[1].type === \"chunkFlow\" && events.get(index - 1)[1].type === \"listItemPrefix\") {\r\n      subevents = event[1]._tokenizer.events;\r\n      otherIndex = 0;\r\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === \"lineEndingBlank\") {\r\n        otherIndex += 2;\r\n      }\r\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === \"content\") {\r\n        while (++otherIndex < subevents.length) {\r\n          if (subevents[otherIndex][1].type === \"content\") {\r\n            break;\r\n          }\r\n          if (subevents[otherIndex][1].type === \"chunkText\") {\r\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true;\r\n            otherIndex++;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // Enter.\r\n    if (event[0] === 'enter') {\r\n      if (event[1].contentType) {\r\n        Object.assign(jumps, subcontent(events, index));\r\n        index = jumps[index];\r\n        more = true;\r\n      }\r\n    }\r\n    // Exit.\r\n    else if (event[1]._container) {\r\n      otherIndex = index;\r\n      lineIndex = undefined;\r\n      while (otherIndex--) {\r\n        otherEvent = events.get(otherIndex);\r\n        if (otherEvent[1].type === \"lineEnding\" || otherEvent[1].type === \"lineEndingBlank\") {\r\n          if (otherEvent[0] === 'enter') {\r\n            if (lineIndex) {\r\n              events.get(lineIndex)[1].type = \"lineEndingBlank\";\r\n            }\r\n            otherEvent[1].type = \"lineEnding\";\r\n            lineIndex = otherIndex;\r\n          }\r\n        } else if (otherEvent[1].type === \"linePrefix\" || otherEvent[1].type === \"listItemIndent\") {\r\n          // Move past.\r\n        } else {\r\n          break;\r\n        }\r\n      }\r\n      if (lineIndex) {\r\n        // Fix position.\r\n        event[1].end = {\r\n          ...events.get(lineIndex)[1].start\r\n        };\r\n\r\n        // Switch container exit w/ line endings.\r\n        parameters = events.slice(lineIndex, index);\r\n        parameters.unshift(event);\r\n        events.splice(lineIndex, index - lineIndex + 1, parameters);\r\n      }\r\n    }\r\n  }\r\n\r\n  // The changes to the `events` buffer must be copied back into the eventsArray\r\n  splice(eventsArray, 0, Number.POSITIVE_INFINITY, events.slice(0));\r\n  return !more;\r\n}\r\n\r\n/**\r\n * Tokenize embedded tokens.\r\n *\r\n * @param {SpliceBuffer<Event>} events\r\n *   Events.\r\n * @param {number} eventIndex\r\n *   Index.\r\n * @returns {Record<string, number>}\r\n *   Gaps.\r\n */\r\nfunction subcontent(events, eventIndex) {\r\n  const token = events.get(eventIndex)[1];\r\n  const context = events.get(eventIndex)[2];\r\n  let startPosition = eventIndex - 1;\r\n  /** @type {Array<number>} */\r\n  const startPositions = [];\r\n  let tokenizer = token._tokenizer;\r\n  if (!tokenizer) {\r\n    tokenizer = context.parser[token.contentType](token.start);\r\n    if (token._contentTypeTextTrailing) {\r\n      tokenizer._contentTypeTextTrailing = true;\r\n    }\r\n  }\r\n  const childEvents = tokenizer.events;\r\n  /** @type {Array<[number, number]>} */\r\n  const jumps = [];\r\n  /** @type {Record<string, number>} */\r\n  const gaps = {};\r\n  /** @type {Array<Chunk>} */\r\n  let stream;\r\n  /** @type {Token | undefined} */\r\n  let previous;\r\n  let index = -1;\r\n  /** @type {Token | undefined} */\r\n  let current = token;\r\n  let adjust = 0;\r\n  let start = 0;\r\n  const breaks = [start];\r\n\r\n  // Loop forward through the linked tokens to pass them in order to the\r\n  // subtokenizer.\r\n  while (current) {\r\n    // Find the position of the event for this token.\r\n    while (events.get(++startPosition)[1] !== current) {\r\n      // Empty.\r\n    }\r\n    startPositions.push(startPosition);\r\n    if (!current._tokenizer) {\r\n      stream = context.sliceStream(current);\r\n      if (!current.next) {\r\n        stream.push(null);\r\n      }\r\n      if (previous) {\r\n        tokenizer.defineSkip(current.start);\r\n      }\r\n      if (current._isInFirstContentOfListItem) {\r\n        tokenizer._gfmTasklistFirstContentOfListItem = true;\r\n      }\r\n      tokenizer.write(stream);\r\n      if (current._isInFirstContentOfListItem) {\r\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined;\r\n      }\r\n    }\r\n\r\n    // Unravel the next token.\r\n    previous = current;\r\n    current = current.next;\r\n  }\r\n\r\n  // Now, loop back through all events (and linked tokens), to figure out which\r\n  // parts belong where.\r\n  current = token;\r\n  while (++index < childEvents.length) {\r\n    if (\r\n    // Find a void token that includes a break.\r\n    childEvents[index][0] === 'exit' && childEvents[index - 1][0] === 'enter' && childEvents[index][1].type === childEvents[index - 1][1].type && childEvents[index][1].start.line !== childEvents[index][1].end.line) {\r\n      start = index + 1;\r\n      breaks.push(start);\r\n      // Help GC.\r\n      current._tokenizer = undefined;\r\n      current.previous = undefined;\r\n      current = current.next;\r\n    }\r\n  }\r\n\r\n  // Help GC.\r\n  tokenizer.events = [];\r\n\r\n  // If there’s one more token (which is the cases for lines that end in an\r\n  // EOF), that’s perfect: the last point we found starts it.\r\n  // If there isn’t then make sure any remaining content is added to it.\r\n  if (current) {\r\n    // Help GC.\r\n    current._tokenizer = undefined;\r\n    current.previous = undefined;\r\n  } else {\r\n    breaks.pop();\r\n  }\r\n\r\n  // Now splice the events from the subtokenizer into the current events,\r\n  // moving back to front so that splice indices aren’t affected.\r\n  index = breaks.length;\r\n  while (index--) {\r\n    const slice = childEvents.slice(breaks[index], breaks[index + 1]);\r\n    const start = startPositions.pop();\r\n    jumps.push([start, start + slice.length - 1]);\r\n    events.splice(start, 2, slice);\r\n  }\r\n  jumps.reverse();\r\n  index = -1;\r\n  while (++index < jumps.length) {\r\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1];\r\n    adjust += jumps[index][1] - jumps[index][0] - 1;\r\n  }\r\n  return gaps;\r\n}","/**\r\n * @import {\r\n *   Construct,\r\n *   Resolver,\r\n *   State,\r\n *   TokenizeContext,\r\n *   Tokenizer,\r\n *   Token\r\n * } from 'micromark-util-types'\r\n */\r\n\r\nimport { factorySpace } from 'micromark-factory-space';\r\nimport { markdownLineEnding } from 'micromark-util-character';\r\nimport { subtokenize } from 'micromark-util-subtokenize';\r\n/**\r\n * No name because it must not be turned off.\r\n * @type {Construct}\r\n */\r\nexport const content = {\r\n  resolve: resolveContent,\r\n  tokenize: tokenizeContent\r\n};\r\n\r\n/** @type {Construct} */\r\nconst continuationConstruct = {\r\n  partial: true,\r\n  tokenize: tokenizeContinuation\r\n};\r\n\r\n/**\r\n * Content is transparent: it’s parsed right now. That way, definitions are also\r\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\r\n *\r\n * @type {Resolver}\r\n */\r\nfunction resolveContent(events) {\r\n  subtokenize(events);\r\n  return events;\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n *   Context.\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeContent(effects, ok) {\r\n  /** @type {Token | undefined} */\r\n  let previous;\r\n  return chunkStart;\r\n\r\n  /**\r\n   * Before a content chunk.\r\n   *\r\n   * ```markdown\r\n   * > | abc\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function chunkStart(code) {\r\n    effects.enter(\"content\");\r\n    previous = effects.enter(\"chunkContent\", {\r\n      contentType: \"content\"\r\n    });\r\n    return chunkInside(code);\r\n  }\r\n\r\n  /**\r\n   * In a content chunk.\r\n   *\r\n   * ```markdown\r\n   * > | abc\r\n   *     ^^^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function chunkInside(code) {\r\n    if (code === null) {\r\n      return contentEnd(code);\r\n    }\r\n\r\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\r\n    // is stitched together resolving.\r\n    if (markdownLineEnding(code)) {\r\n      return effects.check(continuationConstruct, contentContinue, contentEnd)(code);\r\n    }\r\n\r\n    // Data.\r\n    effects.consume(code);\r\n    return chunkInside;\r\n  }\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @type {State}\r\n   */\r\n  function contentEnd(code) {\r\n    effects.exit(\"chunkContent\");\r\n    effects.exit(\"content\");\r\n    return ok(code);\r\n  }\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @type {State}\r\n   */\r\n  function contentContinue(code) {\r\n    effects.consume(code);\r\n    effects.exit(\"chunkContent\");\r\n    previous.next = effects.enter(\"chunkContent\", {\r\n      contentType: \"content\",\r\n      previous\r\n    });\r\n    previous = previous.next;\r\n    return chunkInside;\r\n  }\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n *   Context.\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeContinuation(effects, ok, nok) {\r\n  const self = this;\r\n  return startLookahead;\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @type {State}\r\n   */\r\n  function startLookahead(code) {\r\n    effects.exit(\"chunkContent\");\r\n    effects.enter(\"lineEnding\");\r\n    effects.consume(code);\r\n    effects.exit(\"lineEnding\");\r\n    return factorySpace(effects, prefixed, \"linePrefix\");\r\n  }\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @type {State}\r\n   */\r\n  function prefixed(code) {\r\n    if (code === null || markdownLineEnding(code)) {\r\n      return nok(code);\r\n    }\r\n\r\n    // Always populated by defaults.\r\n\r\n    const tail = self.events[self.events.length - 1];\r\n    if (!self.parser.constructs.disable.null.includes('codeIndented') && tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4) {\r\n      return ok(code);\r\n    }\r\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code);\r\n  }\r\n}","/**\r\n * @import {Effects, State, TokenType} from 'micromark-util-types'\r\n */\r\n\r\nimport { asciiControl, markdownLineEndingOrSpace, markdownLineEnding } from 'micromark-util-character';\r\n/**\r\n * Parse destinations.\r\n *\r\n * ###### Examples\r\n *\r\n * ```markdown\r\n * <a>\r\n * <a\\>b>\r\n * <a b>\r\n * <a)>\r\n * a\r\n * a\\)b\r\n * a(b)c\r\n * a(b)\r\n * ```\r\n *\r\n * @param {Effects} effects\r\n *   Context.\r\n * @param {State} ok\r\n *   State switched to when successful.\r\n * @param {State} nok\r\n *   State switched to when unsuccessful.\r\n * @param {TokenType} type\r\n *   Type for whole (`<a>` or `b`).\r\n * @param {TokenType} literalType\r\n *   Type when enclosed (`<a>`).\r\n * @param {TokenType} literalMarkerType\r\n *   Type for enclosing (`<` and `>`).\r\n * @param {TokenType} rawType\r\n *   Type when not enclosed (`b`).\r\n * @param {TokenType} stringType\r\n *   Type for the value (`a` or `b`).\r\n * @param {number | undefined} [max=Infinity]\r\n *   Depth of nested parens (inclusive).\r\n * @returns {State}\r\n *   Start state.\r\n */\r\nexport function factoryDestination(effects, ok, nok, type, literalType, literalMarkerType, rawType, stringType, max) {\r\n  const limit = max || Number.POSITIVE_INFINITY;\r\n  let balance = 0;\r\n  return start;\r\n\r\n  /**\r\n   * Start of destination.\r\n   *\r\n   * ```markdown\r\n   * > | <aa>\r\n   *     ^\r\n   * > | aa\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    if (code === 60) {\r\n      effects.enter(type);\r\n      effects.enter(literalType);\r\n      effects.enter(literalMarkerType);\r\n      effects.consume(code);\r\n      effects.exit(literalMarkerType);\r\n      return enclosedBefore;\r\n    }\r\n\r\n    // ASCII control, space, closing paren.\r\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\r\n      return nok(code);\r\n    }\r\n    effects.enter(type);\r\n    effects.enter(rawType);\r\n    effects.enter(stringType);\r\n    effects.enter(\"chunkString\", {\r\n      contentType: \"string\"\r\n    });\r\n    return raw(code);\r\n  }\r\n\r\n  /**\r\n   * After `<`, at an enclosed destination.\r\n   *\r\n   * ```markdown\r\n   * > | <aa>\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function enclosedBefore(code) {\r\n    if (code === 62) {\r\n      effects.enter(literalMarkerType);\r\n      effects.consume(code);\r\n      effects.exit(literalMarkerType);\r\n      effects.exit(literalType);\r\n      effects.exit(type);\r\n      return ok;\r\n    }\r\n    effects.enter(stringType);\r\n    effects.enter(\"chunkString\", {\r\n      contentType: \"string\"\r\n    });\r\n    return enclosed(code);\r\n  }\r\n\r\n  /**\r\n   * In enclosed destination.\r\n   *\r\n   * ```markdown\r\n   * > | <aa>\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function enclosed(code) {\r\n    if (code === 62) {\r\n      effects.exit(\"chunkString\");\r\n      effects.exit(stringType);\r\n      return enclosedBefore(code);\r\n    }\r\n    if (code === null || code === 60 || markdownLineEnding(code)) {\r\n      return nok(code);\r\n    }\r\n    effects.consume(code);\r\n    return code === 92 ? enclosedEscape : enclosed;\r\n  }\r\n\r\n  /**\r\n   * After `\\`, at a special character.\r\n   *\r\n   * ```markdown\r\n   * > | <a\\*a>\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function enclosedEscape(code) {\r\n    if (code === 60 || code === 62 || code === 92) {\r\n      effects.consume(code);\r\n      return enclosed;\r\n    }\r\n    return enclosed(code);\r\n  }\r\n\r\n  /**\r\n   * In raw destination.\r\n   *\r\n   * ```markdown\r\n   * > | aa\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function raw(code) {\r\n    if (!balance && (code === null || code === 41 || markdownLineEndingOrSpace(code))) {\r\n      effects.exit(\"chunkString\");\r\n      effects.exit(stringType);\r\n      effects.exit(rawType);\r\n      effects.exit(type);\r\n      return ok(code);\r\n    }\r\n    if (balance < limit && code === 40) {\r\n      effects.consume(code);\r\n      balance++;\r\n      return raw;\r\n    }\r\n    if (code === 41) {\r\n      effects.consume(code);\r\n      balance--;\r\n      return raw;\r\n    }\r\n\r\n    // ASCII control (but *not* `\\0`) and space and `(`.\r\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\r\n    // doesn’t.\r\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\r\n      return nok(code);\r\n    }\r\n    effects.consume(code);\r\n    return code === 92 ? rawEscape : raw;\r\n  }\r\n\r\n  /**\r\n   * After `\\`, at special character.\r\n   *\r\n   * ```markdown\r\n   * > | a\\*a\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function rawEscape(code) {\r\n    if (code === 40 || code === 41 || code === 92) {\r\n      effects.consume(code);\r\n      return raw;\r\n    }\r\n    return raw(code);\r\n  }\r\n}","/**\r\n * @import {\r\n *   Effects,\r\n *   State,\r\n *   TokenizeContext,\r\n *   TokenType\r\n * } from 'micromark-util-types'\r\n */\r\n\r\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\r\n/**\r\n * Parse labels.\r\n *\r\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\r\n *\r\n * ###### Examples\r\n *\r\n * ```markdown\r\n * [a]\r\n * [a\r\n * b]\r\n * [a\\]b]\r\n * ```\r\n *\r\n * @this {TokenizeContext}\r\n *   Tokenize context.\r\n * @param {Effects} effects\r\n *   Context.\r\n * @param {State} ok\r\n *   State switched to when successful.\r\n * @param {State} nok\r\n *   State switched to when unsuccessful.\r\n * @param {TokenType} type\r\n *   Type of the whole label (`[a]`).\r\n * @param {TokenType} markerType\r\n *   Type for the markers (`[` and `]`).\r\n * @param {TokenType} stringType\r\n *   Type for the identifier (`a`).\r\n * @returns {State}\r\n *   Start state.\r\n */\r\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\r\n  const self = this;\r\n  let size = 0;\r\n  /** @type {boolean} */\r\n  let seen;\r\n  return start;\r\n\r\n  /**\r\n   * Start of label.\r\n   *\r\n   * ```markdown\r\n   * > | [a]\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    effects.enter(type);\r\n    effects.enter(markerType);\r\n    effects.consume(code);\r\n    effects.exit(markerType);\r\n    effects.enter(stringType);\r\n    return atBreak;\r\n  }\r\n\r\n  /**\r\n   * In label, at something, before something else.\r\n   *\r\n   * ```markdown\r\n   * > | [a]\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function atBreak(code) {\r\n    if (size > 999 || code === null || code === 91 || code === 93 && !seen ||\r\n    // To do: remove in the future once we’ve switched from\r\n    // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\r\n    // which doesn’t need this.\r\n    // Hidden footnotes hook.\r\n    /* c8 ignore next 3 */\r\n    code === 94 && !size && '_hiddenFootnoteSupport' in self.parser.constructs) {\r\n      return nok(code);\r\n    }\r\n    if (code === 93) {\r\n      effects.exit(stringType);\r\n      effects.enter(markerType);\r\n      effects.consume(code);\r\n      effects.exit(markerType);\r\n      effects.exit(type);\r\n      return ok;\r\n    }\r\n\r\n    // To do: indent? Link chunks and EOLs together?\r\n    if (markdownLineEnding(code)) {\r\n      effects.enter(\"lineEnding\");\r\n      effects.consume(code);\r\n      effects.exit(\"lineEnding\");\r\n      return atBreak;\r\n    }\r\n    effects.enter(\"chunkString\", {\r\n      contentType: \"string\"\r\n    });\r\n    return labelInside(code);\r\n  }\r\n\r\n  /**\r\n   * In label, in text.\r\n   *\r\n   * ```markdown\r\n   * > | [a]\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function labelInside(code) {\r\n    if (code === null || code === 91 || code === 93 || markdownLineEnding(code) || size++ > 999) {\r\n      effects.exit(\"chunkString\");\r\n      return atBreak(code);\r\n    }\r\n    effects.consume(code);\r\n    if (!seen) seen = !markdownSpace(code);\r\n    return code === 92 ? labelEscape : labelInside;\r\n  }\r\n\r\n  /**\r\n   * After `\\`, at a special character.\r\n   *\r\n   * ```markdown\r\n   * > | [a\\*a]\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function labelEscape(code) {\r\n    if (code === 91 || code === 92 || code === 93) {\r\n      effects.consume(code);\r\n      size++;\r\n      return labelInside;\r\n    }\r\n    return labelInside(code);\r\n  }\r\n}","/**\r\n * @import {\r\n *   Code,\r\n *   Effects,\r\n *   State,\r\n *   TokenType\r\n * } from 'micromark-util-types'\r\n */\r\n\r\nimport { factorySpace } from 'micromark-factory-space';\r\nimport { markdownLineEnding } from 'micromark-util-character';\r\n/**\r\n * Parse titles.\r\n *\r\n * ###### Examples\r\n *\r\n * ```markdown\r\n * \"a\"\r\n * 'b'\r\n * (c)\r\n * \"a\r\n * b\"\r\n * 'a\r\n *     b'\r\n * (a\\)b)\r\n * ```\r\n *\r\n * @param {Effects} effects\r\n *   Context.\r\n * @param {State} ok\r\n *   State switched to when successful.\r\n * @param {State} nok\r\n *   State switched to when unsuccessful.\r\n * @param {TokenType} type\r\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\r\n * @param {TokenType} markerType\r\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\r\n * @param {TokenType} stringType\r\n *   Type for the value (`a`).\r\n * @returns {State}\r\n *   Start state.\r\n */\r\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\r\n  /** @type {NonNullable<Code>} */\r\n  let marker;\r\n  return start;\r\n\r\n  /**\r\n   * Start of title.\r\n   *\r\n   * ```markdown\r\n   * > | \"a\"\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    if (code === 34 || code === 39 || code === 40) {\r\n      effects.enter(type);\r\n      effects.enter(markerType);\r\n      effects.consume(code);\r\n      effects.exit(markerType);\r\n      marker = code === 40 ? 41 : code;\r\n      return begin;\r\n    }\r\n    return nok(code);\r\n  }\r\n\r\n  /**\r\n   * After opening marker.\r\n   *\r\n   * This is also used at the closing marker.\r\n   *\r\n   * ```markdown\r\n   * > | \"a\"\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function begin(code) {\r\n    if (code === marker) {\r\n      effects.enter(markerType);\r\n      effects.consume(code);\r\n      effects.exit(markerType);\r\n      effects.exit(type);\r\n      return ok;\r\n    }\r\n    effects.enter(stringType);\r\n    return atBreak(code);\r\n  }\r\n\r\n  /**\r\n   * At something, before something else.\r\n   *\r\n   * ```markdown\r\n   * > | \"a\"\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function atBreak(code) {\r\n    if (code === marker) {\r\n      effects.exit(stringType);\r\n      return begin(marker);\r\n    }\r\n    if (code === null) {\r\n      return nok(code);\r\n    }\r\n\r\n    // Note: blank lines can’t exist in content.\r\n    if (markdownLineEnding(code)) {\r\n      // To do: use `space_or_tab_eol_with_options`, connect.\r\n      effects.enter(\"lineEnding\");\r\n      effects.consume(code);\r\n      effects.exit(\"lineEnding\");\r\n      return factorySpace(effects, atBreak, \"linePrefix\");\r\n    }\r\n    effects.enter(\"chunkString\", {\r\n      contentType: \"string\"\r\n    });\r\n    return inside(code);\r\n  }\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @type {State}\r\n   */\r\n  function inside(code) {\r\n    if (code === marker || code === null || markdownLineEnding(code)) {\r\n      effects.exit(\"chunkString\");\r\n      return atBreak(code);\r\n    }\r\n    effects.consume(code);\r\n    return code === 92 ? escape : inside;\r\n  }\r\n\r\n  /**\r\n   * After `\\`, at a special character.\r\n   *\r\n   * ```markdown\r\n   * > | \"a\\*b\"\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function escape(code) {\r\n    if (code === marker || code === 92) {\r\n      effects.consume(code);\r\n      return inside;\r\n    }\r\n    return inside(code);\r\n  }\r\n}","/**\r\n * @import {Effects, State} from 'micromark-util-types'\r\n */\r\n\r\nimport { factorySpace } from 'micromark-factory-space';\r\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\r\n/**\r\n * Parse spaces and tabs.\r\n *\r\n * There is no `nok` parameter:\r\n *\r\n * *   line endings or spaces in markdown are often optional, in which case this\r\n *     factory can be used and `ok` will be switched to whether spaces were found\r\n *     or not\r\n * *   one line ending or space can be detected with\r\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\r\n *\r\n * @param {Effects} effects\r\n *   Context.\r\n * @param {State} ok\r\n *   State switched to when successful.\r\n * @returns {State}\r\n *   Start state.\r\n */\r\nexport function factoryWhitespace(effects, ok) {\r\n  /** @type {boolean} */\r\n  let seen;\r\n  return start;\r\n\r\n  /** @type {State} */\r\n  function start(code) {\r\n    if (markdownLineEnding(code)) {\r\n      effects.enter(\"lineEnding\");\r\n      effects.consume(code);\r\n      effects.exit(\"lineEnding\");\r\n      seen = true;\r\n      return start;\r\n    }\r\n    if (markdownSpace(code)) {\r\n      return factorySpace(effects, start, seen ? \"linePrefix\" : \"lineSuffix\")(code);\r\n    }\r\n    return ok(code);\r\n  }\r\n}","/**\r\n * @import {\r\n *   Construct,\r\n *   State,\r\n *   TokenizeContext,\r\n *   Tokenizer\r\n * } from 'micromark-util-types'\r\n */\r\n\r\nimport { factoryDestination } from 'micromark-factory-destination';\r\nimport { factoryLabel } from 'micromark-factory-label';\r\nimport { factorySpace } from 'micromark-factory-space';\r\nimport { factoryTitle } from 'micromark-factory-title';\r\nimport { factoryWhitespace } from 'micromark-factory-whitespace';\r\nimport { markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\r\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\r\n/** @type {Construct} */\r\nexport const definition = {\r\n  name: 'definition',\r\n  tokenize: tokenizeDefinition\r\n};\r\n\r\n/** @type {Construct} */\r\nconst titleBefore = {\r\n  partial: true,\r\n  tokenize: tokenizeTitleBefore\r\n};\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n *   Context.\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeDefinition(effects, ok, nok) {\r\n  const self = this;\r\n  /** @type {string} */\r\n  let identifier;\r\n  return start;\r\n\r\n  /**\r\n   * At start of a definition.\r\n   *\r\n   * ```markdown\r\n   * > | [a]: b \"c\"\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    // Do not interrupt paragraphs (but do follow definitions).\r\n    // To do: do `interrupt` the way `markdown-rs` does.\r\n    // To do: parse whitespace the way `markdown-rs` does.\r\n    effects.enter(\"definition\");\r\n    return before(code);\r\n  }\r\n\r\n  /**\r\n   * After optional whitespace, at `[`.\r\n   *\r\n   * ```markdown\r\n   * > | [a]: b \"c\"\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function before(code) {\r\n    // To do: parse whitespace the way `markdown-rs` does.\r\n\r\n    return factoryLabel.call(self, effects, labelAfter,\r\n    // Note: we don’t need to reset the way `markdown-rs` does.\r\n    nok, \"definitionLabel\", \"definitionLabelMarker\", \"definitionLabelString\")(code);\r\n  }\r\n\r\n  /**\r\n   * After label.\r\n   *\r\n   * ```markdown\r\n   * > | [a]: b \"c\"\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function labelAfter(code) {\r\n    identifier = normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1));\r\n    if (code === 58) {\r\n      effects.enter(\"definitionMarker\");\r\n      effects.consume(code);\r\n      effects.exit(\"definitionMarker\");\r\n      return markerAfter;\r\n    }\r\n    return nok(code);\r\n  }\r\n\r\n  /**\r\n   * After marker.\r\n   *\r\n   * ```markdown\r\n   * > | [a]: b \"c\"\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function markerAfter(code) {\r\n    // Note: whitespace is optional.\r\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, destinationBefore)(code) : destinationBefore(code);\r\n  }\r\n\r\n  /**\r\n   * Before destination.\r\n   *\r\n   * ```markdown\r\n   * > | [a]: b \"c\"\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function destinationBefore(code) {\r\n    return factoryDestination(effects, destinationAfter,\r\n    // Note: we don’t need to reset the way `markdown-rs` does.\r\n    nok, \"definitionDestination\", \"definitionDestinationLiteral\", \"definitionDestinationLiteralMarker\", \"definitionDestinationRaw\", \"definitionDestinationString\")(code);\r\n  }\r\n\r\n  /**\r\n   * After destination.\r\n   *\r\n   * ```markdown\r\n   * > | [a]: b \"c\"\r\n   *           ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function destinationAfter(code) {\r\n    return effects.attempt(titleBefore, after, after)(code);\r\n  }\r\n\r\n  /**\r\n   * After definition.\r\n   *\r\n   * ```markdown\r\n   * > | [a]: b\r\n   *           ^\r\n   * > | [a]: b \"c\"\r\n   *               ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function after(code) {\r\n    return markdownSpace(code) ? factorySpace(effects, afterWhitespace, \"whitespace\")(code) : afterWhitespace(code);\r\n  }\r\n\r\n  /**\r\n   * After definition, after optional whitespace.\r\n   *\r\n   * ```markdown\r\n   * > | [a]: b\r\n   *           ^\r\n   * > | [a]: b \"c\"\r\n   *               ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function afterWhitespace(code) {\r\n    if (code === null || markdownLineEnding(code)) {\r\n      effects.exit(\"definition\");\r\n\r\n      // Note: we don’t care about uniqueness.\r\n      // It’s likely that that doesn’t happen very frequently.\r\n      // It is more likely that it wastes precious time.\r\n      self.parser.defined.push(identifier);\r\n\r\n      // To do: `markdown-rs` interrupt.\r\n      // // You’d be interrupting.\r\n      // tokenizer.interrupt = true\r\n      return ok(code);\r\n    }\r\n    return nok(code);\r\n  }\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n *   Context.\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeTitleBefore(effects, ok, nok) {\r\n  return titleBefore;\r\n\r\n  /**\r\n   * After destination, at whitespace.\r\n   *\r\n   * ```markdown\r\n   * > | [a]: b\r\n   *           ^\r\n   * > | [a]: b \"c\"\r\n   *           ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function titleBefore(code) {\r\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, beforeMarker)(code) : nok(code);\r\n  }\r\n\r\n  /**\r\n   * At title.\r\n   *\r\n   * ```markdown\r\n   *   | [a]: b\r\n   * > | \"c\"\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function beforeMarker(code) {\r\n    return factoryTitle(effects, titleAfter, nok, \"definitionTitle\", \"definitionTitleMarker\", \"definitionTitleString\")(code);\r\n  }\r\n\r\n  /**\r\n   * After title.\r\n   *\r\n   * ```markdown\r\n   * > | [a]: b \"c\"\r\n   *               ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function titleAfter(code) {\r\n    return markdownSpace(code) ? factorySpace(effects, titleAfterOptionalWhitespace, \"whitespace\")(code) : titleAfterOptionalWhitespace(code);\r\n  }\r\n\r\n  /**\r\n   * After title, after optional whitespace.\r\n   *\r\n   * ```markdown\r\n   * > | [a]: b \"c\"\r\n   *               ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function titleAfterOptionalWhitespace(code) {\r\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\r\n  }\r\n}","/**\r\n * @import {\r\n *   Construct,\r\n *   State,\r\n *   TokenizeContext,\r\n *   Tokenizer\r\n * } from 'micromark-util-types'\r\n */\r\n\r\nimport { markdownLineEnding } from 'micromark-util-character';\r\n/** @type {Construct} */\r\nexport const hardBreakEscape = {\r\n  name: 'hardBreakEscape',\r\n  tokenize: tokenizeHardBreakEscape\r\n};\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n *   Context.\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\r\n  return start;\r\n\r\n  /**\r\n   * Start of a hard break (escape).\r\n   *\r\n   * ```markdown\r\n   * > | a\\\r\n   *      ^\r\n   *   | b\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    effects.enter(\"hardBreakEscape\");\r\n    effects.consume(code);\r\n    return after;\r\n  }\r\n\r\n  /**\r\n   * After `\\`, at eol.\r\n   *\r\n   * ```markdown\r\n   * > | a\\\r\n   *       ^\r\n   *   | b\r\n   * ```\r\n   *\r\n   *  @type {State}\r\n   */\r\n  function after(code) {\r\n    if (markdownLineEnding(code)) {\r\n      effects.exit(\"hardBreakEscape\");\r\n      return ok(code);\r\n    }\r\n    return nok(code);\r\n  }\r\n}","/**\r\n * @import {\r\n *   Construct,\r\n *   Resolver,\r\n *   State,\r\n *   TokenizeContext,\r\n *   Tokenizer,\r\n *   Token\r\n * } from 'micromark-util-types'\r\n */\r\n\r\nimport { factorySpace } from 'micromark-factory-space';\r\nimport { markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\r\nimport { splice } from 'micromark-util-chunked';\r\n/** @type {Construct} */\r\nexport const headingAtx = {\r\n  name: 'headingAtx',\r\n  resolve: resolveHeadingAtx,\r\n  tokenize: tokenizeHeadingAtx\r\n};\r\n\r\n/** @type {Resolver} */\r\nfunction resolveHeadingAtx(events, context) {\r\n  let contentEnd = events.length - 2;\r\n  let contentStart = 3;\r\n  /** @type {Token} */\r\n  let content;\r\n  /** @type {Token} */\r\n  let text;\r\n\r\n  // Prefix whitespace, part of the opening.\r\n  if (events[contentStart][1].type === \"whitespace\") {\r\n    contentStart += 2;\r\n  }\r\n\r\n  // Suffix whitespace, part of the closing.\r\n  if (contentEnd - 2 > contentStart && events[contentEnd][1].type === \"whitespace\") {\r\n    contentEnd -= 2;\r\n  }\r\n  if (events[contentEnd][1].type === \"atxHeadingSequence\" && (contentStart === contentEnd - 1 || contentEnd - 4 > contentStart && events[contentEnd - 2][1].type === \"whitespace\")) {\r\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4;\r\n  }\r\n  if (contentEnd > contentStart) {\r\n    content = {\r\n      type: \"atxHeadingText\",\r\n      start: events[contentStart][1].start,\r\n      end: events[contentEnd][1].end\r\n    };\r\n    text = {\r\n      type: \"chunkText\",\r\n      start: events[contentStart][1].start,\r\n      end: events[contentEnd][1].end,\r\n      contentType: \"text\"\r\n    };\r\n    splice(events, contentStart, contentEnd - contentStart + 1, [['enter', content, context], ['enter', text, context], ['exit', text, context], ['exit', content, context]]);\r\n  }\r\n  return events;\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n *   Context.\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeHeadingAtx(effects, ok, nok) {\r\n  let size = 0;\r\n  return start;\r\n\r\n  /**\r\n   * Start of a heading (atx).\r\n   *\r\n   * ```markdown\r\n   * > | ## aa\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    // To do: parse indent like `markdown-rs`.\r\n    effects.enter(\"atxHeading\");\r\n    return before(code);\r\n  }\r\n\r\n  /**\r\n   * After optional whitespace, at `#`.\r\n   *\r\n   * ```markdown\r\n   * > | ## aa\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function before(code) {\r\n    effects.enter(\"atxHeadingSequence\");\r\n    return sequenceOpen(code);\r\n  }\r\n\r\n  /**\r\n   * In opening sequence.\r\n   *\r\n   * ```markdown\r\n   * > | ## aa\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function sequenceOpen(code) {\r\n    if (code === 35 && size++ < 6) {\r\n      effects.consume(code);\r\n      return sequenceOpen;\r\n    }\r\n\r\n    // Always at least one `#`.\r\n    if (code === null || markdownLineEndingOrSpace(code)) {\r\n      effects.exit(\"atxHeadingSequence\");\r\n      return atBreak(code);\r\n    }\r\n    return nok(code);\r\n  }\r\n\r\n  /**\r\n   * After something, before something else.\r\n   *\r\n   * ```markdown\r\n   * > | ## aa\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function atBreak(code) {\r\n    if (code === 35) {\r\n      effects.enter(\"atxHeadingSequence\");\r\n      return sequenceFurther(code);\r\n    }\r\n    if (code === null || markdownLineEnding(code)) {\r\n      effects.exit(\"atxHeading\");\r\n      // To do: interrupt like `markdown-rs`.\r\n      // // Feel free to interrupt.\r\n      // tokenizer.interrupt = false\r\n      return ok(code);\r\n    }\r\n    if (markdownSpace(code)) {\r\n      return factorySpace(effects, atBreak, \"whitespace\")(code);\r\n    }\r\n\r\n    // To do: generate `data` tokens, add the `text` token later.\r\n    // Needs edit map, see: `markdown.rs`.\r\n    effects.enter(\"atxHeadingText\");\r\n    return data(code);\r\n  }\r\n\r\n  /**\r\n   * In further sequence (after whitespace).\r\n   *\r\n   * Could be normal “visible” hashes in the heading or a final sequence.\r\n   *\r\n   * ```markdown\r\n   * > | ## aa ##\r\n   *           ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function sequenceFurther(code) {\r\n    if (code === 35) {\r\n      effects.consume(code);\r\n      return sequenceFurther;\r\n    }\r\n    effects.exit(\"atxHeadingSequence\");\r\n    return atBreak(code);\r\n  }\r\n\r\n  /**\r\n   * In text.\r\n   *\r\n   * ```markdown\r\n   * > | ## aa\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function data(code) {\r\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\r\n      effects.exit(\"atxHeadingText\");\r\n      return atBreak(code);\r\n    }\r\n    effects.consume(code);\r\n    return data;\r\n  }\r\n}","/**\r\n * List of lowercase HTML “block” tag names.\r\n *\r\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\r\n * 6).\r\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\r\n * strictly parsed.\r\n * For tag names not in this list, a more strict algorithm (condition 7) is used\r\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\r\n *\r\n * This is copied from:\r\n * <https://spec.commonmark.org/0.30/#html-blocks>.\r\n *\r\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\r\n */\r\nexport const htmlBlockNames = [\r\n  'address',\r\n  'article',\r\n  'aside',\r\n  'base',\r\n  'basefont',\r\n  'blockquote',\r\n  'body',\r\n  'caption',\r\n  'center',\r\n  'col',\r\n  'colgroup',\r\n  'dd',\r\n  'details',\r\n  'dialog',\r\n  'dir',\r\n  'div',\r\n  'dl',\r\n  'dt',\r\n  'fieldset',\r\n  'figcaption',\r\n  'figure',\r\n  'footer',\r\n  'form',\r\n  'frame',\r\n  'frameset',\r\n  'h1',\r\n  'h2',\r\n  'h3',\r\n  'h4',\r\n  'h5',\r\n  'h6',\r\n  'head',\r\n  'header',\r\n  'hr',\r\n  'html',\r\n  'iframe',\r\n  'legend',\r\n  'li',\r\n  'link',\r\n  'main',\r\n  'menu',\r\n  'menuitem',\r\n  'nav',\r\n  'noframes',\r\n  'ol',\r\n  'optgroup',\r\n  'option',\r\n  'p',\r\n  'param',\r\n  'search',\r\n  'section',\r\n  'summary',\r\n  'table',\r\n  'tbody',\r\n  'td',\r\n  'tfoot',\r\n  'th',\r\n  'thead',\r\n  'title',\r\n  'tr',\r\n  'track',\r\n  'ul'\r\n]\r\n\r\n/**\r\n * List of lowercase HTML “raw” tag names.\r\n *\r\n * The list, when parsing HTML (flow), results in HTML that can include lines\r\n * without exiting, until a closing tag also in this list is found (condition\r\n * 1).\r\n *\r\n * This module is copied from:\r\n * <https://spec.commonmark.org/0.30/#html-blocks>.\r\n *\r\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\r\n */\r\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\r\n","/**\r\n * @import {\r\n *   Code,\r\n *   Construct,\r\n *   Resolver,\r\n *   State,\r\n *   TokenizeContext,\r\n *   Tokenizer\r\n * } from 'micromark-util-types'\r\n */\r\n\r\nimport { asciiAlphanumeric, asciiAlpha, markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\r\nimport { htmlBlockNames, htmlRawNames } from 'micromark-util-html-tag-name';\r\nimport { blankLine } from './blank-line.js';\r\n\r\n/** @type {Construct} */\r\nexport const htmlFlow = {\r\n  concrete: true,\r\n  name: 'htmlFlow',\r\n  resolveTo: resolveToHtmlFlow,\r\n  tokenize: tokenizeHtmlFlow\r\n};\r\n\r\n/** @type {Construct} */\r\nconst blankLineBefore = {\r\n  partial: true,\r\n  tokenize: tokenizeBlankLineBefore\r\n};\r\nconst nonLazyContinuationStart = {\r\n  partial: true,\r\n  tokenize: tokenizeNonLazyContinuationStart\r\n};\r\n\r\n/** @type {Resolver} */\r\nfunction resolveToHtmlFlow(events) {\r\n  let index = events.length;\r\n  while (index--) {\r\n    if (events[index][0] === 'enter' && events[index][1].type === \"htmlFlow\") {\r\n      break;\r\n    }\r\n  }\r\n  if (index > 1 && events[index - 2][1].type === \"linePrefix\") {\r\n    // Add the prefix start to the HTML token.\r\n    events[index][1].start = events[index - 2][1].start;\r\n    // Add the prefix start to the HTML line token.\r\n    events[index + 1][1].start = events[index - 2][1].start;\r\n    // Remove the line prefix.\r\n    events.splice(index - 2, 2);\r\n  }\r\n  return events;\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n *   Context.\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeHtmlFlow(effects, ok, nok) {\r\n  const self = this;\r\n  /** @type {number} */\r\n  let marker;\r\n  /** @type {boolean} */\r\n  let closingTag;\r\n  /** @type {string} */\r\n  let buffer;\r\n  /** @type {number} */\r\n  let index;\r\n  /** @type {Code} */\r\n  let markerB;\r\n  return start;\r\n\r\n  /**\r\n   * Start of HTML (flow).\r\n   *\r\n   * ```markdown\r\n   * > | <x />\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    // To do: parse indent like `markdown-rs`.\r\n    return before(code);\r\n  }\r\n\r\n  /**\r\n   * At `<`, after optional whitespace.\r\n   *\r\n   * ```markdown\r\n   * > | <x />\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function before(code) {\r\n    effects.enter(\"htmlFlow\");\r\n    effects.enter(\"htmlFlowData\");\r\n    effects.consume(code);\r\n    return open;\r\n  }\r\n\r\n  /**\r\n   * After `<`, at tag name or other stuff.\r\n   *\r\n   * ```markdown\r\n   * > | <x />\r\n   *      ^\r\n   * > | <!doctype>\r\n   *      ^\r\n   * > | <!--xxx-->\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function open(code) {\r\n    if (code === 33) {\r\n      effects.consume(code);\r\n      return declarationOpen;\r\n    }\r\n    if (code === 47) {\r\n      effects.consume(code);\r\n      closingTag = true;\r\n      return tagCloseStart;\r\n    }\r\n    if (code === 63) {\r\n      effects.consume(code);\r\n      marker = 3;\r\n      // To do:\r\n      // tokenizer.concrete = true\r\n      // To do: use `markdown-rs` style interrupt.\r\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\r\n      // right now, so we do need to search for `>`, similar to declarations.\r\n      return self.interrupt ? ok : continuationDeclarationInside;\r\n    }\r\n\r\n    // ASCII alphabetical.\r\n    if (asciiAlpha(code)) {\r\n      // Always the case.\r\n      effects.consume(code);\r\n      buffer = String.fromCharCode(code);\r\n      return tagName;\r\n    }\r\n    return nok(code);\r\n  }\r\n\r\n  /**\r\n   * After `<!`, at declaration, comment, or CDATA.\r\n   *\r\n   * ```markdown\r\n   * > | <!doctype>\r\n   *       ^\r\n   * > | <!--xxx-->\r\n   *       ^\r\n   * > | <![CDATA[>&<]]>\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function declarationOpen(code) {\r\n    if (code === 45) {\r\n      effects.consume(code);\r\n      marker = 2;\r\n      return commentOpenInside;\r\n    }\r\n    if (code === 91) {\r\n      effects.consume(code);\r\n      marker = 5;\r\n      index = 0;\r\n      return cdataOpenInside;\r\n    }\r\n\r\n    // ASCII alphabetical.\r\n    if (asciiAlpha(code)) {\r\n      effects.consume(code);\r\n      marker = 4;\r\n      // // Do not form containers.\r\n      // tokenizer.concrete = true\r\n      return self.interrupt ? ok : continuationDeclarationInside;\r\n    }\r\n    return nok(code);\r\n  }\r\n\r\n  /**\r\n   * After `<!-`, inside a comment, at another `-`.\r\n   *\r\n   * ```markdown\r\n   * > | <!--xxx-->\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function commentOpenInside(code) {\r\n    if (code === 45) {\r\n      effects.consume(code);\r\n      // // Do not form containers.\r\n      // tokenizer.concrete = true\r\n      return self.interrupt ? ok : continuationDeclarationInside;\r\n    }\r\n    return nok(code);\r\n  }\r\n\r\n  /**\r\n   * After `<![`, inside CDATA, expecting `CDATA[`.\r\n   *\r\n   * ```markdown\r\n   * > | <![CDATA[>&<]]>\r\n   *        ^^^^^^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function cdataOpenInside(code) {\r\n    const value = \"CDATA[\";\r\n    if (code === value.charCodeAt(index++)) {\r\n      effects.consume(code);\r\n      if (index === value.length) {\r\n        // // Do not form containers.\r\n        // tokenizer.concrete = true\r\n        return self.interrupt ? ok : continuation;\r\n      }\r\n      return cdataOpenInside;\r\n    }\r\n    return nok(code);\r\n  }\r\n\r\n  /**\r\n   * After `</`, in closing tag, at tag name.\r\n   *\r\n   * ```markdown\r\n   * > | </x>\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function tagCloseStart(code) {\r\n    if (asciiAlpha(code)) {\r\n      // Always the case.\r\n      effects.consume(code);\r\n      buffer = String.fromCharCode(code);\r\n      return tagName;\r\n    }\r\n    return nok(code);\r\n  }\r\n\r\n  /**\r\n   * In tag name.\r\n   *\r\n   * ```markdown\r\n   * > | <ab>\r\n   *      ^^\r\n   * > | </ab>\r\n   *       ^^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function tagName(code) {\r\n    if (code === null || code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\r\n      const slash = code === 47;\r\n      const name = buffer.toLowerCase();\r\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\r\n        marker = 1;\r\n        // // Do not form containers.\r\n        // tokenizer.concrete = true\r\n        return self.interrupt ? ok(code) : continuation(code);\r\n      }\r\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\r\n        marker = 6;\r\n        if (slash) {\r\n          effects.consume(code);\r\n          return basicSelfClosing;\r\n        }\r\n\r\n        // // Do not form containers.\r\n        // tokenizer.concrete = true\r\n        return self.interrupt ? ok(code) : continuation(code);\r\n      }\r\n      marker = 7;\r\n      // Do not support complete HTML when interrupting.\r\n      return self.interrupt && !self.parser.lazy[self.now().line] ? nok(code) : closingTag ? completeClosingTagAfter(code) : completeAttributeNameBefore(code);\r\n    }\r\n\r\n    // ASCII alphanumerical and `-`.\r\n    if (code === 45 || asciiAlphanumeric(code)) {\r\n      effects.consume(code);\r\n      buffer += String.fromCharCode(code);\r\n      return tagName;\r\n    }\r\n    return nok(code);\r\n  }\r\n\r\n  /**\r\n   * After closing slash of a basic tag name.\r\n   *\r\n   * ```markdown\r\n   * > | <div/>\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function basicSelfClosing(code) {\r\n    if (code === 62) {\r\n      effects.consume(code);\r\n      // // Do not form containers.\r\n      // tokenizer.concrete = true\r\n      return self.interrupt ? ok : continuation;\r\n    }\r\n    return nok(code);\r\n  }\r\n\r\n  /**\r\n   * After closing slash of a complete tag name.\r\n   *\r\n   * ```markdown\r\n   * > | <x/>\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function completeClosingTagAfter(code) {\r\n    if (markdownSpace(code)) {\r\n      effects.consume(code);\r\n      return completeClosingTagAfter;\r\n    }\r\n    return completeEnd(code);\r\n  }\r\n\r\n  /**\r\n   * At an attribute name.\r\n   *\r\n   * At first, this state is used after a complete tag name, after whitespace,\r\n   * where it expects optional attributes or the end of the tag.\r\n   * It is also reused after attributes, when expecting more optional\r\n   * attributes.\r\n   *\r\n   * ```markdown\r\n   * > | <a />\r\n   *        ^\r\n   * > | <a :b>\r\n   *        ^\r\n   * > | <a _b>\r\n   *        ^\r\n   * > | <a b>\r\n   *        ^\r\n   * > | <a >\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function completeAttributeNameBefore(code) {\r\n    if (code === 47) {\r\n      effects.consume(code);\r\n      return completeEnd;\r\n    }\r\n\r\n    // ASCII alphanumerical and `:` and `_`.\r\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\r\n      effects.consume(code);\r\n      return completeAttributeName;\r\n    }\r\n    if (markdownSpace(code)) {\r\n      effects.consume(code);\r\n      return completeAttributeNameBefore;\r\n    }\r\n    return completeEnd(code);\r\n  }\r\n\r\n  /**\r\n   * In attribute name.\r\n   *\r\n   * ```markdown\r\n   * > | <a :b>\r\n   *         ^\r\n   * > | <a _b>\r\n   *         ^\r\n   * > | <a b>\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function completeAttributeName(code) {\r\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\r\n    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {\r\n      effects.consume(code);\r\n      return completeAttributeName;\r\n    }\r\n    return completeAttributeNameAfter(code);\r\n  }\r\n\r\n  /**\r\n   * After attribute name, at an optional initializer, the end of the tag, or\r\n   * whitespace.\r\n   *\r\n   * ```markdown\r\n   * > | <a b>\r\n   *         ^\r\n   * > | <a b=c>\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function completeAttributeNameAfter(code) {\r\n    if (code === 61) {\r\n      effects.consume(code);\r\n      return completeAttributeValueBefore;\r\n    }\r\n    if (markdownSpace(code)) {\r\n      effects.consume(code);\r\n      return completeAttributeNameAfter;\r\n    }\r\n    return completeAttributeNameBefore(code);\r\n  }\r\n\r\n  /**\r\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\r\n   * whitespace.\r\n   *\r\n   * ```markdown\r\n   * > | <a b=c>\r\n   *          ^\r\n   * > | <a b=\"c\">\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function completeAttributeValueBefore(code) {\r\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\r\n      return nok(code);\r\n    }\r\n    if (code === 34 || code === 39) {\r\n      effects.consume(code);\r\n      markerB = code;\r\n      return completeAttributeValueQuoted;\r\n    }\r\n    if (markdownSpace(code)) {\r\n      effects.consume(code);\r\n      return completeAttributeValueBefore;\r\n    }\r\n    return completeAttributeValueUnquoted(code);\r\n  }\r\n\r\n  /**\r\n   * In double or single quoted attribute value.\r\n   *\r\n   * ```markdown\r\n   * > | <a b=\"c\">\r\n   *           ^\r\n   * > | <a b='c'>\r\n   *           ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function completeAttributeValueQuoted(code) {\r\n    if (code === markerB) {\r\n      effects.consume(code);\r\n      markerB = null;\r\n      return completeAttributeValueQuotedAfter;\r\n    }\r\n    if (code === null || markdownLineEnding(code)) {\r\n      return nok(code);\r\n    }\r\n    effects.consume(code);\r\n    return completeAttributeValueQuoted;\r\n  }\r\n\r\n  /**\r\n   * In unquoted attribute value.\r\n   *\r\n   * ```markdown\r\n   * > | <a b=c>\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function completeAttributeValueUnquoted(code) {\r\n    if (code === null || code === 34 || code === 39 || code === 47 || code === 60 || code === 61 || code === 62 || code === 96 || markdownLineEndingOrSpace(code)) {\r\n      return completeAttributeNameAfter(code);\r\n    }\r\n    effects.consume(code);\r\n    return completeAttributeValueUnquoted;\r\n  }\r\n\r\n  /**\r\n   * After double or single quoted attribute value, before whitespace or the\r\n   * end of the tag.\r\n   *\r\n   * ```markdown\r\n   * > | <a b=\"c\">\r\n   *            ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function completeAttributeValueQuotedAfter(code) {\r\n    if (code === 47 || code === 62 || markdownSpace(code)) {\r\n      return completeAttributeNameBefore(code);\r\n    }\r\n    return nok(code);\r\n  }\r\n\r\n  /**\r\n   * In certain circumstances of a complete tag where only an `>` is allowed.\r\n   *\r\n   * ```markdown\r\n   * > | <a b=\"c\">\r\n   *             ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function completeEnd(code) {\r\n    if (code === 62) {\r\n      effects.consume(code);\r\n      return completeAfter;\r\n    }\r\n    return nok(code);\r\n  }\r\n\r\n  /**\r\n   * After `>` in a complete tag.\r\n   *\r\n   * ```markdown\r\n   * > | <x>\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function completeAfter(code) {\r\n    if (code === null || markdownLineEnding(code)) {\r\n      // // Do not form containers.\r\n      // tokenizer.concrete = true\r\n      return continuation(code);\r\n    }\r\n    if (markdownSpace(code)) {\r\n      effects.consume(code);\r\n      return completeAfter;\r\n    }\r\n    return nok(code);\r\n  }\r\n\r\n  /**\r\n   * In continuation of any HTML kind.\r\n   *\r\n   * ```markdown\r\n   * > | <!--xxx-->\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function continuation(code) {\r\n    if (code === 45 && marker === 2) {\r\n      effects.consume(code);\r\n      return continuationCommentInside;\r\n    }\r\n    if (code === 60 && marker === 1) {\r\n      effects.consume(code);\r\n      return continuationRawTagOpen;\r\n    }\r\n    if (code === 62 && marker === 4) {\r\n      effects.consume(code);\r\n      return continuationClose;\r\n    }\r\n    if (code === 63 && marker === 3) {\r\n      effects.consume(code);\r\n      return continuationDeclarationInside;\r\n    }\r\n    if (code === 93 && marker === 5) {\r\n      effects.consume(code);\r\n      return continuationCdataInside;\r\n    }\r\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\r\n      effects.exit(\"htmlFlowData\");\r\n      return effects.check(blankLineBefore, continuationAfter, continuationStart)(code);\r\n    }\r\n    if (code === null || markdownLineEnding(code)) {\r\n      effects.exit(\"htmlFlowData\");\r\n      return continuationStart(code);\r\n    }\r\n    effects.consume(code);\r\n    return continuation;\r\n  }\r\n\r\n  /**\r\n   * In continuation, at eol.\r\n   *\r\n   * ```markdown\r\n   * > | <x>\r\n   *        ^\r\n   *   | asd\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function continuationStart(code) {\r\n    return effects.check(nonLazyContinuationStart, continuationStartNonLazy, continuationAfter)(code);\r\n  }\r\n\r\n  /**\r\n   * In continuation, at eol, before non-lazy content.\r\n   *\r\n   * ```markdown\r\n   * > | <x>\r\n   *        ^\r\n   *   | asd\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function continuationStartNonLazy(code) {\r\n    effects.enter(\"lineEnding\");\r\n    effects.consume(code);\r\n    effects.exit(\"lineEnding\");\r\n    return continuationBefore;\r\n  }\r\n\r\n  /**\r\n   * In continuation, before non-lazy content.\r\n   *\r\n   * ```markdown\r\n   *   | <x>\r\n   * > | asd\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function continuationBefore(code) {\r\n    if (code === null || markdownLineEnding(code)) {\r\n      return continuationStart(code);\r\n    }\r\n    effects.enter(\"htmlFlowData\");\r\n    return continuation(code);\r\n  }\r\n\r\n  /**\r\n   * In comment continuation, after one `-`, expecting another.\r\n   *\r\n   * ```markdown\r\n   * > | <!--xxx-->\r\n   *             ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function continuationCommentInside(code) {\r\n    if (code === 45) {\r\n      effects.consume(code);\r\n      return continuationDeclarationInside;\r\n    }\r\n    return continuation(code);\r\n  }\r\n\r\n  /**\r\n   * In raw continuation, after `<`, at `/`.\r\n   *\r\n   * ```markdown\r\n   * > | <script>console.log(1)</script>\r\n   *                            ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function continuationRawTagOpen(code) {\r\n    if (code === 47) {\r\n      effects.consume(code);\r\n      buffer = '';\r\n      return continuationRawEndTag;\r\n    }\r\n    return continuation(code);\r\n  }\r\n\r\n  /**\r\n   * In raw continuation, after `</`, in a raw tag name.\r\n   *\r\n   * ```markdown\r\n   * > | <script>console.log(1)</script>\r\n   *                             ^^^^^^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function continuationRawEndTag(code) {\r\n    if (code === 62) {\r\n      const name = buffer.toLowerCase();\r\n      if (htmlRawNames.includes(name)) {\r\n        effects.consume(code);\r\n        return continuationClose;\r\n      }\r\n      return continuation(code);\r\n    }\r\n    if (asciiAlpha(code) && buffer.length < 8) {\r\n      // Always the case.\r\n      effects.consume(code);\r\n      buffer += String.fromCharCode(code);\r\n      return continuationRawEndTag;\r\n    }\r\n    return continuation(code);\r\n  }\r\n\r\n  /**\r\n   * In cdata continuation, after `]`, expecting `]>`.\r\n   *\r\n   * ```markdown\r\n   * > | <![CDATA[>&<]]>\r\n   *                  ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function continuationCdataInside(code) {\r\n    if (code === 93) {\r\n      effects.consume(code);\r\n      return continuationDeclarationInside;\r\n    }\r\n    return continuation(code);\r\n  }\r\n\r\n  /**\r\n   * In declaration or instruction continuation, at `>`.\r\n   *\r\n   * ```markdown\r\n   * > | <!-->\r\n   *         ^\r\n   * > | <?>\r\n   *       ^\r\n   * > | <!q>\r\n   *        ^\r\n   * > | <!--ab-->\r\n   *             ^\r\n   * > | <![CDATA[>&<]]>\r\n   *                   ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function continuationDeclarationInside(code) {\r\n    if (code === 62) {\r\n      effects.consume(code);\r\n      return continuationClose;\r\n    }\r\n\r\n    // More dashes.\r\n    if (code === 45 && marker === 2) {\r\n      effects.consume(code);\r\n      return continuationDeclarationInside;\r\n    }\r\n    return continuation(code);\r\n  }\r\n\r\n  /**\r\n   * In closed continuation: everything we get until the eol/eof is part of it.\r\n   *\r\n   * ```markdown\r\n   * > | <!doctype>\r\n   *               ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function continuationClose(code) {\r\n    if (code === null || markdownLineEnding(code)) {\r\n      effects.exit(\"htmlFlowData\");\r\n      return continuationAfter(code);\r\n    }\r\n    effects.consume(code);\r\n    return continuationClose;\r\n  }\r\n\r\n  /**\r\n   * Done.\r\n   *\r\n   * ```markdown\r\n   * > | <!doctype>\r\n   *               ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function continuationAfter(code) {\r\n    effects.exit(\"htmlFlow\");\r\n    // // Feel free to interrupt.\r\n    // tokenizer.interrupt = false\r\n    // // No longer concrete.\r\n    // tokenizer.concrete = false\r\n    return ok(code);\r\n  }\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n *   Context.\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\r\n  const self = this;\r\n  return start;\r\n\r\n  /**\r\n   * At eol, before continuation.\r\n   *\r\n   * ```markdown\r\n   * > | * ```js\r\n   *            ^\r\n   *   | b\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    if (markdownLineEnding(code)) {\r\n      effects.enter(\"lineEnding\");\r\n      effects.consume(code);\r\n      effects.exit(\"lineEnding\");\r\n      return after;\r\n    }\r\n    return nok(code);\r\n  }\r\n\r\n  /**\r\n   * A continuation.\r\n   *\r\n   * ```markdown\r\n   *   | * ```js\r\n   * > | b\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function after(code) {\r\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\r\n  }\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n *   Context.\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\r\n  return start;\r\n\r\n  /**\r\n   * Before eol, expecting blank line.\r\n   *\r\n   * ```markdown\r\n   * > | <div>\r\n   *          ^\r\n   *   |\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    effects.enter(\"lineEnding\");\r\n    effects.consume(code);\r\n    effects.exit(\"lineEnding\");\r\n    return effects.attempt(blankLine, ok, nok);\r\n  }\r\n}","/**\r\n * @import {\r\n *   Code,\r\n *   Construct,\r\n *   State,\r\n *   TokenizeContext,\r\n *   Tokenizer\r\n * } from 'micromark-util-types'\r\n */\r\n\r\nimport { factorySpace } from 'micromark-factory-space';\r\nimport { asciiAlphanumeric, asciiAlpha, markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\r\n/** @type {Construct} */\r\nexport const htmlText = {\r\n  name: 'htmlText',\r\n  tokenize: tokenizeHtmlText\r\n};\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n *   Context.\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeHtmlText(effects, ok, nok) {\r\n  const self = this;\r\n  /** @type {NonNullable<Code> | undefined} */\r\n  let marker;\r\n  /** @type {number} */\r\n  let index;\r\n  /** @type {State} */\r\n  let returnState;\r\n  return start;\r\n\r\n  /**\r\n   * Start of HTML (text).\r\n   *\r\n   * ```markdown\r\n   * > | a <b> c\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    effects.enter(\"htmlText\");\r\n    effects.enter(\"htmlTextData\");\r\n    effects.consume(code);\r\n    return open;\r\n  }\r\n\r\n  /**\r\n   * After `<`, at tag name or other stuff.\r\n   *\r\n   * ```markdown\r\n   * > | a <b> c\r\n   *        ^\r\n   * > | a <!doctype> c\r\n   *        ^\r\n   * > | a <!--b--> c\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function open(code) {\r\n    if (code === 33) {\r\n      effects.consume(code);\r\n      return declarationOpen;\r\n    }\r\n    if (code === 47) {\r\n      effects.consume(code);\r\n      return tagCloseStart;\r\n    }\r\n    if (code === 63) {\r\n      effects.consume(code);\r\n      return instruction;\r\n    }\r\n\r\n    // ASCII alphabetical.\r\n    if (asciiAlpha(code)) {\r\n      effects.consume(code);\r\n      return tagOpen;\r\n    }\r\n    return nok(code);\r\n  }\r\n\r\n  /**\r\n   * After `<!`, at declaration, comment, or CDATA.\r\n   *\r\n   * ```markdown\r\n   * > | a <!doctype> c\r\n   *         ^\r\n   * > | a <!--b--> c\r\n   *         ^\r\n   * > | a <![CDATA[>&<]]> c\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function declarationOpen(code) {\r\n    if (code === 45) {\r\n      effects.consume(code);\r\n      return commentOpenInside;\r\n    }\r\n    if (code === 91) {\r\n      effects.consume(code);\r\n      index = 0;\r\n      return cdataOpenInside;\r\n    }\r\n    if (asciiAlpha(code)) {\r\n      effects.consume(code);\r\n      return declaration;\r\n    }\r\n    return nok(code);\r\n  }\r\n\r\n  /**\r\n   * In a comment, after `<!-`, at another `-`.\r\n   *\r\n   * ```markdown\r\n   * > | a <!--b--> c\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function commentOpenInside(code) {\r\n    if (code === 45) {\r\n      effects.consume(code);\r\n      return commentEnd;\r\n    }\r\n    return nok(code);\r\n  }\r\n\r\n  /**\r\n   * In comment.\r\n   *\r\n   * ```markdown\r\n   * > | a <!--b--> c\r\n   *           ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function comment(code) {\r\n    if (code === null) {\r\n      return nok(code);\r\n    }\r\n    if (code === 45) {\r\n      effects.consume(code);\r\n      return commentClose;\r\n    }\r\n    if (markdownLineEnding(code)) {\r\n      returnState = comment;\r\n      return lineEndingBefore(code);\r\n    }\r\n    effects.consume(code);\r\n    return comment;\r\n  }\r\n\r\n  /**\r\n   * In comment, after `-`.\r\n   *\r\n   * ```markdown\r\n   * > | a <!--b--> c\r\n   *             ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function commentClose(code) {\r\n    if (code === 45) {\r\n      effects.consume(code);\r\n      return commentEnd;\r\n    }\r\n    return comment(code);\r\n  }\r\n\r\n  /**\r\n   * In comment, after `--`.\r\n   *\r\n   * ```markdown\r\n   * > | a <!--b--> c\r\n   *              ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function commentEnd(code) {\r\n    return code === 62 ? end(code) : code === 45 ? commentClose(code) : comment(code);\r\n  }\r\n\r\n  /**\r\n   * After `<![`, in CDATA, expecting `CDATA[`.\r\n   *\r\n   * ```markdown\r\n   * > | a <![CDATA[>&<]]> b\r\n   *          ^^^^^^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function cdataOpenInside(code) {\r\n    const value = \"CDATA[\";\r\n    if (code === value.charCodeAt(index++)) {\r\n      effects.consume(code);\r\n      return index === value.length ? cdata : cdataOpenInside;\r\n    }\r\n    return nok(code);\r\n  }\r\n\r\n  /**\r\n   * In CDATA.\r\n   *\r\n   * ```markdown\r\n   * > | a <![CDATA[>&<]]> b\r\n   *                ^^^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function cdata(code) {\r\n    if (code === null) {\r\n      return nok(code);\r\n    }\r\n    if (code === 93) {\r\n      effects.consume(code);\r\n      return cdataClose;\r\n    }\r\n    if (markdownLineEnding(code)) {\r\n      returnState = cdata;\r\n      return lineEndingBefore(code);\r\n    }\r\n    effects.consume(code);\r\n    return cdata;\r\n  }\r\n\r\n  /**\r\n   * In CDATA, after `]`, at another `]`.\r\n   *\r\n   * ```markdown\r\n   * > | a <![CDATA[>&<]]> b\r\n   *                    ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function cdataClose(code) {\r\n    if (code === 93) {\r\n      effects.consume(code);\r\n      return cdataEnd;\r\n    }\r\n    return cdata(code);\r\n  }\r\n\r\n  /**\r\n   * In CDATA, after `]]`, at `>`.\r\n   *\r\n   * ```markdown\r\n   * > | a <![CDATA[>&<]]> b\r\n   *                     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function cdataEnd(code) {\r\n    if (code === 62) {\r\n      return end(code);\r\n    }\r\n    if (code === 93) {\r\n      effects.consume(code);\r\n      return cdataEnd;\r\n    }\r\n    return cdata(code);\r\n  }\r\n\r\n  /**\r\n   * In declaration.\r\n   *\r\n   * ```markdown\r\n   * > | a <!b> c\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function declaration(code) {\r\n    if (code === null || code === 62) {\r\n      return end(code);\r\n    }\r\n    if (markdownLineEnding(code)) {\r\n      returnState = declaration;\r\n      return lineEndingBefore(code);\r\n    }\r\n    effects.consume(code);\r\n    return declaration;\r\n  }\r\n\r\n  /**\r\n   * In instruction.\r\n   *\r\n   * ```markdown\r\n   * > | a <?b?> c\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function instruction(code) {\r\n    if (code === null) {\r\n      return nok(code);\r\n    }\r\n    if (code === 63) {\r\n      effects.consume(code);\r\n      return instructionClose;\r\n    }\r\n    if (markdownLineEnding(code)) {\r\n      returnState = instruction;\r\n      return lineEndingBefore(code);\r\n    }\r\n    effects.consume(code);\r\n    return instruction;\r\n  }\r\n\r\n  /**\r\n   * In instruction, after `?`, at `>`.\r\n   *\r\n   * ```markdown\r\n   * > | a <?b?> c\r\n   *           ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function instructionClose(code) {\r\n    return code === 62 ? end(code) : instruction(code);\r\n  }\r\n\r\n  /**\r\n   * After `</`, in closing tag, at tag name.\r\n   *\r\n   * ```markdown\r\n   * > | a </b> c\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function tagCloseStart(code) {\r\n    // ASCII alphabetical.\r\n    if (asciiAlpha(code)) {\r\n      effects.consume(code);\r\n      return tagClose;\r\n    }\r\n    return nok(code);\r\n  }\r\n\r\n  /**\r\n   * After `</x`, in a tag name.\r\n   *\r\n   * ```markdown\r\n   * > | a </b> c\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function tagClose(code) {\r\n    // ASCII alphanumerical and `-`.\r\n    if (code === 45 || asciiAlphanumeric(code)) {\r\n      effects.consume(code);\r\n      return tagClose;\r\n    }\r\n    return tagCloseBetween(code);\r\n  }\r\n\r\n  /**\r\n   * In closing tag, after tag name.\r\n   *\r\n   * ```markdown\r\n   * > | a </b> c\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function tagCloseBetween(code) {\r\n    if (markdownLineEnding(code)) {\r\n      returnState = tagCloseBetween;\r\n      return lineEndingBefore(code);\r\n    }\r\n    if (markdownSpace(code)) {\r\n      effects.consume(code);\r\n      return tagCloseBetween;\r\n    }\r\n    return end(code);\r\n  }\r\n\r\n  /**\r\n   * After `<x`, in opening tag name.\r\n   *\r\n   * ```markdown\r\n   * > | a <b> c\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function tagOpen(code) {\r\n    // ASCII alphanumerical and `-`.\r\n    if (code === 45 || asciiAlphanumeric(code)) {\r\n      effects.consume(code);\r\n      return tagOpen;\r\n    }\r\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\r\n      return tagOpenBetween(code);\r\n    }\r\n    return nok(code);\r\n  }\r\n\r\n  /**\r\n   * In opening tag, after tag name.\r\n   *\r\n   * ```markdown\r\n   * > | a <b> c\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function tagOpenBetween(code) {\r\n    if (code === 47) {\r\n      effects.consume(code);\r\n      return end;\r\n    }\r\n\r\n    // ASCII alphabetical and `:` and `_`.\r\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\r\n      effects.consume(code);\r\n      return tagOpenAttributeName;\r\n    }\r\n    if (markdownLineEnding(code)) {\r\n      returnState = tagOpenBetween;\r\n      return lineEndingBefore(code);\r\n    }\r\n    if (markdownSpace(code)) {\r\n      effects.consume(code);\r\n      return tagOpenBetween;\r\n    }\r\n    return end(code);\r\n  }\r\n\r\n  /**\r\n   * In attribute name.\r\n   *\r\n   * ```markdown\r\n   * > | a <b c> d\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function tagOpenAttributeName(code) {\r\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\r\n    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {\r\n      effects.consume(code);\r\n      return tagOpenAttributeName;\r\n    }\r\n    return tagOpenAttributeNameAfter(code);\r\n  }\r\n\r\n  /**\r\n   * After attribute name, before initializer, the end of the tag, or\r\n   * whitespace.\r\n   *\r\n   * ```markdown\r\n   * > | a <b c> d\r\n   *           ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function tagOpenAttributeNameAfter(code) {\r\n    if (code === 61) {\r\n      effects.consume(code);\r\n      return tagOpenAttributeValueBefore;\r\n    }\r\n    if (markdownLineEnding(code)) {\r\n      returnState = tagOpenAttributeNameAfter;\r\n      return lineEndingBefore(code);\r\n    }\r\n    if (markdownSpace(code)) {\r\n      effects.consume(code);\r\n      return tagOpenAttributeNameAfter;\r\n    }\r\n    return tagOpenBetween(code);\r\n  }\r\n\r\n  /**\r\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\r\n   * whitespace.\r\n   *\r\n   * ```markdown\r\n   * > | a <b c=d> e\r\n   *            ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function tagOpenAttributeValueBefore(code) {\r\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\r\n      return nok(code);\r\n    }\r\n    if (code === 34 || code === 39) {\r\n      effects.consume(code);\r\n      marker = code;\r\n      return tagOpenAttributeValueQuoted;\r\n    }\r\n    if (markdownLineEnding(code)) {\r\n      returnState = tagOpenAttributeValueBefore;\r\n      return lineEndingBefore(code);\r\n    }\r\n    if (markdownSpace(code)) {\r\n      effects.consume(code);\r\n      return tagOpenAttributeValueBefore;\r\n    }\r\n    effects.consume(code);\r\n    return tagOpenAttributeValueUnquoted;\r\n  }\r\n\r\n  /**\r\n   * In double or single quoted attribute value.\r\n   *\r\n   * ```markdown\r\n   * > | a <b c=\"d\"> e\r\n   *             ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function tagOpenAttributeValueQuoted(code) {\r\n    if (code === marker) {\r\n      effects.consume(code);\r\n      marker = undefined;\r\n      return tagOpenAttributeValueQuotedAfter;\r\n    }\r\n    if (code === null) {\r\n      return nok(code);\r\n    }\r\n    if (markdownLineEnding(code)) {\r\n      returnState = tagOpenAttributeValueQuoted;\r\n      return lineEndingBefore(code);\r\n    }\r\n    effects.consume(code);\r\n    return tagOpenAttributeValueQuoted;\r\n  }\r\n\r\n  /**\r\n   * In unquoted attribute value.\r\n   *\r\n   * ```markdown\r\n   * > | a <b c=d> e\r\n   *            ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function tagOpenAttributeValueUnquoted(code) {\r\n    if (code === null || code === 34 || code === 39 || code === 60 || code === 61 || code === 96) {\r\n      return nok(code);\r\n    }\r\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\r\n      return tagOpenBetween(code);\r\n    }\r\n    effects.consume(code);\r\n    return tagOpenAttributeValueUnquoted;\r\n  }\r\n\r\n  /**\r\n   * After double or single quoted attribute value, before whitespace or the end\r\n   * of the tag.\r\n   *\r\n   * ```markdown\r\n   * > | a <b c=\"d\"> e\r\n   *               ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function tagOpenAttributeValueQuotedAfter(code) {\r\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\r\n      return tagOpenBetween(code);\r\n    }\r\n    return nok(code);\r\n  }\r\n\r\n  /**\r\n   * In certain circumstances of a tag where only an `>` is allowed.\r\n   *\r\n   * ```markdown\r\n   * > | a <b c=\"d\"> e\r\n   *               ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function end(code) {\r\n    if (code === 62) {\r\n      effects.consume(code);\r\n      effects.exit(\"htmlTextData\");\r\n      effects.exit(\"htmlText\");\r\n      return ok;\r\n    }\r\n    return nok(code);\r\n  }\r\n\r\n  /**\r\n   * At eol.\r\n   *\r\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\r\n   * > empty tokens.\r\n   *\r\n   * ```markdown\r\n   * > | a <!--a\r\n   *            ^\r\n   *   | b-->\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function lineEndingBefore(code) {\r\n    effects.exit(\"htmlTextData\");\r\n    effects.enter(\"lineEnding\");\r\n    effects.consume(code);\r\n    effects.exit(\"lineEnding\");\r\n    return lineEndingAfter;\r\n  }\r\n\r\n  /**\r\n   * After eol, at optional whitespace.\r\n   *\r\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\r\n   * > empty tokens.\r\n   *\r\n   * ```markdown\r\n   *   | a <!--a\r\n   * > | b-->\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function lineEndingAfter(code) {\r\n    // Always populated by defaults.\r\n\r\n    return markdownSpace(code) ? factorySpace(effects, lineEndingAfterPrefix, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code) : lineEndingAfterPrefix(code);\r\n  }\r\n\r\n  /**\r\n   * After eol, after optional whitespace.\r\n   *\r\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\r\n   * > empty tokens.\r\n   *\r\n   * ```markdown\r\n   *   | a <!--a\r\n   * > | b-->\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function lineEndingAfterPrefix(code) {\r\n    effects.enter(\"htmlTextData\");\r\n    return returnState(code);\r\n  }\r\n}","/**\r\n * @import {\r\n *   Construct,\r\n *   Event,\r\n *   Resolver,\r\n *   State,\r\n *   TokenizeContext,\r\n *   Tokenizer,\r\n *   Token\r\n * } from 'micromark-util-types'\r\n */\r\n\r\nimport { factoryDestination } from 'micromark-factory-destination';\r\nimport { factoryLabel } from 'micromark-factory-label';\r\nimport { factoryTitle } from 'micromark-factory-title';\r\nimport { factoryWhitespace } from 'micromark-factory-whitespace';\r\nimport { markdownLineEndingOrSpace } from 'micromark-util-character';\r\nimport { push, splice } from 'micromark-util-chunked';\r\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\r\nimport { resolveAll } from 'micromark-util-resolve-all';\r\n/** @type {Construct} */\r\nexport const labelEnd = {\r\n  name: 'labelEnd',\r\n  resolveAll: resolveAllLabelEnd,\r\n  resolveTo: resolveToLabelEnd,\r\n  tokenize: tokenizeLabelEnd\r\n};\r\n\r\n/** @type {Construct} */\r\nconst resourceConstruct = {\r\n  tokenize: tokenizeResource\r\n};\r\n/** @type {Construct} */\r\nconst referenceFullConstruct = {\r\n  tokenize: tokenizeReferenceFull\r\n};\r\n/** @type {Construct} */\r\nconst referenceCollapsedConstruct = {\r\n  tokenize: tokenizeReferenceCollapsed\r\n};\r\n\r\n/** @type {Resolver} */\r\nfunction resolveAllLabelEnd(events) {\r\n  let index = -1;\r\n  /** @type {Array<Event>} */\r\n  const newEvents = [];\r\n  while (++index < events.length) {\r\n    const token = events[index][1];\r\n    newEvents.push(events[index]);\r\n    if (token.type === \"labelImage\" || token.type === \"labelLink\" || token.type === \"labelEnd\") {\r\n      // Remove the marker.\r\n      const offset = token.type === \"labelImage\" ? 4 : 2;\r\n      token.type = \"data\";\r\n      index += offset;\r\n    }\r\n  }\r\n\r\n  // If the events are equal, we don't have to copy newEvents to events\r\n  if (events.length !== newEvents.length) {\r\n    splice(events, 0, events.length, newEvents);\r\n  }\r\n  return events;\r\n}\r\n\r\n/** @type {Resolver} */\r\nfunction resolveToLabelEnd(events, context) {\r\n  let index = events.length;\r\n  let offset = 0;\r\n  /** @type {Token} */\r\n  let token;\r\n  /** @type {number | undefined} */\r\n  let open;\r\n  /** @type {number | undefined} */\r\n  let close;\r\n  /** @type {Array<Event>} */\r\n  let media;\r\n\r\n  // Find an opening.\r\n  while (index--) {\r\n    token = events[index][1];\r\n    if (open) {\r\n      // If we see another link, or inactive link label, we’ve been here before.\r\n      if (token.type === \"link\" || token.type === \"labelLink\" && token._inactive) {\r\n        break;\r\n      }\r\n\r\n      // Mark other link openings as inactive, as we can’t have links in\r\n      // links.\r\n      if (events[index][0] === 'enter' && token.type === \"labelLink\") {\r\n        token._inactive = true;\r\n      }\r\n    } else if (close) {\r\n      if (events[index][0] === 'enter' && (token.type === \"labelImage\" || token.type === \"labelLink\") && !token._balanced) {\r\n        open = index;\r\n        if (token.type !== \"labelLink\") {\r\n          offset = 2;\r\n          break;\r\n        }\r\n      }\r\n    } else if (token.type === \"labelEnd\") {\r\n      close = index;\r\n    }\r\n  }\r\n  const group = {\r\n    type: events[open][1].type === \"labelLink\" ? \"link\" : \"image\",\r\n    start: {\r\n      ...events[open][1].start\r\n    },\r\n    end: {\r\n      ...events[events.length - 1][1].end\r\n    }\r\n  };\r\n  const label = {\r\n    type: \"label\",\r\n    start: {\r\n      ...events[open][1].start\r\n    },\r\n    end: {\r\n      ...events[close][1].end\r\n    }\r\n  };\r\n  const text = {\r\n    type: \"labelText\",\r\n    start: {\r\n      ...events[open + offset + 2][1].end\r\n    },\r\n    end: {\r\n      ...events[close - 2][1].start\r\n    }\r\n  };\r\n  media = [['enter', group, context], ['enter', label, context]];\r\n\r\n  // Opening marker.\r\n  media = push(media, events.slice(open + 1, open + offset + 3));\r\n\r\n  // Text open.\r\n  media = push(media, [['enter', text, context]]);\r\n\r\n  // Always populated by defaults.\r\n\r\n  // Between.\r\n  media = push(media, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + offset + 4, close - 3), context));\r\n\r\n  // Text close, marker close, label close.\r\n  media = push(media, [['exit', text, context], events[close - 2], events[close - 1], ['exit', label, context]]);\r\n\r\n  // Reference, resource, or so.\r\n  media = push(media, events.slice(close + 1));\r\n\r\n  // Media close.\r\n  media = push(media, [['exit', group, context]]);\r\n  splice(events, open, events.length, media);\r\n  return events;\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n *   Context.\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeLabelEnd(effects, ok, nok) {\r\n  const self = this;\r\n  let index = self.events.length;\r\n  /** @type {Token} */\r\n  let labelStart;\r\n  /** @type {boolean} */\r\n  let defined;\r\n\r\n  // Find an opening.\r\n  while (index--) {\r\n    if ((self.events[index][1].type === \"labelImage\" || self.events[index][1].type === \"labelLink\") && !self.events[index][1]._balanced) {\r\n      labelStart = self.events[index][1];\r\n      break;\r\n    }\r\n  }\r\n  return start;\r\n\r\n  /**\r\n   * Start of label end.\r\n   *\r\n   * ```markdown\r\n   * > | [a](b) c\r\n   *       ^\r\n   * > | [a][b] c\r\n   *       ^\r\n   * > | [a][] b\r\n   *       ^\r\n   * > | [a] b\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    // If there is not an okay opening.\r\n    if (!labelStart) {\r\n      return nok(code);\r\n    }\r\n\r\n    // If the corresponding label (link) start is marked as inactive,\r\n    // it means we’d be wrapping a link, like this:\r\n    //\r\n    // ```markdown\r\n    // > | a [b [c](d) e](f) g.\r\n    //                  ^\r\n    // ```\r\n    //\r\n    // We can’t have that, so it’s just balanced brackets.\r\n    if (labelStart._inactive) {\r\n      return labelEndNok(code);\r\n    }\r\n    defined = self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize({\r\n      start: labelStart.end,\r\n      end: self.now()\r\n    })));\r\n    effects.enter(\"labelEnd\");\r\n    effects.enter(\"labelMarker\");\r\n    effects.consume(code);\r\n    effects.exit(\"labelMarker\");\r\n    effects.exit(\"labelEnd\");\r\n    return after;\r\n  }\r\n\r\n  /**\r\n   * After `]`.\r\n   *\r\n   * ```markdown\r\n   * > | [a](b) c\r\n   *       ^\r\n   * > | [a][b] c\r\n   *       ^\r\n   * > | [a][] b\r\n   *       ^\r\n   * > | [a] b\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function after(code) {\r\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\r\n    // an extension.\r\n\r\n    // Resource (`[asd](fgh)`)?\r\n    if (code === 40) {\r\n      return effects.attempt(resourceConstruct, labelEndOk, defined ? labelEndOk : labelEndNok)(code);\r\n    }\r\n\r\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\r\n    if (code === 91) {\r\n      return effects.attempt(referenceFullConstruct, labelEndOk, defined ? referenceNotFull : labelEndNok)(code);\r\n    }\r\n\r\n    // Shortcut (`[asd]`) reference?\r\n    return defined ? labelEndOk(code) : labelEndNok(code);\r\n  }\r\n\r\n  /**\r\n   * After `]`, at `[`, but not at a full reference.\r\n   *\r\n   * > 👉 **Note**: we only get here if the label is defined.\r\n   *\r\n   * ```markdown\r\n   * > | [a][] b\r\n   *        ^\r\n   * > | [a] b\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function referenceNotFull(code) {\r\n    return effects.attempt(referenceCollapsedConstruct, labelEndOk, labelEndNok)(code);\r\n  }\r\n\r\n  /**\r\n   * Done, we found something.\r\n   *\r\n   * ```markdown\r\n   * > | [a](b) c\r\n   *           ^\r\n   * > | [a][b] c\r\n   *           ^\r\n   * > | [a][] b\r\n   *          ^\r\n   * > | [a] b\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function labelEndOk(code) {\r\n    // Note: `markdown-rs` does a bunch of stuff here.\r\n    return ok(code);\r\n  }\r\n\r\n  /**\r\n   * Done, it’s nothing.\r\n   *\r\n   * There was an okay opening, but we didn’t match anything.\r\n   *\r\n   * ```markdown\r\n   * > | [a](b c\r\n   *        ^\r\n   * > | [a][b c\r\n   *        ^\r\n   * > | [a] b\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function labelEndNok(code) {\r\n    labelStart._balanced = true;\r\n    return nok(code);\r\n  }\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n *   Context.\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeResource(effects, ok, nok) {\r\n  return resourceStart;\r\n\r\n  /**\r\n   * At a resource.\r\n   *\r\n   * ```markdown\r\n   * > | [a](b) c\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function resourceStart(code) {\r\n    effects.enter(\"resource\");\r\n    effects.enter(\"resourceMarker\");\r\n    effects.consume(code);\r\n    effects.exit(\"resourceMarker\");\r\n    return resourceBefore;\r\n  }\r\n\r\n  /**\r\n   * In resource, after `(`, at optional whitespace.\r\n   *\r\n   * ```markdown\r\n   * > | [a](b) c\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function resourceBefore(code) {\r\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceOpen)(code) : resourceOpen(code);\r\n  }\r\n\r\n  /**\r\n   * In resource, after optional whitespace, at `)` or a destination.\r\n   *\r\n   * ```markdown\r\n   * > | [a](b) c\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function resourceOpen(code) {\r\n    if (code === 41) {\r\n      return resourceEnd(code);\r\n    }\r\n    return factoryDestination(effects, resourceDestinationAfter, resourceDestinationMissing, \"resourceDestination\", \"resourceDestinationLiteral\", \"resourceDestinationLiteralMarker\", \"resourceDestinationRaw\", \"resourceDestinationString\", 32)(code);\r\n  }\r\n\r\n  /**\r\n   * In resource, after destination, at optional whitespace.\r\n   *\r\n   * ```markdown\r\n   * > | [a](b) c\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function resourceDestinationAfter(code) {\r\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceBetween)(code) : resourceEnd(code);\r\n  }\r\n\r\n  /**\r\n   * At invalid destination.\r\n   *\r\n   * ```markdown\r\n   * > | [a](<<) b\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function resourceDestinationMissing(code) {\r\n    return nok(code);\r\n  }\r\n\r\n  /**\r\n   * In resource, after destination and whitespace, at `(` or title.\r\n   *\r\n   * ```markdown\r\n   * > | [a](b ) c\r\n   *           ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function resourceBetween(code) {\r\n    if (code === 34 || code === 39 || code === 40) {\r\n      return factoryTitle(effects, resourceTitleAfter, nok, \"resourceTitle\", \"resourceTitleMarker\", \"resourceTitleString\")(code);\r\n    }\r\n    return resourceEnd(code);\r\n  }\r\n\r\n  /**\r\n   * In resource, after title, at optional whitespace.\r\n   *\r\n   * ```markdown\r\n   * > | [a](b \"c\") d\r\n   *              ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function resourceTitleAfter(code) {\r\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceEnd)(code) : resourceEnd(code);\r\n  }\r\n\r\n  /**\r\n   * In resource, at `)`.\r\n   *\r\n   * ```markdown\r\n   * > | [a](b) d\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function resourceEnd(code) {\r\n    if (code === 41) {\r\n      effects.enter(\"resourceMarker\");\r\n      effects.consume(code);\r\n      effects.exit(\"resourceMarker\");\r\n      effects.exit(\"resource\");\r\n      return ok;\r\n    }\r\n    return nok(code);\r\n  }\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n *   Context.\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeReferenceFull(effects, ok, nok) {\r\n  const self = this;\r\n  return referenceFull;\r\n\r\n  /**\r\n   * In a reference (full), at the `[`.\r\n   *\r\n   * ```markdown\r\n   * > | [a][b] d\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function referenceFull(code) {\r\n    return factoryLabel.call(self, effects, referenceFullAfter, referenceFullMissing, \"reference\", \"referenceMarker\", \"referenceString\")(code);\r\n  }\r\n\r\n  /**\r\n   * In a reference (full), after `]`.\r\n   *\r\n   * ```markdown\r\n   * > | [a][b] d\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function referenceFullAfter(code) {\r\n    return self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1))) ? ok(code) : nok(code);\r\n  }\r\n\r\n  /**\r\n   * In reference (full) that was missing.\r\n   *\r\n   * ```markdown\r\n   * > | [a][b d\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function referenceFullMissing(code) {\r\n    return nok(code);\r\n  }\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n *   Context.\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\r\n  return referenceCollapsedStart;\r\n\r\n  /**\r\n   * In reference (collapsed), at `[`.\r\n   *\r\n   * > 👉 **Note**: we only get here if the label is defined.\r\n   *\r\n   * ```markdown\r\n   * > | [a][] d\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function referenceCollapsedStart(code) {\r\n    // We only attempt a collapsed label if there’s a `[`.\r\n\r\n    effects.enter(\"reference\");\r\n    effects.enter(\"referenceMarker\");\r\n    effects.consume(code);\r\n    effects.exit(\"referenceMarker\");\r\n    return referenceCollapsedOpen;\r\n  }\r\n\r\n  /**\r\n   * In reference (collapsed), at `]`.\r\n   *\r\n   * > 👉 **Note**: we only get here if the label is defined.\r\n   *\r\n   * ```markdown\r\n   * > | [a][] d\r\n   *         ^\r\n   * ```\r\n   *\r\n   *  @type {State}\r\n   */\r\n  function referenceCollapsedOpen(code) {\r\n    if (code === 93) {\r\n      effects.enter(\"referenceMarker\");\r\n      effects.consume(code);\r\n      effects.exit(\"referenceMarker\");\r\n      effects.exit(\"reference\");\r\n      return ok;\r\n    }\r\n    return nok(code);\r\n  }\r\n}","/**\r\n * @import {\r\n *   Construct,\r\n *   State,\r\n *   TokenizeContext,\r\n *   Tokenizer\r\n * } from 'micromark-util-types'\r\n */\r\n\r\nimport { labelEnd } from './label-end.js';\r\n\r\n/** @type {Construct} */\r\nexport const labelStartImage = {\r\n  name: 'labelStartImage',\r\n  resolveAll: labelEnd.resolveAll,\r\n  tokenize: tokenizeLabelStartImage\r\n};\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n *   Context.\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeLabelStartImage(effects, ok, nok) {\r\n  const self = this;\r\n  return start;\r\n\r\n  /**\r\n   * Start of label (image) start.\r\n   *\r\n   * ```markdown\r\n   * > | a ![b] c\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    effects.enter(\"labelImage\");\r\n    effects.enter(\"labelImageMarker\");\r\n    effects.consume(code);\r\n    effects.exit(\"labelImageMarker\");\r\n    return open;\r\n  }\r\n\r\n  /**\r\n   * After `!`, at `[`.\r\n   *\r\n   * ```markdown\r\n   * > | a ![b] c\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function open(code) {\r\n    if (code === 91) {\r\n      effects.enter(\"labelMarker\");\r\n      effects.consume(code);\r\n      effects.exit(\"labelMarker\");\r\n      effects.exit(\"labelImage\");\r\n      return after;\r\n    }\r\n    return nok(code);\r\n  }\r\n\r\n  /**\r\n   * After `![`.\r\n   *\r\n   * ```markdown\r\n   * > | a ![b] c\r\n   *         ^\r\n   * ```\r\n   *\r\n   * This is needed in because, when GFM footnotes are enabled, images never\r\n   * form when started with a `^`.\r\n   * Instead, links form:\r\n   *\r\n   * ```markdown\r\n   * ![^a](b)\r\n   *\r\n   * ![^a][b]\r\n   *\r\n   * [b]: c\r\n   * ```\r\n   *\r\n   * ```html\r\n   * <p>!<a href=\\\"b\\\">^a</a></p>\r\n   * <p>!<a href=\\\"c\\\">^a</a></p>\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function after(code) {\r\n    // To do: use a new field to do this, this is still needed for\r\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\r\n    // behavior isn’t.\r\n    // Hidden footnotes hook.\r\n    /* c8 ignore next 3 */\r\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\r\n  }\r\n}","/**\r\n * @import {\r\n *   Construct,\r\n *   State,\r\n *   TokenizeContext,\r\n *   Tokenizer\r\n * } from 'micromark-util-types'\r\n */\r\n\r\nimport { labelEnd } from './label-end.js';\r\n\r\n/** @type {Construct} */\r\nexport const labelStartLink = {\r\n  name: 'labelStartLink',\r\n  resolveAll: labelEnd.resolveAll,\r\n  tokenize: tokenizeLabelStartLink\r\n};\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n *   Context.\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeLabelStartLink(effects, ok, nok) {\r\n  const self = this;\r\n  return start;\r\n\r\n  /**\r\n   * Start of label (link) start.\r\n   *\r\n   * ```markdown\r\n   * > | a [b] c\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    effects.enter(\"labelLink\");\r\n    effects.enter(\"labelMarker\");\r\n    effects.consume(code);\r\n    effects.exit(\"labelMarker\");\r\n    effects.exit(\"labelLink\");\r\n    return after;\r\n  }\r\n\r\n  /** @type {State} */\r\n  function after(code) {\r\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\r\n    // remove.\r\n    // Hidden footnotes hook.\r\n    /* c8 ignore next 3 */\r\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\r\n  }\r\n}","/**\r\n * @import {\r\n *   Construct,\r\n *   State,\r\n *   TokenizeContext,\r\n *   Tokenizer\r\n * } from 'micromark-util-types'\r\n */\r\n\r\nimport { factorySpace } from 'micromark-factory-space';\r\nimport { markdownLineEnding } from 'micromark-util-character';\r\n/** @type {Construct} */\r\nexport const lineEnding = {\r\n  name: 'lineEnding',\r\n  tokenize: tokenizeLineEnding\r\n};\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n *   Context.\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeLineEnding(effects, ok) {\r\n  return start;\r\n\r\n  /** @type {State} */\r\n  function start(code) {\r\n    effects.enter(\"lineEnding\");\r\n    effects.consume(code);\r\n    effects.exit(\"lineEnding\");\r\n    return factorySpace(effects, ok, \"linePrefix\");\r\n  }\r\n}","/**\r\n * @import {\r\n *   Code,\r\n *   Construct,\r\n *   State,\r\n *   TokenizeContext,\r\n *   Tokenizer\r\n * } from 'micromark-util-types'\r\n */\r\n\r\nimport { factorySpace } from 'micromark-factory-space';\r\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\r\n/** @type {Construct} */\r\nexport const thematicBreak = {\r\n  name: 'thematicBreak',\r\n  tokenize: tokenizeThematicBreak\r\n};\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n *   Context.\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeThematicBreak(effects, ok, nok) {\r\n  let size = 0;\r\n  /** @type {NonNullable<Code>} */\r\n  let marker;\r\n  return start;\r\n\r\n  /**\r\n   * Start of thematic break.\r\n   *\r\n   * ```markdown\r\n   * > | ***\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    effects.enter(\"thematicBreak\");\r\n    // To do: parse indent like `markdown-rs`.\r\n    return before(code);\r\n  }\r\n\r\n  /**\r\n   * After optional whitespace, at marker.\r\n   *\r\n   * ```markdown\r\n   * > | ***\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function before(code) {\r\n    marker = code;\r\n    return atBreak(code);\r\n  }\r\n\r\n  /**\r\n   * After something, before something else.\r\n   *\r\n   * ```markdown\r\n   * > | ***\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function atBreak(code) {\r\n    if (code === marker) {\r\n      effects.enter(\"thematicBreakSequence\");\r\n      return sequence(code);\r\n    }\r\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\r\n      effects.exit(\"thematicBreak\");\r\n      return ok(code);\r\n    }\r\n    return nok(code);\r\n  }\r\n\r\n  /**\r\n   * In sequence.\r\n   *\r\n   * ```markdown\r\n   * > | ***\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function sequence(code) {\r\n    if (code === marker) {\r\n      effects.consume(code);\r\n      size++;\r\n      return sequence;\r\n    }\r\n    effects.exit(\"thematicBreakSequence\");\r\n    return markdownSpace(code) ? factorySpace(effects, atBreak, \"whitespace\")(code) : atBreak(code);\r\n  }\r\n}","/**\r\n * @import {\r\n *   Code,\r\n *   Construct,\r\n *   Exiter,\r\n *   State,\r\n *   TokenizeContext,\r\n *   Tokenizer\r\n * } from 'micromark-util-types'\r\n */\r\n\r\nimport { factorySpace } from 'micromark-factory-space';\r\nimport { asciiDigit, markdownSpace } from 'micromark-util-character';\r\nimport { blankLine } from './blank-line.js';\r\nimport { thematicBreak } from './thematic-break.js';\r\n\r\n/** @type {Construct} */\r\nexport const list = {\r\n  continuation: {\r\n    tokenize: tokenizeListContinuation\r\n  },\r\n  exit: tokenizeListEnd,\r\n  name: 'list',\r\n  tokenize: tokenizeListStart\r\n};\r\n\r\n/** @type {Construct} */\r\nconst listItemPrefixWhitespaceConstruct = {\r\n  partial: true,\r\n  tokenize: tokenizeListItemPrefixWhitespace\r\n};\r\n\r\n/** @type {Construct} */\r\nconst indentConstruct = {\r\n  partial: true,\r\n  tokenize: tokenizeIndent\r\n};\r\n\r\n// To do: `markdown-rs` parses list items on their own and later stitches them\r\n// together.\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n *   Context.\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeListStart(effects, ok, nok) {\r\n  const self = this;\r\n  const tail = self.events[self.events.length - 1];\r\n  let initialSize = tail && tail[1].type === \"linePrefix\" ? tail[2].sliceSerialize(tail[1], true).length : 0;\r\n  let size = 0;\r\n  return start;\r\n\r\n  /** @type {State} */\r\n  function start(code) {\r\n    const kind = self.containerState.type || (code === 42 || code === 43 || code === 45 ? \"listUnordered\" : \"listOrdered\");\r\n    if (kind === \"listUnordered\" ? !self.containerState.marker || code === self.containerState.marker : asciiDigit(code)) {\r\n      if (!self.containerState.type) {\r\n        self.containerState.type = kind;\r\n        effects.enter(kind, {\r\n          _container: true\r\n        });\r\n      }\r\n      if (kind === \"listUnordered\") {\r\n        effects.enter(\"listItemPrefix\");\r\n        return code === 42 || code === 45 ? effects.check(thematicBreak, nok, atMarker)(code) : atMarker(code);\r\n      }\r\n      if (!self.interrupt || code === 49) {\r\n        effects.enter(\"listItemPrefix\");\r\n        effects.enter(\"listItemValue\");\r\n        return inside(code);\r\n      }\r\n    }\r\n    return nok(code);\r\n  }\r\n\r\n  /** @type {State} */\r\n  function inside(code) {\r\n    if (asciiDigit(code) && ++size < 10) {\r\n      effects.consume(code);\r\n      return inside;\r\n    }\r\n    if ((!self.interrupt || size < 2) && (self.containerState.marker ? code === self.containerState.marker : code === 41 || code === 46)) {\r\n      effects.exit(\"listItemValue\");\r\n      return atMarker(code);\r\n    }\r\n    return nok(code);\r\n  }\r\n\r\n  /**\r\n   * @type {State}\r\n   **/\r\n  function atMarker(code) {\r\n    effects.enter(\"listItemMarker\");\r\n    effects.consume(code);\r\n    effects.exit(\"listItemMarker\");\r\n    self.containerState.marker = self.containerState.marker || code;\r\n    return effects.check(blankLine,\r\n    // Can’t be empty when interrupting.\r\n    self.interrupt ? nok : onBlank, effects.attempt(listItemPrefixWhitespaceConstruct, endOfPrefix, otherPrefix));\r\n  }\r\n\r\n  /** @type {State} */\r\n  function onBlank(code) {\r\n    self.containerState.initialBlankLine = true;\r\n    initialSize++;\r\n    return endOfPrefix(code);\r\n  }\r\n\r\n  /** @type {State} */\r\n  function otherPrefix(code) {\r\n    if (markdownSpace(code)) {\r\n      effects.enter(\"listItemPrefixWhitespace\");\r\n      effects.consume(code);\r\n      effects.exit(\"listItemPrefixWhitespace\");\r\n      return endOfPrefix;\r\n    }\r\n    return nok(code);\r\n  }\r\n\r\n  /** @type {State} */\r\n  function endOfPrefix(code) {\r\n    self.containerState.size = initialSize + self.sliceSerialize(effects.exit(\"listItemPrefix\"), true).length;\r\n    return ok(code);\r\n  }\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n *   Context.\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeListContinuation(effects, ok, nok) {\r\n  const self = this;\r\n  self.containerState._closeFlow = undefined;\r\n  return effects.check(blankLine, onBlank, notBlank);\r\n\r\n  /** @type {State} */\r\n  function onBlank(code) {\r\n    self.containerState.furtherBlankLines = self.containerState.furtherBlankLines || self.containerState.initialBlankLine;\r\n\r\n    // We have a blank line.\r\n    // Still, try to consume at most the items size.\r\n    return factorySpace(effects, ok, \"listItemIndent\", self.containerState.size + 1)(code);\r\n  }\r\n\r\n  /** @type {State} */\r\n  function notBlank(code) {\r\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\r\n      self.containerState.furtherBlankLines = undefined;\r\n      self.containerState.initialBlankLine = undefined;\r\n      return notInCurrentItem(code);\r\n    }\r\n    self.containerState.furtherBlankLines = undefined;\r\n    self.containerState.initialBlankLine = undefined;\r\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code);\r\n  }\r\n\r\n  /** @type {State} */\r\n  function notInCurrentItem(code) {\r\n    // While we do continue, we signal that the flow should be closed.\r\n    self.containerState._closeFlow = true;\r\n    // As we’re closing flow, we’re no longer interrupting.\r\n    self.interrupt = undefined;\r\n    // Always populated by defaults.\r\n\r\n    return factorySpace(effects, effects.attempt(list, ok, nok), \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\r\n  }\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n *   Context.\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeIndent(effects, ok, nok) {\r\n  const self = this;\r\n  return factorySpace(effects, afterPrefix, \"listItemIndent\", self.containerState.size + 1);\r\n\r\n  /** @type {State} */\r\n  function afterPrefix(code) {\r\n    const tail = self.events[self.events.length - 1];\r\n    return tail && tail[1].type === \"listItemIndent\" && tail[2].sliceSerialize(tail[1], true).length === self.containerState.size ? ok(code) : nok(code);\r\n  }\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n *   Context.\r\n * @type {Exiter}\r\n */\r\nfunction tokenizeListEnd(effects) {\r\n  effects.exit(this.containerState.type);\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n *   Context.\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\r\n  const self = this;\r\n\r\n  // Always populated by defaults.\r\n\r\n  return factorySpace(effects, afterPrefix, \"listItemPrefixWhitespace\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4 + 1);\r\n\r\n  /** @type {State} */\r\n  function afterPrefix(code) {\r\n    const tail = self.events[self.events.length - 1];\r\n    return !markdownSpace(code) && tail && tail[1].type === \"listItemPrefixWhitespace\" ? ok(code) : nok(code);\r\n  }\r\n}","/**\r\n * @import {\r\n *   Code,\r\n *   Construct,\r\n *   Resolver,\r\n *   State,\r\n *   TokenizeContext,\r\n *   Tokenizer\r\n * } from 'micromark-util-types'\r\n */\r\n\r\nimport { factorySpace } from 'micromark-factory-space';\r\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\r\n/** @type {Construct} */\r\nexport const setextUnderline = {\r\n  name: 'setextUnderline',\r\n  resolveTo: resolveToSetextUnderline,\r\n  tokenize: tokenizeSetextUnderline\r\n};\r\n\r\n/** @type {Resolver} */\r\nfunction resolveToSetextUnderline(events, context) {\r\n  // To do: resolve like `markdown-rs`.\r\n  let index = events.length;\r\n  /** @type {number | undefined} */\r\n  let content;\r\n  /** @type {number | undefined} */\r\n  let text;\r\n  /** @type {number | undefined} */\r\n  let definition;\r\n\r\n  // Find the opening of the content.\r\n  // It’ll always exist: we don’t tokenize if it isn’t there.\r\n  while (index--) {\r\n    if (events[index][0] === 'enter') {\r\n      if (events[index][1].type === \"content\") {\r\n        content = index;\r\n        break;\r\n      }\r\n      if (events[index][1].type === \"paragraph\") {\r\n        text = index;\r\n      }\r\n    }\r\n    // Exit\r\n    else {\r\n      if (events[index][1].type === \"content\") {\r\n        // Remove the content end (if needed we’ll add it later)\r\n        events.splice(index, 1);\r\n      }\r\n      if (!definition && events[index][1].type === \"definition\") {\r\n        definition = index;\r\n      }\r\n    }\r\n  }\r\n  const heading = {\r\n    type: \"setextHeading\",\r\n    start: {\r\n      ...events[content][1].start\r\n    },\r\n    end: {\r\n      ...events[events.length - 1][1].end\r\n    }\r\n  };\r\n\r\n  // Change the paragraph to setext heading text.\r\n  events[text][1].type = \"setextHeadingText\";\r\n\r\n  // If we have definitions in the content, we’ll keep on having content,\r\n  // but we need move it.\r\n  if (definition) {\r\n    events.splice(text, 0, ['enter', heading, context]);\r\n    events.splice(definition + 1, 0, ['exit', events[content][1], context]);\r\n    events[content][1].end = {\r\n      ...events[definition][1].end\r\n    };\r\n  } else {\r\n    events[content][1] = heading;\r\n  }\r\n\r\n  // Add the heading exit at the end.\r\n  events.push(['exit', heading, context]);\r\n  return events;\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n *   Context.\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeSetextUnderline(effects, ok, nok) {\r\n  const self = this;\r\n  /** @type {NonNullable<Code>} */\r\n  let marker;\r\n  return start;\r\n\r\n  /**\r\n   * At start of heading (setext) underline.\r\n   *\r\n   * ```markdown\r\n   *   | aa\r\n   * > | ==\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    let index = self.events.length;\r\n    /** @type {boolean | undefined} */\r\n    let paragraph;\r\n    // Find an opening.\r\n    while (index--) {\r\n      // Skip enter/exit of line ending, line prefix, and content.\r\n      // We can now either have a definition or a paragraph.\r\n      if (self.events[index][1].type !== \"lineEnding\" && self.events[index][1].type !== \"linePrefix\" && self.events[index][1].type !== \"content\") {\r\n        paragraph = self.events[index][1].type === \"paragraph\";\r\n        break;\r\n      }\r\n    }\r\n\r\n    // To do: handle lazy/pierce like `markdown-rs`.\r\n    // To do: parse indent like `markdown-rs`.\r\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\r\n      effects.enter(\"setextHeadingLine\");\r\n      marker = code;\r\n      return before(code);\r\n    }\r\n    return nok(code);\r\n  }\r\n\r\n  /**\r\n   * After optional whitespace, at `-` or `=`.\r\n   *\r\n   * ```markdown\r\n   *   | aa\r\n   * > | ==\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function before(code) {\r\n    effects.enter(\"setextHeadingLineSequence\");\r\n    return inside(code);\r\n  }\r\n\r\n  /**\r\n   * In sequence.\r\n   *\r\n   * ```markdown\r\n   *   | aa\r\n   * > | ==\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function inside(code) {\r\n    if (code === marker) {\r\n      effects.consume(code);\r\n      return inside;\r\n    }\r\n    effects.exit(\"setextHeadingLineSequence\");\r\n    return markdownSpace(code) ? factorySpace(effects, after, \"lineSuffix\")(code) : after(code);\r\n  }\r\n\r\n  /**\r\n   * After sequence, after optional whitespace.\r\n   *\r\n   * ```markdown\r\n   *   | aa\r\n   * > | ==\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function after(code) {\r\n    if (code === null || markdownLineEnding(code)) {\r\n      effects.exit(\"setextHeadingLine\");\r\n      return ok(code);\r\n    }\r\n    return nok(code);\r\n  }\r\n}","/**\r\n * @import {\r\n *   InitialConstruct,\r\n *   Initializer,\r\n *   State,\r\n *   TokenizeContext\r\n * } from 'micromark-util-types'\r\n */\r\n\r\nimport { blankLine, content } from 'micromark-core-commonmark';\r\nimport { factorySpace } from 'micromark-factory-space';\r\nimport { markdownLineEnding } from 'micromark-util-character';\r\n/** @type {InitialConstruct} */\r\nexport const flow = {\r\n  tokenize: initializeFlow\r\n};\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n *   Self.\r\n * @type {Initializer}\r\n *   Initializer.\r\n */\r\nfunction initializeFlow(effects) {\r\n  const self = this;\r\n  const initial = effects.attempt(\r\n  // Try to parse a blank line.\r\n  blankLine, atBlankEnding,\r\n  // Try to parse initial flow (essentially, only code).\r\n  effects.attempt(this.parser.constructs.flowInitial, afterConstruct, factorySpace(effects, effects.attempt(this.parser.constructs.flow, afterConstruct, effects.attempt(content, afterConstruct)), \"linePrefix\")));\r\n  return initial;\r\n\r\n  /** @type {State} */\r\n  function atBlankEnding(code) {\r\n    if (code === null) {\r\n      effects.consume(code);\r\n      return;\r\n    }\r\n    effects.enter(\"lineEndingBlank\");\r\n    effects.consume(code);\r\n    effects.exit(\"lineEndingBlank\");\r\n    self.currentConstruct = undefined;\r\n    return initial;\r\n  }\r\n\r\n  /** @type {State} */\r\n  function afterConstruct(code) {\r\n    if (code === null) {\r\n      effects.consume(code);\r\n      return;\r\n    }\r\n    effects.enter(\"lineEnding\");\r\n    effects.consume(code);\r\n    effects.exit(\"lineEnding\");\r\n    self.currentConstruct = undefined;\r\n    return initial;\r\n  }\r\n}","/**\r\n * @import {\r\n *   Code,\r\n *   InitialConstruct,\r\n *   Initializer,\r\n *   Resolver,\r\n *   State,\r\n *   TokenizeContext\r\n * } from 'micromark-util-types'\r\n */\r\n\r\nexport const resolver = {\r\n  resolveAll: createResolver()\r\n};\r\nexport const string = initializeFactory('string');\r\nexport const text = initializeFactory('text');\r\n\r\n/**\r\n * @param {'string' | 'text'} field\r\n *   Field.\r\n * @returns {InitialConstruct}\r\n *   Construct.\r\n */\r\nfunction initializeFactory(field) {\r\n  return {\r\n    resolveAll: createResolver(field === 'text' ? resolveAllLineSuffixes : undefined),\r\n    tokenize: initializeText\r\n  };\r\n\r\n  /**\r\n   * @this {TokenizeContext}\r\n   *   Context.\r\n   * @type {Initializer}\r\n   */\r\n  function initializeText(effects) {\r\n    const self = this;\r\n    const constructs = this.parser.constructs[field];\r\n    const text = effects.attempt(constructs, start, notText);\r\n    return start;\r\n\r\n    /** @type {State} */\r\n    function start(code) {\r\n      return atBreak(code) ? text(code) : notText(code);\r\n    }\r\n\r\n    /** @type {State} */\r\n    function notText(code) {\r\n      if (code === null) {\r\n        effects.consume(code);\r\n        return;\r\n      }\r\n      effects.enter(\"data\");\r\n      effects.consume(code);\r\n      return data;\r\n    }\r\n\r\n    /** @type {State} */\r\n    function data(code) {\r\n      if (atBreak(code)) {\r\n        effects.exit(\"data\");\r\n        return text(code);\r\n      }\r\n\r\n      // Data.\r\n      effects.consume(code);\r\n      return data;\r\n    }\r\n\r\n    /**\r\n     * @param {Code} code\r\n     *   Code.\r\n     * @returns {boolean}\r\n     *   Whether the code is a break.\r\n     */\r\n    function atBreak(code) {\r\n      if (code === null) {\r\n        return true;\r\n      }\r\n      const list = constructs[code];\r\n      let index = -1;\r\n      if (list) {\r\n        // Always populated by defaults.\r\n\r\n        while (++index < list.length) {\r\n          const item = list[index];\r\n          if (!item.previous || item.previous.call(self, self.previous)) {\r\n            return true;\r\n          }\r\n        }\r\n      }\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Resolver | undefined} [extraResolver]\r\n *   Resolver.\r\n * @returns {Resolver}\r\n *   Resolver.\r\n */\r\nfunction createResolver(extraResolver) {\r\n  return resolveAllText;\r\n\r\n  /** @type {Resolver} */\r\n  function resolveAllText(events, context) {\r\n    let index = -1;\r\n    /** @type {number | undefined} */\r\n    let enter;\r\n\r\n    // A rather boring computation (to merge adjacent `data` events) which\r\n    // improves mm performance by 29%.\r\n    while (++index <= events.length) {\r\n      if (enter === undefined) {\r\n        if (events[index] && events[index][1].type === \"data\") {\r\n          enter = index;\r\n          index++;\r\n        }\r\n      } else if (!events[index] || events[index][1].type !== \"data\") {\r\n        // Don’t do anything if there is one data token.\r\n        if (index !== enter + 2) {\r\n          events[enter][1].end = events[index - 1][1].end;\r\n          events.splice(enter + 2, index - enter - 2);\r\n          index = enter + 2;\r\n        }\r\n        enter = undefined;\r\n      }\r\n    }\r\n    return extraResolver ? extraResolver(events, context) : events;\r\n  }\r\n}\r\n\r\n/**\r\n * A rather ugly set of instructions which again looks at chunks in the input\r\n * stream.\r\n * The reason to do this here is that it is *much* faster to parse in reverse.\r\n * And that we can’t hook into `null` to split the line suffix before an EOF.\r\n * To do: figure out if we can make this into a clean utility, or even in core.\r\n * As it will be useful for GFMs literal autolink extension (and maybe even\r\n * tables?)\r\n *\r\n * @type {Resolver}\r\n */\r\nfunction resolveAllLineSuffixes(events, context) {\r\n  let eventIndex = 0; // Skip first.\r\n\r\n  while (++eventIndex <= events.length) {\r\n    if ((eventIndex === events.length || events[eventIndex][1].type === \"lineEnding\") && events[eventIndex - 1][1].type === \"data\") {\r\n      const data = events[eventIndex - 1][1];\r\n      const chunks = context.sliceStream(data);\r\n      let index = chunks.length;\r\n      let bufferIndex = -1;\r\n      let size = 0;\r\n      /** @type {boolean | undefined} */\r\n      let tabs;\r\n      while (index--) {\r\n        const chunk = chunks[index];\r\n        if (typeof chunk === 'string') {\r\n          bufferIndex = chunk.length;\r\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\r\n            size++;\r\n            bufferIndex--;\r\n          }\r\n          if (bufferIndex) break;\r\n          bufferIndex = -1;\r\n        }\r\n        // Number\r\n        else if (chunk === -2) {\r\n          tabs = true;\r\n          size++;\r\n        } else if (chunk === -1) {\r\n          // Empty\r\n        } else {\r\n          // Replacement character, exit.\r\n          index++;\r\n          break;\r\n        }\r\n      }\r\n\r\n      // Allow final trailing whitespace.\r\n      if (context._contentTypeTextTrailing && eventIndex === events.length) {\r\n        size = 0;\r\n      }\r\n      if (size) {\r\n        const token = {\r\n          type: eventIndex === events.length || tabs || size < 2 ? \"lineSuffix\" : \"hardBreakTrailing\",\r\n          start: {\r\n            _bufferIndex: index ? bufferIndex : data.start._bufferIndex + bufferIndex,\r\n            _index: data.start._index + index,\r\n            line: data.end.line,\r\n            column: data.end.column - size,\r\n            offset: data.end.offset - size\r\n          },\r\n          end: {\r\n            ...data.end\r\n          }\r\n        };\r\n        data.end = {\r\n          ...token.start\r\n        };\r\n        if (data.start.offset === data.end.offset) {\r\n          Object.assign(data, token);\r\n        } else {\r\n          events.splice(eventIndex, 0, ['enter', token, context], ['exit', token, context]);\r\n          eventIndex += 2;\r\n        }\r\n      }\r\n      eventIndex++;\r\n    }\r\n  }\r\n  return events;\r\n}","/**\r\n * @import {Extension} from 'micromark-util-types'\r\n */\r\n\r\nimport { attention, autolink, blockQuote, characterEscape, characterReference, codeFenced, codeIndented, codeText, definition, hardBreakEscape, headingAtx, htmlFlow, htmlText, labelEnd, labelStartImage, labelStartLink, lineEnding, list, setextUnderline, thematicBreak } from 'micromark-core-commonmark';\r\nimport { resolver as resolveText } from './initialize/text.js';\r\n\r\n/** @satisfies {Extension['document']} */\r\nexport const document = {\r\n  [42]: list,\r\n  [43]: list,\r\n  [45]: list,\r\n  [48]: list,\r\n  [49]: list,\r\n  [50]: list,\r\n  [51]: list,\r\n  [52]: list,\r\n  [53]: list,\r\n  [54]: list,\r\n  [55]: list,\r\n  [56]: list,\r\n  [57]: list,\r\n  [62]: blockQuote\r\n};\r\n\r\n/** @satisfies {Extension['contentInitial']} */\r\nexport const contentInitial = {\r\n  [91]: definition\r\n};\r\n\r\n/** @satisfies {Extension['flowInitial']} */\r\nexport const flowInitial = {\r\n  [-2]: codeIndented,\r\n  [-1]: codeIndented,\r\n  [32]: codeIndented\r\n};\r\n\r\n/** @satisfies {Extension['flow']} */\r\nexport const flow = {\r\n  [35]: headingAtx,\r\n  [42]: thematicBreak,\r\n  [45]: [setextUnderline, thematicBreak],\r\n  [60]: htmlFlow,\r\n  [61]: setextUnderline,\r\n  [95]: thematicBreak,\r\n  [96]: codeFenced,\r\n  [126]: codeFenced\r\n};\r\n\r\n/** @satisfies {Extension['string']} */\r\nexport const string = {\r\n  [38]: characterReference,\r\n  [92]: characterEscape\r\n};\r\n\r\n/** @satisfies {Extension['text']} */\r\nexport const text = {\r\n  [-5]: lineEnding,\r\n  [-4]: lineEnding,\r\n  [-3]: lineEnding,\r\n  [33]: labelStartImage,\r\n  [38]: characterReference,\r\n  [42]: attention,\r\n  [60]: [autolink, htmlText],\r\n  [91]: labelStartLink,\r\n  [92]: [hardBreakEscape, characterEscape],\r\n  [93]: labelEnd,\r\n  [95]: attention,\r\n  [96]: codeText\r\n};\r\n\r\n/** @satisfies {Extension['insideSpan']} */\r\nexport const insideSpan = {\r\n  null: [attention, resolveText]\r\n};\r\n\r\n/** @satisfies {Extension['attentionMarkers']} */\r\nexport const attentionMarkers = {\r\n  null: [42, 95]\r\n};\r\n\r\n/** @satisfies {Extension['disable']} */\r\nexport const disable = {\r\n  null: []\r\n};","/**\r\n * @import {\r\n *   Chunk,\r\n *   Code,\r\n *   ConstructRecord,\r\n *   Construct,\r\n *   Effects,\r\n *   InitialConstruct,\r\n *   ParseContext,\r\n *   Point,\r\n *   State,\r\n *   TokenizeContext,\r\n *   Token\r\n * } from 'micromark-util-types'\r\n */\r\n\r\n/**\r\n * @callback Restore\r\n *   Restore the state.\r\n * @returns {undefined}\r\n *   Nothing.\r\n *\r\n * @typedef Info\r\n *   Info.\r\n * @property {Restore} restore\r\n *   Restore.\r\n * @property {number} from\r\n *   From.\r\n *\r\n * @callback ReturnHandle\r\n *   Handle a successful run.\r\n * @param {Construct} construct\r\n *   Construct.\r\n * @param {Info} info\r\n *   Info.\r\n * @returns {undefined}\r\n *   Nothing.\r\n */\r\n\r\nimport { markdownLineEnding } from 'micromark-util-character';\r\nimport { push, splice } from 'micromark-util-chunked';\r\nimport { resolveAll } from 'micromark-util-resolve-all';\r\n/**\r\n * Create a tokenizer.\r\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\r\n * The parser is the object dealing with it all.\r\n * `initialize` works like other constructs, except that only its `tokenize`\r\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\r\n * `from` can be given to set the point before the first character, although\r\n * when further lines are indented, they must be set with `defineSkip`.\r\n *\r\n * @param {ParseContext} parser\r\n *   Parser.\r\n * @param {InitialConstruct} initialize\r\n *   Construct.\r\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\r\n *   Point (optional).\r\n * @returns {TokenizeContext}\r\n *   Context.\r\n */\r\nexport function createTokenizer(parser, initialize, from) {\r\n  /** @type {Point} */\r\n  let point = {\r\n    _bufferIndex: -1,\r\n    _index: 0,\r\n    line: from && from.line || 1,\r\n    column: from && from.column || 1,\r\n    offset: from && from.offset || 0\r\n  };\r\n  /** @type {Record<string, number>} */\r\n  const columnStart = {};\r\n  /** @type {Array<Construct>} */\r\n  const resolveAllConstructs = [];\r\n  /** @type {Array<Chunk>} */\r\n  let chunks = [];\r\n  /** @type {Array<Token>} */\r\n  let stack = [];\r\n  /** @type {boolean | undefined} */\r\n  let consumed = true;\r\n\r\n  /**\r\n   * Tools used for tokenizing.\r\n   *\r\n   * @type {Effects}\r\n   */\r\n  const effects = {\r\n    attempt: constructFactory(onsuccessfulconstruct),\r\n    check: constructFactory(onsuccessfulcheck),\r\n    consume,\r\n    enter,\r\n    exit,\r\n    interrupt: constructFactory(onsuccessfulcheck, {\r\n      interrupt: true\r\n    })\r\n  };\r\n\r\n  /**\r\n   * State and tools for resolving and serializing.\r\n   *\r\n   * @type {TokenizeContext}\r\n   */\r\n  const context = {\r\n    code: null,\r\n    containerState: {},\r\n    defineSkip,\r\n    events: [],\r\n    now,\r\n    parser,\r\n    previous: null,\r\n    sliceSerialize,\r\n    sliceStream,\r\n    write\r\n  };\r\n\r\n  /**\r\n   * The state function.\r\n   *\r\n   * @type {State | undefined}\r\n   */\r\n  let state = initialize.tokenize.call(context, effects);\r\n\r\n  /**\r\n   * Track which character we expect to be consumed, to catch bugs.\r\n   *\r\n   * @type {Code}\r\n   */\r\n  let expectedCode;\r\n  if (initialize.resolveAll) {\r\n    resolveAllConstructs.push(initialize);\r\n  }\r\n  return context;\r\n\r\n  /** @type {TokenizeContext['write']} */\r\n  function write(slice) {\r\n    chunks = push(chunks, slice);\r\n    main();\r\n\r\n    // Exit if we’re not done, resolve might change stuff.\r\n    if (chunks[chunks.length - 1] !== null) {\r\n      return [];\r\n    }\r\n    addResult(initialize, 0);\r\n\r\n    // Otherwise, resolve, and exit.\r\n    context.events = resolveAll(resolveAllConstructs, context.events, context);\r\n    return context.events;\r\n  }\r\n\r\n  //\r\n  // Tools.\r\n  //\r\n\r\n  /** @type {TokenizeContext['sliceSerialize']} */\r\n  function sliceSerialize(token, expandTabs) {\r\n    return serializeChunks(sliceStream(token), expandTabs);\r\n  }\r\n\r\n  /** @type {TokenizeContext['sliceStream']} */\r\n  function sliceStream(token) {\r\n    return sliceChunks(chunks, token);\r\n  }\r\n\r\n  /** @type {TokenizeContext['now']} */\r\n  function now() {\r\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\r\n    const {\r\n      _bufferIndex,\r\n      _index,\r\n      line,\r\n      column,\r\n      offset\r\n    } = point;\r\n    return {\r\n      _bufferIndex,\r\n      _index,\r\n      line,\r\n      column,\r\n      offset\r\n    };\r\n  }\r\n\r\n  /** @type {TokenizeContext['defineSkip']} */\r\n  function defineSkip(value) {\r\n    columnStart[value.line] = value.column;\r\n    accountForPotentialSkip();\r\n  }\r\n\r\n  //\r\n  // State management.\r\n  //\r\n\r\n  /**\r\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\r\n   * `consume`).\r\n   * Here is where we walk through the chunks, which either include strings of\r\n   * several characters, or numerical character codes.\r\n   * The reason to do this in a loop instead of a call is so the stack can\r\n   * drain.\r\n   *\r\n   * @returns {undefined}\r\n   *   Nothing.\r\n   */\r\n  function main() {\r\n    /** @type {number} */\r\n    let chunkIndex;\r\n    while (point._index < chunks.length) {\r\n      const chunk = chunks[point._index];\r\n\r\n      // If we’re in a buffer chunk, loop through it.\r\n      if (typeof chunk === 'string') {\r\n        chunkIndex = point._index;\r\n        if (point._bufferIndex < 0) {\r\n          point._bufferIndex = 0;\r\n        }\r\n        while (point._index === chunkIndex && point._bufferIndex < chunk.length) {\r\n          go(chunk.charCodeAt(point._bufferIndex));\r\n        }\r\n      } else {\r\n        go(chunk);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deal with one code.\r\n   *\r\n   * @param {Code} code\r\n   *   Code.\r\n   * @returns {undefined}\r\n   *   Nothing.\r\n   */\r\n  function go(code) {\r\n    consumed = undefined;\r\n    expectedCode = code;\r\n    state = state(code);\r\n  }\r\n\r\n  /** @type {Effects['consume']} */\r\n  function consume(code) {\r\n    if (markdownLineEnding(code)) {\r\n      point.line++;\r\n      point.column = 1;\r\n      point.offset += code === -3 ? 2 : 1;\r\n      accountForPotentialSkip();\r\n    } else if (code !== -1) {\r\n      point.column++;\r\n      point.offset++;\r\n    }\r\n\r\n    // Not in a string chunk.\r\n    if (point._bufferIndex < 0) {\r\n      point._index++;\r\n    } else {\r\n      point._bufferIndex++;\r\n\r\n      // At end of string chunk.\r\n      if (point._bufferIndex ===\r\n      // Points w/ non-negative `_bufferIndex` reference\r\n      // strings.\r\n      /** @type {string} */\r\n      chunks[point._index].length) {\r\n        point._bufferIndex = -1;\r\n        point._index++;\r\n      }\r\n    }\r\n\r\n    // Expose the previous character.\r\n    context.previous = code;\r\n\r\n    // Mark as consumed.\r\n    consumed = true;\r\n  }\r\n\r\n  /** @type {Effects['enter']} */\r\n  function enter(type, fields) {\r\n    /** @type {Token} */\r\n    // @ts-expect-error Patch instead of assign required fields to help GC.\r\n    const token = fields || {};\r\n    token.type = type;\r\n    token.start = now();\r\n    context.events.push(['enter', token, context]);\r\n    stack.push(token);\r\n    return token;\r\n  }\r\n\r\n  /** @type {Effects['exit']} */\r\n  function exit(type) {\r\n    const token = stack.pop();\r\n    token.end = now();\r\n    context.events.push(['exit', token, context]);\r\n    return token;\r\n  }\r\n\r\n  /**\r\n   * Use results.\r\n   *\r\n   * @type {ReturnHandle}\r\n   */\r\n  function onsuccessfulconstruct(construct, info) {\r\n    addResult(construct, info.from);\r\n  }\r\n\r\n  /**\r\n   * Discard results.\r\n   *\r\n   * @type {ReturnHandle}\r\n   */\r\n  function onsuccessfulcheck(_, info) {\r\n    info.restore();\r\n  }\r\n\r\n  /**\r\n   * Factory to attempt/check/interrupt.\r\n   *\r\n   * @param {ReturnHandle} onreturn\r\n   *   Callback.\r\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\r\n   *   Fields.\r\n   */\r\n  function constructFactory(onreturn, fields) {\r\n    return hook;\r\n\r\n    /**\r\n     * Handle either an object mapping codes to constructs, a list of\r\n     * constructs, or a single construct.\r\n     *\r\n     * @param {Array<Construct> | ConstructRecord | Construct} constructs\r\n     *   Constructs.\r\n     * @param {State} returnState\r\n     *   State.\r\n     * @param {State | undefined} [bogusState]\r\n     *   State.\r\n     * @returns {State}\r\n     *   State.\r\n     */\r\n    function hook(constructs, returnState, bogusState) {\r\n      /** @type {ReadonlyArray<Construct>} */\r\n      let listOfConstructs;\r\n      /** @type {number} */\r\n      let constructIndex;\r\n      /** @type {Construct} */\r\n      let currentConstruct;\r\n      /** @type {Info} */\r\n      let info;\r\n      return Array.isArray(constructs) ? /* c8 ignore next 1 */\r\n      handleListOfConstructs(constructs) : 'tokenize' in constructs ?\r\n      // Looks like a construct.\r\n      handleListOfConstructs([(/** @type {Construct} */constructs)]) : handleMapOfConstructs(constructs);\r\n\r\n      /**\r\n       * Handle a list of construct.\r\n       *\r\n       * @param {ConstructRecord} map\r\n       *   Constructs.\r\n       * @returns {State}\r\n       *   State.\r\n       */\r\n      function handleMapOfConstructs(map) {\r\n        return start;\r\n\r\n        /** @type {State} */\r\n        function start(code) {\r\n          const left = code !== null && map[code];\r\n          const all = code !== null && map.null;\r\n          const list = [\r\n          // To do: add more extension tests.\r\n          /* c8 ignore next 2 */\r\n          ...(Array.isArray(left) ? left : left ? [left] : []), ...(Array.isArray(all) ? all : all ? [all] : [])];\r\n          return handleListOfConstructs(list)(code);\r\n        }\r\n      }\r\n\r\n      /**\r\n       * Handle a list of construct.\r\n       *\r\n       * @param {ReadonlyArray<Construct>} list\r\n       *   Constructs.\r\n       * @returns {State}\r\n       *   State.\r\n       */\r\n      function handleListOfConstructs(list) {\r\n        listOfConstructs = list;\r\n        constructIndex = 0;\r\n        if (list.length === 0) {\r\n          return bogusState;\r\n        }\r\n        return handleConstruct(list[constructIndex]);\r\n      }\r\n\r\n      /**\r\n       * Handle a single construct.\r\n       *\r\n       * @param {Construct} construct\r\n       *   Construct.\r\n       * @returns {State}\r\n       *   State.\r\n       */\r\n      function handleConstruct(construct) {\r\n        return start;\r\n\r\n        /** @type {State} */\r\n        function start(code) {\r\n          // To do: not needed to store if there is no bogus state, probably?\r\n          // Currently doesn’t work because `inspect` in document does a check\r\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\r\n          // by not storing.\r\n          info = store();\r\n          currentConstruct = construct;\r\n          if (!construct.partial) {\r\n            context.currentConstruct = construct;\r\n          }\r\n\r\n          // Always populated by defaults.\r\n\r\n          if (construct.name && context.parser.constructs.disable.null.includes(construct.name)) {\r\n            return nok(code);\r\n          }\r\n          return construct.tokenize.call(\r\n          // If we do have fields, create an object w/ `context` as its\r\n          // prototype.\r\n          // This allows a “live binding”, which is needed for `interrupt`.\r\n          fields ? Object.assign(Object.create(context), fields) : context, effects, ok, nok)(code);\r\n        }\r\n      }\r\n\r\n      /** @type {State} */\r\n      function ok(code) {\r\n        consumed = true;\r\n        onreturn(currentConstruct, info);\r\n        return returnState;\r\n      }\r\n\r\n      /** @type {State} */\r\n      function nok(code) {\r\n        consumed = true;\r\n        info.restore();\r\n        if (++constructIndex < listOfConstructs.length) {\r\n          return handleConstruct(listOfConstructs[constructIndex]);\r\n        }\r\n        return bogusState;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Construct} construct\r\n   *   Construct.\r\n   * @param {number} from\r\n   *   From.\r\n   * @returns {undefined}\r\n   *   Nothing.\r\n   */\r\n  function addResult(construct, from) {\r\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\r\n      resolveAllConstructs.push(construct);\r\n    }\r\n    if (construct.resolve) {\r\n      splice(context.events, from, context.events.length - from, construct.resolve(context.events.slice(from), context));\r\n    }\r\n    if (construct.resolveTo) {\r\n      context.events = construct.resolveTo(context.events, context);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Store state.\r\n   *\r\n   * @returns {Info}\r\n   *   Info.\r\n   */\r\n  function store() {\r\n    const startPoint = now();\r\n    const startPrevious = context.previous;\r\n    const startCurrentConstruct = context.currentConstruct;\r\n    const startEventsIndex = context.events.length;\r\n    const startStack = Array.from(stack);\r\n    return {\r\n      from: startEventsIndex,\r\n      restore\r\n    };\r\n\r\n    /**\r\n     * Restore state.\r\n     *\r\n     * @returns {undefined}\r\n     *   Nothing.\r\n     */\r\n    function restore() {\r\n      point = startPoint;\r\n      context.previous = startPrevious;\r\n      context.currentConstruct = startCurrentConstruct;\r\n      context.events.length = startEventsIndex;\r\n      stack = startStack;\r\n      accountForPotentialSkip();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Move the current point a bit forward in the line when it’s on a column\r\n   * skip.\r\n   *\r\n   * @returns {undefined}\r\n   *   Nothing.\r\n   */\r\n  function accountForPotentialSkip() {\r\n    if (point.line in columnStart && point.column < 2) {\r\n      point.column = columnStart[point.line];\r\n      point.offset += columnStart[point.line] - 1;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Get the chunks from a slice of chunks in the range of a token.\r\n *\r\n * @param {ReadonlyArray<Chunk>} chunks\r\n *   Chunks.\r\n * @param {Pick<Token, 'end' | 'start'>} token\r\n *   Token.\r\n * @returns {Array<Chunk>}\r\n *   Chunks.\r\n */\r\nfunction sliceChunks(chunks, token) {\r\n  const startIndex = token.start._index;\r\n  const startBufferIndex = token.start._bufferIndex;\r\n  const endIndex = token.end._index;\r\n  const endBufferIndex = token.end._bufferIndex;\r\n  /** @type {Array<Chunk>} */\r\n  let view;\r\n  if (startIndex === endIndex) {\r\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\r\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)];\r\n  } else {\r\n    view = chunks.slice(startIndex, endIndex);\r\n    if (startBufferIndex > -1) {\r\n      const head = view[0];\r\n      if (typeof head === 'string') {\r\n        view[0] = head.slice(startBufferIndex);\r\n        /* c8 ignore next 4 -- used to be used, no longer */\r\n      } else {\r\n        view.shift();\r\n      }\r\n    }\r\n    if (endBufferIndex > 0) {\r\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\r\n      view.push(chunks[endIndex].slice(0, endBufferIndex));\r\n    }\r\n  }\r\n  return view;\r\n}\r\n\r\n/**\r\n * Get the string value of a slice of chunks.\r\n *\r\n * @param {ReadonlyArray<Chunk>} chunks\r\n *   Chunks.\r\n * @param {boolean | undefined} [expandTabs=false]\r\n *   Whether to expand tabs (default: `false`).\r\n * @returns {string}\r\n *   Result.\r\n */\r\nfunction serializeChunks(chunks, expandTabs) {\r\n  let index = -1;\r\n  /** @type {Array<string>} */\r\n  const result = [];\r\n  /** @type {boolean | undefined} */\r\n  let atTab;\r\n  while (++index < chunks.length) {\r\n    const chunk = chunks[index];\r\n    /** @type {string} */\r\n    let value;\r\n    if (typeof chunk === 'string') {\r\n      value = chunk;\r\n    } else switch (chunk) {\r\n      case -5:\r\n        {\r\n          value = \"\\r\";\r\n          break;\r\n        }\r\n      case -4:\r\n        {\r\n          value = \"\\n\";\r\n          break;\r\n        }\r\n      case -3:\r\n        {\r\n          value = \"\\r\" + \"\\n\";\r\n          break;\r\n        }\r\n      case -2:\r\n        {\r\n          value = expandTabs ? \" \" : \"\\t\";\r\n          break;\r\n        }\r\n      case -1:\r\n        {\r\n          if (!expandTabs && atTab) continue;\r\n          value = \" \";\r\n          break;\r\n        }\r\n      default:\r\n        {\r\n          // Currently only replacement character.\r\n          value = String.fromCharCode(chunk);\r\n        }\r\n    }\r\n    atTab = chunk === -2;\r\n    result.push(value);\r\n  }\r\n  return result.join('');\r\n}","/**\r\n * @import {\r\n *   Create,\r\n *   FullNormalizedExtension,\r\n *   InitialConstruct,\r\n *   ParseContext,\r\n *   ParseOptions\r\n * } from 'micromark-util-types'\r\n */\r\n\r\nimport { combineExtensions } from 'micromark-util-combine-extensions';\r\nimport { content } from './initialize/content.js';\r\nimport { document } from './initialize/document.js';\r\nimport { flow } from './initialize/flow.js';\r\nimport { string, text } from './initialize/text.js';\r\nimport * as defaultConstructs from './constructs.js';\r\nimport { createTokenizer } from './create-tokenizer.js';\r\n\r\n/**\r\n * @param {ParseOptions | null | undefined} [options]\r\n *   Configuration (optional).\r\n * @returns {ParseContext}\r\n *   Parser.\r\n */\r\nexport function parse(options) {\r\n  const settings = options || {};\r\n  const constructs = /** @type {FullNormalizedExtension} */\r\n  combineExtensions([defaultConstructs, ...(settings.extensions || [])]);\r\n\r\n  /** @type {ParseContext} */\r\n  const parser = {\r\n    constructs,\r\n    content: create(content),\r\n    defined: [],\r\n    document: create(document),\r\n    flow: create(flow),\r\n    lazy: {},\r\n    string: create(string),\r\n    text: create(text)\r\n  };\r\n  return parser;\r\n\r\n  /**\r\n   * @param {InitialConstruct} initial\r\n   *   Construct to start with.\r\n   * @returns {Create}\r\n   *   Create a tokenizer.\r\n   */\r\n  function create(initial) {\r\n    return creator;\r\n    /** @type {Create} */\r\n    function creator(from) {\r\n      return createTokenizer(parser, initial, from);\r\n    }\r\n  }\r\n}","/**\r\n * @import {Event} from 'micromark-util-types'\r\n */\r\n\r\nimport { subtokenize } from 'micromark-util-subtokenize';\r\n\r\n/**\r\n * @param {Array<Event>} events\r\n *   Events.\r\n * @returns {Array<Event>}\r\n *   Events.\r\n */\r\nexport function postprocess(events) {\r\n  while (!subtokenize(events)) {\r\n    // Empty\r\n  }\r\n  return events;\r\n}","/**\r\n * @import {Chunk, Code, Encoding, Value} from 'micromark-util-types'\r\n */\r\n\r\n/**\r\n * @callback Preprocessor\r\n *   Preprocess a value.\r\n * @param {Value} value\r\n *   Value.\r\n * @param {Encoding | null | undefined} [encoding]\r\n *   Encoding when `value` is a typed array (optional).\r\n * @param {boolean | null | undefined} [end=false]\r\n *   Whether this is the last chunk (default: `false`).\r\n * @returns {Array<Chunk>}\r\n *   Chunks.\r\n */\r\n\r\nconst search = /[\\0\\t\\n\\r]/g;\r\n\r\n/**\r\n * @returns {Preprocessor}\r\n *   Preprocess a value.\r\n */\r\nexport function preprocess() {\r\n  let column = 1;\r\n  let buffer = '';\r\n  /** @type {boolean | undefined} */\r\n  let start = true;\r\n  /** @type {boolean | undefined} */\r\n  let atCarriageReturn;\r\n  return preprocessor;\r\n\r\n  /** @type {Preprocessor} */\r\n  // eslint-disable-next-line complexity\r\n  function preprocessor(value, encoding, end) {\r\n    /** @type {Array<Chunk>} */\r\n    const chunks = [];\r\n    /** @type {RegExpMatchArray | null} */\r\n    let match;\r\n    /** @type {number} */\r\n    let next;\r\n    /** @type {number} */\r\n    let startPosition;\r\n    /** @type {number} */\r\n    let endPosition;\r\n    /** @type {Code} */\r\n    let code;\r\n    value = buffer + (typeof value === 'string' ? value.toString() : new TextDecoder(encoding || undefined).decode(value));\r\n    startPosition = 0;\r\n    buffer = '';\r\n    if (start) {\r\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\r\n      if (value.charCodeAt(0) === 65279) {\r\n        startPosition++;\r\n      }\r\n      start = undefined;\r\n    }\r\n    while (startPosition < value.length) {\r\n      search.lastIndex = startPosition;\r\n      match = search.exec(value);\r\n      endPosition = match && match.index !== undefined ? match.index : value.length;\r\n      code = value.charCodeAt(endPosition);\r\n      if (!match) {\r\n        buffer = value.slice(startPosition);\r\n        break;\r\n      }\r\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\r\n        chunks.push(-3);\r\n        atCarriageReturn = undefined;\r\n      } else {\r\n        if (atCarriageReturn) {\r\n          chunks.push(-5);\r\n          atCarriageReturn = undefined;\r\n        }\r\n        if (startPosition < endPosition) {\r\n          chunks.push(value.slice(startPosition, endPosition));\r\n          column += endPosition - startPosition;\r\n        }\r\n        switch (code) {\r\n          case 0:\r\n            {\r\n              chunks.push(65533);\r\n              column++;\r\n              break;\r\n            }\r\n          case 9:\r\n            {\r\n              next = Math.ceil(column / 4) * 4;\r\n              chunks.push(-2);\r\n              while (column++ < next) chunks.push(-1);\r\n              break;\r\n            }\r\n          case 10:\r\n            {\r\n              chunks.push(-4);\r\n              column = 1;\r\n              break;\r\n            }\r\n          default:\r\n            {\r\n              atCarriageReturn = true;\r\n              column = 1;\r\n            }\r\n        }\r\n      }\r\n      startPosition = endPosition + 1;\r\n    }\r\n    if (end) {\r\n      if (atCarriageReturn) chunks.push(-5);\r\n      if (buffer) chunks.push(buffer);\r\n      chunks.push(null);\r\n    }\r\n    return chunks;\r\n  }\r\n}","import { decodeNamedCharacterReference } from 'decode-named-character-reference';\r\nimport { decodeNumericCharacterReference } from 'micromark-util-decode-numeric-character-reference';\r\nconst characterEscapeOrReference = /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi;\r\n\r\n/**\r\n * Decode markdown strings (which occur in places such as fenced code info\r\n * strings, destinations, labels, and titles).\r\n *\r\n * The “string” content type allows character escapes and -references.\r\n * This decodes those.\r\n *\r\n * @param {string} value\r\n *   Value to decode.\r\n * @returns {string}\r\n *   Decoded value.\r\n */\r\nexport function decodeString(value) {\r\n  return value.replace(characterEscapeOrReference, decode);\r\n}\r\n\r\n/**\r\n * @param {string} $0\r\n *   Match.\r\n * @param {string} $1\r\n *   Character escape.\r\n * @param {string} $2\r\n *   Character reference.\r\n * @returns {string}\r\n *   Decoded value\r\n */\r\nfunction decode($0, $1, $2) {\r\n  if ($1) {\r\n    // Escape.\r\n    return $1;\r\n  }\r\n\r\n  // Reference.\r\n  const head = $2.charCodeAt(0);\r\n  if (head === 35) {\r\n    const head = $2.charCodeAt(1);\r\n    const hex = head === 120 || head === 88;\r\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10);\r\n  }\r\n  return decodeNamedCharacterReference($2) || $0;\r\n}","/**\r\n * @import {\r\n *   Break,\r\n *   Blockquote,\r\n *   Code,\r\n *   Definition,\r\n *   Emphasis,\r\n *   Heading,\r\n *   Html,\r\n *   Image,\r\n *   InlineCode,\r\n *   Link,\r\n *   ListItem,\r\n *   List,\r\n *   Nodes,\r\n *   Paragraph,\r\n *   PhrasingContent,\r\n *   ReferenceType,\r\n *   Root,\r\n *   Strong,\r\n *   Text,\r\n *   ThematicBreak\r\n * } from 'mdast'\r\n * @import {\r\n *   Encoding,\r\n *   Event,\r\n *   Token,\r\n *   Value\r\n * } from 'micromark-util-types'\r\n * @import {Point} from 'unist'\r\n * @import {\r\n *   CompileContext,\r\n *   CompileData,\r\n *   Config,\r\n *   Extension,\r\n *   Handle,\r\n *   OnEnterError,\r\n *   Options\r\n * } from './types.js'\r\n */\r\n\r\nimport { toString } from 'mdast-util-to-string';\r\nimport { parse, postprocess, preprocess } from 'micromark';\r\nimport { decodeNumericCharacterReference } from 'micromark-util-decode-numeric-character-reference';\r\nimport { decodeString } from 'micromark-util-decode-string';\r\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\r\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\r\nimport { stringifyPosition } from 'unist-util-stringify-position';\r\nconst own = {}.hasOwnProperty;\r\n\r\n/**\r\n * Turn markdown into a syntax tree.\r\n *\r\n * @overload\r\n * @param {Value} value\r\n * @param {Encoding | null | undefined} [encoding]\r\n * @param {Options | null | undefined} [options]\r\n * @returns {Root}\r\n *\r\n * @overload\r\n * @param {Value} value\r\n * @param {Options | null | undefined} [options]\r\n * @returns {Root}\r\n *\r\n * @param {Value} value\r\n *   Markdown to parse.\r\n * @param {Encoding | Options | null | undefined} [encoding]\r\n *   Character encoding for when `value` is `Buffer`.\r\n * @param {Options | null | undefined} [options]\r\n *   Configuration.\r\n * @returns {Root}\r\n *   mdast tree.\r\n */\r\nexport function fromMarkdown(value, encoding, options) {\r\n  if (typeof encoding !== 'string') {\r\n    options = encoding;\r\n    encoding = undefined;\r\n  }\r\n  return compiler(options)(postprocess(parse(options).document().write(preprocess()(value, encoding, true))));\r\n}\r\n\r\n/**\r\n * Note this compiler only understand complete buffering, not streaming.\r\n *\r\n * @param {Options | null | undefined} [options]\r\n */\r\nfunction compiler(options) {\r\n  /** @type {Config} */\r\n  const config = {\r\n    transforms: [],\r\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\r\n    enter: {\r\n      autolink: opener(link),\r\n      autolinkProtocol: onenterdata,\r\n      autolinkEmail: onenterdata,\r\n      atxHeading: opener(heading),\r\n      blockQuote: opener(blockQuote),\r\n      characterEscape: onenterdata,\r\n      characterReference: onenterdata,\r\n      codeFenced: opener(codeFlow),\r\n      codeFencedFenceInfo: buffer,\r\n      codeFencedFenceMeta: buffer,\r\n      codeIndented: opener(codeFlow, buffer),\r\n      codeText: opener(codeText, buffer),\r\n      codeTextData: onenterdata,\r\n      data: onenterdata,\r\n      codeFlowValue: onenterdata,\r\n      definition: opener(definition),\r\n      definitionDestinationString: buffer,\r\n      definitionLabelString: buffer,\r\n      definitionTitleString: buffer,\r\n      emphasis: opener(emphasis),\r\n      hardBreakEscape: opener(hardBreak),\r\n      hardBreakTrailing: opener(hardBreak),\r\n      htmlFlow: opener(html, buffer),\r\n      htmlFlowData: onenterdata,\r\n      htmlText: opener(html, buffer),\r\n      htmlTextData: onenterdata,\r\n      image: opener(image),\r\n      label: buffer,\r\n      link: opener(link),\r\n      listItem: opener(listItem),\r\n      listItemValue: onenterlistitemvalue,\r\n      listOrdered: opener(list, onenterlistordered),\r\n      listUnordered: opener(list),\r\n      paragraph: opener(paragraph),\r\n      reference: onenterreference,\r\n      referenceString: buffer,\r\n      resourceDestinationString: buffer,\r\n      resourceTitleString: buffer,\r\n      setextHeading: opener(heading),\r\n      strong: opener(strong),\r\n      thematicBreak: opener(thematicBreak)\r\n    },\r\n    exit: {\r\n      atxHeading: closer(),\r\n      atxHeadingSequence: onexitatxheadingsequence,\r\n      autolink: closer(),\r\n      autolinkEmail: onexitautolinkemail,\r\n      autolinkProtocol: onexitautolinkprotocol,\r\n      blockQuote: closer(),\r\n      characterEscapeValue: onexitdata,\r\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\r\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\r\n      characterReferenceValue: onexitcharacterreferencevalue,\r\n      characterReference: onexitcharacterreference,\r\n      codeFenced: closer(onexitcodefenced),\r\n      codeFencedFence: onexitcodefencedfence,\r\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\r\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\r\n      codeFlowValue: onexitdata,\r\n      codeIndented: closer(onexitcodeindented),\r\n      codeText: closer(onexitcodetext),\r\n      codeTextData: onexitdata,\r\n      data: onexitdata,\r\n      definition: closer(),\r\n      definitionDestinationString: onexitdefinitiondestinationstring,\r\n      definitionLabelString: onexitdefinitionlabelstring,\r\n      definitionTitleString: onexitdefinitiontitlestring,\r\n      emphasis: closer(),\r\n      hardBreakEscape: closer(onexithardbreak),\r\n      hardBreakTrailing: closer(onexithardbreak),\r\n      htmlFlow: closer(onexithtmlflow),\r\n      htmlFlowData: onexitdata,\r\n      htmlText: closer(onexithtmltext),\r\n      htmlTextData: onexitdata,\r\n      image: closer(onexitimage),\r\n      label: onexitlabel,\r\n      labelText: onexitlabeltext,\r\n      lineEnding: onexitlineending,\r\n      link: closer(onexitlink),\r\n      listItem: closer(),\r\n      listOrdered: closer(),\r\n      listUnordered: closer(),\r\n      paragraph: closer(),\r\n      referenceString: onexitreferencestring,\r\n      resourceDestinationString: onexitresourcedestinationstring,\r\n      resourceTitleString: onexitresourcetitlestring,\r\n      resource: onexitresource,\r\n      setextHeading: closer(onexitsetextheading),\r\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\r\n      setextHeadingText: onexitsetextheadingtext,\r\n      strong: closer(),\r\n      thematicBreak: closer()\r\n    }\r\n  };\r\n  configure(config, (options || {}).mdastExtensions || []);\r\n\r\n  /** @type {CompileData} */\r\n  const data = {};\r\n  return compile;\r\n\r\n  /**\r\n   * Turn micromark events into an mdast tree.\r\n   *\r\n   * @param {Array<Event>} events\r\n   *   Events.\r\n   * @returns {Root}\r\n   *   mdast tree.\r\n   */\r\n  function compile(events) {\r\n    /** @type {Root} */\r\n    let tree = {\r\n      type: 'root',\r\n      children: []\r\n    };\r\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\r\n    const context = {\r\n      stack: [tree],\r\n      tokenStack: [],\r\n      config,\r\n      enter,\r\n      exit,\r\n      buffer,\r\n      resume,\r\n      data\r\n    };\r\n    /** @type {Array<number>} */\r\n    const listStack = [];\r\n    let index = -1;\r\n    while (++index < events.length) {\r\n      // We preprocess lists to add `listItem` tokens, and to infer whether\r\n      // items the list itself are spread out.\r\n      if (events[index][1].type === \"listOrdered\" || events[index][1].type === \"listUnordered\") {\r\n        if (events[index][0] === 'enter') {\r\n          listStack.push(index);\r\n        } else {\r\n          const tail = listStack.pop();\r\n          index = prepareList(events, tail, index);\r\n        }\r\n      }\r\n    }\r\n    index = -1;\r\n    while (++index < events.length) {\r\n      const handler = config[events[index][0]];\r\n      if (own.call(handler, events[index][1].type)) {\r\n        handler[events[index][1].type].call(Object.assign({\r\n          sliceSerialize: events[index][2].sliceSerialize\r\n        }, context), events[index][1]);\r\n      }\r\n    }\r\n\r\n    // Handle tokens still being open.\r\n    if (context.tokenStack.length > 0) {\r\n      const tail = context.tokenStack[context.tokenStack.length - 1];\r\n      const handler = tail[1] || defaultOnError;\r\n      handler.call(context, undefined, tail[0]);\r\n    }\r\n\r\n    // Figure out `root` position.\r\n    tree.position = {\r\n      start: point(events.length > 0 ? events[0][1].start : {\r\n        line: 1,\r\n        column: 1,\r\n        offset: 0\r\n      }),\r\n      end: point(events.length > 0 ? events[events.length - 2][1].end : {\r\n        line: 1,\r\n        column: 1,\r\n        offset: 0\r\n      })\r\n    };\r\n\r\n    // Call transforms.\r\n    index = -1;\r\n    while (++index < config.transforms.length) {\r\n      tree = config.transforms[index](tree) || tree;\r\n    }\r\n    return tree;\r\n  }\r\n\r\n  /**\r\n   * @param {Array<Event>} events\r\n   * @param {number} start\r\n   * @param {number} length\r\n   * @returns {number}\r\n   */\r\n  function prepareList(events, start, length) {\r\n    let index = start - 1;\r\n    let containerBalance = -1;\r\n    let listSpread = false;\r\n    /** @type {Token | undefined} */\r\n    let listItem;\r\n    /** @type {number | undefined} */\r\n    let lineIndex;\r\n    /** @type {number | undefined} */\r\n    let firstBlankLineIndex;\r\n    /** @type {boolean | undefined} */\r\n    let atMarker;\r\n    while (++index <= length) {\r\n      const event = events[index];\r\n      switch (event[1].type) {\r\n        case \"listUnordered\":\r\n        case \"listOrdered\":\r\n        case \"blockQuote\":\r\n          {\r\n            if (event[0] === 'enter') {\r\n              containerBalance++;\r\n            } else {\r\n              containerBalance--;\r\n            }\r\n            atMarker = undefined;\r\n            break;\r\n          }\r\n        case \"lineEndingBlank\":\r\n          {\r\n            if (event[0] === 'enter') {\r\n              if (listItem && !atMarker && !containerBalance && !firstBlankLineIndex) {\r\n                firstBlankLineIndex = index;\r\n              }\r\n              atMarker = undefined;\r\n            }\r\n            break;\r\n          }\r\n        case \"linePrefix\":\r\n        case \"listItemValue\":\r\n        case \"listItemMarker\":\r\n        case \"listItemPrefix\":\r\n        case \"listItemPrefixWhitespace\":\r\n          {\r\n            // Empty.\r\n\r\n            break;\r\n          }\r\n        default:\r\n          {\r\n            atMarker = undefined;\r\n          }\r\n      }\r\n      if (!containerBalance && event[0] === 'enter' && event[1].type === \"listItemPrefix\" || containerBalance === -1 && event[0] === 'exit' && (event[1].type === \"listUnordered\" || event[1].type === \"listOrdered\")) {\r\n        if (listItem) {\r\n          let tailIndex = index;\r\n          lineIndex = undefined;\r\n          while (tailIndex--) {\r\n            const tailEvent = events[tailIndex];\r\n            if (tailEvent[1].type === \"lineEnding\" || tailEvent[1].type === \"lineEndingBlank\") {\r\n              if (tailEvent[0] === 'exit') continue;\r\n              if (lineIndex) {\r\n                events[lineIndex][1].type = \"lineEndingBlank\";\r\n                listSpread = true;\r\n              }\r\n              tailEvent[1].type = \"lineEnding\";\r\n              lineIndex = tailIndex;\r\n            } else if (tailEvent[1].type === \"linePrefix\" || tailEvent[1].type === \"blockQuotePrefix\" || tailEvent[1].type === \"blockQuotePrefixWhitespace\" || tailEvent[1].type === \"blockQuoteMarker\" || tailEvent[1].type === \"listItemIndent\") {\r\n              // Empty\r\n            } else {\r\n              break;\r\n            }\r\n          }\r\n          if (firstBlankLineIndex && (!lineIndex || firstBlankLineIndex < lineIndex)) {\r\n            listItem._spread = true;\r\n          }\r\n\r\n          // Fix position.\r\n          listItem.end = Object.assign({}, lineIndex ? events[lineIndex][1].start : event[1].end);\r\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]]);\r\n          index++;\r\n          length++;\r\n        }\r\n\r\n        // Create a new list item.\r\n        if (event[1].type === \"listItemPrefix\") {\r\n          /** @type {Token} */\r\n          const item = {\r\n            type: 'listItem',\r\n            _spread: false,\r\n            start: Object.assign({}, event[1].start),\r\n            // @ts-expect-error: we’ll add `end` in a second.\r\n            end: undefined\r\n          };\r\n          listItem = item;\r\n          events.splice(index, 0, ['enter', item, event[2]]);\r\n          index++;\r\n          length++;\r\n          firstBlankLineIndex = undefined;\r\n          atMarker = true;\r\n        }\r\n      }\r\n    }\r\n    events[start][1]._spread = listSpread;\r\n    return length;\r\n  }\r\n\r\n  /**\r\n   * Create an opener handle.\r\n   *\r\n   * @param {(token: Token) => Nodes} create\r\n   *   Create a node.\r\n   * @param {Handle | undefined} [and]\r\n   *   Optional function to also run.\r\n   * @returns {Handle}\r\n   *   Handle.\r\n   */\r\n  function opener(create, and) {\r\n    return open;\r\n\r\n    /**\r\n     * @this {CompileContext}\r\n     * @param {Token} token\r\n     * @returns {undefined}\r\n     */\r\n    function open(token) {\r\n      enter.call(this, create(token), token);\r\n      if (and) and.call(this, token);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @type {CompileContext['buffer']}\r\n   */\r\n  function buffer() {\r\n    this.stack.push({\r\n      type: 'fragment',\r\n      children: []\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @type {CompileContext['enter']}\r\n   */\r\n  function enter(node, token, errorHandler) {\r\n    const parent = this.stack[this.stack.length - 1];\r\n    /** @type {Array<Nodes>} */\r\n    const siblings = parent.children;\r\n    siblings.push(node);\r\n    this.stack.push(node);\r\n    this.tokenStack.push([token, errorHandler || undefined]);\r\n    node.position = {\r\n      start: point(token.start),\r\n      // @ts-expect-error: `end` will be patched later.\r\n      end: undefined\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Create a closer handle.\r\n   *\r\n   * @param {Handle | undefined} [and]\r\n   *   Optional function to also run.\r\n   * @returns {Handle}\r\n   *   Handle.\r\n   */\r\n  function closer(and) {\r\n    return close;\r\n\r\n    /**\r\n     * @this {CompileContext}\r\n     * @param {Token} token\r\n     * @returns {undefined}\r\n     */\r\n    function close(token) {\r\n      if (and) and.call(this, token);\r\n      exit.call(this, token);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @type {CompileContext['exit']}\r\n   */\r\n  function exit(token, onExitError) {\r\n    const node = this.stack.pop();\r\n    const open = this.tokenStack.pop();\r\n    if (!open) {\r\n      throw new Error('Cannot close `' + token.type + '` (' + stringifyPosition({\r\n        start: token.start,\r\n        end: token.end\r\n      }) + '): it’s not open');\r\n    } else if (open[0].type !== token.type) {\r\n      if (onExitError) {\r\n        onExitError.call(this, token, open[0]);\r\n      } else {\r\n        const handler = open[1] || defaultOnError;\r\n        handler.call(this, token, open[0]);\r\n      }\r\n    }\r\n    node.position.end = point(token.end);\r\n  }\r\n\r\n  /**\r\n   * @type {CompileContext['resume']}\r\n   */\r\n  function resume() {\r\n    return toString(this.stack.pop());\r\n  }\r\n\r\n  //\r\n  // Handlers.\r\n  //\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onenterlistordered() {\r\n    this.data.expectingFirstListItemValue = true;\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onenterlistitemvalue(token) {\r\n    if (this.data.expectingFirstListItemValue) {\r\n      const ancestor = this.stack[this.stack.length - 2];\r\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10);\r\n      this.data.expectingFirstListItemValue = undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitcodefencedfenceinfo() {\r\n    const data = this.resume();\r\n    const node = this.stack[this.stack.length - 1];\r\n    node.lang = data;\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitcodefencedfencemeta() {\r\n    const data = this.resume();\r\n    const node = this.stack[this.stack.length - 1];\r\n    node.meta = data;\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitcodefencedfence() {\r\n    // Exit if this is the closing fence.\r\n    if (this.data.flowCodeInside) return;\r\n    this.buffer();\r\n    this.data.flowCodeInside = true;\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitcodefenced() {\r\n    const data = this.resume();\r\n    const node = this.stack[this.stack.length - 1];\r\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '');\r\n    this.data.flowCodeInside = undefined;\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitcodeindented() {\r\n    const data = this.resume();\r\n    const node = this.stack[this.stack.length - 1];\r\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '');\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitdefinitionlabelstring(token) {\r\n    const label = this.resume();\r\n    const node = this.stack[this.stack.length - 1];\r\n    node.label = label;\r\n    node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitdefinitiontitlestring() {\r\n    const data = this.resume();\r\n    const node = this.stack[this.stack.length - 1];\r\n    node.title = data;\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitdefinitiondestinationstring() {\r\n    const data = this.resume();\r\n    const node = this.stack[this.stack.length - 1];\r\n    node.url = data;\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitatxheadingsequence(token) {\r\n    const node = this.stack[this.stack.length - 1];\r\n    if (!node.depth) {\r\n      const depth = this.sliceSerialize(token).length;\r\n      node.depth = depth;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitsetextheadingtext() {\r\n    this.data.setextHeadingSlurpLineEnding = true;\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitsetextheadinglinesequence(token) {\r\n    const node = this.stack[this.stack.length - 1];\r\n    node.depth = this.sliceSerialize(token).codePointAt(0) === 61 ? 1 : 2;\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitsetextheading() {\r\n    this.data.setextHeadingSlurpLineEnding = undefined;\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onenterdata(token) {\r\n    const node = this.stack[this.stack.length - 1];\r\n    /** @type {Array<Nodes>} */\r\n    const siblings = node.children;\r\n    let tail = siblings[siblings.length - 1];\r\n    if (!tail || tail.type !== 'text') {\r\n      // Add a new text node.\r\n      tail = text();\r\n      tail.position = {\r\n        start: point(token.start),\r\n        // @ts-expect-error: we’ll add `end` later.\r\n        end: undefined\r\n      };\r\n      siblings.push(tail);\r\n    }\r\n    this.stack.push(tail);\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexitdata(token) {\r\n    const tail = this.stack.pop();\r\n    tail.value += this.sliceSerialize(token);\r\n    tail.position.end = point(token.end);\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexitlineending(token) {\r\n    const context = this.stack[this.stack.length - 1];\r\n    // If we’re at a hard break, include the line ending in there.\r\n    if (this.data.atHardBreak) {\r\n      const tail = context.children[context.children.length - 1];\r\n      tail.position.end = point(token.end);\r\n      this.data.atHardBreak = undefined;\r\n      return;\r\n    }\r\n    if (!this.data.setextHeadingSlurpLineEnding && config.canContainEols.includes(context.type)) {\r\n      onenterdata.call(this, token);\r\n      onexitdata.call(this, token);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexithardbreak() {\r\n    this.data.atHardBreak = true;\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexithtmlflow() {\r\n    const data = this.resume();\r\n    const node = this.stack[this.stack.length - 1];\r\n    node.value = data;\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexithtmltext() {\r\n    const data = this.resume();\r\n    const node = this.stack[this.stack.length - 1];\r\n    node.value = data;\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexitcodetext() {\r\n    const data = this.resume();\r\n    const node = this.stack[this.stack.length - 1];\r\n    node.value = data;\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexitlink() {\r\n    const node = this.stack[this.stack.length - 1];\r\n    // Note: there are also `identifier` and `label` fields on this link node!\r\n    // These are used / cleaned here.\r\n\r\n    // To do: clean.\r\n    if (this.data.inReference) {\r\n      /** @type {ReferenceType} */\r\n      const referenceType = this.data.referenceType || 'shortcut';\r\n      node.type += 'Reference';\r\n      // @ts-expect-error: mutate.\r\n      node.referenceType = referenceType;\r\n      // @ts-expect-error: mutate.\r\n      delete node.url;\r\n      delete node.title;\r\n    } else {\r\n      // @ts-expect-error: mutate.\r\n      delete node.identifier;\r\n      // @ts-expect-error: mutate.\r\n      delete node.label;\r\n    }\r\n    this.data.referenceType = undefined;\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexitimage() {\r\n    const node = this.stack[this.stack.length - 1];\r\n    // Note: there are also `identifier` and `label` fields on this link node!\r\n    // These are used / cleaned here.\r\n\r\n    // To do: clean.\r\n    if (this.data.inReference) {\r\n      /** @type {ReferenceType} */\r\n      const referenceType = this.data.referenceType || 'shortcut';\r\n      node.type += 'Reference';\r\n      // @ts-expect-error: mutate.\r\n      node.referenceType = referenceType;\r\n      // @ts-expect-error: mutate.\r\n      delete node.url;\r\n      delete node.title;\r\n    } else {\r\n      // @ts-expect-error: mutate.\r\n      delete node.identifier;\r\n      // @ts-expect-error: mutate.\r\n      delete node.label;\r\n    }\r\n    this.data.referenceType = undefined;\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexitlabeltext(token) {\r\n    const string = this.sliceSerialize(token);\r\n    const ancestor = this.stack[this.stack.length - 2];\r\n    // @ts-expect-error: stash this on the node, as it might become a reference\r\n    // later.\r\n    ancestor.label = decodeString(string);\r\n    // @ts-expect-error: same as above.\r\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase();\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexitlabel() {\r\n    const fragment = this.stack[this.stack.length - 1];\r\n    const value = this.resume();\r\n    const node = this.stack[this.stack.length - 1];\r\n    // Assume a reference.\r\n    this.data.inReference = true;\r\n    if (node.type === 'link') {\r\n      /** @type {Array<PhrasingContent>} */\r\n      const children = fragment.children;\r\n      node.children = children;\r\n    } else {\r\n      node.alt = value;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexitresourcedestinationstring() {\r\n    const data = this.resume();\r\n    const node = this.stack[this.stack.length - 1];\r\n    node.url = data;\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexitresourcetitlestring() {\r\n    const data = this.resume();\r\n    const node = this.stack[this.stack.length - 1];\r\n    node.title = data;\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexitresource() {\r\n    this.data.inReference = undefined;\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onenterreference() {\r\n    this.data.referenceType = 'collapsed';\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexitreferencestring(token) {\r\n    const label = this.resume();\r\n    const node = this.stack[this.stack.length - 1];\r\n    // @ts-expect-error: stash this on the node, as it might become a reference\r\n    // later.\r\n    node.label = label;\r\n    // @ts-expect-error: same as above.\r\n    node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\r\n    this.data.referenceType = 'full';\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexitcharacterreferencemarker(token) {\r\n    this.data.characterReferenceType = token.type;\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitcharacterreferencevalue(token) {\r\n    const data = this.sliceSerialize(token);\r\n    const type = this.data.characterReferenceType;\r\n    /** @type {string} */\r\n    let value;\r\n    if (type) {\r\n      value = decodeNumericCharacterReference(data, type === \"characterReferenceMarkerNumeric\" ? 10 : 16);\r\n      this.data.characterReferenceType = undefined;\r\n    } else {\r\n      const result = decodeNamedCharacterReference(data);\r\n      value = result;\r\n    }\r\n    const tail = this.stack[this.stack.length - 1];\r\n    tail.value += value;\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitcharacterreference(token) {\r\n    const tail = this.stack.pop();\r\n    tail.position.end = point(token.end);\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitautolinkprotocol(token) {\r\n    onexitdata.call(this, token);\r\n    const node = this.stack[this.stack.length - 1];\r\n    node.url = this.sliceSerialize(token);\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitautolinkemail(token) {\r\n    onexitdata.call(this, token);\r\n    const node = this.stack[this.stack.length - 1];\r\n    node.url = 'mailto:' + this.sliceSerialize(token);\r\n  }\r\n\r\n  //\r\n  // Creaters.\r\n  //\r\n\r\n  /** @returns {Blockquote} */\r\n  function blockQuote() {\r\n    return {\r\n      type: 'blockquote',\r\n      children: []\r\n    };\r\n  }\r\n\r\n  /** @returns {Code} */\r\n  function codeFlow() {\r\n    return {\r\n      type: 'code',\r\n      lang: null,\r\n      meta: null,\r\n      value: ''\r\n    };\r\n  }\r\n\r\n  /** @returns {InlineCode} */\r\n  function codeText() {\r\n    return {\r\n      type: 'inlineCode',\r\n      value: ''\r\n    };\r\n  }\r\n\r\n  /** @returns {Definition} */\r\n  function definition() {\r\n    return {\r\n      type: 'definition',\r\n      identifier: '',\r\n      label: null,\r\n      title: null,\r\n      url: ''\r\n    };\r\n  }\r\n\r\n  /** @returns {Emphasis} */\r\n  function emphasis() {\r\n    return {\r\n      type: 'emphasis',\r\n      children: []\r\n    };\r\n  }\r\n\r\n  /** @returns {Heading} */\r\n  function heading() {\r\n    return {\r\n      type: 'heading',\r\n      // @ts-expect-error `depth` will be set later.\r\n      depth: 0,\r\n      children: []\r\n    };\r\n  }\r\n\r\n  /** @returns {Break} */\r\n  function hardBreak() {\r\n    return {\r\n      type: 'break'\r\n    };\r\n  }\r\n\r\n  /** @returns {Html} */\r\n  function html() {\r\n    return {\r\n      type: 'html',\r\n      value: ''\r\n    };\r\n  }\r\n\r\n  /** @returns {Image} */\r\n  function image() {\r\n    return {\r\n      type: 'image',\r\n      title: null,\r\n      url: '',\r\n      alt: null\r\n    };\r\n  }\r\n\r\n  /** @returns {Link} */\r\n  function link() {\r\n    return {\r\n      type: 'link',\r\n      title: null,\r\n      url: '',\r\n      children: []\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @param {Token} token\r\n   * @returns {List}\r\n   */\r\n  function list(token) {\r\n    return {\r\n      type: 'list',\r\n      ordered: token.type === 'listOrdered',\r\n      start: null,\r\n      spread: token._spread,\r\n      children: []\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @param {Token} token\r\n   * @returns {ListItem}\r\n   */\r\n  function listItem(token) {\r\n    return {\r\n      type: 'listItem',\r\n      spread: token._spread,\r\n      checked: null,\r\n      children: []\r\n    };\r\n  }\r\n\r\n  /** @returns {Paragraph} */\r\n  function paragraph() {\r\n    return {\r\n      type: 'paragraph',\r\n      children: []\r\n    };\r\n  }\r\n\r\n  /** @returns {Strong} */\r\n  function strong() {\r\n    return {\r\n      type: 'strong',\r\n      children: []\r\n    };\r\n  }\r\n\r\n  /** @returns {Text} */\r\n  function text() {\r\n    return {\r\n      type: 'text',\r\n      value: ''\r\n    };\r\n  }\r\n\r\n  /** @returns {ThematicBreak} */\r\n  function thematicBreak() {\r\n    return {\r\n      type: 'thematicBreak'\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Copy a point-like value.\r\n *\r\n * @param {Point} d\r\n *   Point-like value.\r\n * @returns {Point}\r\n *   unist point.\r\n */\r\nfunction point(d) {\r\n  return {\r\n    line: d.line,\r\n    column: d.column,\r\n    offset: d.offset\r\n  };\r\n}\r\n\r\n/**\r\n * @param {Config} combined\r\n * @param {Array<Array<Extension> | Extension>} extensions\r\n * @returns {undefined}\r\n */\r\nfunction configure(combined, extensions) {\r\n  let index = -1;\r\n  while (++index < extensions.length) {\r\n    const value = extensions[index];\r\n    if (Array.isArray(value)) {\r\n      configure(combined, value);\r\n    } else {\r\n      extension(combined, value);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Config} combined\r\n * @param {Extension} extension\r\n * @returns {undefined}\r\n */\r\nfunction extension(combined, extension) {\r\n  /** @type {keyof Extension} */\r\n  let key;\r\n  for (key in extension) {\r\n    if (own.call(extension, key)) {\r\n      switch (key) {\r\n        case 'canContainEols':\r\n          {\r\n            const right = extension[key];\r\n            if (right) {\r\n              combined[key].push(...right);\r\n            }\r\n            break;\r\n          }\r\n        case 'transforms':\r\n          {\r\n            const right = extension[key];\r\n            if (right) {\r\n              combined[key].push(...right);\r\n            }\r\n            break;\r\n          }\r\n        case 'enter':\r\n        case 'exit':\r\n          {\r\n            const right = extension[key];\r\n            if (right) {\r\n              Object.assign(combined[key], right);\r\n            }\r\n            break;\r\n          }\r\n        // No default\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/** @type {OnEnterError} */\r\nfunction defaultOnError(left, right) {\r\n  if (left) {\r\n    throw new Error('Cannot close `' + left.type + '` (' + stringifyPosition({\r\n      start: left.start,\r\n      end: left.end\r\n    }) + '): a different token (`' + right.type + '`, ' + stringifyPosition({\r\n      start: right.start,\r\n      end: right.end\r\n    }) + ') is open');\r\n  } else {\r\n    throw new Error('Cannot close document, a token (`' + right.type + '`, ' + stringifyPosition({\r\n      start: right.start,\r\n      end: right.end\r\n    }) + ') is still open');\r\n  }\r\n}","/**\r\n * @typedef {import('mdast').Root} Root\r\n * @typedef {import('mdast-util-from-markdown').Options} FromMarkdownOptions\r\n * @typedef {import('unified').Parser<Root>} Parser\r\n * @typedef {import('unified').Processor<Root>} Processor\r\n */\r\n\r\n/**\r\n * @typedef {Omit<FromMarkdownOptions, 'extensions' | 'mdastExtensions'>} Options\r\n */\r\n\r\nimport {fromMarkdown} from 'mdast-util-from-markdown'\r\n\r\n/**\r\n * Aadd support for parsing from markdown.\r\n *\r\n * @param {Readonly<Options> | null | undefined} [options]\r\n *   Configuration (optional).\r\n * @returns {undefined}\r\n *   Nothing.\r\n */\r\nexport default function remarkParse(options) {\r\n  /** @type {Processor} */\r\n  // @ts-expect-error: TS in JSDoc generates wrong types if `this` is typed regularly.\r\n  const self = this\r\n\r\n  self.parser = parser\r\n\r\n  /**\r\n   * @type {Parser}\r\n   */\r\n  function parser(doc) {\r\n    return fromMarkdown(doc, {\r\n      ...self.data('settings'),\r\n      ...options,\r\n      // Note: these options are not in the readme.\r\n      // The goal is for them to be set by plugins on `data` instead of being\r\n      // passed by users.\r\n      extensions: self.data('micromarkExtensions') || [],\r\n      mdastExtensions: self.data('fromMarkdownExtensions') || []\r\n    })\r\n  }\r\n}\r\n","/**\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('mdast').Blockquote} Blockquote\r\n * @typedef {import('../state.js').State} State\r\n */\r\n\r\n// Make VS Code show references to the above types.\r\n''\r\n\r\n/**\r\n * Turn an mdast `blockquote` node into hast.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {Blockquote} node\r\n *   mdast node.\r\n * @returns {Element}\r\n *   hast node.\r\n */\r\nexport function blockquote(state, node) {\r\n  /** @type {Element} */\r\n  const result = {\r\n    type: 'element',\r\n    tagName: 'blockquote',\r\n    properties: {},\r\n    children: state.wrap(state.all(node), true)\r\n  }\r\n  state.patch(node, result)\r\n  return state.applyData(node, result)\r\n}\r\n","/**\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('hast').Text} Text\r\n * @typedef {import('mdast').Break} Break\r\n * @typedef {import('../state.js').State} State\r\n */\r\n\r\n// Make VS Code show references to the above types.\r\n''\r\n\r\n/**\r\n * Turn an mdast `break` node into hast.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {Break} node\r\n *   mdast node.\r\n * @returns {Array<Element | Text>}\r\n *   hast element content.\r\n */\r\nexport function hardBreak(state, node) {\r\n  /** @type {Element} */\r\n  const result = {type: 'element', tagName: 'br', properties: {}, children: []}\r\n  state.patch(node, result)\r\n  return [state.applyData(node, result), {type: 'text', value: '\\n'}]\r\n}\r\n","/**\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('hast').Properties} Properties\r\n * @typedef {import('mdast').Code} Code\r\n * @typedef {import('../state.js').State} State\r\n */\r\n\r\n// Make VS Code show references to the above types.\r\n''\r\n\r\n/**\r\n * Turn an mdast `code` node into hast.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {Code} node\r\n *   mdast node.\r\n * @returns {Element}\r\n *   hast node.\r\n */\r\nexport function code(state, node) {\r\n  const value = node.value ? node.value + '\\n' : ''\r\n  /** @type {Properties} */\r\n  const properties = {}\r\n\r\n  if (node.lang) {\r\n    properties.className = ['language-' + node.lang]\r\n  }\r\n\r\n  // Create `<code>`.\r\n  /** @type {Element} */\r\n  let result = {\r\n    type: 'element',\r\n    tagName: 'code',\r\n    properties,\r\n    children: [{type: 'text', value}]\r\n  }\r\n\r\n  if (node.meta) {\r\n    result.data = {meta: node.meta}\r\n  }\r\n\r\n  state.patch(node, result)\r\n  result = state.applyData(node, result)\r\n\r\n  // Create `<pre>`.\r\n  result = {type: 'element', tagName: 'pre', properties: {}, children: [result]}\r\n  state.patch(node, result)\r\n  return result\r\n}\r\n","/**\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('mdast').Delete} Delete\r\n * @typedef {import('../state.js').State} State\r\n */\r\n\r\n// Make VS Code show references to the above types.\r\n''\r\n\r\n/**\r\n * Turn an mdast `delete` node into hast.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {Delete} node\r\n *   mdast node.\r\n * @returns {Element}\r\n *   hast node.\r\n */\r\nexport function strikethrough(state, node) {\r\n  /** @type {Element} */\r\n  const result = {\r\n    type: 'element',\r\n    tagName: 'del',\r\n    properties: {},\r\n    children: state.all(node)\r\n  }\r\n  state.patch(node, result)\r\n  return state.applyData(node, result)\r\n}\r\n","/**\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('mdast').Emphasis} Emphasis\r\n * @typedef {import('../state.js').State} State\r\n */\r\n\r\n// Make VS Code show references to the above types.\r\n''\r\n\r\n/**\r\n * Turn an mdast `emphasis` node into hast.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {Emphasis} node\r\n *   mdast node.\r\n * @returns {Element}\r\n *   hast node.\r\n */\r\nexport function emphasis(state, node) {\r\n  /** @type {Element} */\r\n  const result = {\r\n    type: 'element',\r\n    tagName: 'em',\r\n    properties: {},\r\n    children: state.all(node)\r\n  }\r\n  state.patch(node, result)\r\n  return state.applyData(node, result)\r\n}\r\n","/**\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\r\n * @typedef {import('../state.js').State} State\r\n */\r\n\r\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\r\n\r\n/**\r\n * Turn an mdast `footnoteReference` node into hast.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {FootnoteReference} node\r\n *   mdast node.\r\n * @returns {Element}\r\n *   hast node.\r\n */\r\nexport function footnoteReference(state, node) {\r\n  const clobberPrefix =\r\n    typeof state.options.clobberPrefix === 'string'\r\n      ? state.options.clobberPrefix\r\n      : 'user-content-'\r\n  const id = String(node.identifier).toUpperCase()\r\n  const safeId = normalizeUri(id.toLowerCase())\r\n  const index = state.footnoteOrder.indexOf(id)\r\n  /** @type {number} */\r\n  let counter\r\n\r\n  let reuseCounter = state.footnoteCounts.get(id)\r\n\r\n  if (reuseCounter === undefined) {\r\n    reuseCounter = 0\r\n    state.footnoteOrder.push(id)\r\n    counter = state.footnoteOrder.length\r\n  } else {\r\n    counter = index + 1\r\n  }\r\n\r\n  reuseCounter += 1\r\n  state.footnoteCounts.set(id, reuseCounter)\r\n\r\n  /** @type {Element} */\r\n  const link = {\r\n    type: 'element',\r\n    tagName: 'a',\r\n    properties: {\r\n      href: '#' + clobberPrefix + 'fn-' + safeId,\r\n      id:\r\n        clobberPrefix +\r\n        'fnref-' +\r\n        safeId +\r\n        (reuseCounter > 1 ? '-' + reuseCounter : ''),\r\n      dataFootnoteRef: true,\r\n      ariaDescribedBy: ['footnote-label']\r\n    },\r\n    children: [{type: 'text', value: String(counter)}]\r\n  }\r\n  state.patch(node, link)\r\n\r\n  /** @type {Element} */\r\n  const sup = {\r\n    type: 'element',\r\n    tagName: 'sup',\r\n    properties: {},\r\n    children: [link]\r\n  }\r\n  state.patch(node, sup)\r\n  return state.applyData(node, sup)\r\n}\r\n","/**\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('mdast').Heading} Heading\r\n * @typedef {import('../state.js').State} State\r\n */\r\n\r\n// Make VS Code show references to the above types.\r\n''\r\n\r\n/**\r\n * Turn an mdast `heading` node into hast.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {Heading} node\r\n *   mdast node.\r\n * @returns {Element}\r\n *   hast node.\r\n */\r\nexport function heading(state, node) {\r\n  /** @type {Element} */\r\n  const result = {\r\n    type: 'element',\r\n    tagName: 'h' + node.depth,\r\n    properties: {},\r\n    children: state.all(node)\r\n  }\r\n  state.patch(node, result)\r\n  return state.applyData(node, result)\r\n}\r\n","/**\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('mdast').Html} Html\r\n * @typedef {import('../state.js').State} State\r\n * @typedef {import('../../index.js').Raw} Raw\r\n */\r\n\r\n// Make VS Code show references to the above types.\r\n''\r\n\r\n/**\r\n * Turn an mdast `html` node into hast (`raw` node in dangerous mode, otherwise\r\n * nothing).\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {Html} node\r\n *   mdast node.\r\n * @returns {Element | Raw | undefined}\r\n *   hast node.\r\n */\r\nexport function html(state, node) {\r\n  if (state.options.allowDangerousHtml) {\r\n    /** @type {Raw} */\r\n    const result = {type: 'raw', value: node.value}\r\n    state.patch(node, result)\r\n    return state.applyData(node, result)\r\n  }\r\n\r\n  return undefined\r\n}\r\n","/**\r\n * @typedef {import('hast').ElementContent} ElementContent\r\n *\r\n * @typedef {import('mdast').Nodes} Nodes\r\n * @typedef {import('mdast').Reference} Reference\r\n *\r\n * @typedef {import('./state.js').State} State\r\n */\r\n\r\n// Make VS Code show references to the above types.\r\n''\r\n\r\n/**\r\n * Return the content of a reference without definition as plain text.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {Extract<Nodes, Reference>} node\r\n *   Reference node (image, link).\r\n * @returns {Array<ElementContent>}\r\n *   hast content.\r\n */\r\nexport function revert(state, node) {\r\n  const subtype = node.referenceType\r\n  let suffix = ']'\r\n\r\n  if (subtype === 'collapsed') {\r\n    suffix += '[]'\r\n  } else if (subtype === 'full') {\r\n    suffix += '[' + (node.label || node.identifier) + ']'\r\n  }\r\n\r\n  if (node.type === 'imageReference') {\r\n    return [{type: 'text', value: '![' + node.alt + suffix}]\r\n  }\r\n\r\n  const contents = state.all(node)\r\n  const head = contents[0]\r\n\r\n  if (head && head.type === 'text') {\r\n    head.value = '[' + head.value\r\n  } else {\r\n    contents.unshift({type: 'text', value: '['})\r\n  }\r\n\r\n  const tail = contents[contents.length - 1]\r\n\r\n  if (tail && tail.type === 'text') {\r\n    tail.value += suffix\r\n  } else {\r\n    contents.push({type: 'text', value: suffix})\r\n  }\r\n\r\n  return contents\r\n}\r\n","/**\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('hast').ElementContent} ElementContent\r\n * @typedef {import('hast').Properties} Properties\r\n * @typedef {import('mdast').ImageReference} ImageReference\r\n * @typedef {import('../state.js').State} State\r\n */\r\n\r\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\r\nimport {revert} from '../revert.js'\r\n\r\n/**\r\n * Turn an mdast `imageReference` node into hast.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {ImageReference} node\r\n *   mdast node.\r\n * @returns {Array<ElementContent> | ElementContent}\r\n *   hast node.\r\n */\r\nexport function imageReference(state, node) {\r\n  const id = String(node.identifier).toUpperCase()\r\n  const definition = state.definitionById.get(id)\r\n\r\n  if (!definition) {\r\n    return revert(state, node)\r\n  }\r\n\r\n  /** @type {Properties} */\r\n  const properties = {src: normalizeUri(definition.url || ''), alt: node.alt}\r\n\r\n  if (definition.title !== null && definition.title !== undefined) {\r\n    properties.title = definition.title\r\n  }\r\n\r\n  /** @type {Element} */\r\n  const result = {type: 'element', tagName: 'img', properties, children: []}\r\n  state.patch(node, result)\r\n  return state.applyData(node, result)\r\n}\r\n","/**\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('hast').Properties} Properties\r\n * @typedef {import('mdast').Image} Image\r\n * @typedef {import('../state.js').State} State\r\n */\r\n\r\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\r\n\r\n/**\r\n * Turn an mdast `image` node into hast.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {Image} node\r\n *   mdast node.\r\n * @returns {Element}\r\n *   hast node.\r\n */\r\nexport function image(state, node) {\r\n  /** @type {Properties} */\r\n  const properties = {src: normalizeUri(node.url)}\r\n\r\n  if (node.alt !== null && node.alt !== undefined) {\r\n    properties.alt = node.alt\r\n  }\r\n\r\n  if (node.title !== null && node.title !== undefined) {\r\n    properties.title = node.title\r\n  }\r\n\r\n  /** @type {Element} */\r\n  const result = {type: 'element', tagName: 'img', properties, children: []}\r\n  state.patch(node, result)\r\n  return state.applyData(node, result)\r\n}\r\n","/**\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('hast').Text} Text\r\n * @typedef {import('mdast').InlineCode} InlineCode\r\n * @typedef {import('../state.js').State} State\r\n */\r\n\r\n// Make VS Code show references to the above types.\r\n''\r\n\r\n/**\r\n * Turn an mdast `inlineCode` node into hast.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {InlineCode} node\r\n *   mdast node.\r\n * @returns {Element}\r\n *   hast node.\r\n */\r\nexport function inlineCode(state, node) {\r\n  /** @type {Text} */\r\n  const text = {type: 'text', value: node.value.replace(/\\r?\\n|\\r/g, ' ')}\r\n  state.patch(node, text)\r\n\r\n  /** @type {Element} */\r\n  const result = {\r\n    type: 'element',\r\n    tagName: 'code',\r\n    properties: {},\r\n    children: [text]\r\n  }\r\n  state.patch(node, result)\r\n  return state.applyData(node, result)\r\n}\r\n","/**\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('hast').ElementContent} ElementContent\r\n * @typedef {import('hast').Properties} Properties\r\n * @typedef {import('mdast').LinkReference} LinkReference\r\n * @typedef {import('../state.js').State} State\r\n */\r\n\r\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\r\nimport {revert} from '../revert.js'\r\n\r\n/**\r\n * Turn an mdast `linkReference` node into hast.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {LinkReference} node\r\n *   mdast node.\r\n * @returns {Array<ElementContent> | ElementContent}\r\n *   hast node.\r\n */\r\nexport function linkReference(state, node) {\r\n  const id = String(node.identifier).toUpperCase()\r\n  const definition = state.definitionById.get(id)\r\n\r\n  if (!definition) {\r\n    return revert(state, node)\r\n  }\r\n\r\n  /** @type {Properties} */\r\n  const properties = {href: normalizeUri(definition.url || '')}\r\n\r\n  if (definition.title !== null && definition.title !== undefined) {\r\n    properties.title = definition.title\r\n  }\r\n\r\n  /** @type {Element} */\r\n  const result = {\r\n    type: 'element',\r\n    tagName: 'a',\r\n    properties,\r\n    children: state.all(node)\r\n  }\r\n  state.patch(node, result)\r\n  return state.applyData(node, result)\r\n}\r\n","/**\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('hast').Properties} Properties\r\n * @typedef {import('mdast').Link} Link\r\n * @typedef {import('../state.js').State} State\r\n */\r\n\r\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\r\n\r\n/**\r\n * Turn an mdast `link` node into hast.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {Link} node\r\n *   mdast node.\r\n * @returns {Element}\r\n *   hast node.\r\n */\r\nexport function link(state, node) {\r\n  /** @type {Properties} */\r\n  const properties = {href: normalizeUri(node.url)}\r\n\r\n  if (node.title !== null && node.title !== undefined) {\r\n    properties.title = node.title\r\n  }\r\n\r\n  /** @type {Element} */\r\n  const result = {\r\n    type: 'element',\r\n    tagName: 'a',\r\n    properties,\r\n    children: state.all(node)\r\n  }\r\n  state.patch(node, result)\r\n  return state.applyData(node, result)\r\n}\r\n","/**\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('hast').ElementContent} ElementContent\r\n * @typedef {import('hast').Properties} Properties\r\n * @typedef {import('mdast').ListItem} ListItem\r\n * @typedef {import('mdast').Parents} Parents\r\n * @typedef {import('../state.js').State} State\r\n */\r\n\r\n// Make VS Code show references to the above types.\r\n''\r\n\r\n/**\r\n * Turn an mdast `listItem` node into hast.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {ListItem} node\r\n *   mdast node.\r\n * @param {Parents | undefined} parent\r\n *   Parent of `node`.\r\n * @returns {Element}\r\n *   hast node.\r\n */\r\nexport function listItem(state, node, parent) {\r\n  const results = state.all(node)\r\n  const loose = parent ? listLoose(parent) : listItemLoose(node)\r\n  /** @type {Properties} */\r\n  const properties = {}\r\n  /** @type {Array<ElementContent>} */\r\n  const children = []\r\n\r\n  if (typeof node.checked === 'boolean') {\r\n    const head = results[0]\r\n    /** @type {Element} */\r\n    let paragraph\r\n\r\n    if (head && head.type === 'element' && head.tagName === 'p') {\r\n      paragraph = head\r\n    } else {\r\n      paragraph = {type: 'element', tagName: 'p', properties: {}, children: []}\r\n      results.unshift(paragraph)\r\n    }\r\n\r\n    if (paragraph.children.length > 0) {\r\n      paragraph.children.unshift({type: 'text', value: ' '})\r\n    }\r\n\r\n    paragraph.children.unshift({\r\n      type: 'element',\r\n      tagName: 'input',\r\n      properties: {type: 'checkbox', checked: node.checked, disabled: true},\r\n      children: []\r\n    })\r\n\r\n    // According to github-markdown-css, this class hides bullet.\r\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\r\n    properties.className = ['task-list-item']\r\n  }\r\n\r\n  let index = -1\r\n\r\n  while (++index < results.length) {\r\n    const child = results[index]\r\n\r\n    // Add eols before nodes, except if this is a loose, first paragraph.\r\n    if (\r\n      loose ||\r\n      index !== 0 ||\r\n      child.type !== 'element' ||\r\n      child.tagName !== 'p'\r\n    ) {\r\n      children.push({type: 'text', value: '\\n'})\r\n    }\r\n\r\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\r\n      children.push(...child.children)\r\n    } else {\r\n      children.push(child)\r\n    }\r\n  }\r\n\r\n  const tail = results[results.length - 1]\r\n\r\n  // Add a final eol.\r\n  if (tail && (loose || tail.type !== 'element' || tail.tagName !== 'p')) {\r\n    children.push({type: 'text', value: '\\n'})\r\n  }\r\n\r\n  /** @type {Element} */\r\n  const result = {type: 'element', tagName: 'li', properties, children}\r\n  state.patch(node, result)\r\n  return state.applyData(node, result)\r\n}\r\n\r\n/**\r\n * @param {Parents} node\r\n * @return {Boolean}\r\n */\r\nfunction listLoose(node) {\r\n  let loose = false\r\n  if (node.type === 'list') {\r\n    loose = node.spread || false\r\n    const children = node.children\r\n    let index = -1\r\n\r\n    while (!loose && ++index < children.length) {\r\n      loose = listItemLoose(children[index])\r\n    }\r\n  }\r\n\r\n  return loose\r\n}\r\n\r\n/**\r\n * @param {ListItem} node\r\n * @return {Boolean}\r\n */\r\nfunction listItemLoose(node) {\r\n  const spread = node.spread\r\n\r\n  return spread === null || spread === undefined\r\n    ? node.children.length > 1\r\n    : spread\r\n}\r\n","/**\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('hast').Properties} Properties\r\n * @typedef {import('mdast').List} List\r\n * @typedef {import('../state.js').State} State\r\n */\r\n\r\n// Make VS Code show references to the above types.\r\n''\r\n\r\n/**\r\n * Turn an mdast `list` node into hast.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {List} node\r\n *   mdast node.\r\n * @returns {Element}\r\n *   hast node.\r\n */\r\nexport function list(state, node) {\r\n  /** @type {Properties} */\r\n  const properties = {}\r\n  const results = state.all(node)\r\n  let index = -1\r\n\r\n  if (typeof node.start === 'number' && node.start !== 1) {\r\n    properties.start = node.start\r\n  }\r\n\r\n  // Like GitHub, add a class for custom styling.\r\n  while (++index < results.length) {\r\n    const child = results[index]\r\n\r\n    if (\r\n      child.type === 'element' &&\r\n      child.tagName === 'li' &&\r\n      child.properties &&\r\n      Array.isArray(child.properties.className) &&\r\n      child.properties.className.includes('task-list-item')\r\n    ) {\r\n      properties.className = ['contains-task-list']\r\n      break\r\n    }\r\n  }\r\n\r\n  /** @type {Element} */\r\n  const result = {\r\n    type: 'element',\r\n    tagName: node.ordered ? 'ol' : 'ul',\r\n    properties,\r\n    children: state.wrap(results, true)\r\n  }\r\n  state.patch(node, result)\r\n  return state.applyData(node, result)\r\n}\r\n","/**\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('mdast').Paragraph} Paragraph\r\n * @typedef {import('../state.js').State} State\r\n */\r\n\r\n// Make VS Code show references to the above types.\r\n''\r\n\r\n/**\r\n * Turn an mdast `paragraph` node into hast.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {Paragraph} node\r\n *   mdast node.\r\n * @returns {Element}\r\n *   hast node.\r\n */\r\nexport function paragraph(state, node) {\r\n  /** @type {Element} */\r\n  const result = {\r\n    type: 'element',\r\n    tagName: 'p',\r\n    properties: {},\r\n    children: state.all(node)\r\n  }\r\n  state.patch(node, result)\r\n  return state.applyData(node, result)\r\n}\r\n","/**\r\n * @typedef {import('hast').Parents} HastParents\r\n * @typedef {import('hast').Root} HastRoot\r\n * @typedef {import('mdast').Root} MdastRoot\r\n * @typedef {import('../state.js').State} State\r\n */\r\n\r\n// Make VS Code show references to the above types.\r\n''\r\n\r\n/**\r\n * Turn an mdast `root` node into hast.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {MdastRoot} node\r\n *   mdast node.\r\n * @returns {HastParents}\r\n *   hast node.\r\n */\r\nexport function root(state, node) {\r\n  /** @type {HastRoot} */\r\n  const result = {type: 'root', children: state.wrap(state.all(node))}\r\n  state.patch(node, result)\r\n  return state.applyData(node, result)\r\n}\r\n","/**\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('mdast').Strong} Strong\r\n * @typedef {import('../state.js').State} State\r\n */\r\n\r\n// Make VS Code show references to the above types.\r\n''\r\n\r\n/**\r\n * Turn an mdast `strong` node into hast.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {Strong} node\r\n *   mdast node.\r\n * @returns {Element}\r\n *   hast node.\r\n */\r\nexport function strong(state, node) {\r\n  /** @type {Element} */\r\n  const result = {\r\n    type: 'element',\r\n    tagName: 'strong',\r\n    properties: {},\r\n    children: state.all(node)\r\n  }\r\n  state.patch(node, result)\r\n  return state.applyData(node, result)\r\n}\r\n","/**\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('mdast').Table} Table\r\n * @typedef {import('../state.js').State} State\r\n */\r\n\r\nimport {pointEnd, pointStart} from 'unist-util-position'\r\n\r\n/**\r\n * Turn an mdast `table` node into hast.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {Table} node\r\n *   mdast node.\r\n * @returns {Element}\r\n *   hast node.\r\n */\r\nexport function table(state, node) {\r\n  const rows = state.all(node)\r\n  const firstRow = rows.shift()\r\n  /** @type {Array<Element>} */\r\n  const tableContent = []\r\n\r\n  if (firstRow) {\r\n    /** @type {Element} */\r\n    const head = {\r\n      type: 'element',\r\n      tagName: 'thead',\r\n      properties: {},\r\n      children: state.wrap([firstRow], true)\r\n    }\r\n    state.patch(node.children[0], head)\r\n    tableContent.push(head)\r\n  }\r\n\r\n  if (rows.length > 0) {\r\n    /** @type {Element} */\r\n    const body = {\r\n      type: 'element',\r\n      tagName: 'tbody',\r\n      properties: {},\r\n      children: state.wrap(rows, true)\r\n    }\r\n\r\n    const start = pointStart(node.children[1])\r\n    const end = pointEnd(node.children[node.children.length - 1])\r\n    if (start && end) body.position = {start, end}\r\n    tableContent.push(body)\r\n  }\r\n\r\n  /** @type {Element} */\r\n  const result = {\r\n    type: 'element',\r\n    tagName: 'table',\r\n    properties: {},\r\n    children: state.wrap(tableContent, true)\r\n  }\r\n  state.patch(node, result)\r\n  return state.applyData(node, result)\r\n}\r\n","/**\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('hast').ElementContent} ElementContent\r\n * @typedef {import('hast').Properties} Properties\r\n * @typedef {import('mdast').Parents} Parents\r\n * @typedef {import('mdast').TableRow} TableRow\r\n * @typedef {import('../state.js').State} State\r\n */\r\n\r\n// Make VS Code show references to the above types.\r\n''\r\n\r\n/**\r\n * Turn an mdast `tableRow` node into hast.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {TableRow} node\r\n *   mdast node.\r\n * @param {Parents | undefined} parent\r\n *   Parent of `node`.\r\n * @returns {Element}\r\n *   hast node.\r\n */\r\nexport function tableRow(state, node, parent) {\r\n  const siblings = parent ? parent.children : undefined\r\n  // Generate a body row when without parent.\r\n  const rowIndex = siblings ? siblings.indexOf(node) : 1\r\n  const tagName = rowIndex === 0 ? 'th' : 'td'\r\n  // To do: option to use `style`?\r\n  const align = parent && parent.type === 'table' ? parent.align : undefined\r\n  const length = align ? align.length : node.children.length\r\n  let cellIndex = -1\r\n  /** @type {Array<ElementContent>} */\r\n  const cells = []\r\n\r\n  while (++cellIndex < length) {\r\n    // Note: can also be undefined.\r\n    const cell = node.children[cellIndex]\r\n    /** @type {Properties} */\r\n    const properties = {}\r\n    const alignValue = align ? align[cellIndex] : undefined\r\n\r\n    if (alignValue) {\r\n      properties.align = alignValue\r\n    }\r\n\r\n    /** @type {Element} */\r\n    let result = {type: 'element', tagName, properties, children: []}\r\n\r\n    if (cell) {\r\n      result.children = state.all(cell)\r\n      state.patch(cell, result)\r\n      result = state.applyData(cell, result)\r\n    }\r\n\r\n    cells.push(result)\r\n  }\r\n\r\n  /** @type {Element} */\r\n  const result = {\r\n    type: 'element',\r\n    tagName: 'tr',\r\n    properties: {},\r\n    children: state.wrap(cells, true)\r\n  }\r\n  state.patch(node, result)\r\n  return state.applyData(node, result)\r\n}\r\n","/**\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('mdast').TableCell} TableCell\r\n * @typedef {import('../state.js').State} State\r\n */\r\n\r\n// Make VS Code show references to the above types.\r\n''\r\n\r\n/**\r\n * Turn an mdast `tableCell` node into hast.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {TableCell} node\r\n *   mdast node.\r\n * @returns {Element}\r\n *   hast node.\r\n */\r\nexport function tableCell(state, node) {\r\n  // Note: this function is normally not called: see `table-row` for how rows\r\n  // and their cells are compiled.\r\n  /** @type {Element} */\r\n  const result = {\r\n    type: 'element',\r\n    tagName: 'td', // Assume body cell.\r\n    properties: {},\r\n    children: state.all(node)\r\n  }\r\n  state.patch(node, result)\r\n  return state.applyData(node, result)\r\n}\r\n","const tab = 9 /* `\\t` */\r\nconst space = 32 /* ` ` */\r\n\r\n/**\r\n * Remove initial and final spaces and tabs at the line breaks in `value`.\r\n * Does not trim initial and final spaces and tabs of the value itself.\r\n *\r\n * @param {string} value\r\n *   Value to trim.\r\n * @returns {string}\r\n *   Trimmed value.\r\n */\r\nexport function trimLines(value) {\r\n  const source = String(value)\r\n  const search = /\\r?\\n|\\r/g\r\n  let match = search.exec(source)\r\n  let last = 0\r\n  /** @type {Array<string>} */\r\n  const lines = []\r\n\r\n  while (match) {\r\n    lines.push(\r\n      trimLine(source.slice(last, match.index), last > 0, true),\r\n      match[0]\r\n    )\r\n\r\n    last = match.index + match[0].length\r\n    match = search.exec(source)\r\n  }\r\n\r\n  lines.push(trimLine(source.slice(last), last > 0, false))\r\n\r\n  return lines.join('')\r\n}\r\n\r\n/**\r\n * @param {string} value\r\n *   Line to trim.\r\n * @param {boolean} start\r\n *   Whether to trim the start of the line.\r\n * @param {boolean} end\r\n *   Whether to trim the end of the line.\r\n * @returns {string}\r\n *   Trimmed line.\r\n */\r\nfunction trimLine(value, start, end) {\r\n  let startIndex = 0\r\n  let endIndex = value.length\r\n\r\n  if (start) {\r\n    let code = value.codePointAt(startIndex)\r\n\r\n    while (code === tab || code === space) {\r\n      startIndex++\r\n      code = value.codePointAt(startIndex)\r\n    }\r\n  }\r\n\r\n  if (end) {\r\n    let code = value.codePointAt(endIndex - 1)\r\n\r\n    while (code === tab || code === space) {\r\n      endIndex--\r\n      code = value.codePointAt(endIndex - 1)\r\n    }\r\n  }\r\n\r\n  return endIndex > startIndex ? value.slice(startIndex, endIndex) : ''\r\n}\r\n","/**\r\n * @typedef {import('hast').Element} HastElement\r\n * @typedef {import('hast').Text} HastText\r\n * @typedef {import('mdast').Text} MdastText\r\n * @typedef {import('../state.js').State} State\r\n */\r\n\r\nimport {trimLines} from 'trim-lines'\r\n\r\n/**\r\n * Turn an mdast `text` node into hast.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {MdastText} node\r\n *   mdast node.\r\n * @returns {HastElement | HastText}\r\n *   hast node.\r\n */\r\nexport function text(state, node) {\r\n  /** @type {HastText} */\r\n  const result = {type: 'text', value: trimLines(String(node.value))}\r\n  state.patch(node, result)\r\n  return state.applyData(node, result)\r\n}\r\n","/**\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\r\n * @typedef {import('../state.js').State} State\r\n */\r\n\r\n// Make VS Code show references to the above types.\r\n''\r\n\r\n/**\r\n * Turn an mdast `thematicBreak` node into hast.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {ThematicBreak} node\r\n *   mdast node.\r\n * @returns {Element}\r\n *   hast node.\r\n */\r\nexport function thematicBreak(state, node) {\r\n  /** @type {Element} */\r\n  const result = {\r\n    type: 'element',\r\n    tagName: 'hr',\r\n    properties: {},\r\n    children: []\r\n  }\r\n  state.patch(node, result)\r\n  return state.applyData(node, result)\r\n}\r\n","import {blockquote} from './blockquote.js'\r\nimport {hardBreak} from './break.js'\r\nimport {code} from './code.js'\r\nimport {strikethrough} from './delete.js'\r\nimport {emphasis} from './emphasis.js'\r\nimport {footnoteReference} from './footnote-reference.js'\r\nimport {heading} from './heading.js'\r\nimport {html} from './html.js'\r\nimport {imageReference} from './image-reference.js'\r\nimport {image} from './image.js'\r\nimport {inlineCode} from './inline-code.js'\r\nimport {linkReference} from './link-reference.js'\r\nimport {link} from './link.js'\r\nimport {listItem} from './list-item.js'\r\nimport {list} from './list.js'\r\nimport {paragraph} from './paragraph.js'\r\nimport {root} from './root.js'\r\nimport {strong} from './strong.js'\r\nimport {table} from './table.js'\r\nimport {tableRow} from './table-row.js'\r\nimport {tableCell} from './table-cell.js'\r\nimport {text} from './text.js'\r\nimport {thematicBreak} from './thematic-break.js'\r\n\r\n/**\r\n * Default handlers for nodes.\r\n *\r\n * @satisfies {import('../state.js').Handlers}\r\n */\r\nexport const handlers = {\r\n  blockquote,\r\n  break: hardBreak,\r\n  code,\r\n  delete: strikethrough,\r\n  emphasis,\r\n  footnoteReference,\r\n  heading,\r\n  html,\r\n  imageReference,\r\n  image,\r\n  inlineCode,\r\n  linkReference,\r\n  link,\r\n  listItem,\r\n  list,\r\n  paragraph,\r\n  // @ts-expect-error: root is different, but hard to type.\r\n  root,\r\n  strong,\r\n  table,\r\n  tableCell,\r\n  tableRow,\r\n  text,\r\n  thematicBreak,\r\n  toml: ignore,\r\n  yaml: ignore,\r\n  definition: ignore,\r\n  footnoteDefinition: ignore\r\n}\r\n\r\n// Return nothing for nodes that are ignored.\r\nfunction ignore() {\r\n  return undefined\r\n}\r\n","export const VOID       = -1;\r\nexport const PRIMITIVE  = 0;\r\nexport const ARRAY      = 1;\r\nexport const OBJECT     = 2;\r\nexport const DATE       = 3;\r\nexport const REGEXP     = 4;\r\nexport const MAP        = 5;\r\nexport const SET        = 6;\r\nexport const ERROR      = 7;\r\nexport const BIGINT     = 8;\r\n// export const SYMBOL = 9;\r\n","import {\r\n  VOID, PRIMITIVE,\r\n  ARRAY, OBJECT,\r\n  DATE, REGEXP, MAP, SET,\r\n  ERROR, BIGINT\r\n} from './types.js';\r\n\r\nconst env = typeof self === 'object' ? self : globalThis;\r\n\r\nconst deserializer = ($, _) => {\r\n  const as = (out, index) => {\r\n    $.set(index, out);\r\n    return out;\r\n  };\r\n\r\n  const unpair = index => {\r\n    if ($.has(index))\r\n      return $.get(index);\r\n\r\n    const [type, value] = _[index];\r\n    switch (type) {\r\n      case PRIMITIVE:\r\n      case VOID:\r\n        return as(value, index);\r\n      case ARRAY: {\r\n        const arr = as([], index);\r\n        for (const index of value)\r\n          arr.push(unpair(index));\r\n        return arr;\r\n      }\r\n      case OBJECT: {\r\n        const object = as({}, index);\r\n        for (const [key, index] of value)\r\n          object[unpair(key)] = unpair(index);\r\n        return object;\r\n      }\r\n      case DATE:\r\n        return as(new Date(value), index);\r\n      case REGEXP: {\r\n        const {source, flags} = value;\r\n        return as(new RegExp(source, flags), index);\r\n      }\r\n      case MAP: {\r\n        const map = as(new Map, index);\r\n        for (const [key, index] of value)\r\n          map.set(unpair(key), unpair(index));\r\n        return map;\r\n      }\r\n      case SET: {\r\n        const set = as(new Set, index);\r\n        for (const index of value)\r\n          set.add(unpair(index));\r\n        return set;\r\n      }\r\n      case ERROR: {\r\n        const {name, message} = value;\r\n        return as(new env[name](message), index);\r\n      }\r\n      case BIGINT:\r\n        return as(BigInt(value), index);\r\n      case 'BigInt':\r\n        return as(Object(BigInt(value)), index);\r\n      case 'ArrayBuffer':\r\n        return as(new Uint8Array(value).buffer, value);\r\n      case 'DataView': {\r\n        const { buffer } = new Uint8Array(value);\r\n        return as(new DataView(buffer), value);\r\n      }\r\n    }\r\n    return as(new env[type](value), index);\r\n  };\r\n\r\n  return unpair;\r\n};\r\n\r\n/**\r\n * @typedef {Array<string,any>} Record a type representation\r\n */\r\n\r\n/**\r\n * Returns a deserialized value from a serialized array of Records.\r\n * @param {Record[]} serialized a previously serialized value.\r\n * @returns {any}\r\n */\r\nexport const deserialize = serialized => deserializer(new Map, serialized)(0);\r\n","import {\r\n  VOID, PRIMITIVE,\r\n  ARRAY, OBJECT,\r\n  DATE, REGEXP, MAP, SET,\r\n  ERROR, BIGINT\r\n} from './types.js';\r\n\r\nconst EMPTY = '';\r\n\r\nconst {toString} = {};\r\nconst {keys} = Object;\r\n\r\nconst typeOf = value => {\r\n  const type = typeof value;\r\n  if (type !== 'object' || !value)\r\n    return [PRIMITIVE, type];\r\n\r\n  const asString = toString.call(value).slice(8, -1);\r\n  switch (asString) {\r\n    case 'Array':\r\n      return [ARRAY, EMPTY];\r\n    case 'Object':\r\n      return [OBJECT, EMPTY];\r\n    case 'Date':\r\n      return [DATE, EMPTY];\r\n    case 'RegExp':\r\n      return [REGEXP, EMPTY];\r\n    case 'Map':\r\n      return [MAP, EMPTY];\r\n    case 'Set':\r\n      return [SET, EMPTY];\r\n    case 'DataView':\r\n      return [ARRAY, asString];\r\n  }\r\n\r\n  if (asString.includes('Array'))\r\n    return [ARRAY, asString];\r\n\r\n  if (asString.includes('Error'))\r\n    return [ERROR, asString];\r\n\r\n  return [OBJECT, asString];\r\n};\r\n\r\nconst shouldSkip = ([TYPE, type]) => (\r\n  TYPE === PRIMITIVE &&\r\n  (type === 'function' || type === 'symbol')\r\n);\r\n\r\nconst serializer = (strict, json, $, _) => {\r\n\r\n  const as = (out, value) => {\r\n    const index = _.push(out) - 1;\r\n    $.set(value, index);\r\n    return index;\r\n  };\r\n\r\n  const pair = value => {\r\n    if ($.has(value))\r\n      return $.get(value);\r\n\r\n    let [TYPE, type] = typeOf(value);\r\n    switch (TYPE) {\r\n      case PRIMITIVE: {\r\n        let entry = value;\r\n        switch (type) {\r\n          case 'bigint':\r\n            TYPE = BIGINT;\r\n            entry = value.toString();\r\n            break;\r\n          case 'function':\r\n          case 'symbol':\r\n            if (strict)\r\n              throw new TypeError('unable to serialize ' + type);\r\n            entry = null;\r\n            break;\r\n          case 'undefined':\r\n            return as([VOID], value);\r\n        }\r\n        return as([TYPE, entry], value);\r\n      }\r\n      case ARRAY: {\r\n        if (type) {\r\n          let spread = value;\r\n          if (type === 'DataView') {\r\n            spread = new Uint8Array(value.buffer);\r\n          }\r\n          else if (type === 'ArrayBuffer') {\r\n            spread = new Uint8Array(value);\r\n          }\r\n          return as([type, [...spread]], value);\r\n        }\r\n\r\n        const arr = [];\r\n        const index = as([TYPE, arr], value);\r\n        for (const entry of value)\r\n          arr.push(pair(entry));\r\n        return index;\r\n      }\r\n      case OBJECT: {\r\n        if (type) {\r\n          switch (type) {\r\n            case 'BigInt':\r\n              return as([type, value.toString()], value);\r\n            case 'Boolean':\r\n            case 'Number':\r\n            case 'String':\r\n              return as([type, value.valueOf()], value);\r\n          }\r\n        }\r\n\r\n        if (json && ('toJSON' in value))\r\n          return pair(value.toJSON());\r\n\r\n        const entries = [];\r\n        const index = as([TYPE, entries], value);\r\n        for (const key of keys(value)) {\r\n          if (strict || !shouldSkip(typeOf(value[key])))\r\n            entries.push([pair(key), pair(value[key])]);\r\n        }\r\n        return index;\r\n      }\r\n      case DATE:\r\n        return as([TYPE, value.toISOString()], value);\r\n      case REGEXP: {\r\n        const {source, flags} = value;\r\n        return as([TYPE, {source, flags}], value);\r\n      }\r\n      case MAP: {\r\n        const entries = [];\r\n        const index = as([TYPE, entries], value);\r\n        for (const [key, entry] of value) {\r\n          if (strict || !(shouldSkip(typeOf(key)) || shouldSkip(typeOf(entry))))\r\n            entries.push([pair(key), pair(entry)]);\r\n        }\r\n        return index;\r\n      }\r\n      case SET: {\r\n        const entries = [];\r\n        const index = as([TYPE, entries], value);\r\n        for (const entry of value) {\r\n          if (strict || !shouldSkip(typeOf(entry)))\r\n            entries.push(pair(entry));\r\n        }\r\n        return index;\r\n      }\r\n    }\r\n\r\n    const {message} = value;\r\n    return as([TYPE, {name: type, message}], value);\r\n  };\r\n\r\n  return pair;\r\n};\r\n\r\n/**\r\n * @typedef {Array<string,any>} Record a type representation\r\n */\r\n\r\n/**\r\n * Returns an array of serialized Records.\r\n * @param {any} value a serializable value.\r\n * @param {{json?: boolean, lossy?: boolean}?} options an object with a `lossy` or `json` property that,\r\n *  if `true`, will not throw errors on incompatible types, and behave more\r\n *  like JSON stringify would behave. Symbol and Function will be discarded.\r\n * @returns {Record[]}\r\n */\r\n export const serialize = (value, {json, lossy} = {}) => {\r\n  const _ = [];\r\n  return serializer(!(json || lossy), !!json, new Map, _)(value), _;\r\n};\r\n","import {deserialize} from './deserialize.js';\r\nimport {serialize} from './serialize.js';\r\n\r\n/**\r\n * @typedef {Array<string,any>} Record a type representation\r\n */\r\n\r\n/**\r\n * Returns an array of serialized Records.\r\n * @param {any} any a serializable value.\r\n * @param {{transfer?: any[], json?: boolean, lossy?: boolean}?} options an object with\r\n * a transfer option (ignored when polyfilled) and/or non standard fields that\r\n * fallback to the polyfill if present.\r\n * @returns {Record[]}\r\n */\r\nexport default typeof structuredClone === \"function\" ?\r\n  /* c8 ignore start */\r\n  (any, options) => (\r\n    options && ('json' in options || 'lossy' in options) ?\r\n      deserialize(serialize(any, options)) : structuredClone(any)\r\n  ) :\r\n  (any, options) => deserialize(serialize(any, options));\r\n  /* c8 ignore stop */\r\n\r\nexport {deserialize, serialize};\r\n","/**\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('hast').ElementContent} ElementContent\r\n *\r\n * @typedef {import('./state.js').State} State\r\n */\r\n\r\n/**\r\n * @callback FootnoteBackContentTemplate\r\n *   Generate content for the backreference dynamically.\r\n *\r\n *   For the following markdown:\r\n *\r\n *   ```markdown\r\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\r\n *\r\n *   [^remark]: things about remark\r\n *   [^micromark]: things about micromark\r\n *   ```\r\n *\r\n *   This function will be called with:\r\n *\r\n *   *  `0` and `0` for the backreference from `things about micromark` to\r\n *      `alpha`, as it is the first used definition, and the first call to it\r\n *   *  `0` and `1` for the backreference from `things about micromark` to\r\n *      `bravo`, as it is the first used definition, and the second call to it\r\n *   *  `1` and `0` for the backreference from `things about remark` to\r\n *      `charlie`, as it is the second used definition\r\n * @param {number} referenceIndex\r\n *   Index of the definition in the order that they are first referenced,\r\n *   0-indexed.\r\n * @param {number} rereferenceIndex\r\n *   Index of calls to the same definition, 0-indexed.\r\n * @returns {Array<ElementContent> | ElementContent | string}\r\n *   Content for the backreference when linking back from definitions to their\r\n *   reference.\r\n *\r\n * @callback FootnoteBackLabelTemplate\r\n *   Generate a back label dynamically.\r\n *\r\n *   For the following markdown:\r\n *\r\n *   ```markdown\r\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\r\n *\r\n *   [^remark]: things about remark\r\n *   [^micromark]: things about micromark\r\n *   ```\r\n *\r\n *   This function will be called with:\r\n *\r\n *   *  `0` and `0` for the backreference from `things about micromark` to\r\n *      `alpha`, as it is the first used definition, and the first call to it\r\n *   *  `0` and `1` for the backreference from `things about micromark` to\r\n *      `bravo`, as it is the first used definition, and the second call to it\r\n *   *  `1` and `0` for the backreference from `things about remark` to\r\n *      `charlie`, as it is the second used definition\r\n * @param {number} referenceIndex\r\n *   Index of the definition in the order that they are first referenced,\r\n *   0-indexed.\r\n * @param {number} rereferenceIndex\r\n *   Index of calls to the same definition, 0-indexed.\r\n * @returns {string}\r\n *   Back label to use when linking back from definitions to their reference.\r\n */\r\n\r\nimport structuredClone from '@ungap/structured-clone'\r\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\r\n\r\n/**\r\n * Generate the default content that GitHub uses on backreferences.\r\n *\r\n * @param {number} _\r\n *   Index of the definition in the order that they are first referenced,\r\n *   0-indexed.\r\n * @param {number} rereferenceIndex\r\n *   Index of calls to the same definition, 0-indexed.\r\n * @returns {Array<ElementContent>}\r\n *   Content.\r\n */\r\nexport function defaultFootnoteBackContent(_, rereferenceIndex) {\r\n  /** @type {Array<ElementContent>} */\r\n  const result = [{type: 'text', value: '↩'}]\r\n\r\n  if (rereferenceIndex > 1) {\r\n    result.push({\r\n      type: 'element',\r\n      tagName: 'sup',\r\n      properties: {},\r\n      children: [{type: 'text', value: String(rereferenceIndex)}]\r\n    })\r\n  }\r\n\r\n  return result\r\n}\r\n\r\n/**\r\n * Generate the default label that GitHub uses on backreferences.\r\n *\r\n * @param {number} referenceIndex\r\n *   Index of the definition in the order that they are first referenced,\r\n *   0-indexed.\r\n * @param {number} rereferenceIndex\r\n *   Index of calls to the same definition, 0-indexed.\r\n * @returns {string}\r\n *   Label.\r\n */\r\nexport function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\r\n  return (\r\n    'Back to reference ' +\r\n    (referenceIndex + 1) +\r\n    (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\r\n  )\r\n}\r\n\r\n/**\r\n * Generate a hast footer for called footnote definitions.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @returns {Element | undefined}\r\n *   `section` element or `undefined`.\r\n */\r\n// eslint-disable-next-line complexity\r\nexport function footer(state) {\r\n  const clobberPrefix =\r\n    typeof state.options.clobberPrefix === 'string'\r\n      ? state.options.clobberPrefix\r\n      : 'user-content-'\r\n  const footnoteBackContent =\r\n    state.options.footnoteBackContent || defaultFootnoteBackContent\r\n  const footnoteBackLabel =\r\n    state.options.footnoteBackLabel || defaultFootnoteBackLabel\r\n  const footnoteLabel = state.options.footnoteLabel || 'Footnotes'\r\n  const footnoteLabelTagName = state.options.footnoteLabelTagName || 'h2'\r\n  const footnoteLabelProperties = state.options.footnoteLabelProperties || {\r\n    className: ['sr-only']\r\n  }\r\n  /** @type {Array<ElementContent>} */\r\n  const listItems = []\r\n  let referenceIndex = -1\r\n\r\n  while (++referenceIndex < state.footnoteOrder.length) {\r\n    const definition = state.footnoteById.get(\r\n      state.footnoteOrder[referenceIndex]\r\n    )\r\n\r\n    if (!definition) {\r\n      continue\r\n    }\r\n\r\n    const content = state.all(definition)\r\n    const id = String(definition.identifier).toUpperCase()\r\n    const safeId = normalizeUri(id.toLowerCase())\r\n    let rereferenceIndex = 0\r\n    /** @type {Array<ElementContent>} */\r\n    const backReferences = []\r\n    const counts = state.footnoteCounts.get(id)\r\n\r\n    // eslint-disable-next-line no-unmodified-loop-condition\r\n    while (counts !== undefined && ++rereferenceIndex <= counts) {\r\n      if (backReferences.length > 0) {\r\n        backReferences.push({type: 'text', value: ' '})\r\n      }\r\n\r\n      let children =\r\n        typeof footnoteBackContent === 'string'\r\n          ? footnoteBackContent\r\n          : footnoteBackContent(referenceIndex, rereferenceIndex)\r\n\r\n      if (typeof children === 'string') {\r\n        children = {type: 'text', value: children}\r\n      }\r\n\r\n      backReferences.push({\r\n        type: 'element',\r\n        tagName: 'a',\r\n        properties: {\r\n          href:\r\n            '#' +\r\n            clobberPrefix +\r\n            'fnref-' +\r\n            safeId +\r\n            (rereferenceIndex > 1 ? '-' + rereferenceIndex : ''),\r\n          dataFootnoteBackref: '',\r\n          ariaLabel:\r\n            typeof footnoteBackLabel === 'string'\r\n              ? footnoteBackLabel\r\n              : footnoteBackLabel(referenceIndex, rereferenceIndex),\r\n          className: ['data-footnote-backref']\r\n        },\r\n        children: Array.isArray(children) ? children : [children]\r\n      })\r\n    }\r\n\r\n    const tail = content[content.length - 1]\r\n\r\n    if (tail && tail.type === 'element' && tail.tagName === 'p') {\r\n      const tailTail = tail.children[tail.children.length - 1]\r\n      if (tailTail && tailTail.type === 'text') {\r\n        tailTail.value += ' '\r\n      } else {\r\n        tail.children.push({type: 'text', value: ' '})\r\n      }\r\n\r\n      tail.children.push(...backReferences)\r\n    } else {\r\n      content.push(...backReferences)\r\n    }\r\n\r\n    /** @type {Element} */\r\n    const listItem = {\r\n      type: 'element',\r\n      tagName: 'li',\r\n      properties: {id: clobberPrefix + 'fn-' + safeId},\r\n      children: state.wrap(content, true)\r\n    }\r\n\r\n    state.patch(definition, listItem)\r\n\r\n    listItems.push(listItem)\r\n  }\r\n\r\n  if (listItems.length === 0) {\r\n    return\r\n  }\r\n\r\n  return {\r\n    type: 'element',\r\n    tagName: 'section',\r\n    properties: {dataFootnotes: true, className: ['footnotes']},\r\n    children: [\r\n      {\r\n        type: 'element',\r\n        tagName: footnoteLabelTagName,\r\n        properties: {\r\n          ...structuredClone(footnoteLabelProperties),\r\n          id: 'footnote-label'\r\n        },\r\n        children: [{type: 'text', value: footnoteLabel}]\r\n      },\r\n      {type: 'text', value: '\\n'},\r\n      {\r\n        type: 'element',\r\n        tagName: 'ol',\r\n        properties: {},\r\n        children: state.wrap(listItems, true)\r\n      },\r\n      {type: 'text', value: '\\n'}\r\n    ]\r\n  }\r\n}\r\n","/**\r\n * @typedef {import('unist').Node} Node\r\n * @typedef {import('unist').Parent} Parent\r\n */\r\n\r\n/**\r\n * @template Fn\r\n * @template Fallback\r\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\r\n */\r\n\r\n/**\r\n * @callback Check\r\n *   Check that an arbitrary value is a node.\r\n * @param {unknown} this\r\n *   The given context.\r\n * @param {unknown} [node]\r\n *   Anything (typically a node).\r\n * @param {number | null | undefined} [index]\r\n *   The node’s position in its parent.\r\n * @param {Parent | null | undefined} [parent]\r\n *   The node’s parent.\r\n * @returns {boolean}\r\n *   Whether this is a node and passes a test.\r\n *\r\n * @typedef {Record<string, unknown> | Node} Props\r\n *   Object to check for equivalence.\r\n *\r\n *   Note: `Node` is included as it is common but is not indexable.\r\n *\r\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\r\n *   Check for an arbitrary node.\r\n *\r\n * @callback TestFunction\r\n *   Check if a node passes a test.\r\n * @param {unknown} this\r\n *   The given context.\r\n * @param {Node} node\r\n *   A node.\r\n * @param {number | undefined} [index]\r\n *   The node’s position in its parent.\r\n * @param {Parent | undefined} [parent]\r\n *   The node’s parent.\r\n * @returns {boolean | undefined | void}\r\n *   Whether this node passes the test.\r\n *\r\n *   Note: `void` is included until TS sees no return as `undefined`.\r\n */\r\n\r\n/**\r\n * Check if `node` is a `Node` and whether it passes the given test.\r\n *\r\n * @param {unknown} node\r\n *   Thing to check, typically `Node`.\r\n * @param {Test} test\r\n *   A check for a specific node.\r\n * @param {number | null | undefined} index\r\n *   The node’s position in its parent.\r\n * @param {Parent | null | undefined} parent\r\n *   The node’s parent.\r\n * @param {unknown} context\r\n *   Context object (`this`) to pass to `test` functions.\r\n * @returns {boolean}\r\n *   Whether `node` is a node and passes a test.\r\n */\r\nexport const is =\r\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\r\n  /**\r\n   * @type {(\r\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\r\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\r\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\r\n   *   ((node?: null | undefined) => false) &\r\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\r\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\r\n   * )}\r\n   */\r\n  (\r\n    /**\r\n     * @param {unknown} [node]\r\n     * @param {Test} [test]\r\n     * @param {number | null | undefined} [index]\r\n     * @param {Parent | null | undefined} [parent]\r\n     * @param {unknown} [context]\r\n     * @returns {boolean}\r\n     */\r\n    // eslint-disable-next-line max-params\r\n    function (node, test, index, parent, context) {\r\n      const check = convert(test)\r\n\r\n      if (\r\n        index !== undefined &&\r\n        index !== null &&\r\n        (typeof index !== 'number' ||\r\n          index < 0 ||\r\n          index === Number.POSITIVE_INFINITY)\r\n      ) {\r\n        throw new Error('Expected positive finite index')\r\n      }\r\n\r\n      if (\r\n        parent !== undefined &&\r\n        parent !== null &&\r\n        (!is(parent) || !parent.children)\r\n      ) {\r\n        throw new Error('Expected parent node')\r\n      }\r\n\r\n      if (\r\n        (parent === undefined || parent === null) !==\r\n        (index === undefined || index === null)\r\n      ) {\r\n        throw new Error('Expected both parent and index')\r\n      }\r\n\r\n      return looksLikeANode(node)\r\n        ? check.call(context, node, index, parent)\r\n        : false\r\n    }\r\n  )\r\n\r\n/**\r\n * Generate an assertion from a test.\r\n *\r\n * Useful if you’re going to test many nodes, for example when creating a\r\n * utility where something else passes a compatible test.\r\n *\r\n * The created function is a bit faster because it expects valid input only:\r\n * a `node`, `index`, and `parent`.\r\n *\r\n * @param {Test} test\r\n *   *   when nullish, checks if `node` is a `Node`.\r\n *   *   when `string`, works like passing `(node) => node.type === test`.\r\n *   *   when `function` checks if function passed the node is true.\r\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\r\n *   *   when `array`, checks if any one of the subtests pass.\r\n * @returns {Check}\r\n *   An assertion.\r\n */\r\nexport const convert =\r\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\r\n  /**\r\n   * @type {(\r\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\r\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\r\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\r\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\r\n   *   ((test?: Test) => Check)\r\n   * )}\r\n   */\r\n  (\r\n    /**\r\n     * @param {Test} [test]\r\n     * @returns {Check}\r\n     */\r\n    function (test) {\r\n      if (test === null || test === undefined) {\r\n        return ok\r\n      }\r\n\r\n      if (typeof test === 'function') {\r\n        return castFactory(test)\r\n      }\r\n\r\n      if (typeof test === 'object') {\r\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\r\n      }\r\n\r\n      if (typeof test === 'string') {\r\n        return typeFactory(test)\r\n      }\r\n\r\n      throw new Error('Expected function, string, or object as test')\r\n    }\r\n  )\r\n\r\n/**\r\n * @param {Array<Props | TestFunction | string>} tests\r\n * @returns {Check}\r\n */\r\nfunction anyFactory(tests) {\r\n  /** @type {Array<Check>} */\r\n  const checks = []\r\n  let index = -1\r\n\r\n  while (++index < tests.length) {\r\n    checks[index] = convert(tests[index])\r\n  }\r\n\r\n  return castFactory(any)\r\n\r\n  /**\r\n   * @this {unknown}\r\n   * @type {TestFunction}\r\n   */\r\n  function any(...parameters) {\r\n    let index = -1\r\n\r\n    while (++index < checks.length) {\r\n      if (checks[index].apply(this, parameters)) return true\r\n    }\r\n\r\n    return false\r\n  }\r\n}\r\n\r\n/**\r\n * Turn an object into a test for a node with a certain fields.\r\n *\r\n * @param {Props} check\r\n * @returns {Check}\r\n */\r\nfunction propsFactory(check) {\r\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\r\n\r\n  return castFactory(all)\r\n\r\n  /**\r\n   * @param {Node} node\r\n   * @returns {boolean}\r\n   */\r\n  function all(node) {\r\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\r\n      /** @type {unknown} */ (node)\r\n    )\r\n\r\n    /** @type {string} */\r\n    let key\r\n\r\n    for (key in check) {\r\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\r\n    }\r\n\r\n    return true\r\n  }\r\n}\r\n\r\n/**\r\n * Turn a string into a test for a node with a certain type.\r\n *\r\n * @param {string} check\r\n * @returns {Check}\r\n */\r\nfunction typeFactory(check) {\r\n  return castFactory(type)\r\n\r\n  /**\r\n   * @param {Node} node\r\n   */\r\n  function type(node) {\r\n    return node && node.type === check\r\n  }\r\n}\r\n\r\n/**\r\n * Turn a custom test into a test for a node that passes that test.\r\n *\r\n * @param {TestFunction} testFunction\r\n * @returns {Check}\r\n */\r\nfunction castFactory(testFunction) {\r\n  return check\r\n\r\n  /**\r\n   * @this {unknown}\r\n   * @type {Check}\r\n   */\r\n  function check(value, index, parent) {\r\n    return Boolean(\r\n      looksLikeANode(value) &&\r\n        testFunction.call(\r\n          this,\r\n          value,\r\n          typeof index === 'number' ? index : undefined,\r\n          parent || undefined\r\n        )\r\n    )\r\n  }\r\n}\r\n\r\nfunction ok() {\r\n  return true\r\n}\r\n\r\n/**\r\n * @param {unknown} value\r\n * @returns {value is Node}\r\n */\r\nfunction looksLikeANode(value) {\r\n  return value !== null && typeof value === 'object' && 'type' in value\r\n}\r\n","/**\r\n * @typedef {import('unist').Node} UnistNode\r\n * @typedef {import('unist').Parent} UnistParent\r\n */\r\n\r\n/**\r\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\r\n *   Test from `unist-util-is`.\r\n *\r\n *   Note: we have remove and add `undefined`, because otherwise when generating\r\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\r\n *   which doesn’t work when publishing on npm.\r\n */\r\n\r\n/**\r\n * @typedef {(\r\n *   Fn extends (value: any) => value is infer Thing\r\n *   ? Thing\r\n *   : Fallback\r\n * )} Predicate\r\n *   Get the value of a type guard `Fn`.\r\n * @template Fn\r\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\r\n * @template Fallback\r\n *   Value to yield if `Fn` is not a type guard.\r\n */\r\n\r\n/**\r\n * @typedef {(\r\n *   Check extends null | undefined // No test.\r\n *   ? Value\r\n *   : Value extends {type: Check} // String (type) test.\r\n *   ? Value\r\n *   : Value extends Check // Partial test.\r\n *   ? Value\r\n *   : Check extends Function // Function test.\r\n *   ? Predicate<Check, Value> extends Value\r\n *     ? Predicate<Check, Value>\r\n *     : never\r\n *   : never // Some other test?\r\n * )} MatchesOne\r\n *   Check whether a node matches a primitive check in the type system.\r\n * @template Value\r\n *   Value; typically unist `Node`.\r\n * @template Check\r\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\r\n */\r\n\r\n/**\r\n * @typedef {(\r\n *   Check extends Array<any>\r\n *   ? MatchesOne<Value, Check[keyof Check]>\r\n *   : MatchesOne<Value, Check>\r\n * )} Matches\r\n *   Check whether a node matches a check in the type system.\r\n * @template Value\r\n *   Value; typically unist `Node`.\r\n * @template Check\r\n *   Value; typically `unist-util-is`-compatible test.\r\n */\r\n\r\n/**\r\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\r\n *   Number; capped reasonably.\r\n */\r\n\r\n/**\r\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\r\n *   Increment a number in the type system.\r\n * @template {Uint} [I=0]\r\n *   Index.\r\n */\r\n\r\n/**\r\n * @typedef {(\r\n *   Node extends UnistParent\r\n *   ? Node extends {children: Array<infer Children>}\r\n *     ? Child extends Children ? Node : never\r\n *     : never\r\n *   : never\r\n * )} InternalParent\r\n *   Collect nodes that can be parents of `Child`.\r\n * @template {UnistNode} Node\r\n *   All node types in a tree.\r\n * @template {UnistNode} Child\r\n *   Node to search for.\r\n */\r\n\r\n/**\r\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\r\n *   Collect nodes in `Tree` that can be parents of `Child`.\r\n * @template {UnistNode} Tree\r\n *   All node types in a tree.\r\n * @template {UnistNode} Child\r\n *   Node to search for.\r\n */\r\n\r\n/**\r\n * @typedef {(\r\n *   Depth extends Max\r\n *   ? never\r\n *   :\r\n *     | InternalParent<Node, Child>\r\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\r\n * )} InternalAncestor\r\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\r\n * @template {UnistNode} Node\r\n *   All node types in a tree.\r\n * @template {UnistNode} Child\r\n *   Node to search for.\r\n * @template {Uint} [Max=10]\r\n *   Max; searches up to this depth.\r\n * @template {Uint} [Depth=0]\r\n *   Current depth.\r\n */\r\n\r\n/**\r\n * @typedef {InternalAncestor<InclusiveDescendant<Tree>, Child>} Ancestor\r\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\r\n * @template {UnistNode} Tree\r\n *   All node types in a tree.\r\n * @template {UnistNode} Child\r\n *   Node to search for.\r\n */\r\n\r\n/**\r\n * @typedef {(\r\n *   Tree extends UnistParent\r\n *     ? Depth extends Max\r\n *       ? Tree\r\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\r\n *     : Tree\r\n * )} InclusiveDescendant\r\n *   Collect all (inclusive) descendants of `Tree`.\r\n *\r\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\r\n *   > recurse without actually running into an infinite loop, which the\r\n *   > previous version did.\r\n *   >\r\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\r\n *   > passed, but it doesn’t improve performance.\r\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\r\n *   > Using up to `10` doesn’t hurt or help either.\r\n * @template {UnistNode} Tree\r\n *   Tree type.\r\n * @template {Uint} [Max=10]\r\n *   Max; searches up to this depth.\r\n * @template {Uint} [Depth=0]\r\n *   Current depth.\r\n */\r\n\r\n/**\r\n * @typedef {'skip' | boolean} Action\r\n *   Union of the action types.\r\n *\r\n * @typedef {number} Index\r\n *   Move to the sibling at `index` next (after node itself is completely\r\n *   traversed).\r\n *\r\n *   Useful if mutating the tree, such as removing the node the visitor is\r\n *   currently on, or any of its previous siblings.\r\n *   Results less than 0 or greater than or equal to `children.length` stop\r\n *   traversing the parent.\r\n *\r\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\r\n *   List with one or two values, the first an action, the second an index.\r\n *\r\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\r\n *   Any value that can be returned from a visitor.\r\n */\r\n\r\n/**\r\n * @callback Visitor\r\n *   Handle a node (matching `test`, if given).\r\n *\r\n *   Visitors are free to transform `node`.\r\n *   They can also transform the parent of node (the last of `ancestors`).\r\n *\r\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\r\n *   descendants to be walked (which is a bug).\r\n *\r\n *   When adding or removing previous siblings of `node` (or next siblings, in\r\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\r\n *   sibling to traverse after `node` is traversed.\r\n *   Adding or removing next siblings of `node` (or previous siblings, in case\r\n *   of reverse) is handled as expected without needing to return a new `Index`.\r\n *\r\n *   Removing the children property of an ancestor still results in them being\r\n *   traversed.\r\n * @param {Visited} node\r\n *   Found node.\r\n * @param {Array<VisitedParents>} ancestors\r\n *   Ancestors of `node`.\r\n * @returns {VisitorResult}\r\n *   What to do next.\r\n *\r\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\r\n *   An `Action` is treated as a tuple of `[Action]`.\r\n *\r\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\r\n *   When the `Action` is `EXIT`, that action can be returned.\r\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\r\n * @template {UnistNode} [Visited=UnistNode]\r\n *   Visited node type.\r\n * @template {UnistParent} [VisitedParents=UnistParent]\r\n *   Ancestor type.\r\n */\r\n\r\n/**\r\n * @typedef {Visitor<Matches<InclusiveDescendant<Tree>, Check>, Ancestor<Tree, Matches<InclusiveDescendant<Tree>, Check>>>} BuildVisitor\r\n *   Build a typed `Visitor` function from a tree and a test.\r\n *\r\n *   It will infer which values are passed as `node` and which as `parents`.\r\n * @template {UnistNode} [Tree=UnistNode]\r\n *   Tree type.\r\n * @template {Test} [Check=Test]\r\n *   Test type.\r\n */\r\n\r\nimport {convert} from 'unist-util-is'\r\nimport {color} from 'unist-util-visit-parents/do-not-use-color'\r\n\r\n/** @type {Readonly<ActionTuple>} */\r\nconst empty = []\r\n\r\n/**\r\n * Continue traversing as normal.\r\n */\r\nexport const CONTINUE = true\r\n\r\n/**\r\n * Stop traversing immediately.\r\n */\r\nexport const EXIT = false\r\n\r\n/**\r\n * Do not traverse this node’s children.\r\n */\r\nexport const SKIP = 'skip'\r\n\r\n/**\r\n * Visit nodes, with ancestral information.\r\n *\r\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\r\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\r\n *\r\n * You can choose for which nodes `visitor` is called by passing a `test`.\r\n * For complex tests, you should test yourself in `visitor`, as it will be\r\n * faster and will have improved type information.\r\n *\r\n * Walking the tree is an intensive task.\r\n * Make use of the return values of the visitor when possible.\r\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\r\n * to check if a node matches, and then perform different operations.\r\n *\r\n * You can change the tree.\r\n * See `Visitor` for more info.\r\n *\r\n * @overload\r\n * @param {Tree} tree\r\n * @param {Check} check\r\n * @param {BuildVisitor<Tree, Check>} visitor\r\n * @param {boolean | null | undefined} [reverse]\r\n * @returns {undefined}\r\n *\r\n * @overload\r\n * @param {Tree} tree\r\n * @param {BuildVisitor<Tree>} visitor\r\n * @param {boolean | null | undefined} [reverse]\r\n * @returns {undefined}\r\n *\r\n * @param {UnistNode} tree\r\n *   Tree to traverse.\r\n * @param {Visitor | Test} test\r\n *   `unist-util-is`-compatible test\r\n * @param {Visitor | boolean | null | undefined} [visitor]\r\n *   Handle each node.\r\n * @param {boolean | null | undefined} [reverse]\r\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\r\n * @returns {undefined}\r\n *   Nothing.\r\n *\r\n * @template {UnistNode} Tree\r\n *   Node type.\r\n * @template {Test} Check\r\n *   `unist-util-is`-compatible test.\r\n */\r\nexport function visitParents(tree, test, visitor, reverse) {\r\n  /** @type {Test} */\r\n  let check\r\n\r\n  if (typeof test === 'function' && typeof visitor !== 'function') {\r\n    reverse = visitor\r\n    // @ts-expect-error no visitor given, so `visitor` is test.\r\n    visitor = test\r\n  } else {\r\n    // @ts-expect-error visitor given, so `test` isn’t a visitor.\r\n    check = test\r\n  }\r\n\r\n  const is = convert(check)\r\n  const step = reverse ? -1 : 1\r\n\r\n  factory(tree, undefined, [])()\r\n\r\n  /**\r\n   * @param {UnistNode} node\r\n   * @param {number | undefined} index\r\n   * @param {Array<UnistParent>} parents\r\n   */\r\n  function factory(node, index, parents) {\r\n    const value = /** @type {Record<string, unknown>} */ (\r\n      node && typeof node === 'object' ? node : {}\r\n    )\r\n\r\n    if (typeof value.type === 'string') {\r\n      const name =\r\n        // `hast`\r\n        typeof value.tagName === 'string'\r\n          ? value.tagName\r\n          : // `xast`\r\n          typeof value.name === 'string'\r\n          ? value.name\r\n          : undefined\r\n\r\n      Object.defineProperty(visit, 'name', {\r\n        value:\r\n          'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\r\n      })\r\n    }\r\n\r\n    return visit\r\n\r\n    function visit() {\r\n      /** @type {Readonly<ActionTuple>} */\r\n      let result = empty\r\n      /** @type {Readonly<ActionTuple>} */\r\n      let subresult\r\n      /** @type {number} */\r\n      let offset\r\n      /** @type {Array<UnistParent>} */\r\n      let grandparents\r\n\r\n      if (!test || is(node, index, parents[parents.length - 1] || undefined)) {\r\n        // @ts-expect-error: `visitor` is now a visitor.\r\n        result = toResult(visitor(node, parents))\r\n\r\n        if (result[0] === EXIT) {\r\n          return result\r\n        }\r\n      }\r\n\r\n      if ('children' in node && node.children) {\r\n        const nodeAsParent = /** @type {UnistParent} */ (node)\r\n\r\n        if (nodeAsParent.children && result[0] !== SKIP) {\r\n          offset = (reverse ? nodeAsParent.children.length : -1) + step\r\n          grandparents = parents.concat(nodeAsParent)\r\n\r\n          while (offset > -1 && offset < nodeAsParent.children.length) {\r\n            const child = nodeAsParent.children[offset]\r\n\r\n            subresult = factory(child, offset, grandparents)()\r\n\r\n            if (subresult[0] === EXIT) {\r\n              return subresult\r\n            }\r\n\r\n            offset =\r\n              typeof subresult[1] === 'number' ? subresult[1] : offset + step\r\n          }\r\n        }\r\n      }\r\n\r\n      return result\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Turn a return value into a clean result.\r\n *\r\n * @param {VisitorResult} value\r\n *   Valid return values from visitors.\r\n * @returns {Readonly<ActionTuple>}\r\n *   Clean result.\r\n */\r\nfunction toResult(value) {\r\n  if (Array.isArray(value)) {\r\n    return value\r\n  }\r\n\r\n  if (typeof value === 'number') {\r\n    return [CONTINUE, value]\r\n  }\r\n\r\n  return value === null || value === undefined ? empty : [value]\r\n}\r\n","/**\r\n * @typedef {import('unist').Node} UnistNode\r\n * @typedef {import('unist').Parent} UnistParent\r\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\r\n */\r\n\r\n/**\r\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\r\n *   Test from `unist-util-is`.\r\n *\r\n *   Note: we have remove and add `undefined`, because otherwise when generating\r\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\r\n *   which doesn’t work when publishing on npm.\r\n */\r\n\r\n// To do: use types from `unist-util-visit-parents` when it’s released.\r\n\r\n/**\r\n * @typedef {(\r\n *   Fn extends (value: any) => value is infer Thing\r\n *   ? Thing\r\n *   : Fallback\r\n * )} Predicate\r\n *   Get the value of a type guard `Fn`.\r\n * @template Fn\r\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\r\n * @template Fallback\r\n *   Value to yield if `Fn` is not a type guard.\r\n */\r\n\r\n/**\r\n * @typedef {(\r\n *   Check extends null | undefined // No test.\r\n *   ? Value\r\n *   : Value extends {type: Check} // String (type) test.\r\n *   ? Value\r\n *   : Value extends Check // Partial test.\r\n *   ? Value\r\n *   : Check extends Function // Function test.\r\n *   ? Predicate<Check, Value> extends Value\r\n *     ? Predicate<Check, Value>\r\n *     : never\r\n *   : never // Some other test?\r\n * )} MatchesOne\r\n *   Check whether a node matches a primitive check in the type system.\r\n * @template Value\r\n *   Value; typically unist `Node`.\r\n * @template Check\r\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\r\n */\r\n\r\n/**\r\n * @typedef {(\r\n *   Check extends Array<any>\r\n *   ? MatchesOne<Value, Check[keyof Check]>\r\n *   : MatchesOne<Value, Check>\r\n * )} Matches\r\n *   Check whether a node matches a check in the type system.\r\n * @template Value\r\n *   Value; typically unist `Node`.\r\n * @template Check\r\n *   Value; typically `unist-util-is`-compatible test.\r\n */\r\n\r\n/**\r\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\r\n *   Number; capped reasonably.\r\n */\r\n\r\n/**\r\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\r\n *   Increment a number in the type system.\r\n * @template {Uint} [I=0]\r\n *   Index.\r\n */\r\n\r\n/**\r\n * @typedef {(\r\n *   Node extends UnistParent\r\n *   ? Node extends {children: Array<infer Children>}\r\n *     ? Child extends Children ? Node : never\r\n *     : never\r\n *   : never\r\n * )} InternalParent\r\n *   Collect nodes that can be parents of `Child`.\r\n * @template {UnistNode} Node\r\n *   All node types in a tree.\r\n * @template {UnistNode} Child\r\n *   Node to search for.\r\n */\r\n\r\n/**\r\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\r\n *   Collect nodes in `Tree` that can be parents of `Child`.\r\n * @template {UnistNode} Tree\r\n *   All node types in a tree.\r\n * @template {UnistNode} Child\r\n *   Node to search for.\r\n */\r\n\r\n/**\r\n * @typedef {(\r\n *   Depth extends Max\r\n *   ? never\r\n *   :\r\n *     | InternalParent<Node, Child>\r\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\r\n * )} InternalAncestor\r\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\r\n * @template {UnistNode} Node\r\n *   All node types in a tree.\r\n * @template {UnistNode} Child\r\n *   Node to search for.\r\n * @template {Uint} [Max=10]\r\n *   Max; searches up to this depth.\r\n * @template {Uint} [Depth=0]\r\n *   Current depth.\r\n */\r\n\r\n/**\r\n * @typedef {(\r\n *   Tree extends UnistParent\r\n *     ? Depth extends Max\r\n *       ? Tree\r\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\r\n *     : Tree\r\n * )} InclusiveDescendant\r\n *   Collect all (inclusive) descendants of `Tree`.\r\n *\r\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\r\n *   > recurse without actually running into an infinite loop, which the\r\n *   > previous version did.\r\n *   >\r\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\r\n *   > passed, but it doesn’t improve performance.\r\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\r\n *   > Using up to `10` doesn’t hurt or help either.\r\n * @template {UnistNode} Tree\r\n *   Tree type.\r\n * @template {Uint} [Max=10]\r\n *   Max; searches up to this depth.\r\n * @template {Uint} [Depth=0]\r\n *   Current depth.\r\n */\r\n\r\n/**\r\n * @callback Visitor\r\n *   Handle a node (matching `test`, if given).\r\n *\r\n *   Visitors are free to transform `node`.\r\n *   They can also transform `parent`.\r\n *\r\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\r\n *   descendants to be walked (which is a bug).\r\n *\r\n *   When adding or removing previous siblings of `node` (or next siblings, in\r\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\r\n *   sibling to traverse after `node` is traversed.\r\n *   Adding or removing next siblings of `node` (or previous siblings, in case\r\n *   of reverse) is handled as expected without needing to return a new `Index`.\r\n *\r\n *   Removing the children property of `parent` still results in them being\r\n *   traversed.\r\n * @param {Visited} node\r\n *   Found node.\r\n * @param {Visited extends UnistNode ? number | undefined : never} index\r\n *   Index of `node` in `parent`.\r\n * @param {Ancestor extends UnistParent ? Ancestor | undefined : never} parent\r\n *   Parent of `node`.\r\n * @returns {VisitorResult}\r\n *   What to do next.\r\n *\r\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\r\n *   An `Action` is treated as a tuple of `[Action]`.\r\n *\r\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\r\n *   When the `Action` is `EXIT`, that action can be returned.\r\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\r\n * @template {UnistNode} [Visited=UnistNode]\r\n *   Visited node type.\r\n * @template {UnistParent} [Ancestor=UnistParent]\r\n *   Ancestor type.\r\n */\r\n\r\n/**\r\n * @typedef {Visitor<Visited, Parent<Ancestor, Visited>>} BuildVisitorFromMatch\r\n *   Build a typed `Visitor` function from a node and all possible parents.\r\n *\r\n *   It will infer which values are passed as `node` and which as `parent`.\r\n * @template {UnistNode} Visited\r\n *   Node type.\r\n * @template {UnistParent} Ancestor\r\n *   Parent type.\r\n */\r\n\r\n/**\r\n * @typedef {(\r\n *   BuildVisitorFromMatch<\r\n *     Matches<Descendant, Check>,\r\n *     Extract<Descendant, UnistParent>\r\n *   >\r\n * )} BuildVisitorFromDescendants\r\n *   Build a typed `Visitor` function from a list of descendants and a test.\r\n *\r\n *   It will infer which values are passed as `node` and which as `parent`.\r\n * @template {UnistNode} Descendant\r\n *   Node type.\r\n * @template {Test} Check\r\n *   Test type.\r\n */\r\n\r\n/**\r\n * @typedef {(\r\n *   BuildVisitorFromDescendants<\r\n *     InclusiveDescendant<Tree>,\r\n *     Check\r\n *   >\r\n * )} BuildVisitor\r\n *   Build a typed `Visitor` function from a tree and a test.\r\n *\r\n *   It will infer which values are passed as `node` and which as `parent`.\r\n * @template {UnistNode} [Tree=UnistNode]\r\n *   Node type.\r\n * @template {Test} [Check=Test]\r\n *   Test type.\r\n */\r\n\r\nimport {visitParents} from 'unist-util-visit-parents'\r\n\r\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\r\n\r\n/**\r\n * Visit nodes.\r\n *\r\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\r\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\r\n *\r\n * You can choose for which nodes `visitor` is called by passing a `test`.\r\n * For complex tests, you should test yourself in `visitor`, as it will be\r\n * faster and will have improved type information.\r\n *\r\n * Walking the tree is an intensive task.\r\n * Make use of the return values of the visitor when possible.\r\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\r\n * to check if a node matches, and then perform different operations.\r\n *\r\n * You can change the tree.\r\n * See `Visitor` for more info.\r\n *\r\n * @overload\r\n * @param {Tree} tree\r\n * @param {Check} check\r\n * @param {BuildVisitor<Tree, Check>} visitor\r\n * @param {boolean | null | undefined} [reverse]\r\n * @returns {undefined}\r\n *\r\n * @overload\r\n * @param {Tree} tree\r\n * @param {BuildVisitor<Tree>} visitor\r\n * @param {boolean | null | undefined} [reverse]\r\n * @returns {undefined}\r\n *\r\n * @param {UnistNode} tree\r\n *   Tree to traverse.\r\n * @param {Visitor | Test} testOrVisitor\r\n *   `unist-util-is`-compatible test (optional, omit to pass a visitor).\r\n * @param {Visitor | boolean | null | undefined} [visitorOrReverse]\r\n *   Handle each node (when test is omitted, pass `reverse`).\r\n * @param {boolean | null | undefined} [maybeReverse=false]\r\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\r\n * @returns {undefined}\r\n *   Nothing.\r\n *\r\n * @template {UnistNode} Tree\r\n *   Node type.\r\n * @template {Test} Check\r\n *   `unist-util-is`-compatible test.\r\n */\r\nexport function visit(tree, testOrVisitor, visitorOrReverse, maybeReverse) {\r\n  /** @type {boolean | null | undefined} */\r\n  let reverse\r\n  /** @type {Test} */\r\n  let test\r\n  /** @type {Visitor} */\r\n  let visitor\r\n\r\n  if (\r\n    typeof testOrVisitor === 'function' &&\r\n    typeof visitorOrReverse !== 'function'\r\n  ) {\r\n    test = undefined\r\n    visitor = testOrVisitor\r\n    reverse = visitorOrReverse\r\n  } else {\r\n    // @ts-expect-error: assume the overload with test was given.\r\n    test = testOrVisitor\r\n    // @ts-expect-error: assume the overload with test was given.\r\n    visitor = visitorOrReverse\r\n    reverse = maybeReverse\r\n  }\r\n\r\n  visitParents(tree, test, overload, reverse)\r\n\r\n  /**\r\n   * @param {UnistNode} node\r\n   * @param {Array<UnistParent>} parents\r\n   */\r\n  function overload(node, parents) {\r\n    const parent = parents[parents.length - 1]\r\n    const index = parent ? parent.children.indexOf(node) : undefined\r\n    return visitor(node, index, parent)\r\n  }\r\n}\r\n","/**\r\n * @typedef {import('hast').Element} HastElement\r\n * @typedef {import('hast').ElementContent} HastElementContent\r\n * @typedef {import('hast').Nodes} HastNodes\r\n * @typedef {import('hast').Properties} HastProperties\r\n * @typedef {import('hast').RootContent} HastRootContent\r\n * @typedef {import('hast').Text} HastText\r\n *\r\n * @typedef {import('mdast').Definition} MdastDefinition\r\n * @typedef {import('mdast').FootnoteDefinition} MdastFootnoteDefinition\r\n * @typedef {import('mdast').Nodes} MdastNodes\r\n * @typedef {import('mdast').Parents} MdastParents\r\n *\r\n * @typedef {import('vfile').VFile} VFile\r\n *\r\n * @typedef {import('./footer.js').FootnoteBackContentTemplate} FootnoteBackContentTemplate\r\n * @typedef {import('./footer.js').FootnoteBackLabelTemplate} FootnoteBackLabelTemplate\r\n */\r\n\r\n/**\r\n * @callback Handler\r\n *   Handle a node.\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {any} node\r\n *   mdast node to handle.\r\n * @param {MdastParents | undefined} parent\r\n *   Parent of `node`.\r\n * @returns {Array<HastElementContent> | HastElementContent | undefined}\r\n *   hast node.\r\n *\r\n * @typedef {Partial<Record<MdastNodes['type'], Handler>>} Handlers\r\n *   Handle nodes.\r\n *\r\n * @typedef Options\r\n *   Configuration (optional).\r\n * @property {boolean | null | undefined} [allowDangerousHtml=false]\r\n *   Whether to persist raw HTML in markdown in the hast tree (default:\r\n *   `false`).\r\n * @property {string | null | undefined} [clobberPrefix='user-content-']\r\n *   Prefix to use before the `id` property on footnotes to prevent them from\r\n *   *clobbering* (default: `'user-content-'`).\r\n *\r\n *   Pass `''` for trusted markdown and when you are careful with\r\n *   polyfilling.\r\n *   You could pass a different prefix.\r\n *\r\n *   DOM clobbering is this:\r\n *\r\n *   ```html\r\n *   <p id=\"x\"></p>\r\n *   <script>alert(x) // `x` now refers to the `p#x` DOM element</script>\r\n *   ```\r\n *\r\n *   The above example shows that elements are made available by browsers, by\r\n *   their ID, on the `window` object.\r\n *   This is a security risk because you might be expecting some other variable\r\n *   at that place.\r\n *   It can also break polyfills.\r\n *   Using a prefix solves these problems.\r\n * @property {VFile | null | undefined} [file]\r\n *   Corresponding virtual file representing the input document (optional).\r\n * @property {FootnoteBackContentTemplate | string | null | undefined} [footnoteBackContent]\r\n *   Content of the backreference back to references (default: `defaultFootnoteBackContent`).\r\n *\r\n *   The default value is:\r\n *\r\n *   ```js\r\n *   function defaultFootnoteBackContent(_, rereferenceIndex) {\r\n *     const result = [{type: 'text', value: '↩'}]\r\n *\r\n *     if (rereferenceIndex > 1) {\r\n *       result.push({\r\n *         type: 'element',\r\n *         tagName: 'sup',\r\n *         properties: {},\r\n *         children: [{type: 'text', value: String(rereferenceIndex)}]\r\n *       })\r\n *     }\r\n *\r\n *     return result\r\n *   }\r\n *   ```\r\n *\r\n *   This content is used in the `a` element of each backreference (the `↩`\r\n *   links).\r\n * @property {FootnoteBackLabelTemplate | string | null | undefined} [footnoteBackLabel]\r\n *   Label to describe the backreference back to references (default:\r\n *   `defaultFootnoteBackLabel`).\r\n *\r\n *   The default value is:\r\n *\r\n *   ```js\r\n *   function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\r\n *    return (\r\n *      'Back to reference ' +\r\n *      (referenceIndex + 1) +\r\n *      (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\r\n *    )\r\n *   }\r\n *   ```\r\n *\r\n *   Change it when the markdown is not in English.\r\n *\r\n *   This label is used in the `ariaLabel` property on each backreference\r\n *   (the `↩` links).\r\n *   It affects users of assistive technology.\r\n * @property {string | null | undefined} [footnoteLabel='Footnotes']\r\n *   Textual label to use for the footnotes section (default: `'Footnotes'`).\r\n *\r\n *   Change it when the markdown is not in English.\r\n *\r\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\r\n *   is defined that does that) and so affects screen readers only.\r\n *   If you do have such a class, but want to show this section to everyone,\r\n *   pass different properties with the `footnoteLabelProperties` option.\r\n * @property {HastProperties | null | undefined} [footnoteLabelProperties={className: ['sr-only']}]\r\n *   Properties to use on the footnote label (default: `{className:\r\n *   ['sr-only']}`).\r\n *\r\n *   Change it to show the label and add other properties.\r\n *\r\n *   This label is typically hidden visually (assuming an `sr-only` CSS class\r\n *   is defined that does that) and so affects screen readers only.\r\n *   If you do have such a class, but want to show this section to everyone,\r\n *   pass an empty string.\r\n *   You can also add different properties.\r\n *\r\n *   > **Note**: `id: 'footnote-label'` is always added, because footnote\r\n *   > calls use it with `aria-describedby` to provide an accessible label.\r\n * @property {string | null | undefined} [footnoteLabelTagName='h2']\r\n *   HTML tag name to use for the footnote label element (default: `'h2'`).\r\n *\r\n *   Change it to match your document structure.\r\n *\r\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\r\n *   is defined that does that) and so affects screen readers only.\r\n *   If you do have such a class, but want to show this section to everyone,\r\n *   pass different properties with the `footnoteLabelProperties` option.\r\n * @property {Handlers | null | undefined} [handlers]\r\n *   Extra handlers for nodes (optional).\r\n * @property {Array<MdastNodes['type']> | null | undefined} [passThrough]\r\n *   List of custom mdast node types to pass through (keep) in hast (note that\r\n *   the node itself is passed, but eventual children are transformed)\r\n *   (optional).\r\n * @property {Handler | null | undefined} [unknownHandler]\r\n *   Handler for all unknown nodes (optional).\r\n *\r\n * @typedef State\r\n *   Info passed around.\r\n * @property {(node: MdastNodes) => Array<HastElementContent>} all\r\n *   Transform the children of an mdast parent to hast.\r\n * @property {<Type extends HastNodes>(from: MdastNodes, to: Type) => HastElement | Type} applyData\r\n *   Honor the `data` of `from`, and generate an element instead of `node`.\r\n * @property {Map<string, MdastDefinition>} definitionById\r\n *   Definitions by their identifier.\r\n * @property {Map<string, MdastFootnoteDefinition>} footnoteById\r\n *   Footnote definitions by their identifier.\r\n * @property {Map<string, number>} footnoteCounts\r\n *   Counts for how often the same footnote was called.\r\n * @property {Array<string>} footnoteOrder\r\n *   Identifiers of order when footnote calls first appear in tree order.\r\n * @property {Handlers} handlers\r\n *   Applied handlers.\r\n * @property {(node: MdastNodes, parent: MdastParents | undefined) => Array<HastElementContent> | HastElementContent | undefined} one\r\n *   Transform an mdast node to hast.\r\n * @property {Options} options\r\n *   Configuration.\r\n * @property {(from: MdastNodes, node: HastNodes) => undefined} patch\r\n *   Copy a node’s positional info.\r\n * @property {<Type extends HastRootContent>(nodes: Array<Type>, loose?: boolean | undefined) => Array<HastText | Type>} wrap\r\n *   Wrap `nodes` with line endings between each node, adds initial/final line endings when `loose`.\r\n */\r\n\r\nimport structuredClone from '@ungap/structured-clone'\r\nimport {visit} from 'unist-util-visit'\r\nimport {position} from 'unist-util-position'\r\nimport {handlers as defaultHandlers} from './handlers/index.js'\r\n\r\nconst own = {}.hasOwnProperty\r\n\r\n/** @type {Options} */\r\nconst emptyOptions = {}\r\n\r\n/**\r\n * Create `state` from an mdast tree.\r\n *\r\n * @param {MdastNodes} tree\r\n *   mdast node to transform.\r\n * @param {Options | null | undefined} [options]\r\n *   Configuration (optional).\r\n * @returns {State}\r\n *   `state` function.\r\n */\r\nexport function createState(tree, options) {\r\n  const settings = options || emptyOptions\r\n  /** @type {Map<string, MdastDefinition>} */\r\n  const definitionById = new Map()\r\n  /** @type {Map<string, MdastFootnoteDefinition>} */\r\n  const footnoteById = new Map()\r\n  /** @type {Map<string, number>} */\r\n  const footnoteCounts = new Map()\r\n  /** @type {Handlers} */\r\n  // @ts-expect-error: the root handler returns a root.\r\n  // Hard to type.\r\n  const handlers = {...defaultHandlers, ...settings.handlers}\r\n\r\n  /** @type {State} */\r\n  const state = {\r\n    all,\r\n    applyData,\r\n    definitionById,\r\n    footnoteById,\r\n    footnoteCounts,\r\n    footnoteOrder: [],\r\n    handlers,\r\n    one,\r\n    options: settings,\r\n    patch,\r\n    wrap\r\n  }\r\n\r\n  visit(tree, function (node) {\r\n    if (node.type === 'definition' || node.type === 'footnoteDefinition') {\r\n      const map = node.type === 'definition' ? definitionById : footnoteById\r\n      const id = String(node.identifier).toUpperCase()\r\n\r\n      // Mimick CM behavior of link definitions.\r\n      // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/9032189/lib/index.js#L20-L21>.\r\n      if (!map.has(id)) {\r\n        // @ts-expect-error: node type matches map.\r\n        map.set(id, node)\r\n      }\r\n    }\r\n  })\r\n\r\n  return state\r\n\r\n  /**\r\n   * Transform an mdast node into a hast node.\r\n   *\r\n   * @param {MdastNodes} node\r\n   *   mdast node.\r\n   * @param {MdastParents | undefined} [parent]\r\n   *   Parent of `node`.\r\n   * @returns {Array<HastElementContent> | HastElementContent | undefined}\r\n   *   Resulting hast node.\r\n   */\r\n  function one(node, parent) {\r\n    const type = node.type\r\n    const handle = state.handlers[type]\r\n\r\n    if (own.call(state.handlers, type) && handle) {\r\n      return handle(state, node, parent)\r\n    }\r\n\r\n    if (state.options.passThrough && state.options.passThrough.includes(type)) {\r\n      if ('children' in node) {\r\n        const {children, ...shallow} = node\r\n        const result = structuredClone(shallow)\r\n        // @ts-expect-error: TS doesn’t understand…\r\n        result.children = state.all(node)\r\n        // @ts-expect-error: TS doesn’t understand…\r\n        return result\r\n      }\r\n\r\n      // @ts-expect-error: it’s custom.\r\n      return structuredClone(node)\r\n    }\r\n\r\n    const unknown = state.options.unknownHandler || defaultUnknownHandler\r\n\r\n    return unknown(state, node, parent)\r\n  }\r\n\r\n  /**\r\n   * Transform the children of an mdast node into hast nodes.\r\n   *\r\n   * @param {MdastNodes} parent\r\n   *   mdast node to compile\r\n   * @returns {Array<HastElementContent>}\r\n   *   Resulting hast nodes.\r\n   */\r\n  function all(parent) {\r\n    /** @type {Array<HastElementContent>} */\r\n    const values = []\r\n\r\n    if ('children' in parent) {\r\n      const nodes = parent.children\r\n      let index = -1\r\n      while (++index < nodes.length) {\r\n        const result = state.one(nodes[index], parent)\r\n\r\n        // To do: see if we van clean this? Can we merge texts?\r\n        if (result) {\r\n          if (index && nodes[index - 1].type === 'break') {\r\n            if (!Array.isArray(result) && result.type === 'text') {\r\n              result.value = trimMarkdownSpaceStart(result.value)\r\n            }\r\n\r\n            if (!Array.isArray(result) && result.type === 'element') {\r\n              const head = result.children[0]\r\n\r\n              if (head && head.type === 'text') {\r\n                head.value = trimMarkdownSpaceStart(head.value)\r\n              }\r\n            }\r\n          }\r\n\r\n          if (Array.isArray(result)) {\r\n            values.push(...result)\r\n          } else {\r\n            values.push(result)\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return values\r\n  }\r\n}\r\n\r\n/**\r\n * Copy a node’s positional info.\r\n *\r\n * @param {MdastNodes} from\r\n *   mdast node to copy from.\r\n * @param {HastNodes} to\r\n *   hast node to copy into.\r\n * @returns {undefined}\r\n *   Nothing.\r\n */\r\nfunction patch(from, to) {\r\n  if (from.position) to.position = position(from)\r\n}\r\n\r\n/**\r\n * Honor the `data` of `from` and maybe generate an element instead of `to`.\r\n *\r\n * @template {HastNodes} Type\r\n *   Node type.\r\n * @param {MdastNodes} from\r\n *   mdast node to use data from.\r\n * @param {Type} to\r\n *   hast node to change.\r\n * @returns {HastElement | Type}\r\n *   Nothing.\r\n */\r\nfunction applyData(from, to) {\r\n  /** @type {HastElement | Type} */\r\n  let result = to\r\n\r\n  // Handle `data.hName`, `data.hProperties, `data.hChildren`.\r\n  if (from && from.data) {\r\n    const hName = from.data.hName\r\n    const hChildren = from.data.hChildren\r\n    const hProperties = from.data.hProperties\r\n\r\n    if (typeof hName === 'string') {\r\n      // Transforming the node resulted in an element with a different name\r\n      // than wanted:\r\n      if (result.type === 'element') {\r\n        result.tagName = hName\r\n      }\r\n      // Transforming the node resulted in a non-element, which happens for\r\n      // raw, text, and root nodes (unless custom handlers are passed).\r\n      // The intent of `hName` is to create an element, but likely also to keep\r\n      // the content around (otherwise: pass `hChildren`).\r\n      else {\r\n        /** @type {Array<HastElementContent>} */\r\n        // @ts-expect-error: assume no doctypes in `root`.\r\n        const children = 'children' in result ? result.children : [result]\r\n        result = {type: 'element', tagName: hName, properties: {}, children}\r\n      }\r\n    }\r\n\r\n    if (result.type === 'element' && hProperties) {\r\n      Object.assign(result.properties, structuredClone(hProperties))\r\n    }\r\n\r\n    if (\r\n      'children' in result &&\r\n      result.children &&\r\n      hChildren !== null &&\r\n      hChildren !== undefined\r\n    ) {\r\n      result.children = hChildren\r\n    }\r\n  }\r\n\r\n  return result\r\n}\r\n\r\n/**\r\n * Transform an unknown node.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {MdastNodes} node\r\n *   Unknown mdast node.\r\n * @returns {HastElement | HastText}\r\n *   Resulting hast node.\r\n */\r\nfunction defaultUnknownHandler(state, node) {\r\n  const data = node.data || {}\r\n  /** @type {HastElement | HastText} */\r\n  const result =\r\n    'value' in node &&\r\n    !(own.call(data, 'hProperties') || own.call(data, 'hChildren'))\r\n      ? {type: 'text', value: node.value}\r\n      : {\r\n          type: 'element',\r\n          tagName: 'div',\r\n          properties: {},\r\n          children: state.all(node)\r\n        }\r\n\r\n  state.patch(node, result)\r\n  return state.applyData(node, result)\r\n}\r\n\r\n/**\r\n * Wrap `nodes` with line endings between each node.\r\n *\r\n * @template {HastRootContent} Type\r\n *   Node type.\r\n * @param {Array<Type>} nodes\r\n *   List of nodes to wrap.\r\n * @param {boolean | undefined} [loose=false]\r\n *   Whether to add line endings at start and end (default: `false`).\r\n * @returns {Array<HastText | Type>}\r\n *   Wrapped nodes.\r\n */\r\nexport function wrap(nodes, loose) {\r\n  /** @type {Array<HastText | Type>} */\r\n  const result = []\r\n  let index = -1\r\n\r\n  if (loose) {\r\n    result.push({type: 'text', value: '\\n'})\r\n  }\r\n\r\n  while (++index < nodes.length) {\r\n    if (index) result.push({type: 'text', value: '\\n'})\r\n    result.push(nodes[index])\r\n  }\r\n\r\n  if (loose && nodes.length > 0) {\r\n    result.push({type: 'text', value: '\\n'})\r\n  }\r\n\r\n  return result\r\n}\r\n\r\n/**\r\n * Trim spaces and tabs at the start of `value`.\r\n *\r\n * @param {string} value\r\n *   Value to trim.\r\n * @returns {string}\r\n *   Result.\r\n */\r\nfunction trimMarkdownSpaceStart(value) {\r\n  let index = 0\r\n  let code = value.charCodeAt(index)\r\n\r\n  while (code === 9 || code === 32) {\r\n    index++\r\n    code = value.charCodeAt(index)\r\n  }\r\n\r\n  return value.slice(index)\r\n}\r\n","/**\r\n * @typedef {import('hast').Nodes} HastNodes\r\n * @typedef {import('mdast').Nodes} MdastNodes\r\n * @typedef {import('./state.js').Options} Options\r\n */\r\n\r\nimport {ok as assert} from 'devlop'\r\nimport {footer} from './footer.js'\r\nimport {createState} from './state.js'\r\n\r\n/**\r\n * Transform mdast to hast.\r\n *\r\n * ##### Notes\r\n *\r\n * ###### HTML\r\n *\r\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\r\n * as semistandard `raw` nodes.\r\n * Most utilities ignore `raw` nodes but two notable ones don’t:\r\n *\r\n * *   `hast-util-to-html` also has an option `allowDangerousHtml` which will\r\n *     output the raw HTML.\r\n *     This is typically discouraged as noted by the option name but is useful\r\n *     if you completely trust authors\r\n * *   `hast-util-raw` can handle the raw embedded HTML strings by parsing them\r\n *     into standard hast nodes (`element`, `text`, etc).\r\n *     This is a heavy task as it needs a full HTML parser, but it is the only\r\n *     way to support untrusted content\r\n *\r\n * ###### Footnotes\r\n *\r\n * Many options supported here relate to footnotes.\r\n * Footnotes are not specified by CommonMark, which we follow by default.\r\n * They are supported by GitHub, so footnotes can be enabled in markdown with\r\n * `mdast-util-gfm`.\r\n *\r\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\r\n * that explains footnotes, which is hidden for sighted users but shown to\r\n * assistive technology.\r\n * When your page is not in English, you must define translated values.\r\n *\r\n * Back references use ARIA attributes, but the section label itself uses a\r\n * heading that is hidden with an `sr-only` class.\r\n * To show it to sighted users, define different attributes in\r\n * `footnoteLabelProperties`.\r\n *\r\n * ###### Clobbering\r\n *\r\n * Footnotes introduces a problem, as it links footnote calls to footnote\r\n * definitions on the page through `id` attributes generated from user content,\r\n * which results in DOM clobbering.\r\n *\r\n * DOM clobbering is this:\r\n *\r\n * ```html\r\n * <p id=x></p>\r\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\r\n * ```\r\n *\r\n * Elements by their ID are made available by browsers on the `window` object,\r\n * which is a security risk.\r\n * Using a prefix solves this problem.\r\n *\r\n * More information on how to handle clobbering and the prefix is explained in\r\n * Example: headings (DOM clobbering) in `rehype-sanitize`.\r\n *\r\n * ###### Unknown nodes\r\n *\r\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\r\n * The default behavior for unknown nodes is:\r\n *\r\n * *   when the node has a `value` (and doesn’t have `data.hName`,\r\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\r\n *     node\r\n * *   otherwise, create a `<div>` element (which could be changed with\r\n *     `data.hName`), with its children mapped from mdast to hast as well\r\n *\r\n * This behavior can be changed by passing an `unknownHandler`.\r\n *\r\n * @param {MdastNodes} tree\r\n *   mdast tree.\r\n * @param {Options | null | undefined} [options]\r\n *   Configuration (optional).\r\n * @returns {HastNodes}\r\n *   hast tree.\r\n */\r\nexport function toHast(tree, options) {\r\n  const state = createState(tree, options)\r\n  const node = state.one(tree, undefined)\r\n  const foot = footer(state)\r\n  /** @type {HastNodes} */\r\n  const result = Array.isArray(node)\r\n    ? {type: 'root', children: node}\r\n    : node || {type: 'root', children: []}\r\n\r\n  if (foot) {\r\n    // If there’s a footer, there were definitions, meaning block\r\n    // content.\r\n    // So `result` is a parent node.\r\n    assert('children' in result)\r\n    result.children.push({type: 'text', value: '\\n'}, foot)\r\n  }\r\n\r\n  return result\r\n}\r\n","/**\r\n * @import {Root as HastRoot} from 'hast'\r\n * @import {Root as MdastRoot} from 'mdast'\r\n * @import {Options as ToHastOptions} from 'mdast-util-to-hast'\r\n * @import {Processor} from 'unified'\r\n * @import {VFile} from 'vfile'\r\n */\r\n\r\n/**\r\n * @typedef {Omit<ToHastOptions, 'file'>} Options\r\n *\r\n * @callback TransformBridge\r\n *   Bridge-mode.\r\n *\r\n *   Runs the destination with the new hast tree.\r\n *   Discards result.\r\n * @param {MdastRoot} tree\r\n *   Tree.\r\n * @param {VFile} file\r\n *   File.\r\n * @returns {Promise<undefined>}\r\n *   Nothing.\r\n *\r\n * @callback TransformMutate\r\n *  Mutate-mode.\r\n *\r\n *  Further transformers run on the hast tree.\r\n * @param {MdastRoot} tree\r\n *   Tree.\r\n * @param {VFile} file\r\n *   File.\r\n * @returns {HastRoot}\r\n *   Tree (hast).\r\n */\r\n\r\nimport {toHast} from 'mdast-util-to-hast'\r\n\r\n/**\r\n * Turn markdown into HTML.\r\n *\r\n * ##### Notes\r\n *\r\n * ###### Signature\r\n *\r\n * * if a processor is given,\r\n *   runs the (rehype) plugins used on it with a hast tree,\r\n *   then discards the result (*bridge mode*)\r\n * * otherwise,\r\n *   returns a hast tree,\r\n *   the plugins used after `remarkRehype` are rehype plugins (*mutate mode*)\r\n *\r\n * > 👉 **Note**:\r\n * > It’s highly unlikely that you want to pass a `processor`.\r\n *\r\n * ###### HTML\r\n *\r\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\r\n * as semistandard `raw` nodes.\r\n * Most plugins ignore `raw` nodes but two notable ones don’t:\r\n *\r\n * * `rehype-stringify` also has an option `allowDangerousHtml` which will\r\n *   output the raw HTML.\r\n *   This is typically discouraged as noted by the option name but is useful if\r\n *   you completely trust authors\r\n * * `rehype-raw` can handle the raw embedded HTML strings by parsing them\r\n *   into standard hast nodes (`element`, `text`, etc);\r\n *   this is a heavy task as it needs a full HTML parser,\r\n *   but it is the only way to support untrusted content\r\n *\r\n * ###### Footnotes\r\n *\r\n * Many options supported here relate to footnotes.\r\n * Footnotes are not specified by CommonMark,\r\n * which we follow by default.\r\n * They are supported by GitHub,\r\n * so footnotes can be enabled in markdown with `remark-gfm`.\r\n *\r\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\r\n * that explains footnotes,\r\n * which is hidden for sighted users but shown to assistive technology.\r\n * When your page is not in English,\r\n * you must define translated values.\r\n *\r\n * Back references use ARIA attributes,\r\n * but the section label itself uses a heading that is hidden with an\r\n * `sr-only` class.\r\n * To show it to sighted users,\r\n * define different attributes in `footnoteLabelProperties`.\r\n *\r\n * ###### Clobbering\r\n *\r\n * Footnotes introduces a problem,\r\n * as it links footnote calls to footnote definitions on the page through `id`\r\n * attributes generated from user content,\r\n * which results in DOM clobbering.\r\n *\r\n * DOM clobbering is this:\r\n *\r\n * ```html\r\n * <p id=x></p>\r\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\r\n * ```\r\n *\r\n * Elements by their ID are made available by browsers on the `window` object,\r\n * which is a security risk.\r\n * Using a prefix solves this problem.\r\n *\r\n * More information on how to handle clobbering and the prefix is explained in\r\n * *Example: headings (DOM clobbering)* in `rehype-sanitize`.\r\n *\r\n * ###### Unknown nodes\r\n *\r\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\r\n * The default behavior for unknown nodes is:\r\n *\r\n * * when the node has a `value`\r\n *   (and doesn’t have `data.hName`, `data.hProperties`, or `data.hChildren`,\r\n *   see later),\r\n *   create a hast `text` node\r\n * * otherwise,\r\n *   create a `<div>` element (which could be changed with `data.hName`),\r\n *   with its children mapped from mdast to hast as well\r\n *\r\n * This behavior can be changed by passing an `unknownHandler`.\r\n *\r\n * @overload\r\n * @param {Processor} processor\r\n * @param {Readonly<Options> | null | undefined} [options]\r\n * @returns {TransformBridge}\r\n *\r\n * @overload\r\n * @param {Readonly<Options> | null | undefined} [options]\r\n * @returns {TransformMutate}\r\n *\r\n * @overload\r\n * @param {Readonly<Options> | Processor | null | undefined} [destination]\r\n * @param {Readonly<Options> | null | undefined} [options]\r\n * @returns {TransformBridge | TransformMutate}\r\n *\r\n * @param {Readonly<Options> | Processor | null | undefined} [destination]\r\n *   Processor or configuration (optional).\r\n * @param {Readonly<Options> | null | undefined} [options]\r\n *   When a processor was given,\r\n *   configuration (optional).\r\n * @returns {TransformBridge | TransformMutate}\r\n *   Transform.\r\n */\r\nexport default function remarkRehype(destination, options) {\r\n  if (destination && 'run' in destination) {\r\n    /**\r\n     * @type {TransformBridge}\r\n     */\r\n    return async function (tree, file) {\r\n      // Cast because root in -> root out.\r\n      const hastTree = /** @type {HastRoot} */ (\r\n        toHast(tree, {file, ...options})\r\n      )\r\n      await destination.run(hastTree, file)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @type {TransformMutate}\r\n   */\r\n  return function (tree, file) {\r\n    // Cast because root in -> root out.\r\n    // To do: in the future, disallow ` || options` fallback.\r\n    // With `unified-engine`, `destination` can be `undefined` but\r\n    // `options` will be the file set.\r\n    // We should not pass that as `options`.\r\n    return /** @type {HastRoot} */ (\r\n      toHast(tree, {file, ...(destination || options)})\r\n    )\r\n  }\r\n}\r\n","/**\r\n * Throw a given error.\r\n *\r\n * @param {Error|null|undefined} [error]\r\n *   Maybe error.\r\n * @returns {asserts error is null|undefined}\r\n */\r\nexport function bail(error) {\r\n  if (error) {\r\n    throw error\r\n  }\r\n}\r\n","'use strict';\r\n\r\nvar hasOwn = Object.prototype.hasOwnProperty;\r\nvar toStr = Object.prototype.toString;\r\nvar defineProperty = Object.defineProperty;\r\nvar gOPD = Object.getOwnPropertyDescriptor;\r\n\r\nvar isArray = function isArray(arr) {\r\n\tif (typeof Array.isArray === 'function') {\r\n\t\treturn Array.isArray(arr);\r\n\t}\r\n\r\n\treturn toStr.call(arr) === '[object Array]';\r\n};\r\n\r\nvar isPlainObject = function isPlainObject(obj) {\r\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\r\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\r\n\t// Not own constructor property must be Object\r\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\t// Own properties are enumerated firstly, so to speed up,\r\n\t// if last one is own, then all properties are own.\r\n\tvar key;\r\n\tfor (key in obj) { /**/ }\r\n\r\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\r\n};\r\n\r\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\r\nvar setProperty = function setProperty(target, options) {\r\n\tif (defineProperty && options.name === '__proto__') {\r\n\t\tdefineProperty(target, options.name, {\r\n\t\t\tenumerable: true,\r\n\t\t\tconfigurable: true,\r\n\t\t\tvalue: options.newValue,\r\n\t\t\twritable: true\r\n\t\t});\r\n\t} else {\r\n\t\ttarget[options.name] = options.newValue;\r\n\t}\r\n};\r\n\r\n// Return undefined instead of __proto__ if '__proto__' is not an own property\r\nvar getProperty = function getProperty(obj, name) {\r\n\tif (name === '__proto__') {\r\n\t\tif (!hasOwn.call(obj, name)) {\r\n\t\t\treturn void 0;\r\n\t\t} else if (gOPD) {\r\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\r\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\r\n\t\t\treturn gOPD(obj, name).value;\r\n\t\t}\r\n\t}\r\n\r\n\treturn obj[name];\r\n};\r\n\r\nmodule.exports = function extend() {\r\n\tvar options, name, src, copy, copyIsArray, clone;\r\n\tvar target = arguments[0];\r\n\tvar i = 1;\r\n\tvar length = arguments.length;\r\n\tvar deep = false;\r\n\r\n\t// Handle a deep copy situation\r\n\tif (typeof target === 'boolean') {\r\n\t\tdeep = target;\r\n\t\ttarget = arguments[1] || {};\r\n\t\t// skip the boolean and the target\r\n\t\ti = 2;\r\n\t}\r\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\r\n\t\ttarget = {};\r\n\t}\r\n\r\n\tfor (; i < length; ++i) {\r\n\t\toptions = arguments[i];\r\n\t\t// Only deal with non-null/undefined values\r\n\t\tif (options != null) {\r\n\t\t\t// Extend the base object\r\n\t\t\tfor (name in options) {\r\n\t\t\t\tsrc = getProperty(target, name);\r\n\t\t\t\tcopy = getProperty(options, name);\r\n\r\n\t\t\t\t// Prevent never-ending loop\r\n\t\t\t\tif (target !== copy) {\r\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\r\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\r\n\t\t\t\t\t\tif (copyIsArray) {\r\n\t\t\t\t\t\t\tcopyIsArray = false;\r\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Never move original objects, clone them\r\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\r\n\r\n\t\t\t\t\t// Don't bring in undefined values\r\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\r\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Return the modified object\r\n\treturn target;\r\n};\r\n","export default function isPlainObject(value) {\r\n\tif (typeof value !== 'object' || value === null) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tconst prototype = Object.getPrototypeOf(value);\r\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\r\n}\r\n","// To do: remove `void`s\r\n// To do: remove `null` from output of our APIs, allow it as user APIs.\r\n\r\n/**\r\n * @typedef {(error?: Error | null | undefined, ...output: Array<any>) => void} Callback\r\n *   Callback.\r\n *\r\n * @typedef {(...input: Array<any>) => any} Middleware\r\n *   Ware.\r\n *\r\n * @typedef Pipeline\r\n *   Pipeline.\r\n * @property {Run} run\r\n *   Run the pipeline.\r\n * @property {Use} use\r\n *   Add middleware.\r\n *\r\n * @typedef {(...input: Array<any>) => void} Run\r\n *   Call all middleware.\r\n *\r\n *   Calls `done` on completion with either an error or the output of the\r\n *   last middleware.\r\n *\r\n *   > 👉 **Note**: as the length of input defines whether async functions get a\r\n *   > `next` function,\r\n *   > it’s recommended to keep `input` at one value normally.\r\n\r\n *\r\n * @typedef {(fn: Middleware) => Pipeline} Use\r\n *   Add middleware.\r\n */\r\n\r\n/**\r\n * Create new middleware.\r\n *\r\n * @returns {Pipeline}\r\n *   Pipeline.\r\n */\r\nexport function trough() {\r\n  /** @type {Array<Middleware>} */\r\n  const fns = []\r\n  /** @type {Pipeline} */\r\n  const pipeline = {run, use}\r\n\r\n  return pipeline\r\n\r\n  /** @type {Run} */\r\n  function run(...values) {\r\n    let middlewareIndex = -1\r\n    /** @type {Callback} */\r\n    const callback = values.pop()\r\n\r\n    if (typeof callback !== 'function') {\r\n      throw new TypeError('Expected function as last argument, not ' + callback)\r\n    }\r\n\r\n    next(null, ...values)\r\n\r\n    /**\r\n     * Run the next `fn`, or we’re done.\r\n     *\r\n     * @param {Error | null | undefined} error\r\n     * @param {Array<any>} output\r\n     */\r\n    function next(error, ...output) {\r\n      const fn = fns[++middlewareIndex]\r\n      let index = -1\r\n\r\n      if (error) {\r\n        callback(error)\r\n        return\r\n      }\r\n\r\n      // Copy non-nullish input into values.\r\n      while (++index < values.length) {\r\n        if (output[index] === null || output[index] === undefined) {\r\n          output[index] = values[index]\r\n        }\r\n      }\r\n\r\n      // Save the newly created `output` for the next call.\r\n      values = output\r\n\r\n      // Next or done.\r\n      if (fn) {\r\n        wrap(fn, next)(...output)\r\n      } else {\r\n        callback(null, ...output)\r\n      }\r\n    }\r\n  }\r\n\r\n  /** @type {Use} */\r\n  function use(middelware) {\r\n    if (typeof middelware !== 'function') {\r\n      throw new TypeError(\r\n        'Expected `middelware` to be a function, not ' + middelware\r\n      )\r\n    }\r\n\r\n    fns.push(middelware)\r\n    return pipeline\r\n  }\r\n}\r\n\r\n/**\r\n * Wrap `middleware` into a uniform interface.\r\n *\r\n * You can pass all input to the resulting function.\r\n * `callback` is then called with the output of `middleware`.\r\n *\r\n * If `middleware` accepts more arguments than the later given in input,\r\n * an extra `done` function is passed to it after that input,\r\n * which must be called by `middleware`.\r\n *\r\n * The first value in `input` is the main input value.\r\n * All other input values are the rest input values.\r\n * The values given to `callback` are the input values,\r\n * merged with every non-nullish output value.\r\n *\r\n * * if `middleware` throws an error,\r\n *   returns a promise that is rejected,\r\n *   or calls the given `done` function with an error,\r\n *   `callback` is called with that error\r\n * * if `middleware` returns a value or returns a promise that is resolved,\r\n *   that value is the main output value\r\n * * if `middleware` calls `done`,\r\n *   all non-nullish values except for the first one (the error) overwrite the\r\n *   output values\r\n *\r\n * @param {Middleware} middleware\r\n *   Function to wrap.\r\n * @param {Callback} callback\r\n *   Callback called with the output of `middleware`.\r\n * @returns {Run}\r\n *   Wrapped middleware.\r\n */\r\nexport function wrap(middleware, callback) {\r\n  /** @type {boolean} */\r\n  let called\r\n\r\n  return wrapped\r\n\r\n  /**\r\n   * Call `middleware`.\r\n   * @this {any}\r\n   * @param {Array<any>} parameters\r\n   * @returns {void}\r\n   */\r\n  function wrapped(...parameters) {\r\n    const fnExpectsCallback = middleware.length > parameters.length\r\n    /** @type {any} */\r\n    let result\r\n\r\n    if (fnExpectsCallback) {\r\n      parameters.push(done)\r\n    }\r\n\r\n    try {\r\n      result = middleware.apply(this, parameters)\r\n    } catch (error) {\r\n      const exception = /** @type {Error} */ (error)\r\n\r\n      // Well, this is quite the pickle.\r\n      // `middleware` received a callback and called it synchronously, but that\r\n      // threw an error.\r\n      // The only thing left to do is to throw the thing instead.\r\n      if (fnExpectsCallback && called) {\r\n        throw exception\r\n      }\r\n\r\n      return done(exception)\r\n    }\r\n\r\n    if (!fnExpectsCallback) {\r\n      if (result && result.then && typeof result.then === 'function') {\r\n        result.then(then, done)\r\n      } else if (result instanceof Error) {\r\n        done(result)\r\n      } else {\r\n        then(result)\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Call `callback`, only once.\r\n   *\r\n   * @type {Callback}\r\n   */\r\n  function done(error, ...output) {\r\n    if (!called) {\r\n      called = true\r\n      callback(error, ...output)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Call `done` with one value.\r\n   *\r\n   * @param {any} [value]\r\n   */\r\n  function then(value) {\r\n    done(null, value)\r\n  }\r\n}\r\n","// A derivative work based on:\r\n// <https://github.com/browserify/path-browserify>.\r\n// Which is licensed:\r\n//\r\n// MIT License\r\n//\r\n// Copyright (c) 2013 James Halliday\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\r\n// this software and associated documentation files (the \"Software\"), to deal in\r\n// the Software without restriction, including without limitation the rights to\r\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\r\n// the Software, and to permit persons to whom the Software is furnished to do so,\r\n// subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included in all\r\n// copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\r\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\r\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\r\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\r\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n// A derivative work based on:\r\n//\r\n// Parts of that are extracted from Node’s internal `path` module:\r\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\r\n// Which is licensed:\r\n//\r\n// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\nexport const minpath = {basename, dirname, extname, join, sep: '/'}\r\n\r\n/* eslint-disable max-depth, complexity */\r\n\r\n/**\r\n * Get the basename from a path.\r\n *\r\n * @param {string} path\r\n *   File path.\r\n * @param {string | null | undefined} [extname]\r\n *   Extension to strip.\r\n * @returns {string}\r\n *   Stem or basename.\r\n */\r\nfunction basename(path, extname) {\r\n  if (extname !== undefined && typeof extname !== 'string') {\r\n    throw new TypeError('\"ext\" argument must be a string')\r\n  }\r\n\r\n  assertPath(path)\r\n  let start = 0\r\n  let end = -1\r\n  let index = path.length\r\n  /** @type {boolean | undefined} */\r\n  let seenNonSlash\r\n\r\n  if (\r\n    extname === undefined ||\r\n    extname.length === 0 ||\r\n    extname.length > path.length\r\n  ) {\r\n    while (index--) {\r\n      if (path.codePointAt(index) === 47 /* `/` */) {\r\n        // If we reached a path separator that was not part of a set of path\r\n        // separators at the end of the string, stop now.\r\n        if (seenNonSlash) {\r\n          start = index + 1\r\n          break\r\n        }\r\n      } else if (end < 0) {\r\n        // We saw the first non-path separator, mark this as the end of our\r\n        // path component.\r\n        seenNonSlash = true\r\n        end = index + 1\r\n      }\r\n    }\r\n\r\n    return end < 0 ? '' : path.slice(start, end)\r\n  }\r\n\r\n  if (extname === path) {\r\n    return ''\r\n  }\r\n\r\n  let firstNonSlashEnd = -1\r\n  let extnameIndex = extname.length - 1\r\n\r\n  while (index--) {\r\n    if (path.codePointAt(index) === 47 /* `/` */) {\r\n      // If we reached a path separator that was not part of a set of path\r\n      // separators at the end of the string, stop now.\r\n      if (seenNonSlash) {\r\n        start = index + 1\r\n        break\r\n      }\r\n    } else {\r\n      if (firstNonSlashEnd < 0) {\r\n        // We saw the first non-path separator, remember this index in case\r\n        // we need it if the extension ends up not matching.\r\n        seenNonSlash = true\r\n        firstNonSlashEnd = index + 1\r\n      }\r\n\r\n      if (extnameIndex > -1) {\r\n        // Try to match the explicit extension.\r\n        if (path.codePointAt(index) === extname.codePointAt(extnameIndex--)) {\r\n          if (extnameIndex < 0) {\r\n            // We matched the extension, so mark this as the end of our path\r\n            // component\r\n            end = index\r\n          }\r\n        } else {\r\n          // Extension does not match, so our result is the entire path\r\n          // component\r\n          extnameIndex = -1\r\n          end = firstNonSlashEnd\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  if (start === end) {\r\n    end = firstNonSlashEnd\r\n  } else if (end < 0) {\r\n    end = path.length\r\n  }\r\n\r\n  return path.slice(start, end)\r\n}\r\n\r\n/**\r\n * Get the dirname from a path.\r\n *\r\n * @param {string} path\r\n *   File path.\r\n * @returns {string}\r\n *   File path.\r\n */\r\nfunction dirname(path) {\r\n  assertPath(path)\r\n\r\n  if (path.length === 0) {\r\n    return '.'\r\n  }\r\n\r\n  let end = -1\r\n  let index = path.length\r\n  /** @type {boolean | undefined} */\r\n  let unmatchedSlash\r\n\r\n  // Prefix `--` is important to not run on `0`.\r\n  while (--index) {\r\n    if (path.codePointAt(index) === 47 /* `/` */) {\r\n      if (unmatchedSlash) {\r\n        end = index\r\n        break\r\n      }\r\n    } else if (!unmatchedSlash) {\r\n      // We saw the first non-path separator\r\n      unmatchedSlash = true\r\n    }\r\n  }\r\n\r\n  return end < 0\r\n    ? path.codePointAt(0) === 47 /* `/` */\r\n      ? '/'\r\n      : '.'\r\n    : end === 1 && path.codePointAt(0) === 47 /* `/` */\r\n      ? '//'\r\n      : path.slice(0, end)\r\n}\r\n\r\n/**\r\n * Get an extname from a path.\r\n *\r\n * @param {string} path\r\n *   File path.\r\n * @returns {string}\r\n *   Extname.\r\n */\r\nfunction extname(path) {\r\n  assertPath(path)\r\n\r\n  let index = path.length\r\n\r\n  let end = -1\r\n  let startPart = 0\r\n  let startDot = -1\r\n  // Track the state of characters (if any) we see before our first dot and\r\n  // after any path separator we find.\r\n  let preDotState = 0\r\n  /** @type {boolean | undefined} */\r\n  let unmatchedSlash\r\n\r\n  while (index--) {\r\n    const code = path.codePointAt(index)\r\n\r\n    if (code === 47 /* `/` */) {\r\n      // If we reached a path separator that was not part of a set of path\r\n      // separators at the end of the string, stop now.\r\n      if (unmatchedSlash) {\r\n        startPart = index + 1\r\n        break\r\n      }\r\n\r\n      continue\r\n    }\r\n\r\n    if (end < 0) {\r\n      // We saw the first non-path separator, mark this as the end of our\r\n      // extension.\r\n      unmatchedSlash = true\r\n      end = index + 1\r\n    }\r\n\r\n    if (code === 46 /* `.` */) {\r\n      // If this is our first dot, mark it as the start of our extension.\r\n      if (startDot < 0) {\r\n        startDot = index\r\n      } else if (preDotState !== 1) {\r\n        preDotState = 1\r\n      }\r\n    } else if (startDot > -1) {\r\n      // We saw a non-dot and non-path separator before our dot, so we should\r\n      // have a good chance at having a non-empty extension.\r\n      preDotState = -1\r\n    }\r\n  }\r\n\r\n  if (\r\n    startDot < 0 ||\r\n    end < 0 ||\r\n    // We saw a non-dot character immediately before the dot.\r\n    preDotState === 0 ||\r\n    // The (right-most) trimmed path component is exactly `..`.\r\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\r\n  ) {\r\n    return ''\r\n  }\r\n\r\n  return path.slice(startDot, end)\r\n}\r\n\r\n/**\r\n * Join segments from a path.\r\n *\r\n * @param {Array<string>} segments\r\n *   Path segments.\r\n * @returns {string}\r\n *   File path.\r\n */\r\nfunction join(...segments) {\r\n  let index = -1\r\n  /** @type {string | undefined} */\r\n  let joined\r\n\r\n  while (++index < segments.length) {\r\n    assertPath(segments[index])\r\n\r\n    if (segments[index]) {\r\n      joined =\r\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\r\n    }\r\n  }\r\n\r\n  return joined === undefined ? '.' : normalize(joined)\r\n}\r\n\r\n/**\r\n * Normalize a basic file path.\r\n *\r\n * @param {string} path\r\n *   File path.\r\n * @returns {string}\r\n *   File path.\r\n */\r\n// Note: `normalize` is not exposed as `path.normalize`, so some code is\r\n// manually removed from it.\r\nfunction normalize(path) {\r\n  assertPath(path)\r\n\r\n  const absolute = path.codePointAt(0) === 47 /* `/` */\r\n\r\n  // Normalize the path according to POSIX rules.\r\n  let value = normalizeString(path, !absolute)\r\n\r\n  if (value.length === 0 && !absolute) {\r\n    value = '.'\r\n  }\r\n\r\n  if (value.length > 0 && path.codePointAt(path.length - 1) === 47 /* / */) {\r\n    value += '/'\r\n  }\r\n\r\n  return absolute ? '/' + value : value\r\n}\r\n\r\n/**\r\n * Resolve `.` and `..` elements in a path with directory names.\r\n *\r\n * @param {string} path\r\n *   File path.\r\n * @param {boolean} allowAboveRoot\r\n *   Whether `..` can move above root.\r\n * @returns {string}\r\n *   File path.\r\n */\r\nfunction normalizeString(path, allowAboveRoot) {\r\n  let result = ''\r\n  let lastSegmentLength = 0\r\n  let lastSlash = -1\r\n  let dots = 0\r\n  let index = -1\r\n  /** @type {number | undefined} */\r\n  let code\r\n  /** @type {number} */\r\n  let lastSlashIndex\r\n\r\n  while (++index <= path.length) {\r\n    if (index < path.length) {\r\n      code = path.codePointAt(index)\r\n    } else if (code === 47 /* `/` */) {\r\n      break\r\n    } else {\r\n      code = 47 /* `/` */\r\n    }\r\n\r\n    if (code === 47 /* `/` */) {\r\n      if (lastSlash === index - 1 || dots === 1) {\r\n        // Empty.\r\n      } else if (lastSlash !== index - 1 && dots === 2) {\r\n        if (\r\n          result.length < 2 ||\r\n          lastSegmentLength !== 2 ||\r\n          result.codePointAt(result.length - 1) !== 46 /* `.` */ ||\r\n          result.codePointAt(result.length - 2) !== 46 /* `.` */\r\n        ) {\r\n          if (result.length > 2) {\r\n            lastSlashIndex = result.lastIndexOf('/')\r\n\r\n            if (lastSlashIndex !== result.length - 1) {\r\n              if (lastSlashIndex < 0) {\r\n                result = ''\r\n                lastSegmentLength = 0\r\n              } else {\r\n                result = result.slice(0, lastSlashIndex)\r\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\r\n              }\r\n\r\n              lastSlash = index\r\n              dots = 0\r\n              continue\r\n            }\r\n          } else if (result.length > 0) {\r\n            result = ''\r\n            lastSegmentLength = 0\r\n            lastSlash = index\r\n            dots = 0\r\n            continue\r\n          }\r\n        }\r\n\r\n        if (allowAboveRoot) {\r\n          result = result.length > 0 ? result + '/..' : '..'\r\n          lastSegmentLength = 2\r\n        }\r\n      } else {\r\n        if (result.length > 0) {\r\n          result += '/' + path.slice(lastSlash + 1, index)\r\n        } else {\r\n          result = path.slice(lastSlash + 1, index)\r\n        }\r\n\r\n        lastSegmentLength = index - lastSlash - 1\r\n      }\r\n\r\n      lastSlash = index\r\n      dots = 0\r\n    } else if (code === 46 /* `.` */ && dots > -1) {\r\n      dots++\r\n    } else {\r\n      dots = -1\r\n    }\r\n  }\r\n\r\n  return result\r\n}\r\n\r\n/**\r\n * Make sure `path` is a string.\r\n *\r\n * @param {string} path\r\n *   File path.\r\n * @returns {asserts path is string}\r\n *   Nothing.\r\n */\r\nfunction assertPath(path) {\r\n  if (typeof path !== 'string') {\r\n    throw new TypeError(\r\n      'Path must be a string. Received ' + JSON.stringify(path)\r\n    )\r\n  }\r\n}\r\n\r\n/* eslint-enable max-depth, complexity */\r\n","// Somewhat based on:\r\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\r\n// But I don’t think one tiny line of code can be copyrighted. 😅\r\nexport const minproc = {cwd}\r\n\r\nfunction cwd() {\r\n  return '/'\r\n}\r\n","/**\r\n * Checks if a value has the shape of a WHATWG URL object.\r\n *\r\n * Using a symbol or instanceof would not be able to recognize URL objects\r\n * coming from other implementations (e.g. in Electron), so instead we are\r\n * checking some well known properties for a lack of a better test.\r\n *\r\n * We use `href` and `protocol` as they are the only properties that are\r\n * easy to retrieve and calculate due to the lazy nature of the getters.\r\n *\r\n * We check for auth attribute to distinguish legacy url instance with\r\n * WHATWG URL instance.\r\n *\r\n * @param {unknown} fileUrlOrPath\r\n *   File path or URL.\r\n * @returns {fileUrlOrPath is URL}\r\n *   Whether it’s a URL.\r\n */\r\n// From: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js#L720>\r\nexport function isUrl(fileUrlOrPath) {\r\n  return Boolean(\r\n    fileUrlOrPath !== null &&\r\n      typeof fileUrlOrPath === 'object' &&\r\n      'href' in fileUrlOrPath &&\r\n      fileUrlOrPath.href &&\r\n      'protocol' in fileUrlOrPath &&\r\n      fileUrlOrPath.protocol &&\r\n      // @ts-expect-error: indexing is fine.\r\n      fileUrlOrPath.auth === undefined\r\n  )\r\n}\r\n","import {isUrl} from './minurl.shared.js'\r\n\r\nexport {isUrl} from './minurl.shared.js'\r\n\r\n// See: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js>\r\n\r\n/**\r\n * @param {URL | string} path\r\n *   File URL.\r\n * @returns {string}\r\n *   File URL.\r\n */\r\nexport function urlToPath(path) {\r\n  if (typeof path === 'string') {\r\n    path = new URL(path)\r\n  } else if (!isUrl(path)) {\r\n    /** @type {NodeJS.ErrnoException} */\r\n    const error = new TypeError(\r\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\r\n        path +\r\n        '`'\r\n    )\r\n    error.code = 'ERR_INVALID_ARG_TYPE'\r\n    throw error\r\n  }\r\n\r\n  if (path.protocol !== 'file:') {\r\n    /** @type {NodeJS.ErrnoException} */\r\n    const error = new TypeError('The URL must be of scheme file')\r\n    error.code = 'ERR_INVALID_URL_SCHEME'\r\n    throw error\r\n  }\r\n\r\n  return getPathFromURLPosix(path)\r\n}\r\n\r\n/**\r\n * Get a path from a POSIX URL.\r\n *\r\n * @param {URL} url\r\n *   URL.\r\n * @returns {string}\r\n *   File path.\r\n */\r\nfunction getPathFromURLPosix(url) {\r\n  if (url.hostname !== '') {\r\n    /** @type {NodeJS.ErrnoException} */\r\n    const error = new TypeError(\r\n      'File URL host must be \"localhost\" or empty on darwin'\r\n    )\r\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\r\n    throw error\r\n  }\r\n\r\n  const pathname = url.pathname\r\n  let index = -1\r\n\r\n  while (++index < pathname.length) {\r\n    if (\r\n      pathname.codePointAt(index) === 37 /* `%` */ &&\r\n      pathname.codePointAt(index + 1) === 50 /* `2` */\r\n    ) {\r\n      const third = pathname.codePointAt(index + 2)\r\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\r\n        /** @type {NodeJS.ErrnoException} */\r\n        const error = new TypeError(\r\n          'File URL path must not include encoded / characters'\r\n        )\r\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\r\n        throw error\r\n      }\r\n    }\r\n  }\r\n\r\n  return decodeURIComponent(pathname)\r\n}\r\n","/**\r\n * @import {Node, Point, Position} from 'unist'\r\n * @import {Options as MessageOptions} from 'vfile-message'\r\n * @import {Compatible, Data, Map, Options, Value} from 'vfile'\r\n */\r\n\r\n/**\r\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\r\n */\r\n\r\nimport {VFileMessage} from 'vfile-message'\r\nimport {minpath} from '#minpath'\r\nimport {minproc} from '#minproc'\r\nimport {urlToPath, isUrl} from '#minurl'\r\n\r\n/**\r\n * Order of setting (least specific to most), we need this because otherwise\r\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\r\n * stem can be set.\r\n */\r\nconst order = /** @type {const} */ ([\r\n  'history',\r\n  'path',\r\n  'basename',\r\n  'stem',\r\n  'extname',\r\n  'dirname'\r\n])\r\n\r\nexport class VFile {\r\n  /**\r\n   * Create a new virtual file.\r\n   *\r\n   * `options` is treated as:\r\n   *\r\n   * *   `string` or `Uint8Array` — `{value: options}`\r\n   * *   `URL` — `{path: options}`\r\n   * *   `VFile` — shallow copies its data over to the new file\r\n   * *   `object` — all fields are shallow copied over to the new file\r\n   *\r\n   * Path related fields are set in the following order (least specific to\r\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\r\n   * `dirname`.\r\n   *\r\n   * You cannot set `dirname` or `extname` without setting either `history`,\r\n   * `path`, `basename`, or `stem` too.\r\n   *\r\n   * @param {Compatible | null | undefined} [value]\r\n   *   File value.\r\n   * @returns\r\n   *   New instance.\r\n   */\r\n  constructor(value) {\r\n    /** @type {Options | VFile} */\r\n    let options\r\n\r\n    if (!value) {\r\n      options = {}\r\n    } else if (isUrl(value)) {\r\n      options = {path: value}\r\n    } else if (typeof value === 'string' || isUint8Array(value)) {\r\n      options = {value}\r\n    } else {\r\n      options = value\r\n    }\r\n\r\n    /* eslint-disable no-unused-expressions */\r\n\r\n    /**\r\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\r\n     *\r\n     * @type {string}\r\n     */\r\n    // Prevent calling `cwd` (which could be expensive) if it’s not needed;\r\n    // the empty string will be overridden in the next block.\r\n    this.cwd = 'cwd' in options ? '' : minproc.cwd()\r\n\r\n    /**\r\n     * Place to store custom info (default: `{}`).\r\n     *\r\n     * It’s OK to store custom data directly on the file but moving it to\r\n     * `data` is recommended.\r\n     *\r\n     * @type {Data}\r\n     */\r\n    this.data = {}\r\n\r\n    /**\r\n     * List of file paths the file moved between.\r\n     *\r\n     * The first is the original path and the last is the current path.\r\n     *\r\n     * @type {Array<string>}\r\n     */\r\n    this.history = []\r\n\r\n    /**\r\n     * List of messages associated with the file.\r\n     *\r\n     * @type {Array<VFileMessage>}\r\n     */\r\n    this.messages = []\r\n\r\n    /**\r\n     * Raw value.\r\n     *\r\n     * @type {Value}\r\n     */\r\n    this.value\r\n\r\n    // The below are non-standard, they are “well-known”.\r\n    // As in, used in several tools.\r\n    /**\r\n     * Source map.\r\n     *\r\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\r\n     * module.\r\n     *\r\n     * @type {Map | null | undefined}\r\n     */\r\n    this.map\r\n\r\n    /**\r\n     * Custom, non-string, compiled, representation.\r\n     *\r\n     * This is used by unified to store non-string results.\r\n     * One example is when turning markdown into React nodes.\r\n     *\r\n     * @type {unknown}\r\n     */\r\n    this.result\r\n\r\n    /**\r\n     * Whether a file was saved to disk.\r\n     *\r\n     * This is used by vfile reporters.\r\n     *\r\n     * @type {boolean}\r\n     */\r\n    this.stored\r\n    /* eslint-enable no-unused-expressions */\r\n\r\n    // Set path related properties in the correct order.\r\n    let index = -1\r\n\r\n    while (++index < order.length) {\r\n      const field = order[index]\r\n\r\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\r\n      // `vfile`s too.\r\n      if (\r\n        field in options &&\r\n        options[field] !== undefined &&\r\n        options[field] !== null\r\n      ) {\r\n        // @ts-expect-error: TS doesn’t understand basic reality.\r\n        this[field] = field === 'history' ? [...options[field]] : options[field]\r\n      }\r\n    }\r\n\r\n    /** @type {string} */\r\n    let field\r\n\r\n    // Set non-path related properties.\r\n    for (field in options) {\r\n      // @ts-expect-error: fine to set other things.\r\n      if (!order.includes(field)) {\r\n        // @ts-expect-error: fine to set other things.\r\n        this[field] = options[field]\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the basename (including extname) (example: `'index.min.js'`).\r\n   *\r\n   * @returns {string | undefined}\r\n   *   Basename.\r\n   */\r\n  get basename() {\r\n    return typeof this.path === 'string'\r\n      ? minpath.basename(this.path)\r\n      : undefined\r\n  }\r\n\r\n  /**\r\n   * Set basename (including extname) (`'index.min.js'`).\r\n   *\r\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\r\n   * on windows).\r\n   * Cannot be nullified (use `file.path = file.dirname` instead).\r\n   *\r\n   * @param {string} basename\r\n   *   Basename.\r\n   * @returns {undefined}\r\n   *   Nothing.\r\n   */\r\n  set basename(basename) {\r\n    assertNonEmpty(basename, 'basename')\r\n    assertPart(basename, 'basename')\r\n    this.path = minpath.join(this.dirname || '', basename)\r\n  }\r\n\r\n  /**\r\n   * Get the parent path (example: `'~'`).\r\n   *\r\n   * @returns {string | undefined}\r\n   *   Dirname.\r\n   */\r\n  get dirname() {\r\n    return typeof this.path === 'string'\r\n      ? minpath.dirname(this.path)\r\n      : undefined\r\n  }\r\n\r\n  /**\r\n   * Set the parent path (example: `'~'`).\r\n   *\r\n   * Cannot be set if there’s no `path` yet.\r\n   *\r\n   * @param {string | undefined} dirname\r\n   *   Dirname.\r\n   * @returns {undefined}\r\n   *   Nothing.\r\n   */\r\n  set dirname(dirname) {\r\n    assertPath(this.basename, 'dirname')\r\n    this.path = minpath.join(dirname || '', this.basename)\r\n  }\r\n\r\n  /**\r\n   * Get the extname (including dot) (example: `'.js'`).\r\n   *\r\n   * @returns {string | undefined}\r\n   *   Extname.\r\n   */\r\n  get extname() {\r\n    return typeof this.path === 'string'\r\n      ? minpath.extname(this.path)\r\n      : undefined\r\n  }\r\n\r\n  /**\r\n   * Set the extname (including dot) (example: `'.js'`).\r\n   *\r\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\r\n   * on windows).\r\n   * Cannot be set if there’s no `path` yet.\r\n   *\r\n   * @param {string | undefined} extname\r\n   *   Extname.\r\n   * @returns {undefined}\r\n   *   Nothing.\r\n   */\r\n  set extname(extname) {\r\n    assertPart(extname, 'extname')\r\n    assertPath(this.dirname, 'extname')\r\n\r\n    if (extname) {\r\n      if (extname.codePointAt(0) !== 46 /* `.` */) {\r\n        throw new Error('`extname` must start with `.`')\r\n      }\r\n\r\n      if (extname.includes('.', 1)) {\r\n        throw new Error('`extname` cannot contain multiple dots')\r\n      }\r\n    }\r\n\r\n    this.path = minpath.join(this.dirname, this.stem + (extname || ''))\r\n  }\r\n\r\n  /**\r\n   * Get the full path (example: `'~/index.min.js'`).\r\n   *\r\n   * @returns {string}\r\n   *   Path.\r\n   */\r\n  get path() {\r\n    return this.history[this.history.length - 1]\r\n  }\r\n\r\n  /**\r\n   * Set the full path (example: `'~/index.min.js'`).\r\n   *\r\n   * Cannot be nullified.\r\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\r\n   * be turned into a path with `url.fileURLToPath`.\r\n   *\r\n   * @param {URL | string} path\r\n   *   Path.\r\n   * @returns {undefined}\r\n   *   Nothing.\r\n   */\r\n  set path(path) {\r\n    if (isUrl(path)) {\r\n      path = urlToPath(path)\r\n    }\r\n\r\n    assertNonEmpty(path, 'path')\r\n\r\n    if (this.path !== path) {\r\n      this.history.push(path)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\r\n   *\r\n   * @returns {string | undefined}\r\n   *   Stem.\r\n   */\r\n  get stem() {\r\n    return typeof this.path === 'string'\r\n      ? minpath.basename(this.path, this.extname)\r\n      : undefined\r\n  }\r\n\r\n  /**\r\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\r\n   *\r\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\r\n   * on windows).\r\n   * Cannot be nullified (use `file.path = file.dirname` instead).\r\n   *\r\n   * @param {string} stem\r\n   *   Stem.\r\n   * @returns {undefined}\r\n   *   Nothing.\r\n   */\r\n  set stem(stem) {\r\n    assertNonEmpty(stem, 'stem')\r\n    assertPart(stem, 'stem')\r\n    this.path = minpath.join(this.dirname || '', stem + (this.extname || ''))\r\n  }\r\n\r\n  // Normal prototypal methods.\r\n  /**\r\n   * Create a fatal message for `reason` associated with the file.\r\n   *\r\n   * The `fatal` field of the message is set to `true` (error; file not usable)\r\n   * and the `file` field is set to the current file path.\r\n   * The message is added to the `messages` field on `file`.\r\n   *\r\n   * > 🪦 **Note**: also has obsolete signatures.\r\n   *\r\n   * @overload\r\n   * @param {string} reason\r\n   * @param {MessageOptions | null | undefined} [options]\r\n   * @returns {never}\r\n   *\r\n   * @overload\r\n   * @param {string} reason\r\n   * @param {Node | NodeLike | null | undefined} parent\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {never}\r\n   *\r\n   * @overload\r\n   * @param {string} reason\r\n   * @param {Point | Position | null | undefined} place\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {never}\r\n   *\r\n   * @overload\r\n   * @param {string} reason\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {never}\r\n   *\r\n   * @overload\r\n   * @param {Error | VFileMessage} cause\r\n   * @param {Node | NodeLike | null | undefined} parent\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {never}\r\n   *\r\n   * @overload\r\n   * @param {Error | VFileMessage} cause\r\n   * @param {Point | Position | null | undefined} place\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {never}\r\n   *\r\n   * @overload\r\n   * @param {Error | VFileMessage} cause\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {never}\r\n   *\r\n   * @param {Error | VFileMessage | string} causeOrReason\r\n   *   Reason for message, should use markdown.\r\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\r\n   *   Configuration (optional).\r\n   * @param {string | null | undefined} [origin]\r\n   *   Place in code where the message originates (example:\r\n   *   `'my-package:my-rule'` or `'my-rule'`).\r\n   * @returns {never}\r\n   *   Never.\r\n   * @throws {VFileMessage}\r\n   *   Message.\r\n   */\r\n  fail(causeOrReason, optionsOrParentOrPlace, origin) {\r\n    // @ts-expect-error: the overloads are fine.\r\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\r\n\r\n    message.fatal = true\r\n\r\n    throw message\r\n  }\r\n\r\n  /**\r\n   * Create an info message for `reason` associated with the file.\r\n   *\r\n   * The `fatal` field of the message is set to `undefined` (info; change\r\n   * likely not needed) and the `file` field is set to the current file path.\r\n   * The message is added to the `messages` field on `file`.\r\n   *\r\n   * > 🪦 **Note**: also has obsolete signatures.\r\n   *\r\n   * @overload\r\n   * @param {string} reason\r\n   * @param {MessageOptions | null | undefined} [options]\r\n   * @returns {VFileMessage}\r\n   *\r\n   * @overload\r\n   * @param {string} reason\r\n   * @param {Node | NodeLike | null | undefined} parent\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {VFileMessage}\r\n   *\r\n   * @overload\r\n   * @param {string} reason\r\n   * @param {Point | Position | null | undefined} place\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {VFileMessage}\r\n   *\r\n   * @overload\r\n   * @param {string} reason\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {VFileMessage}\r\n   *\r\n   * @overload\r\n   * @param {Error | VFileMessage} cause\r\n   * @param {Node | NodeLike | null | undefined} parent\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {VFileMessage}\r\n   *\r\n   * @overload\r\n   * @param {Error | VFileMessage} cause\r\n   * @param {Point | Position | null | undefined} place\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {VFileMessage}\r\n   *\r\n   * @overload\r\n   * @param {Error | VFileMessage} cause\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {VFileMessage}\r\n   *\r\n   * @param {Error | VFileMessage | string} causeOrReason\r\n   *   Reason for message, should use markdown.\r\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\r\n   *   Configuration (optional).\r\n   * @param {string | null | undefined} [origin]\r\n   *   Place in code where the message originates (example:\r\n   *   `'my-package:my-rule'` or `'my-rule'`).\r\n   * @returns {VFileMessage}\r\n   *   Message.\r\n   */\r\n  info(causeOrReason, optionsOrParentOrPlace, origin) {\r\n    // @ts-expect-error: the overloads are fine.\r\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\r\n\r\n    message.fatal = undefined\r\n\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Create a message for `reason` associated with the file.\r\n   *\r\n   * The `fatal` field of the message is set to `false` (warning; change may be\r\n   * needed) and the `file` field is set to the current file path.\r\n   * The message is added to the `messages` field on `file`.\r\n   *\r\n   * > 🪦 **Note**: also has obsolete signatures.\r\n   *\r\n   * @overload\r\n   * @param {string} reason\r\n   * @param {MessageOptions | null | undefined} [options]\r\n   * @returns {VFileMessage}\r\n   *\r\n   * @overload\r\n   * @param {string} reason\r\n   * @param {Node | NodeLike | null | undefined} parent\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {VFileMessage}\r\n   *\r\n   * @overload\r\n   * @param {string} reason\r\n   * @param {Point | Position | null | undefined} place\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {VFileMessage}\r\n   *\r\n   * @overload\r\n   * @param {string} reason\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {VFileMessage}\r\n   *\r\n   * @overload\r\n   * @param {Error | VFileMessage} cause\r\n   * @param {Node | NodeLike | null | undefined} parent\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {VFileMessage}\r\n   *\r\n   * @overload\r\n   * @param {Error | VFileMessage} cause\r\n   * @param {Point | Position | null | undefined} place\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {VFileMessage}\r\n   *\r\n   * @overload\r\n   * @param {Error | VFileMessage} cause\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {VFileMessage}\r\n   *\r\n   * @param {Error | VFileMessage | string} causeOrReason\r\n   *   Reason for message, should use markdown.\r\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\r\n   *   Configuration (optional).\r\n   * @param {string | null | undefined} [origin]\r\n   *   Place in code where the message originates (example:\r\n   *   `'my-package:my-rule'` or `'my-rule'`).\r\n   * @returns {VFileMessage}\r\n   *   Message.\r\n   */\r\n  message(causeOrReason, optionsOrParentOrPlace, origin) {\r\n    const message = new VFileMessage(\r\n      // @ts-expect-error: the overloads are fine.\r\n      causeOrReason,\r\n      optionsOrParentOrPlace,\r\n      origin\r\n    )\r\n\r\n    if (this.path) {\r\n      message.name = this.path + ':' + message.name\r\n      message.file = this.path\r\n    }\r\n\r\n    message.fatal = false\r\n\r\n    this.messages.push(message)\r\n\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Serialize the file.\r\n   *\r\n   * > **Note**: which encodings are supported depends on the engine.\r\n   * > For info on Node.js, see:\r\n   * > <https://nodejs.org/api/util.html#whatwg-supported-encodings>.\r\n   *\r\n   * @param {string | null | undefined} [encoding='utf8']\r\n   *   Character encoding to understand `value` as when it’s a `Uint8Array`\r\n   *   (default: `'utf-8'`).\r\n   * @returns {string}\r\n   *   Serialized file.\r\n   */\r\n  toString(encoding) {\r\n    if (this.value === undefined) {\r\n      return ''\r\n    }\r\n\r\n    if (typeof this.value === 'string') {\r\n      return this.value\r\n    }\r\n\r\n    const decoder = new TextDecoder(encoding || undefined)\r\n    return decoder.decode(this.value)\r\n  }\r\n}\r\n\r\n/**\r\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\r\n *\r\n * @param {string | null | undefined} part\r\n *   File path part.\r\n * @param {string} name\r\n *   Part name.\r\n * @returns {undefined}\r\n *   Nothing.\r\n */\r\nfunction assertPart(part, name) {\r\n  if (part && part.includes(minpath.sep)) {\r\n    throw new Error(\r\n      '`' + name + '` cannot be a path: did not expect `' + minpath.sep + '`'\r\n    )\r\n  }\r\n}\r\n\r\n/**\r\n * Assert that `part` is not empty.\r\n *\r\n * @param {string | undefined} part\r\n *   Thing.\r\n * @param {string} name\r\n *   Part name.\r\n * @returns {asserts part is string}\r\n *   Nothing.\r\n */\r\nfunction assertNonEmpty(part, name) {\r\n  if (!part) {\r\n    throw new Error('`' + name + '` cannot be empty')\r\n  }\r\n}\r\n\r\n/**\r\n * Assert `path` exists.\r\n *\r\n * @param {string | undefined} path\r\n *   Path.\r\n * @param {string} name\r\n *   Dependency name.\r\n * @returns {asserts path is string}\r\n *   Nothing.\r\n */\r\nfunction assertPath(path, name) {\r\n  if (!path) {\r\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\r\n  }\r\n}\r\n\r\n/**\r\n * Assert `value` is an `Uint8Array`.\r\n *\r\n * @param {unknown} value\r\n *   thing.\r\n * @returns {value is Uint8Array}\r\n *   Whether `value` is an `Uint8Array`.\r\n */\r\nfunction isUint8Array(value) {\r\n  return Boolean(\r\n    value &&\r\n      typeof value === 'object' &&\r\n      'byteLength' in value &&\r\n      'byteOffset' in value\r\n  )\r\n}\r\n","export const CallableInstance =\r\n  /**\r\n   * @type {new <Parameters extends Array<unknown>, Result>(property: string | symbol) => (...parameters: Parameters) => Result}\r\n   */\r\n  (\r\n    /** @type {unknown} */\r\n    (\r\n      /**\r\n       * @this {Function}\r\n       * @param {string | symbol} property\r\n       * @returns {(...parameters: Array<unknown>) => unknown}\r\n       */\r\n      function (property) {\r\n        const self = this\r\n        const constr = self.constructor\r\n        const proto = /** @type {Record<string | symbol, Function>} */ (\r\n          // Prototypes do exist.\r\n          // type-coverage:ignore-next-line\r\n          constr.prototype\r\n        )\r\n        const value = proto[property]\r\n        /** @type {(...parameters: Array<unknown>) => unknown} */\r\n        const apply = function () {\r\n          return value.apply(apply, arguments)\r\n        }\r\n\r\n        Object.setPrototypeOf(apply, proto)\r\n\r\n        // Not needed for us in `unified`: we only call this on the `copy`\r\n        // function,\r\n        // and we don't need to add its fields (`length`, `name`)\r\n        // over.\r\n        // See also: GH-246.\r\n        // const names = Object.getOwnPropertyNames(value)\r\n        //\r\n        // for (const p of names) {\r\n        //   const descriptor = Object.getOwnPropertyDescriptor(value, p)\r\n        //   if (descriptor) Object.defineProperty(apply, p, descriptor)\r\n        // }\r\n\r\n        return apply\r\n      }\r\n    )\r\n  )\r\n","/**\r\n * @typedef {import('trough').Pipeline} Pipeline\r\n *\r\n * @typedef {import('unist').Node} Node\r\n *\r\n * @typedef {import('vfile').Compatible} Compatible\r\n * @typedef {import('vfile').Value} Value\r\n *\r\n * @typedef {import('../index.js').CompileResultMap} CompileResultMap\r\n * @typedef {import('../index.js').Data} Data\r\n * @typedef {import('../index.js').Settings} Settings\r\n */\r\n\r\n/**\r\n * @typedef {CompileResultMap[keyof CompileResultMap]} CompileResults\r\n *   Acceptable results from compilers.\r\n *\r\n *   To register custom results, add them to\r\n *   {@linkcode CompileResultMap}.\r\n */\r\n\r\n/**\r\n * @template {Node} [Tree=Node]\r\n *   The node that the compiler receives (default: `Node`).\r\n * @template {CompileResults} [Result=CompileResults]\r\n *   The thing that the compiler yields (default: `CompileResults`).\r\n * @callback Compiler\r\n *   A **compiler** handles the compiling of a syntax tree to something else\r\n *   (in most cases, text) (TypeScript type).\r\n *\r\n *   It is used in the stringify phase and called with a {@linkcode Node}\r\n *   and {@linkcode VFile} representation of the document to compile.\r\n *   It should return the textual representation of the given tree (typically\r\n *   `string`).\r\n *\r\n *   > **Note**: unified typically compiles by serializing: most compilers\r\n *   > return `string` (or `Uint8Array`).\r\n *   > Some compilers, such as the one configured with\r\n *   > [`rehype-react`][rehype-react], return other values (in this case, a\r\n *   > React tree).\r\n *   > If you’re using a compiler that doesn’t serialize, expect different\r\n *   > result values.\r\n *   >\r\n *   > To register custom results in TypeScript, add them to\r\n *   > {@linkcode CompileResultMap}.\r\n *\r\n *   [rehype-react]: https://github.com/rehypejs/rehype-react\r\n * @param {Tree} tree\r\n *   Tree to compile.\r\n * @param {VFile} file\r\n *   File associated with `tree`.\r\n * @returns {Result}\r\n *   New content: compiled text (`string` or `Uint8Array`, for `file.value`) or\r\n *   something else (for `file.result`).\r\n */\r\n\r\n/**\r\n * @template {Node} [Tree=Node]\r\n *   The node that the parser yields (default: `Node`)\r\n * @callback Parser\r\n *   A **parser** handles the parsing of text to a syntax tree.\r\n *\r\n *   It is used in the parse phase and is called with a `string` and\r\n *   {@linkcode VFile} of the document to parse.\r\n *   It must return the syntax tree representation of the given file\r\n *   ({@linkcode Node}).\r\n * @param {string} document\r\n *   Document to parse.\r\n * @param {VFile} file\r\n *   File associated with `document`.\r\n * @returns {Tree}\r\n *   Node representing the given file.\r\n */\r\n\r\n/**\r\n * @typedef {(\r\n *   Plugin<Array<any>, any, any> |\r\n *   PluginTuple<Array<any>, any, any> |\r\n *   Preset\r\n * )} Pluggable\r\n *   Union of the different ways to add plugins and settings.\r\n */\r\n\r\n/**\r\n * @typedef {Array<Pluggable>} PluggableList\r\n *   List of plugins and presets.\r\n */\r\n\r\n// Note: we can’t use `callback` yet as it messes up `this`:\r\n//  <https://github.com/microsoft/TypeScript/issues/55197>.\r\n/**\r\n * @template {Array<unknown>} [PluginParameters=[]]\r\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\r\n * @template {Node | string | undefined} [Input=Node]\r\n *   Value that is expected as input (default: `Node`).\r\n *\r\n *   *   If the plugin returns a {@linkcode Transformer}, this\r\n *       should be the node it expects.\r\n *   *   If the plugin sets a {@linkcode Parser}, this should be\r\n *       `string`.\r\n *   *   If the plugin sets a {@linkcode Compiler}, this should be the\r\n *       node it expects.\r\n * @template [Output=Input]\r\n *   Value that is yielded as output (default: `Input`).\r\n *\r\n *   *   If the plugin returns a {@linkcode Transformer}, this\r\n *       should be the node that that yields.\r\n *   *   If the plugin sets a {@linkcode Parser}, this should be the\r\n *       node that it yields.\r\n *   *   If the plugin sets a {@linkcode Compiler}, this should be\r\n *       result it yields.\r\n * @typedef {(\r\n *   (this: Processor, ...parameters: PluginParameters) =>\r\n *     Input extends string ? // Parser.\r\n *        Output extends Node | undefined ? undefined | void : never :\r\n *     Output extends CompileResults ? // Compiler.\r\n *        Input extends Node | undefined ? undefined | void : never :\r\n *     Transformer<\r\n *       Input extends Node ? Input : Node,\r\n *       Output extends Node ? Output : Node\r\n *     > | undefined | void\r\n * )} Plugin\r\n *   Single plugin.\r\n *\r\n *   Plugins configure the processors they are applied on in the following\r\n *   ways:\r\n *\r\n *   *   they change the processor, such as the parser, the compiler, or by\r\n *       configuring data\r\n *   *   they specify how to handle trees and files\r\n *\r\n *   In practice, they are functions that can receive options and configure the\r\n *   processor (`this`).\r\n *\r\n *   > **Note**: plugins are called when the processor is *frozen*, not when\r\n *   > they are applied.\r\n */\r\n\r\n/**\r\n * Tuple of a plugin and its configuration.\r\n *\r\n * The first item is a plugin, the rest are its parameters.\r\n *\r\n * @template {Array<unknown>} [TupleParameters=[]]\r\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\r\n * @template {Node | string | undefined} [Input=undefined]\r\n *   Value that is expected as input (optional).\r\n *\r\n *   *   If the plugin returns a {@linkcode Transformer}, this\r\n *       should be the node it expects.\r\n *   *   If the plugin sets a {@linkcode Parser}, this should be\r\n *       `string`.\r\n *   *   If the plugin sets a {@linkcode Compiler}, this should be the\r\n *       node it expects.\r\n * @template [Output=undefined] (optional).\r\n *   Value that is yielded as output.\r\n *\r\n *   *   If the plugin returns a {@linkcode Transformer}, this\r\n *       should be the node that that yields.\r\n *   *   If the plugin sets a {@linkcode Parser}, this should be the\r\n *       node that it yields.\r\n *   *   If the plugin sets a {@linkcode Compiler}, this should be\r\n *       result it yields.\r\n * @typedef {(\r\n *   [\r\n *     plugin: Plugin<TupleParameters, Input, Output>,\r\n *     ...parameters: TupleParameters\r\n *   ]\r\n * )} PluginTuple\r\n */\r\n\r\n/**\r\n * @typedef Preset\r\n *   Sharable configuration.\r\n *\r\n *   They can contain plugins and settings.\r\n * @property {PluggableList | undefined} [plugins]\r\n *   List of plugins and presets (optional).\r\n * @property {Settings | undefined} [settings]\r\n *   Shared settings for parsers and compilers (optional).\r\n */\r\n\r\n/**\r\n * @template {VFile} [File=VFile]\r\n *   The file that the callback receives (default: `VFile`).\r\n * @callback ProcessCallback\r\n *   Callback called when the process is done.\r\n *\r\n *   Called with either an error or a result.\r\n * @param {Error | undefined} [error]\r\n *   Fatal error (optional).\r\n * @param {File | undefined} [file]\r\n *   Processed file (optional).\r\n * @returns {undefined}\r\n *   Nothing.\r\n */\r\n\r\n/**\r\n * @template {Node} [Tree=Node]\r\n *   The tree that the callback receives (default: `Node`).\r\n * @callback RunCallback\r\n *   Callback called when transformers are done.\r\n *\r\n *   Called with either an error or results.\r\n * @param {Error | undefined} [error]\r\n *   Fatal error (optional).\r\n * @param {Tree | undefined} [tree]\r\n *   Transformed tree (optional).\r\n * @param {VFile | undefined} [file]\r\n *   File (optional).\r\n * @returns {undefined}\r\n *   Nothing.\r\n */\r\n\r\n/**\r\n * @template {Node} [Output=Node]\r\n *   Node type that the transformer yields (default: `Node`).\r\n * @callback TransformCallback\r\n *   Callback passed to transforms.\r\n *\r\n *   If the signature of a `transformer` accepts a third argument, the\r\n *   transformer may perform asynchronous operations, and must call it.\r\n * @param {Error | undefined} [error]\r\n *   Fatal error to stop the process (optional).\r\n * @param {Output | undefined} [tree]\r\n *   New, changed, tree (optional).\r\n * @param {VFile | undefined} [file]\r\n *   New, changed, file (optional).\r\n * @returns {undefined}\r\n *   Nothing.\r\n */\r\n\r\n/**\r\n * @template {Node} [Input=Node]\r\n *   Node type that the transformer expects (default: `Node`).\r\n * @template {Node} [Output=Input]\r\n *   Node type that the transformer yields (default: `Input`).\r\n * @callback Transformer\r\n *   Transformers handle syntax trees and files.\r\n *\r\n *   They are functions that are called each time a syntax tree and file are\r\n *   passed through the run phase.\r\n *   When an error occurs in them (either because it’s thrown, returned,\r\n *   rejected, or passed to `next`), the process stops.\r\n *\r\n *   The run phase is handled by [`trough`][trough], see its documentation for\r\n *   the exact semantics of these functions.\r\n *\r\n *   > **Note**: you should likely ignore `next`: don’t accept it.\r\n *   > it supports callback-style async work.\r\n *   > But promises are likely easier to reason about.\r\n *\r\n *   [trough]: https://github.com/wooorm/trough#function-fninput-next\r\n * @param {Input} tree\r\n *   Tree to handle.\r\n * @param {VFile} file\r\n *   File to handle.\r\n * @param {TransformCallback<Output>} next\r\n *   Callback.\r\n * @returns {(\r\n *   Promise<Output | undefined | void> |\r\n *   Promise<never> | // For some reason this is needed separately.\r\n *   Output |\r\n *   Error |\r\n *   undefined |\r\n *   void\r\n * )}\r\n *   If you accept `next`, nothing.\r\n *   Otherwise:\r\n *\r\n *   *   `Error` — fatal error to stop the process\r\n *   *   `Promise<undefined>` or `undefined` — the next transformer keeps using\r\n *       same tree\r\n *   *   `Promise<Node>` or `Node` — new, changed, tree\r\n */\r\n\r\n/**\r\n * @template {Node | undefined} ParseTree\r\n *   Output of `parse`.\r\n * @template {Node | undefined} HeadTree\r\n *   Input for `run`.\r\n * @template {Node | undefined} TailTree\r\n *   Output for `run`.\r\n * @template {Node | undefined} CompileTree\r\n *   Input of `stringify`.\r\n * @template {CompileResults | undefined} CompileResult\r\n *   Output of `stringify`.\r\n * @template {Node | string | undefined} Input\r\n *   Input of plugin.\r\n * @template Output\r\n *   Output of plugin (optional).\r\n * @typedef {(\r\n *   Input extends string\r\n *     ? Output extends Node | undefined\r\n *       ? // Parser.\r\n *         Processor<\r\n *           Output extends undefined ? ParseTree : Output,\r\n *           HeadTree,\r\n *           TailTree,\r\n *           CompileTree,\r\n *           CompileResult\r\n *         >\r\n *       : // Unknown.\r\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\r\n *     : Output extends CompileResults\r\n *     ? Input extends Node | undefined\r\n *       ? // Compiler.\r\n *         Processor<\r\n *           ParseTree,\r\n *           HeadTree,\r\n *           TailTree,\r\n *           Input extends undefined ? CompileTree : Input,\r\n *           Output extends undefined ? CompileResult : Output\r\n *         >\r\n *       : // Unknown.\r\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\r\n *     : Input extends Node | undefined\r\n *     ? Output extends Node | undefined\r\n *       ? // Transform.\r\n *         Processor<\r\n *           ParseTree,\r\n *           HeadTree extends undefined ? Input : HeadTree,\r\n *           Output extends undefined ? TailTree : Output,\r\n *           CompileTree,\r\n *           CompileResult\r\n *         >\r\n *       : // Unknown.\r\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\r\n *     : // Unknown.\r\n *       Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\r\n * )} UsePlugin\r\n *   Create a processor based on the input/output of a {@link Plugin plugin}.\r\n */\r\n\r\n/**\r\n * @template {CompileResults | undefined} Result\r\n *   Node type that the transformer yields.\r\n * @typedef {(\r\n *   Result extends Value | undefined ?\r\n *     VFile :\r\n *     VFile & {result: Result}\r\n *   )} VFileWithOutput\r\n *   Type to generate a {@linkcode VFile} corresponding to a compiler result.\r\n *\r\n *   If a result that is not acceptable on a `VFile` is used, that will\r\n *   be stored on the `result` field of {@linkcode VFile}.\r\n */\r\n\r\nimport {bail} from 'bail'\r\nimport extend from 'extend'\r\nimport {ok as assert} from 'devlop'\r\nimport isPlainObj from 'is-plain-obj'\r\nimport {trough} from 'trough'\r\nimport {VFile} from 'vfile'\r\nimport {CallableInstance} from './callable-instance.js'\r\n\r\n// To do: next major: drop `Compiler`, `Parser`: prefer lowercase.\r\n\r\n// To do: we could start yielding `never` in TS when a parser is missing and\r\n// `parse` is called.\r\n// Currently, we allow directly setting `processor.parser`, which is untyped.\r\n\r\nconst own = {}.hasOwnProperty\r\n\r\n/**\r\n * @template {Node | undefined} [ParseTree=undefined]\r\n *   Output of `parse` (optional).\r\n * @template {Node | undefined} [HeadTree=undefined]\r\n *   Input for `run` (optional).\r\n * @template {Node | undefined} [TailTree=undefined]\r\n *   Output for `run` (optional).\r\n * @template {Node | undefined} [CompileTree=undefined]\r\n *   Input of `stringify` (optional).\r\n * @template {CompileResults | undefined} [CompileResult=undefined]\r\n *   Output of `stringify` (optional).\r\n * @extends {CallableInstance<[], Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>>}\r\n */\r\nexport class Processor extends CallableInstance {\r\n  /**\r\n   * Create a processor.\r\n   */\r\n  constructor() {\r\n    // If `Processor()` is called (w/o new), `copy` is called instead.\r\n    super('copy')\r\n\r\n    /**\r\n     * Compiler to use (deprecated).\r\n     *\r\n     * @deprecated\r\n     *   Use `compiler` instead.\r\n     * @type {(\r\n     *   Compiler<\r\n     *     CompileTree extends undefined ? Node : CompileTree,\r\n     *     CompileResult extends undefined ? CompileResults : CompileResult\r\n     *   > |\r\n     *   undefined\r\n     * )}\r\n     */\r\n    this.Compiler = undefined\r\n\r\n    /**\r\n     * Parser to use (deprecated).\r\n     *\r\n     * @deprecated\r\n     *   Use `parser` instead.\r\n     * @type {(\r\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\r\n     *   undefined\r\n     * )}\r\n     */\r\n    this.Parser = undefined\r\n\r\n    // Note: the following fields are considered private.\r\n    // However, they are needed for tests, and TSC generates an untyped\r\n    // `private freezeIndex` field for, which trips `type-coverage` up.\r\n    // Instead, we use `@deprecated` to visualize that they shouldn’t be used.\r\n    /**\r\n     * Internal list of configured plugins.\r\n     *\r\n     * @deprecated\r\n     *   This is a private internal property and should not be used.\r\n     * @type {Array<PluginTuple<Array<unknown>>>}\r\n     */\r\n    this.attachers = []\r\n\r\n    /**\r\n     * Compiler to use.\r\n     *\r\n     * @type {(\r\n     *   Compiler<\r\n     *     CompileTree extends undefined ? Node : CompileTree,\r\n     *     CompileResult extends undefined ? CompileResults : CompileResult\r\n     *   > |\r\n     *   undefined\r\n     * )}\r\n     */\r\n    this.compiler = undefined\r\n\r\n    /**\r\n     * Internal state to track where we are while freezing.\r\n     *\r\n     * @deprecated\r\n     *   This is a private internal property and should not be used.\r\n     * @type {number}\r\n     */\r\n    this.freezeIndex = -1\r\n\r\n    /**\r\n     * Internal state to track whether we’re frozen.\r\n     *\r\n     * @deprecated\r\n     *   This is a private internal property and should not be used.\r\n     * @type {boolean | undefined}\r\n     */\r\n    this.frozen = undefined\r\n\r\n    /**\r\n     * Internal state.\r\n     *\r\n     * @deprecated\r\n     *   This is a private internal property and should not be used.\r\n     * @type {Data}\r\n     */\r\n    this.namespace = {}\r\n\r\n    /**\r\n     * Parser to use.\r\n     *\r\n     * @type {(\r\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\r\n     *   undefined\r\n     * )}\r\n     */\r\n    this.parser = undefined\r\n\r\n    /**\r\n     * Internal list of configured transformers.\r\n     *\r\n     * @deprecated\r\n     *   This is a private internal property and should not be used.\r\n     * @type {Pipeline}\r\n     */\r\n    this.transformers = trough()\r\n  }\r\n\r\n  /**\r\n   * Copy a processor.\r\n   *\r\n   * @deprecated\r\n   *   This is a private internal method and should not be used.\r\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\r\n   *   New *unfrozen* processor ({@linkcode Processor}) that is\r\n   *   configured to work the same as its ancestor.\r\n   *   When the descendant processor is configured in the future it does not\r\n   *   affect the ancestral processor.\r\n   */\r\n  copy() {\r\n    // Cast as the type parameters will be the same after attaching.\r\n    const destination =\r\n      /** @type {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>} */ (\r\n        new Processor()\r\n      )\r\n    let index = -1\r\n\r\n    while (++index < this.attachers.length) {\r\n      const attacher = this.attachers[index]\r\n      destination.use(...attacher)\r\n    }\r\n\r\n    destination.data(extend(true, {}, this.namespace))\r\n\r\n    return destination\r\n  }\r\n\r\n  /**\r\n   * Configure the processor with info available to all plugins.\r\n   * Information is stored in an object.\r\n   *\r\n   * Typically, options can be given to a specific plugin, but sometimes it\r\n   * makes sense to have information shared with several plugins.\r\n   * For example, a list of HTML elements that are self-closing, which is\r\n   * needed during all phases.\r\n   *\r\n   * > **Note**: setting information cannot occur on *frozen* processors.\r\n   * > Call the processor first to create a new unfrozen processor.\r\n   *\r\n   * > **Note**: to register custom data in TypeScript, augment the\r\n   * > {@linkcode Data} interface.\r\n   *\r\n   * @example\r\n   *   This example show how to get and set info:\r\n   *\r\n   *   ```js\r\n   *   import {unified} from 'unified'\r\n   *\r\n   *   const processor = unified().data('alpha', 'bravo')\r\n   *\r\n   *   processor.data('alpha') // => 'bravo'\r\n   *\r\n   *   processor.data() // => {alpha: 'bravo'}\r\n   *\r\n   *   processor.data({charlie: 'delta'})\r\n   *\r\n   *   processor.data() // => {charlie: 'delta'}\r\n   *   ```\r\n   *\r\n   * @template {keyof Data} Key\r\n   *\r\n   * @overload\r\n   * @returns {Data}\r\n   *\r\n   * @overload\r\n   * @param {Data} dataset\r\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\r\n   *\r\n   * @overload\r\n   * @param {Key} key\r\n   * @returns {Data[Key]}\r\n   *\r\n   * @overload\r\n   * @param {Key} key\r\n   * @param {Data[Key]} value\r\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\r\n   *\r\n   * @param {Data | Key} [key]\r\n   *   Key to get or set, or entire dataset to set, or nothing to get the\r\n   *   entire dataset (optional).\r\n   * @param {Data[Key]} [value]\r\n   *   Value to set (optional).\r\n   * @returns {unknown}\r\n   *   The current processor when setting, the value at `key` when getting, or\r\n   *   the entire dataset when getting without key.\r\n   */\r\n  data(key, value) {\r\n    if (typeof key === 'string') {\r\n      // Set `key`.\r\n      if (arguments.length === 2) {\r\n        assertUnfrozen('data', this.frozen)\r\n        this.namespace[key] = value\r\n        return this\r\n      }\r\n\r\n      // Get `key`.\r\n      return (own.call(this.namespace, key) && this.namespace[key]) || undefined\r\n    }\r\n\r\n    // Set space.\r\n    if (key) {\r\n      assertUnfrozen('data', this.frozen)\r\n      this.namespace = key\r\n      return this\r\n    }\r\n\r\n    // Get space.\r\n    return this.namespace\r\n  }\r\n\r\n  /**\r\n   * Freeze a processor.\r\n   *\r\n   * Frozen processors are meant to be extended and not to be configured\r\n   * directly.\r\n   *\r\n   * When a processor is frozen it cannot be unfrozen.\r\n   * New processors working the same way can be created by calling the\r\n   * processor.\r\n   *\r\n   * It’s possible to freeze processors explicitly by calling `.freeze()`.\r\n   * Processors freeze automatically when `.parse()`, `.run()`, `.runSync()`,\r\n   * `.stringify()`, `.process()`, or `.processSync()` are called.\r\n   *\r\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\r\n   *   The current processor.\r\n   */\r\n  freeze() {\r\n    if (this.frozen) {\r\n      return this\r\n    }\r\n\r\n    // Cast so that we can type plugins easier.\r\n    // Plugins are supposed to be usable on different processors, not just on\r\n    // this exact processor.\r\n    const self = /** @type {Processor} */ (/** @type {unknown} */ (this))\r\n\r\n    while (++this.freezeIndex < this.attachers.length) {\r\n      const [attacher, ...options] = this.attachers[this.freezeIndex]\r\n\r\n      if (options[0] === false) {\r\n        continue\r\n      }\r\n\r\n      if (options[0] === true) {\r\n        options[0] = undefined\r\n      }\r\n\r\n      const transformer = attacher.call(self, ...options)\r\n\r\n      if (typeof transformer === 'function') {\r\n        this.transformers.use(transformer)\r\n      }\r\n    }\r\n\r\n    this.frozen = true\r\n    this.freezeIndex = Number.POSITIVE_INFINITY\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Parse text to a syntax tree.\r\n   *\r\n   * > **Note**: `parse` freezes the processor if not already *frozen*.\r\n   *\r\n   * > **Note**: `parse` performs the parse phase, not the run phase or other\r\n   * > phases.\r\n   *\r\n   * @param {Compatible | undefined} [file]\r\n   *   file to parse (optional); typically `string` or `VFile`; any value\r\n   *   accepted as `x` in `new VFile(x)`.\r\n   * @returns {ParseTree extends undefined ? Node : ParseTree}\r\n   *   Syntax tree representing `file`.\r\n   */\r\n  parse(file) {\r\n    this.freeze()\r\n    const realFile = vfile(file)\r\n    const parser = this.parser || this.Parser\r\n    assertParser('parse', parser)\r\n    return parser(String(realFile), realFile)\r\n  }\r\n\r\n  /**\r\n   * Process the given file as configured on the processor.\r\n   *\r\n   * > **Note**: `process` freezes the processor if not already *frozen*.\r\n   *\r\n   * > **Note**: `process` performs the parse, run, and stringify phases.\r\n   *\r\n   * @overload\r\n   * @param {Compatible | undefined} file\r\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>>} done\r\n   * @returns {undefined}\r\n   *\r\n   * @overload\r\n   * @param {Compatible | undefined} [file]\r\n   * @returns {Promise<VFileWithOutput<CompileResult>>}\r\n   *\r\n   * @param {Compatible | undefined} [file]\r\n   *   File (optional); typically `string` or `VFile`]; any value accepted as\r\n   *   `x` in `new VFile(x)`.\r\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>> | undefined} [done]\r\n   *   Callback (optional).\r\n   * @returns {Promise<VFile> | undefined}\r\n   *   Nothing if `done` is given.\r\n   *   Otherwise a promise, rejected with a fatal error or resolved with the\r\n   *   processed file.\r\n   *\r\n   *   The parsed, transformed, and compiled value is available at\r\n   *   `file.value` (see note).\r\n   *\r\n   *   > **Note**: unified typically compiles by serializing: most\r\n   *   > compilers return `string` (or `Uint8Array`).\r\n   *   > Some compilers, such as the one configured with\r\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\r\n   *   > React tree).\r\n   *   > If you’re using a compiler that doesn’t serialize, expect different\r\n   *   > result values.\r\n   *   >\r\n   *   > To register custom results in TypeScript, add them to\r\n   *   > {@linkcode CompileResultMap}.\r\n   *\r\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\r\n   */\r\n  process(file, done) {\r\n    const self = this\r\n\r\n    this.freeze()\r\n    assertParser('process', this.parser || this.Parser)\r\n    assertCompiler('process', this.compiler || this.Compiler)\r\n\r\n    return done ? executor(undefined, done) : new Promise(executor)\r\n\r\n    // Note: `void`s needed for TS.\r\n    /**\r\n     * @param {((file: VFileWithOutput<CompileResult>) => undefined | void) | undefined} resolve\r\n     * @param {(error: Error | undefined) => undefined | void} reject\r\n     * @returns {undefined}\r\n     */\r\n    function executor(resolve, reject) {\r\n      const realFile = vfile(file)\r\n      // Assume `ParseTree` (the result of the parser) matches `HeadTree` (the\r\n      // input of the first transform).\r\n      const parseTree =\r\n        /** @type {HeadTree extends undefined ? Node : HeadTree} */ (\r\n          /** @type {unknown} */ (self.parse(realFile))\r\n        )\r\n\r\n      self.run(parseTree, realFile, function (error, tree, file) {\r\n        if (error || !tree || !file) {\r\n          return realDone(error)\r\n        }\r\n\r\n        // Assume `TailTree` (the output of the last transform) matches\r\n        // `CompileTree` (the input of the compiler).\r\n        const compileTree =\r\n          /** @type {CompileTree extends undefined ? Node : CompileTree} */ (\r\n            /** @type {unknown} */ (tree)\r\n          )\r\n\r\n        const compileResult = self.stringify(compileTree, file)\r\n\r\n        if (looksLikeAValue(compileResult)) {\r\n          file.value = compileResult\r\n        } else {\r\n          file.result = compileResult\r\n        }\r\n\r\n        realDone(error, /** @type {VFileWithOutput<CompileResult>} */ (file))\r\n      })\r\n\r\n      /**\r\n       * @param {Error | undefined} error\r\n       * @param {VFileWithOutput<CompileResult> | undefined} [file]\r\n       * @returns {undefined}\r\n       */\r\n      function realDone(error, file) {\r\n        if (error || !file) {\r\n          reject(error)\r\n        } else if (resolve) {\r\n          resolve(file)\r\n        } else {\r\n          assert(done, '`done` is defined if `resolve` is not')\r\n          done(undefined, file)\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Process the given file as configured on the processor.\r\n   *\r\n   * An error is thrown if asynchronous transforms are configured.\r\n   *\r\n   * > **Note**: `processSync` freezes the processor if not already *frozen*.\r\n   *\r\n   * > **Note**: `processSync` performs the parse, run, and stringify phases.\r\n   *\r\n   * @param {Compatible | undefined} [file]\r\n   *   File (optional); typically `string` or `VFile`; any value accepted as\r\n   *   `x` in `new VFile(x)`.\r\n   * @returns {VFileWithOutput<CompileResult>}\r\n   *   The processed file.\r\n   *\r\n   *   The parsed, transformed, and compiled value is available at\r\n   *   `file.value` (see note).\r\n   *\r\n   *   > **Note**: unified typically compiles by serializing: most\r\n   *   > compilers return `string` (or `Uint8Array`).\r\n   *   > Some compilers, such as the one configured with\r\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\r\n   *   > React tree).\r\n   *   > If you’re using a compiler that doesn’t serialize, expect different\r\n   *   > result values.\r\n   *   >\r\n   *   > To register custom results in TypeScript, add them to\r\n   *   > {@linkcode CompileResultMap}.\r\n   *\r\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\r\n   */\r\n  processSync(file) {\r\n    /** @type {boolean} */\r\n    let complete = false\r\n    /** @type {VFileWithOutput<CompileResult> | undefined} */\r\n    let result\r\n\r\n    this.freeze()\r\n    assertParser('processSync', this.parser || this.Parser)\r\n    assertCompiler('processSync', this.compiler || this.Compiler)\r\n\r\n    this.process(file, realDone)\r\n    assertDone('processSync', 'process', complete)\r\n    assert(result, 'we either bailed on an error or have a tree')\r\n\r\n    return result\r\n\r\n    /**\r\n     * @type {ProcessCallback<VFileWithOutput<CompileResult>>}\r\n     */\r\n    function realDone(error, file) {\r\n      complete = true\r\n      bail(error)\r\n      result = file\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Run *transformers* on a syntax tree.\r\n   *\r\n   * > **Note**: `run` freezes the processor if not already *frozen*.\r\n   *\r\n   * > **Note**: `run` performs the run phase, not other phases.\r\n   *\r\n   * @overload\r\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\r\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\r\n   * @returns {undefined}\r\n   *\r\n   * @overload\r\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\r\n   * @param {Compatible | undefined} file\r\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\r\n   * @returns {undefined}\r\n   *\r\n   * @overload\r\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\r\n   * @param {Compatible | undefined} [file]\r\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree>}\r\n   *\r\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\r\n   *   Tree to transform and inspect.\r\n   * @param {(\r\n   *   RunCallback<TailTree extends undefined ? Node : TailTree> |\r\n   *   Compatible\r\n   * )} [file]\r\n   *   File associated with `node` (optional); any value accepted as `x` in\r\n   *   `new VFile(x)`.\r\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} [done]\r\n   *   Callback (optional).\r\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree> | undefined}\r\n   *   Nothing if `done` is given.\r\n   *   Otherwise, a promise rejected with a fatal error or resolved with the\r\n   *   transformed tree.\r\n   */\r\n  run(tree, file, done) {\r\n    assertNode(tree)\r\n    this.freeze()\r\n\r\n    const transformers = this.transformers\r\n\r\n    if (!done && typeof file === 'function') {\r\n      done = file\r\n      file = undefined\r\n    }\r\n\r\n    return done ? executor(undefined, done) : new Promise(executor)\r\n\r\n    // Note: `void`s needed for TS.\r\n    /**\r\n     * @param {(\r\n     *   ((tree: TailTree extends undefined ? Node : TailTree) => undefined | void) |\r\n     *   undefined\r\n     * )} resolve\r\n     * @param {(error: Error) => undefined | void} reject\r\n     * @returns {undefined}\r\n     */\r\n    function executor(resolve, reject) {\r\n      assert(\r\n        typeof file !== 'function',\r\n        '`file` can’t be a `done` anymore, we checked'\r\n      )\r\n      const realFile = vfile(file)\r\n      transformers.run(tree, realFile, realDone)\r\n\r\n      /**\r\n       * @param {Error | undefined} error\r\n       * @param {Node} outputTree\r\n       * @param {VFile} file\r\n       * @returns {undefined}\r\n       */\r\n      function realDone(error, outputTree, file) {\r\n        const resultingTree =\r\n          /** @type {TailTree extends undefined ? Node : TailTree} */ (\r\n            outputTree || tree\r\n          )\r\n\r\n        if (error) {\r\n          reject(error)\r\n        } else if (resolve) {\r\n          resolve(resultingTree)\r\n        } else {\r\n          assert(done, '`done` is defined if `resolve` is not')\r\n          done(undefined, resultingTree, file)\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Run *transformers* on a syntax tree.\r\n   *\r\n   * An error is thrown if asynchronous transforms are configured.\r\n   *\r\n   * > **Note**: `runSync` freezes the processor if not already *frozen*.\r\n   *\r\n   * > **Note**: `runSync` performs the run phase, not other phases.\r\n   *\r\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\r\n   *   Tree to transform and inspect.\r\n   * @param {Compatible | undefined} [file]\r\n   *   File associated with `node` (optional); any value accepted as `x` in\r\n   *   `new VFile(x)`.\r\n   * @returns {TailTree extends undefined ? Node : TailTree}\r\n   *   Transformed tree.\r\n   */\r\n  runSync(tree, file) {\r\n    /** @type {boolean} */\r\n    let complete = false\r\n    /** @type {(TailTree extends undefined ? Node : TailTree) | undefined} */\r\n    let result\r\n\r\n    this.run(tree, file, realDone)\r\n\r\n    assertDone('runSync', 'run', complete)\r\n    assert(result, 'we either bailed on an error or have a tree')\r\n    return result\r\n\r\n    /**\r\n     * @type {RunCallback<TailTree extends undefined ? Node : TailTree>}\r\n     */\r\n    function realDone(error, tree) {\r\n      bail(error)\r\n      result = tree\r\n      complete = true\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Compile a syntax tree.\r\n   *\r\n   * > **Note**: `stringify` freezes the processor if not already *frozen*.\r\n   *\r\n   * > **Note**: `stringify` performs the stringify phase, not the run phase\r\n   * > or other phases.\r\n   *\r\n   * @param {CompileTree extends undefined ? Node : CompileTree} tree\r\n   *   Tree to compile.\r\n   * @param {Compatible | undefined} [file]\r\n   *   File associated with `node` (optional); any value accepted as `x` in\r\n   *   `new VFile(x)`.\r\n   * @returns {CompileResult extends undefined ? Value : CompileResult}\r\n   *   Textual representation of the tree (see note).\r\n   *\r\n   *   > **Note**: unified typically compiles by serializing: most compilers\r\n   *   > return `string` (or `Uint8Array`).\r\n   *   > Some compilers, such as the one configured with\r\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\r\n   *   > React tree).\r\n   *   > If you’re using a compiler that doesn’t serialize, expect different\r\n   *   > result values.\r\n   *   >\r\n   *   > To register custom results in TypeScript, add them to\r\n   *   > {@linkcode CompileResultMap}.\r\n   *\r\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\r\n   */\r\n  stringify(tree, file) {\r\n    this.freeze()\r\n    const realFile = vfile(file)\r\n    const compiler = this.compiler || this.Compiler\r\n    assertCompiler('stringify', compiler)\r\n    assertNode(tree)\r\n\r\n    return compiler(tree, realFile)\r\n  }\r\n\r\n  /**\r\n   * Configure the processor to use a plugin, a list of usable values, or a\r\n   * preset.\r\n   *\r\n   * If the processor is already using a plugin, the previous plugin\r\n   * configuration is changed based on the options that are passed in.\r\n   * In other words, the plugin is not added a second time.\r\n   *\r\n   * > **Note**: `use` cannot be called on *frozen* processors.\r\n   * > Call the processor first to create a new unfrozen processor.\r\n   *\r\n   * @example\r\n   *   There are many ways to pass plugins to `.use()`.\r\n   *   This example gives an overview:\r\n   *\r\n   *   ```js\r\n   *   import {unified} from 'unified'\r\n   *\r\n   *   unified()\r\n   *     // Plugin with options:\r\n   *     .use(pluginA, {x: true, y: true})\r\n   *     // Passing the same plugin again merges configuration (to `{x: true, y: false, z: true}`):\r\n   *     .use(pluginA, {y: false, z: true})\r\n   *     // Plugins:\r\n   *     .use([pluginB, pluginC])\r\n   *     // Two plugins, the second with options:\r\n   *     .use([pluginD, [pluginE, {}]])\r\n   *     // Preset with plugins and settings:\r\n   *     .use({plugins: [pluginF, [pluginG, {}]], settings: {position: false}})\r\n   *     // Settings only:\r\n   *     .use({settings: {position: false}})\r\n   *   ```\r\n   *\r\n   * @template {Array<unknown>} [Parameters=[]]\r\n   * @template {Node | string | undefined} [Input=undefined]\r\n   * @template [Output=Input]\r\n   *\r\n   * @overload\r\n   * @param {Preset | null | undefined} [preset]\r\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\r\n   *\r\n   * @overload\r\n   * @param {PluggableList} list\r\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\r\n   *\r\n   * @overload\r\n   * @param {Plugin<Parameters, Input, Output>} plugin\r\n   * @param {...(Parameters | [boolean])} parameters\r\n   * @returns {UsePlugin<ParseTree, HeadTree, TailTree, CompileTree, CompileResult, Input, Output>}\r\n   *\r\n   * @param {PluggableList | Plugin | Preset | null | undefined} value\r\n   *   Usable value.\r\n   * @param {...unknown} parameters\r\n   *   Parameters, when a plugin is given as a usable value.\r\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\r\n   *   Current processor.\r\n   */\r\n  use(value, ...parameters) {\r\n    const attachers = this.attachers\r\n    const namespace = this.namespace\r\n\r\n    assertUnfrozen('use', this.frozen)\r\n\r\n    if (value === null || value === undefined) {\r\n      // Empty.\r\n    } else if (typeof value === 'function') {\r\n      addPlugin(value, parameters)\r\n    } else if (typeof value === 'object') {\r\n      if (Array.isArray(value)) {\r\n        addList(value)\r\n      } else {\r\n        addPreset(value)\r\n      }\r\n    } else {\r\n      throw new TypeError('Expected usable value, not `' + value + '`')\r\n    }\r\n\r\n    return this\r\n\r\n    /**\r\n     * @param {Pluggable} value\r\n     * @returns {undefined}\r\n     */\r\n    function add(value) {\r\n      if (typeof value === 'function') {\r\n        addPlugin(value, [])\r\n      } else if (typeof value === 'object') {\r\n        if (Array.isArray(value)) {\r\n          const [plugin, ...parameters] =\r\n            /** @type {PluginTuple<Array<unknown>>} */ (value)\r\n          addPlugin(plugin, parameters)\r\n        } else {\r\n          addPreset(value)\r\n        }\r\n      } else {\r\n        throw new TypeError('Expected usable value, not `' + value + '`')\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @param {Preset} result\r\n     * @returns {undefined}\r\n     */\r\n    function addPreset(result) {\r\n      if (!('plugins' in result) && !('settings' in result)) {\r\n        throw new Error(\r\n          'Expected usable value but received an empty preset, which is probably a mistake: presets typically come with `plugins` and sometimes with `settings`, but this has neither'\r\n        )\r\n      }\r\n\r\n      addList(result.plugins)\r\n\r\n      if (result.settings) {\r\n        namespace.settings = extend(true, namespace.settings, result.settings)\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @param {PluggableList | null | undefined} plugins\r\n     * @returns {undefined}\r\n     */\r\n    function addList(plugins) {\r\n      let index = -1\r\n\r\n      if (plugins === null || plugins === undefined) {\r\n        // Empty.\r\n      } else if (Array.isArray(plugins)) {\r\n        while (++index < plugins.length) {\r\n          const thing = plugins[index]\r\n          add(thing)\r\n        }\r\n      } else {\r\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @param {Plugin} plugin\r\n     * @param {Array<unknown>} parameters\r\n     * @returns {undefined}\r\n     */\r\n    function addPlugin(plugin, parameters) {\r\n      let index = -1\r\n      let entryIndex = -1\r\n\r\n      while (++index < attachers.length) {\r\n        if (attachers[index][0] === plugin) {\r\n          entryIndex = index\r\n          break\r\n        }\r\n      }\r\n\r\n      if (entryIndex === -1) {\r\n        attachers.push([plugin, ...parameters])\r\n      }\r\n      // Only set if there was at least a `primary` value, otherwise we’d change\r\n      // `arguments.length`.\r\n      else if (parameters.length > 0) {\r\n        let [primary, ...rest] = parameters\r\n        const currentPrimary = attachers[entryIndex][1]\r\n        if (isPlainObj(currentPrimary) && isPlainObj(primary)) {\r\n          primary = extend(true, currentPrimary, primary)\r\n        }\r\n\r\n        attachers[entryIndex] = [plugin, primary, ...rest]\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// Note: this returns a *callable* instance.\r\n// That’s why it’s documented as a function.\r\n/**\r\n * Create a new processor.\r\n *\r\n * @example\r\n *   This example shows how a new processor can be created (from `remark`) and linked\r\n *   to **stdin**(4) and **stdout**(4).\r\n *\r\n *   ```js\r\n *   import process from 'node:process'\r\n *   import concatStream from 'concat-stream'\r\n *   import {remark} from 'remark'\r\n *\r\n *   process.stdin.pipe(\r\n *     concatStream(function (buf) {\r\n *       process.stdout.write(String(remark().processSync(buf)))\r\n *     })\r\n *   )\r\n *   ```\r\n *\r\n * @returns\r\n *   New *unfrozen* processor (`processor`).\r\n *\r\n *   This processor is configured to work the same as its ancestor.\r\n *   When the descendant processor is configured in the future it does not\r\n *   affect the ancestral processor.\r\n */\r\nexport const unified = new Processor().freeze()\r\n\r\n/**\r\n * Assert a parser is available.\r\n *\r\n * @param {string} name\r\n * @param {unknown} value\r\n * @returns {asserts value is Parser}\r\n */\r\nfunction assertParser(name, value) {\r\n  if (typeof value !== 'function') {\r\n    throw new TypeError('Cannot `' + name + '` without `parser`')\r\n  }\r\n}\r\n\r\n/**\r\n * Assert a compiler is available.\r\n *\r\n * @param {string} name\r\n * @param {unknown} value\r\n * @returns {asserts value is Compiler}\r\n */\r\nfunction assertCompiler(name, value) {\r\n  if (typeof value !== 'function') {\r\n    throw new TypeError('Cannot `' + name + '` without `compiler`')\r\n  }\r\n}\r\n\r\n/**\r\n * Assert the processor is not frozen.\r\n *\r\n * @param {string} name\r\n * @param {unknown} frozen\r\n * @returns {asserts frozen is false}\r\n */\r\nfunction assertUnfrozen(name, frozen) {\r\n  if (frozen) {\r\n    throw new Error(\r\n      'Cannot call `' +\r\n        name +\r\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\r\n    )\r\n  }\r\n}\r\n\r\n/**\r\n * Assert `node` is a unist node.\r\n *\r\n * @param {unknown} node\r\n * @returns {asserts node is Node}\r\n */\r\nfunction assertNode(node) {\r\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\r\n  // type-coverage:ignore-next-line\r\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\r\n    throw new TypeError('Expected node, got `' + node + '`')\r\n    // Fine.\r\n  }\r\n}\r\n\r\n/**\r\n * Assert that `complete` is `true`.\r\n *\r\n * @param {string} name\r\n * @param {string} asyncName\r\n * @param {unknown} complete\r\n * @returns {asserts complete is true}\r\n */\r\nfunction assertDone(name, asyncName, complete) {\r\n  if (!complete) {\r\n    throw new Error(\r\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\r\n    )\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Compatible | undefined} [value]\r\n * @returns {VFile}\r\n */\r\nfunction vfile(value) {\r\n  return looksLikeAVFile(value) ? value : new VFile(value)\r\n}\r\n\r\n/**\r\n * @param {Compatible | undefined} [value]\r\n * @returns {value is VFile}\r\n */\r\nfunction looksLikeAVFile(value) {\r\n  return Boolean(\r\n    value &&\r\n      typeof value === 'object' &&\r\n      'message' in value &&\r\n      'messages' in value\r\n  )\r\n}\r\n\r\n/**\r\n * @param {unknown} [value]\r\n * @returns {value is Value}\r\n */\r\nfunction looksLikeAValue(value) {\r\n  return typeof value === 'string' || isUint8Array(value)\r\n}\r\n\r\n/**\r\n * Assert `value` is an `Uint8Array`.\r\n *\r\n * @param {unknown} value\r\n *   thing.\r\n * @returns {value is Uint8Array}\r\n *   Whether `value` is an `Uint8Array`.\r\n */\r\nfunction isUint8Array(value) {\r\n  return Boolean(\r\n    value &&\r\n      typeof value === 'object' &&\r\n      'byteLength' in value &&\r\n      'byteOffset' in value\r\n  )\r\n}\r\n","/**\r\n * @import {Element, Nodes, Parents, Root} from 'hast'\r\n * @import {Root as MdastRoot} from 'mdast'\r\n * @import {ComponentType, JSX, ReactElement, ReactNode} from 'react'\r\n * @import {Options as RemarkRehypeOptions} from 'remark-rehype'\r\n * @import {BuildVisitor} from 'unist-util-visit'\r\n * @import {PluggableList, Processor} from 'unified'\r\n */\r\n\r\n/**\r\n * @callback AllowElement\r\n *   Filter elements.\r\n * @param {Readonly<Element>} element\r\n *   Element to check.\r\n * @param {number} index\r\n *   Index of `element` in `parent`.\r\n * @param {Readonly<Parents> | undefined} parent\r\n *   Parent of `element`.\r\n * @returns {boolean | null | undefined}\r\n *   Whether to allow `element` (default: `false`).\r\n */\r\n\r\n/**\r\n * @typedef ExtraProps\r\n *   Extra fields we pass.\r\n * @property {Element | undefined} [node]\r\n *   passed when `passNode` is on.\r\n */\r\n\r\n/**\r\n * @typedef {{\r\n *   [Key in keyof JSX.IntrinsicElements]?: ComponentType<JSX.IntrinsicElements[Key] & ExtraProps> | keyof JSX.IntrinsicElements\r\n * }} Components\r\n *   Map tag names to components.\r\n */\r\n\r\n/**\r\n * @typedef Deprecation\r\n *   Deprecation.\r\n * @property {string} from\r\n *   Old field.\r\n * @property {string} id\r\n *   ID in readme.\r\n * @property {keyof Options} [to]\r\n *   New field.\r\n */\r\n\r\n/**\r\n * @typedef Options\r\n *   Configuration.\r\n * @property {AllowElement | null | undefined} [allowElement]\r\n *   Filter elements (optional);\r\n *   `allowedElements` / `disallowedElements` is used first.\r\n * @property {ReadonlyArray<string> | null | undefined} [allowedElements]\r\n *   Tag names to allow (default: all tag names);\r\n *   cannot combine w/ `disallowedElements`.\r\n * @property {string | null | undefined} [children]\r\n *   Markdown.\r\n * @property {Components | null | undefined} [components]\r\n *   Map tag names to components.\r\n * @property {ReadonlyArray<string> | null | undefined} [disallowedElements]\r\n *   Tag names to disallow (default: `[]`);\r\n *   cannot combine w/ `allowedElements`.\r\n * @property {PluggableList | null | undefined} [rehypePlugins]\r\n *   List of rehype plugins to use.\r\n * @property {PluggableList | null | undefined} [remarkPlugins]\r\n *   List of remark plugins to use.\r\n * @property {Readonly<RemarkRehypeOptions> | null | undefined} [remarkRehypeOptions]\r\n *   Options to pass through to `remark-rehype`.\r\n * @property {boolean | null | undefined} [skipHtml=false]\r\n *   Ignore HTML in markdown completely (default: `false`).\r\n * @property {boolean | null | undefined} [unwrapDisallowed=false]\r\n *   Extract (unwrap) what’s in disallowed elements (default: `false`);\r\n *   normally when say `strong` is not allowed, it and it’s children are dropped,\r\n *   with `unwrapDisallowed` the element itself is replaced by its children.\r\n * @property {UrlTransform | null | undefined} [urlTransform]\r\n *   Change URLs (default: `defaultUrlTransform`)\r\n */\r\n\r\n/**\r\n * @typedef HooksOptionsOnly\r\n *   Configuration specifically for {@linkcode MarkdownHooks}.\r\n * @property {ReactNode | null | undefined} [fallback]\r\n *   Content to render while the processor processing the markdown (optional).\r\n */\r\n\r\n/**\r\n * @typedef {Options & HooksOptionsOnly} HooksOptions\r\n *   Configuration for {@linkcode MarkdownHooks};\r\n *   extends the regular {@linkcode Options} with a `fallback` prop.\r\n */\r\n\r\n/**\r\n * @callback UrlTransform\r\n *   Transform all URLs.\r\n * @param {string} url\r\n *   URL.\r\n * @param {string} key\r\n *   Property name (example: `'href'`).\r\n * @param {Readonly<Element>} node\r\n *   Node.\r\n * @returns {string | null | undefined}\r\n *   Transformed URL (optional).\r\n */\r\n\r\nimport {unreachable} from 'devlop'\r\nimport {toJsxRuntime} from 'hast-util-to-jsx-runtime'\r\nimport {urlAttributes} from 'html-url-attributes'\r\nimport {Fragment, jsx, jsxs} from 'react/jsx-runtime'\r\nimport {useEffect, useState} from 'react'\r\nimport remarkParse from 'remark-parse'\r\nimport remarkRehype from 'remark-rehype'\r\nimport {unified} from 'unified'\r\nimport {visit} from 'unist-util-visit'\r\nimport {VFile} from 'vfile'\r\n\r\nconst changelog =\r\n  'https://github.com/remarkjs/react-markdown/blob/main/changelog.md'\r\n\r\n/** @type {PluggableList} */\r\nconst emptyPlugins = []\r\n/** @type {Readonly<RemarkRehypeOptions>} */\r\nconst emptyRemarkRehypeOptions = {allowDangerousHtml: true}\r\nconst safeProtocol = /^(https?|ircs?|mailto|xmpp)$/i\r\n\r\n// Mutable because we `delete` any time it’s used and a message is sent.\r\n/** @type {ReadonlyArray<Readonly<Deprecation>>} */\r\nconst deprecations = [\r\n  {from: 'astPlugins', id: 'remove-buggy-html-in-markdown-parser'},\r\n  {from: 'allowDangerousHtml', id: 'remove-buggy-html-in-markdown-parser'},\r\n  {\r\n    from: 'allowNode',\r\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\r\n    to: 'allowElement'\r\n  },\r\n  {\r\n    from: 'allowedTypes',\r\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\r\n    to: 'allowedElements'\r\n  },\r\n  {from: 'className', id: 'remove-classname'},\r\n  {\r\n    from: 'disallowedTypes',\r\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\r\n    to: 'disallowedElements'\r\n  },\r\n  {from: 'escapeHtml', id: 'remove-buggy-html-in-markdown-parser'},\r\n  {from: 'includeElementIndex', id: '#remove-includeelementindex'},\r\n  {\r\n    from: 'includeNodeIndex',\r\n    id: 'change-includenodeindex-to-includeelementindex'\r\n  },\r\n  {from: 'linkTarget', id: 'remove-linktarget'},\r\n  {from: 'plugins', id: 'change-plugins-to-remarkplugins', to: 'remarkPlugins'},\r\n  {from: 'rawSourcePos', id: '#remove-rawsourcepos'},\r\n  {from: 'renderers', id: 'change-renderers-to-components', to: 'components'},\r\n  {from: 'source', id: 'change-source-to-children', to: 'children'},\r\n  {from: 'sourcePos', id: '#remove-sourcepos'},\r\n  {from: 'transformImageUri', id: '#add-urltransform', to: 'urlTransform'},\r\n  {from: 'transformLinkUri', id: '#add-urltransform', to: 'urlTransform'}\r\n]\r\n\r\n/**\r\n * Component to render markdown.\r\n *\r\n * This is a synchronous component.\r\n * When using async plugins,\r\n * see {@linkcode MarkdownAsync} or {@linkcode MarkdownHooks}.\r\n *\r\n * @param {Readonly<Options>} options\r\n *   Props.\r\n * @returns {ReactElement}\r\n *   React element.\r\n */\r\nexport function Markdown(options) {\r\n  const processor = createProcessor(options)\r\n  const file = createFile(options)\r\n  return post(processor.runSync(processor.parse(file), file), options)\r\n}\r\n\r\n/**\r\n * Component to render markdown with support for async plugins\r\n * through async/await.\r\n *\r\n * Components returning promises are supported on the server.\r\n * For async support on the client,\r\n * see {@linkcode MarkdownHooks}.\r\n *\r\n * @param {Readonly<Options>} options\r\n *   Props.\r\n * @returns {Promise<ReactElement>}\r\n *   Promise to a React element.\r\n */\r\nexport async function MarkdownAsync(options) {\r\n  const processor = createProcessor(options)\r\n  const file = createFile(options)\r\n  const tree = await processor.run(processor.parse(file), file)\r\n  return post(tree, options)\r\n}\r\n\r\n/**\r\n * Component to render markdown with support for async plugins through hooks.\r\n *\r\n * This uses `useEffect` and `useState` hooks.\r\n * Hooks run on the client and do not immediately render something.\r\n * For async support on the server,\r\n * see {@linkcode MarkdownAsync}.\r\n *\r\n * @param {Readonly<HooksOptions>} options\r\n *   Props.\r\n * @returns {ReactNode}\r\n *   React node.\r\n */\r\nexport function MarkdownHooks(options) {\r\n  const processor = createProcessor(options)\r\n  const [error, setError] = useState(\r\n    /** @type {Error | undefined} */ (undefined)\r\n  )\r\n  const [tree, setTree] = useState(/** @type {Root | undefined} */ (undefined))\r\n\r\n  useEffect(\r\n    function () {\r\n      let cancelled = false\r\n      const file = createFile(options)\r\n\r\n      processor.run(processor.parse(file), file, function (error, tree) {\r\n        if (!cancelled) {\r\n          setError(error)\r\n          setTree(tree)\r\n        }\r\n      })\r\n\r\n      /**\r\n       * @returns {undefined}\r\n       *   Nothing.\r\n       */\r\n      return function () {\r\n        cancelled = true\r\n      }\r\n    },\r\n    [\r\n      options.children,\r\n      options.rehypePlugins,\r\n      options.remarkPlugins,\r\n      options.remarkRehypeOptions\r\n    ]\r\n  )\r\n\r\n  if (error) throw error\r\n\r\n  return tree ? post(tree, options) : options.fallback\r\n}\r\n\r\n/**\r\n * Set up the `unified` processor.\r\n *\r\n * @param {Readonly<Options>} options\r\n *   Props.\r\n * @returns {Processor<MdastRoot, MdastRoot, Root, undefined, undefined>}\r\n *   Result.\r\n */\r\nfunction createProcessor(options) {\r\n  const rehypePlugins = options.rehypePlugins || emptyPlugins\r\n  const remarkPlugins = options.remarkPlugins || emptyPlugins\r\n  const remarkRehypeOptions = options.remarkRehypeOptions\r\n    ? {...options.remarkRehypeOptions, ...emptyRemarkRehypeOptions}\r\n    : emptyRemarkRehypeOptions\r\n\r\n  const processor = unified()\r\n    .use(remarkParse)\r\n    .use(remarkPlugins)\r\n    .use(remarkRehype, remarkRehypeOptions)\r\n    .use(rehypePlugins)\r\n\r\n  return processor\r\n}\r\n\r\n/**\r\n * Set up the virtual file.\r\n *\r\n * @param {Readonly<Options>} options\r\n *   Props.\r\n * @returns {VFile}\r\n *   Result.\r\n */\r\nfunction createFile(options) {\r\n  const children = options.children || ''\r\n  const file = new VFile()\r\n\r\n  if (typeof children === 'string') {\r\n    file.value = children\r\n  } else {\r\n    unreachable(\r\n      'Unexpected value `' +\r\n        children +\r\n        '` for `children` prop, expected `string`'\r\n    )\r\n  }\r\n\r\n  return file\r\n}\r\n\r\n/**\r\n * Process the result from unified some more.\r\n *\r\n * @param {Nodes} tree\r\n *   Tree.\r\n * @param {Readonly<Options>} options\r\n *   Props.\r\n * @returns {ReactElement}\r\n *   React element.\r\n */\r\nfunction post(tree, options) {\r\n  const allowedElements = options.allowedElements\r\n  const allowElement = options.allowElement\r\n  const components = options.components\r\n  const disallowedElements = options.disallowedElements\r\n  const skipHtml = options.skipHtml\r\n  const unwrapDisallowed = options.unwrapDisallowed\r\n  const urlTransform = options.urlTransform || defaultUrlTransform\r\n\r\n  for (const deprecation of deprecations) {\r\n    if (Object.hasOwn(options, deprecation.from)) {\r\n      unreachable(\r\n        'Unexpected `' +\r\n          deprecation.from +\r\n          '` prop, ' +\r\n          (deprecation.to\r\n            ? 'use `' + deprecation.to + '` instead'\r\n            : 'remove it') +\r\n          ' (see <' +\r\n          changelog +\r\n          '#' +\r\n          deprecation.id +\r\n          '> for more info)'\r\n      )\r\n    }\r\n  }\r\n\r\n  if (allowedElements && disallowedElements) {\r\n    unreachable(\r\n      'Unexpected combined `allowedElements` and `disallowedElements`, expected one or the other'\r\n    )\r\n  }\r\n\r\n  visit(tree, transform)\r\n\r\n  return toJsxRuntime(tree, {\r\n    Fragment,\r\n    components,\r\n    ignoreInvalidStyle: true,\r\n    jsx,\r\n    jsxs,\r\n    passKeys: true,\r\n    passNode: true\r\n  })\r\n\r\n  /** @type {BuildVisitor<Root>} */\r\n  function transform(node, index, parent) {\r\n    if (node.type === 'raw' && parent && typeof index === 'number') {\r\n      if (skipHtml) {\r\n        parent.children.splice(index, 1)\r\n      } else {\r\n        parent.children[index] = {type: 'text', value: node.value}\r\n      }\r\n\r\n      return index\r\n    }\r\n\r\n    if (node.type === 'element') {\r\n      /** @type {string} */\r\n      let key\r\n\r\n      for (key in urlAttributes) {\r\n        if (\r\n          Object.hasOwn(urlAttributes, key) &&\r\n          Object.hasOwn(node.properties, key)\r\n        ) {\r\n          const value = node.properties[key]\r\n          const test = urlAttributes[key]\r\n          if (test === null || test.includes(node.tagName)) {\r\n            node.properties[key] = urlTransform(String(value || ''), key, node)\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (node.type === 'element') {\r\n      let remove = allowedElements\r\n        ? !allowedElements.includes(node.tagName)\r\n        : disallowedElements\r\n          ? disallowedElements.includes(node.tagName)\r\n          : false\r\n\r\n      if (!remove && allowElement && typeof index === 'number') {\r\n        remove = !allowElement(node, index, parent)\r\n      }\r\n\r\n      if (remove && parent && typeof index === 'number') {\r\n        if (unwrapDisallowed && node.children) {\r\n          parent.children.splice(index, 1, ...node.children)\r\n        } else {\r\n          parent.children.splice(index, 1)\r\n        }\r\n\r\n        return index\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Make a URL safe.\r\n *\r\n * @satisfies {UrlTransform}\r\n * @param {string} value\r\n *   URL.\r\n * @returns {string}\r\n *   Safe URL.\r\n */\r\nexport function defaultUrlTransform(value) {\r\n  // Same as:\r\n  // <https://github.com/micromark/micromark/blob/929275e/packages/micromark-util-sanitize-uri/dev/index.js#L34>\r\n  // But without the `encode` part.\r\n  const colon = value.indexOf(':')\r\n  const questionMark = value.indexOf('?')\r\n  const numberSign = value.indexOf('#')\r\n  const slash = value.indexOf('/')\r\n\r\n  if (\r\n    // If there is no protocol, it’s relative.\r\n    colon === -1 ||\r\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\r\n    (slash !== -1 && colon > slash) ||\r\n    (questionMark !== -1 && colon > questionMark) ||\r\n    (numberSign !== -1 && colon > numberSign) ||\r\n    // It is a protocol, it should be allowed.\r\n    safeProtocol.test(value.slice(0, colon))\r\n  ) {\r\n    return value\r\n  }\r\n\r\n  return ''\r\n}\r\n","/**\r\n * Count how often a character (or substring) is used in a string.\r\n *\r\n * @param {string} value\r\n *   Value to search in.\r\n * @param {string} character\r\n *   Character (or substring) to look for.\r\n * @return {number}\r\n *   Number of times `character` occurred in `value`.\r\n */\r\nexport function ccount(value, character) {\r\n  const source = String(value)\r\n\r\n  if (typeof character !== 'string') {\r\n    throw new TypeError('Expected character')\r\n  }\r\n\r\n  let count = 0\r\n  let index = source.indexOf(character)\r\n\r\n  while (index !== -1) {\r\n    count++\r\n    index = source.indexOf(character, index + character.length)\r\n  }\r\n\r\n  return count\r\n}\r\n","export default function escapeStringRegexp(string) {\r\n\tif (typeof string !== 'string') {\r\n\t\tthrow new TypeError('Expected a string');\r\n\t}\r\n\r\n\t// Escape characters with special meaning either inside or outside character sets.\r\n\t// Use a simple backslash escape when it’s always valid, and a `\\xnn` escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.\r\n\treturn string\r\n\t\t.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&')\r\n\t\t.replace(/-/g, '\\\\x2d');\r\n}\r\n","/**\r\n * @import {Nodes, Parents, PhrasingContent, Root, Text} from 'mdast'\r\n * @import {BuildVisitor, Test, VisitorResult} from 'unist-util-visit-parents'\r\n */\r\n\r\n/**\r\n * @typedef RegExpMatchObject\r\n *   Info on the match.\r\n * @property {number} index\r\n *   The index of the search at which the result was found.\r\n * @property {string} input\r\n *   A copy of the search string in the text node.\r\n * @property {[...Array<Parents>, Text]} stack\r\n *   All ancestors of the text node, where the last node is the text itself.\r\n *\r\n * @typedef {RegExp | string} Find\r\n *   Pattern to find.\r\n *\r\n *   Strings are escaped and then turned into global expressions.\r\n *\r\n * @typedef {Array<FindAndReplaceTuple>} FindAndReplaceList\r\n *   Several find and replaces, in array form.\r\n *\r\n * @typedef {[Find, Replace?]} FindAndReplaceTuple\r\n *   Find and replace in tuple form.\r\n *\r\n * @typedef {ReplaceFunction | string | null | undefined} Replace\r\n *   Thing to replace with.\r\n *\r\n * @callback ReplaceFunction\r\n *   Callback called when a search matches.\r\n * @param {...any} parameters\r\n *   The parameters are the result of corresponding search expression:\r\n *\r\n *   * `value` (`string`) — whole match\r\n *   * `...capture` (`Array<string>`) — matches from regex capture groups\r\n *   * `match` (`RegExpMatchObject`) — info on the match\r\n * @returns {Array<PhrasingContent> | PhrasingContent | string | false | null | undefined}\r\n *   Thing to replace with.\r\n *\r\n *   * when `null`, `undefined`, `''`, remove the match\r\n *   * …or when `false`, do not replace at all\r\n *   * …or when `string`, replace with a text node of that value\r\n *   * …or when `Node` or `Array<Node>`, replace with those nodes\r\n *\r\n * @typedef {[RegExp, ReplaceFunction]} Pair\r\n *   Normalized find and replace.\r\n *\r\n * @typedef {Array<Pair>} Pairs\r\n *   All find and replaced.\r\n *\r\n * @typedef Options\r\n *   Configuration.\r\n * @property {Test | null | undefined} [ignore]\r\n *   Test for which nodes to ignore (optional).\r\n */\r\n\r\nimport escape from 'escape-string-regexp'\r\nimport {visitParents} from 'unist-util-visit-parents'\r\nimport {convert} from 'unist-util-is'\r\n\r\n/**\r\n * Find patterns in a tree and replace them.\r\n *\r\n * The algorithm searches the tree in *preorder* for complete values in `Text`\r\n * nodes.\r\n * Partial matches are not supported.\r\n *\r\n * @param {Nodes} tree\r\n *   Tree to change.\r\n * @param {FindAndReplaceList | FindAndReplaceTuple} list\r\n *   Patterns to find.\r\n * @param {Options | null | undefined} [options]\r\n *   Configuration (when `find` is not `Find`).\r\n * @returns {undefined}\r\n *   Nothing.\r\n */\r\nexport function findAndReplace(tree, list, options) {\r\n  const settings = options || {}\r\n  const ignored = convert(settings.ignore || [])\r\n  const pairs = toPairs(list)\r\n  let pairIndex = -1\r\n\r\n  while (++pairIndex < pairs.length) {\r\n    visitParents(tree, 'text', visitor)\r\n  }\r\n\r\n  /** @type {BuildVisitor<Root, 'text'>} */\r\n  function visitor(node, parents) {\r\n    let index = -1\r\n    /** @type {Parents | undefined} */\r\n    let grandparent\r\n\r\n    while (++index < parents.length) {\r\n      const parent = parents[index]\r\n      /** @type {Array<Nodes> | undefined} */\r\n      const siblings = grandparent ? grandparent.children : undefined\r\n\r\n      if (\r\n        ignored(\r\n          parent,\r\n          siblings ? siblings.indexOf(parent) : undefined,\r\n          grandparent\r\n        )\r\n      ) {\r\n        return\r\n      }\r\n\r\n      grandparent = parent\r\n    }\r\n\r\n    if (grandparent) {\r\n      return handler(node, parents)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle a text node which is not in an ignored parent.\r\n   *\r\n   * @param {Text} node\r\n   *   Text node.\r\n   * @param {Array<Parents>} parents\r\n   *   Parents.\r\n   * @returns {VisitorResult}\r\n   *   Result.\r\n   */\r\n  function handler(node, parents) {\r\n    const parent = parents[parents.length - 1]\r\n    const find = pairs[pairIndex][0]\r\n    const replace = pairs[pairIndex][1]\r\n    let start = 0\r\n    /** @type {Array<Nodes>} */\r\n    const siblings = parent.children\r\n    const index = siblings.indexOf(node)\r\n    let change = false\r\n    /** @type {Array<PhrasingContent>} */\r\n    let nodes = []\r\n\r\n    find.lastIndex = 0\r\n\r\n    let match = find.exec(node.value)\r\n\r\n    while (match) {\r\n      const position = match.index\r\n      /** @type {RegExpMatchObject} */\r\n      const matchObject = {\r\n        index: match.index,\r\n        input: match.input,\r\n        stack: [...parents, node]\r\n      }\r\n      let value = replace(...match, matchObject)\r\n\r\n      if (typeof value === 'string') {\r\n        value = value.length > 0 ? {type: 'text', value} : undefined\r\n      }\r\n\r\n      // It wasn’t a match after all.\r\n      if (value === false) {\r\n        // False acts as if there was no match.\r\n        // So we need to reset `lastIndex`, which currently being at the end of\r\n        // the current match, to the beginning.\r\n        find.lastIndex = position + 1\r\n      } else {\r\n        if (start !== position) {\r\n          nodes.push({\r\n            type: 'text',\r\n            value: node.value.slice(start, position)\r\n          })\r\n        }\r\n\r\n        if (Array.isArray(value)) {\r\n          nodes.push(...value)\r\n        } else if (value) {\r\n          nodes.push(value)\r\n        }\r\n\r\n        start = position + match[0].length\r\n        change = true\r\n      }\r\n\r\n      if (!find.global) {\r\n        break\r\n      }\r\n\r\n      match = find.exec(node.value)\r\n    }\r\n\r\n    if (change) {\r\n      if (start < node.value.length) {\r\n        nodes.push({type: 'text', value: node.value.slice(start)})\r\n      }\r\n\r\n      parent.children.splice(index, 1, ...nodes)\r\n    } else {\r\n      nodes = [node]\r\n    }\r\n\r\n    return index + nodes.length\r\n  }\r\n}\r\n\r\n/**\r\n * Turn a tuple or a list of tuples into pairs.\r\n *\r\n * @param {FindAndReplaceList | FindAndReplaceTuple} tupleOrList\r\n *   Schema.\r\n * @returns {Pairs}\r\n *   Clean pairs.\r\n */\r\nfunction toPairs(tupleOrList) {\r\n  /** @type {Pairs} */\r\n  const result = []\r\n\r\n  if (!Array.isArray(tupleOrList)) {\r\n    throw new TypeError('Expected find and replace tuple or list of tuples')\r\n  }\r\n\r\n  /** @type {FindAndReplaceList} */\r\n  // @ts-expect-error: correct.\r\n  const list =\r\n    !tupleOrList[0] || Array.isArray(tupleOrList[0])\r\n      ? tupleOrList\r\n      : [tupleOrList]\r\n\r\n  let index = -1\r\n\r\n  while (++index < list.length) {\r\n    const tuple = list[index]\r\n    result.push([toExpression(tuple[0]), toFunction(tuple[1])])\r\n  }\r\n\r\n  return result\r\n}\r\n\r\n/**\r\n * Turn a find into an expression.\r\n *\r\n * @param {Find} find\r\n *   Find.\r\n * @returns {RegExp}\r\n *   Expression.\r\n */\r\nfunction toExpression(find) {\r\n  return typeof find === 'string' ? new RegExp(escape(find), 'g') : find\r\n}\r\n\r\n/**\r\n * Turn a replace into a function.\r\n *\r\n * @param {Replace} replace\r\n *   Replace.\r\n * @returns {ReplaceFunction}\r\n *   Function.\r\n */\r\nfunction toFunction(replace) {\r\n  return typeof replace === 'function'\r\n    ? replace\r\n    : function () {\r\n        return replace\r\n      }\r\n}\r\n","/**\r\n * @import {RegExpMatchObject, ReplaceFunction} from 'mdast-util-find-and-replace'\r\n * @import {CompileContext, Extension as FromMarkdownExtension, Handle as FromMarkdownHandle, Transform as FromMarkdownTransform} from 'mdast-util-from-markdown'\r\n * @import {ConstructName, Options as ToMarkdownExtension} from 'mdast-util-to-markdown'\r\n * @import {Link, PhrasingContent} from 'mdast'\r\n */\r\n\r\nimport {ccount} from 'ccount'\r\nimport {ok as assert} from 'devlop'\r\nimport {unicodePunctuation, unicodeWhitespace} from 'micromark-util-character'\r\nimport {findAndReplace} from 'mdast-util-find-and-replace'\r\n\r\n/** @type {ConstructName} */\r\nconst inConstruct = 'phrasing'\r\n/** @type {Array<ConstructName>} */\r\nconst notInConstruct = ['autolink', 'link', 'image', 'label']\r\n\r\n/**\r\n * Create an extension for `mdast-util-from-markdown` to enable GFM autolink\r\n * literals in markdown.\r\n *\r\n * @returns {FromMarkdownExtension}\r\n *   Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\r\n */\r\nexport function gfmAutolinkLiteralFromMarkdown() {\r\n  return {\r\n    transforms: [transformGfmAutolinkLiterals],\r\n    enter: {\r\n      literalAutolink: enterLiteralAutolink,\r\n      literalAutolinkEmail: enterLiteralAutolinkValue,\r\n      literalAutolinkHttp: enterLiteralAutolinkValue,\r\n      literalAutolinkWww: enterLiteralAutolinkValue\r\n    },\r\n    exit: {\r\n      literalAutolink: exitLiteralAutolink,\r\n      literalAutolinkEmail: exitLiteralAutolinkEmail,\r\n      literalAutolinkHttp: exitLiteralAutolinkHttp,\r\n      literalAutolinkWww: exitLiteralAutolinkWww\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Create an extension for `mdast-util-to-markdown` to enable GFM autolink\r\n * literals in markdown.\r\n *\r\n * @returns {ToMarkdownExtension}\r\n *   Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\r\n */\r\nexport function gfmAutolinkLiteralToMarkdown() {\r\n  return {\r\n    unsafe: [\r\n      {\r\n        character: '@',\r\n        before: '[+\\\\-.\\\\w]',\r\n        after: '[\\\\-.\\\\w]',\r\n        inConstruct,\r\n        notInConstruct\r\n      },\r\n      {\r\n        character: '.',\r\n        before: '[Ww]',\r\n        after: '[\\\\-.\\\\w]',\r\n        inConstruct,\r\n        notInConstruct\r\n      },\r\n      {\r\n        character: ':',\r\n        before: '[ps]',\r\n        after: '\\\\/',\r\n        inConstruct,\r\n        notInConstruct\r\n      }\r\n    ]\r\n  }\r\n}\r\n\r\n/**\r\n * @this {CompileContext}\r\n * @type {FromMarkdownHandle}\r\n */\r\nfunction enterLiteralAutolink(token) {\r\n  this.enter({type: 'link', title: null, url: '', children: []}, token)\r\n}\r\n\r\n/**\r\n * @this {CompileContext}\r\n * @type {FromMarkdownHandle}\r\n */\r\nfunction enterLiteralAutolinkValue(token) {\r\n  this.config.enter.autolinkProtocol.call(this, token)\r\n}\r\n\r\n/**\r\n * @this {CompileContext}\r\n * @type {FromMarkdownHandle}\r\n */\r\nfunction exitLiteralAutolinkHttp(token) {\r\n  this.config.exit.autolinkProtocol.call(this, token)\r\n}\r\n\r\n/**\r\n * @this {CompileContext}\r\n * @type {FromMarkdownHandle}\r\n */\r\nfunction exitLiteralAutolinkWww(token) {\r\n  this.config.exit.data.call(this, token)\r\n  const node = this.stack[this.stack.length - 1]\r\n  assert(node.type === 'link')\r\n  node.url = 'http://' + this.sliceSerialize(token)\r\n}\r\n\r\n/**\r\n * @this {CompileContext}\r\n * @type {FromMarkdownHandle}\r\n */\r\nfunction exitLiteralAutolinkEmail(token) {\r\n  this.config.exit.autolinkEmail.call(this, token)\r\n}\r\n\r\n/**\r\n * @this {CompileContext}\r\n * @type {FromMarkdownHandle}\r\n */\r\nfunction exitLiteralAutolink(token) {\r\n  this.exit(token)\r\n}\r\n\r\n/** @type {FromMarkdownTransform} */\r\nfunction transformGfmAutolinkLiterals(tree) {\r\n  findAndReplace(\r\n    tree,\r\n    [\r\n      [/(https?:\\/\\/|www(?=\\.))([-.\\w]+)([^ \\t\\r\\n]*)/gi, findUrl],\r\n      [/(?<=^|\\s|\\p{P}|\\p{S})([-.\\w+]+)@([-\\w]+(?:\\.[-\\w]+)+)/gu, findEmail]\r\n    ],\r\n    {ignore: ['link', 'linkReference']}\r\n  )\r\n}\r\n\r\n/**\r\n * @type {ReplaceFunction}\r\n * @param {string} _\r\n * @param {string} protocol\r\n * @param {string} domain\r\n * @param {string} path\r\n * @param {RegExpMatchObject} match\r\n * @returns {Array<PhrasingContent> | Link | false}\r\n */\r\n// eslint-disable-next-line max-params\r\nfunction findUrl(_, protocol, domain, path, match) {\r\n  let prefix = ''\r\n\r\n  // Not an expected previous character.\r\n  if (!previous(match)) {\r\n    return false\r\n  }\r\n\r\n  // Treat `www` as part of the domain.\r\n  if (/^w/i.test(protocol)) {\r\n    domain = protocol + domain\r\n    protocol = ''\r\n    prefix = 'http://'\r\n  }\r\n\r\n  if (!isCorrectDomain(domain)) {\r\n    return false\r\n  }\r\n\r\n  const parts = splitUrl(domain + path)\r\n\r\n  if (!parts[0]) return false\r\n\r\n  /** @type {Link} */\r\n  const result = {\r\n    type: 'link',\r\n    title: null,\r\n    url: prefix + protocol + parts[0],\r\n    children: [{type: 'text', value: protocol + parts[0]}]\r\n  }\r\n\r\n  if (parts[1]) {\r\n    return [result, {type: 'text', value: parts[1]}]\r\n  }\r\n\r\n  return result\r\n}\r\n\r\n/**\r\n * @type {ReplaceFunction}\r\n * @param {string} _\r\n * @param {string} atext\r\n * @param {string} label\r\n * @param {RegExpMatchObject} match\r\n * @returns {Link | false}\r\n */\r\nfunction findEmail(_, atext, label, match) {\r\n  if (\r\n    // Not an expected previous character.\r\n    !previous(match, true) ||\r\n    // Label ends in not allowed character.\r\n    /[-\\d_]$/.test(label)\r\n  ) {\r\n    return false\r\n  }\r\n\r\n  return {\r\n    type: 'link',\r\n    title: null,\r\n    url: 'mailto:' + atext + '@' + label,\r\n    children: [{type: 'text', value: atext + '@' + label}]\r\n  }\r\n}\r\n\r\n/**\r\n * @param {string} domain\r\n * @returns {boolean}\r\n */\r\nfunction isCorrectDomain(domain) {\r\n  const parts = domain.split('.')\r\n\r\n  if (\r\n    parts.length < 2 ||\r\n    (parts[parts.length - 1] &&\r\n      (/_/.test(parts[parts.length - 1]) ||\r\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 1]))) ||\r\n    (parts[parts.length - 2] &&\r\n      (/_/.test(parts[parts.length - 2]) ||\r\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 2])))\r\n  ) {\r\n    return false\r\n  }\r\n\r\n  return true\r\n}\r\n\r\n/**\r\n * @param {string} url\r\n * @returns {[string, string | undefined]}\r\n */\r\nfunction splitUrl(url) {\r\n  const trailExec = /[!\"&'),.:;<>?\\]}]+$/.exec(url)\r\n\r\n  if (!trailExec) {\r\n    return [url, undefined]\r\n  }\r\n\r\n  url = url.slice(0, trailExec.index)\r\n\r\n  let trail = trailExec[0]\r\n  let closingParenIndex = trail.indexOf(')')\r\n  const openingParens = ccount(url, '(')\r\n  let closingParens = ccount(url, ')')\r\n\r\n  while (closingParenIndex !== -1 && openingParens > closingParens) {\r\n    url += trail.slice(0, closingParenIndex + 1)\r\n    trail = trail.slice(closingParenIndex + 1)\r\n    closingParenIndex = trail.indexOf(')')\r\n    closingParens++\r\n  }\r\n\r\n  return [url, trail]\r\n}\r\n\r\n/**\r\n * @param {RegExpMatchObject} match\r\n * @param {boolean | null | undefined} [email=false]\r\n * @returns {boolean}\r\n */\r\nfunction previous(match, email) {\r\n  const code = match.input.charCodeAt(match.index - 1)\r\n\r\n  return (\r\n    (match.index === 0 ||\r\n      unicodeWhitespace(code) ||\r\n      unicodePunctuation(code)) &&\r\n    // If it’s an email, the previous character should not be a slash.\r\n    (!email || code !== 47)\r\n  )\r\n}\r\n","/**\r\n * @import {\r\n *   CompileContext,\r\n *   Extension as FromMarkdownExtension,\r\n *   Handle as FromMarkdownHandle\r\n * } from 'mdast-util-from-markdown'\r\n * @import {ToMarkdownOptions} from 'mdast-util-gfm-footnote'\r\n * @import {\r\n *   Handle as ToMarkdownHandle,\r\n *   Map,\r\n *   Options as ToMarkdownExtension\r\n * } from 'mdast-util-to-markdown'\r\n * @import {FootnoteDefinition, FootnoteReference} from 'mdast'\r\n */\r\n\r\nimport {ok as assert} from 'devlop'\r\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\r\n\r\nfootnoteReference.peek = footnoteReferencePeek\r\n\r\n/**\r\n * @this {CompileContext}\r\n * @type {FromMarkdownHandle}\r\n */\r\nfunction enterFootnoteCallString() {\r\n  this.buffer()\r\n}\r\n\r\n/**\r\n * @this {CompileContext}\r\n * @type {FromMarkdownHandle}\r\n */\r\nfunction enterFootnoteCall(token) {\r\n  this.enter({type: 'footnoteReference', identifier: '', label: ''}, token)\r\n}\r\n\r\n/**\r\n * @this {CompileContext}\r\n * @type {FromMarkdownHandle}\r\n */\r\nfunction enterFootnoteDefinitionLabelString() {\r\n  this.buffer()\r\n}\r\n\r\n/**\r\n * @this {CompileContext}\r\n * @type {FromMarkdownHandle}\r\n */\r\nfunction enterFootnoteDefinition(token) {\r\n  this.enter(\r\n    {type: 'footnoteDefinition', identifier: '', label: '', children: []},\r\n    token\r\n  )\r\n}\r\n\r\n/**\r\n * @this {CompileContext}\r\n * @type {FromMarkdownHandle}\r\n */\r\nfunction exitFootnoteCallString(token) {\r\n  const label = this.resume()\r\n  const node = this.stack[this.stack.length - 1]\r\n  assert(node.type === 'footnoteReference')\r\n  node.identifier = normalizeIdentifier(\r\n    this.sliceSerialize(token)\r\n  ).toLowerCase()\r\n  node.label = label\r\n}\r\n\r\n/**\r\n * @this {CompileContext}\r\n * @type {FromMarkdownHandle}\r\n */\r\nfunction exitFootnoteCall(token) {\r\n  this.exit(token)\r\n}\r\n\r\n/**\r\n * @this {CompileContext}\r\n * @type {FromMarkdownHandle}\r\n */\r\nfunction exitFootnoteDefinitionLabelString(token) {\r\n  const label = this.resume()\r\n  const node = this.stack[this.stack.length - 1]\r\n  assert(node.type === 'footnoteDefinition')\r\n  node.identifier = normalizeIdentifier(\r\n    this.sliceSerialize(token)\r\n  ).toLowerCase()\r\n  node.label = label\r\n}\r\n\r\n/**\r\n * @this {CompileContext}\r\n * @type {FromMarkdownHandle}\r\n */\r\nfunction exitFootnoteDefinition(token) {\r\n  this.exit(token)\r\n}\r\n\r\n/** @type {ToMarkdownHandle} */\r\nfunction footnoteReferencePeek() {\r\n  return '['\r\n}\r\n\r\n/**\r\n * @type {ToMarkdownHandle}\r\n * @param {FootnoteReference} node\r\n */\r\nfunction footnoteReference(node, _, state, info) {\r\n  const tracker = state.createTracker(info)\r\n  let value = tracker.move('[^')\r\n  const exit = state.enter('footnoteReference')\r\n  const subexit = state.enter('reference')\r\n  value += tracker.move(\r\n    state.safe(state.associationId(node), {after: ']', before: value})\r\n  )\r\n  subexit()\r\n  exit()\r\n  value += tracker.move(']')\r\n  return value\r\n}\r\n\r\n/**\r\n * Create an extension for `mdast-util-from-markdown` to enable GFM footnotes\r\n * in markdown.\r\n *\r\n * @returns {FromMarkdownExtension}\r\n *   Extension for `mdast-util-from-markdown`.\r\n */\r\nexport function gfmFootnoteFromMarkdown() {\r\n  return {\r\n    enter: {\r\n      gfmFootnoteCallString: enterFootnoteCallString,\r\n      gfmFootnoteCall: enterFootnoteCall,\r\n      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,\r\n      gfmFootnoteDefinition: enterFootnoteDefinition\r\n    },\r\n    exit: {\r\n      gfmFootnoteCallString: exitFootnoteCallString,\r\n      gfmFootnoteCall: exitFootnoteCall,\r\n      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,\r\n      gfmFootnoteDefinition: exitFootnoteDefinition\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Create an extension for `mdast-util-to-markdown` to enable GFM footnotes\r\n * in markdown.\r\n *\r\n * @param {ToMarkdownOptions | null | undefined} [options]\r\n *   Configuration (optional).\r\n * @returns {ToMarkdownExtension}\r\n *   Extension for `mdast-util-to-markdown`.\r\n */\r\nexport function gfmFootnoteToMarkdown(options) {\r\n  // To do: next major: change default.\r\n  let firstLineBlank = false\r\n\r\n  if (options && options.firstLineBlank) {\r\n    firstLineBlank = true\r\n  }\r\n\r\n  return {\r\n    handlers: {footnoteDefinition, footnoteReference},\r\n    // This is on by default already.\r\n    unsafe: [{character: '[', inConstruct: ['label', 'phrasing', 'reference']}]\r\n  }\r\n\r\n  /**\r\n   * @type {ToMarkdownHandle}\r\n   * @param {FootnoteDefinition} node\r\n   */\r\n  function footnoteDefinition(node, _, state, info) {\r\n    const tracker = state.createTracker(info)\r\n    let value = tracker.move('[^')\r\n    const exit = state.enter('footnoteDefinition')\r\n    const subexit = state.enter('label')\r\n    value += tracker.move(\r\n      state.safe(state.associationId(node), {before: value, after: ']'})\r\n    )\r\n    subexit()\r\n\r\n    value += tracker.move(']:')\r\n\r\n    if (node.children && node.children.length > 0) {\r\n      tracker.shift(4)\r\n\r\n      value += tracker.move(\r\n        (firstLineBlank ? '\\n' : ' ') +\r\n          state.indentLines(\r\n            state.containerFlow(node, tracker.current()),\r\n            firstLineBlank ? mapAll : mapExceptFirst\r\n          )\r\n      )\r\n    }\r\n\r\n    exit()\r\n\r\n    return value\r\n  }\r\n}\r\n\r\n/** @type {Map} */\r\nfunction mapExceptFirst(line, index, blank) {\r\n  return index === 0 ? line : mapAll(line, index, blank)\r\n}\r\n\r\n/** @type {Map} */\r\nfunction mapAll(line, index, blank) {\r\n  return (blank ? '' : '    ') + line\r\n}\r\n","/**\r\n * @typedef {import('mdast').Delete} Delete\r\n *\r\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\r\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\r\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\r\n *\r\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\r\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\r\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\r\n */\r\n\r\n/**\r\n * List of constructs that occur in phrasing (paragraphs, headings), but cannot\r\n * contain strikethrough.\r\n * So they sort of cancel each other out.\r\n * Note: could use a better name.\r\n *\r\n * Note: keep in sync with: <https://github.com/syntax-tree/mdast-util-to-markdown/blob/8ce8dbf/lib/unsafe.js#L14>\r\n *\r\n * @type {Array<ConstructName>}\r\n */\r\nconst constructsWithoutStrikethrough = [\r\n  'autolink',\r\n  'destinationLiteral',\r\n  'destinationRaw',\r\n  'reference',\r\n  'titleQuote',\r\n  'titleApostrophe'\r\n]\r\n\r\nhandleDelete.peek = peekDelete\r\n\r\n/**\r\n * Create an extension for `mdast-util-from-markdown` to enable GFM\r\n * strikethrough in markdown.\r\n *\r\n * @returns {FromMarkdownExtension}\r\n *   Extension for `mdast-util-from-markdown` to enable GFM strikethrough.\r\n */\r\nexport function gfmStrikethroughFromMarkdown() {\r\n  return {\r\n    canContainEols: ['delete'],\r\n    enter: {strikethrough: enterStrikethrough},\r\n    exit: {strikethrough: exitStrikethrough}\r\n  }\r\n}\r\n\r\n/**\r\n * Create an extension for `mdast-util-to-markdown` to enable GFM\r\n * strikethrough in markdown.\r\n *\r\n * @returns {ToMarkdownExtension}\r\n *   Extension for `mdast-util-to-markdown` to enable GFM strikethrough.\r\n */\r\nexport function gfmStrikethroughToMarkdown() {\r\n  return {\r\n    unsafe: [\r\n      {\r\n        character: '~',\r\n        inConstruct: 'phrasing',\r\n        notInConstruct: constructsWithoutStrikethrough\r\n      }\r\n    ],\r\n    handlers: {delete: handleDelete}\r\n  }\r\n}\r\n\r\n/**\r\n * @this {CompileContext}\r\n * @type {FromMarkdownHandle}\r\n */\r\nfunction enterStrikethrough(token) {\r\n  this.enter({type: 'delete', children: []}, token)\r\n}\r\n\r\n/**\r\n * @this {CompileContext}\r\n * @type {FromMarkdownHandle}\r\n */\r\nfunction exitStrikethrough(token) {\r\n  this.exit(token)\r\n}\r\n\r\n/**\r\n * @type {ToMarkdownHandle}\r\n * @param {Delete} node\r\n */\r\nfunction handleDelete(node, _, state, info) {\r\n  const tracker = state.createTracker(info)\r\n  const exit = state.enter('strikethrough')\r\n  let value = tracker.move('~~')\r\n  value += state.containerPhrasing(node, {\r\n    ...tracker.current(),\r\n    before: value,\r\n    after: '~'\r\n  })\r\n  value += tracker.move('~~')\r\n  exit()\r\n  return value\r\n}\r\n\r\n/** @type {ToMarkdownHandle} */\r\nfunction peekDelete() {\r\n  return '~'\r\n}\r\n","// To do: next major: remove.\r\n/**\r\n * @typedef {Options} MarkdownTableOptions\r\n *   Configuration.\r\n */\r\n\r\n/**\r\n * @typedef Options\r\n *   Configuration.\r\n * @property {boolean | null | undefined} [alignDelimiters=true]\r\n *   Whether to align the delimiters (default: `true`);\r\n *   they are aligned by default:\r\n *\r\n *   ```markdown\r\n *   | Alpha | B     |\r\n *   | ----- | ----- |\r\n *   | C     | Delta |\r\n *   ```\r\n *\r\n *   Pass `false` to make them staggered:\r\n *\r\n *   ```markdown\r\n *   | Alpha | B |\r\n *   | - | - |\r\n *   | C | Delta |\r\n *   ```\r\n * @property {ReadonlyArray<string | null | undefined> | string | null | undefined} [align]\r\n *   How to align columns (default: `''`);\r\n *   one style for all columns or styles for their respective columns;\r\n *   each style is either `'l'` (left), `'r'` (right), or `'c'` (center);\r\n *   other values are treated as `''`, which doesn’t place the colon in the\r\n *   alignment row but does align left;\r\n *   *only the lowercased first character is used, so `Right` is fine.*\r\n * @property {boolean | null | undefined} [delimiterEnd=true]\r\n *   Whether to end each row with the delimiter (default: `true`).\r\n *\r\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\r\n *   > that aren’t understandable to some markdown parsers.\r\n *\r\n *   When `true`, there are ending delimiters:\r\n *\r\n *   ```markdown\r\n *   | Alpha | B     |\r\n *   | ----- | ----- |\r\n *   | C     | Delta |\r\n *   ```\r\n *\r\n *   When `false`, there are no ending delimiters:\r\n *\r\n *   ```markdown\r\n *   | Alpha | B\r\n *   | ----- | -----\r\n *   | C     | Delta\r\n *   ```\r\n * @property {boolean | null | undefined} [delimiterStart=true]\r\n *   Whether to begin each row with the delimiter (default: `true`).\r\n *\r\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\r\n *   > that aren’t understandable to some markdown parsers.\r\n *\r\n *   When `true`, there are starting delimiters:\r\n *\r\n *   ```markdown\r\n *   | Alpha | B     |\r\n *   | ----- | ----- |\r\n *   | C     | Delta |\r\n *   ```\r\n *\r\n *   When `false`, there are no starting delimiters:\r\n *\r\n *   ```markdown\r\n *   Alpha | B     |\r\n *   ----- | ----- |\r\n *   C     | Delta |\r\n *   ```\r\n * @property {boolean | null | undefined} [padding=true]\r\n *   Whether to add a space of padding between delimiters and cells\r\n *   (default: `true`).\r\n *\r\n *   When `true`, there is padding:\r\n *\r\n *   ```markdown\r\n *   | Alpha | B     |\r\n *   | ----- | ----- |\r\n *   | C     | Delta |\r\n *   ```\r\n *\r\n *   When `false`, there is no padding:\r\n *\r\n *   ```markdown\r\n *   |Alpha|B    |\r\n *   |-----|-----|\r\n *   |C    |Delta|\r\n *   ```\r\n * @property {((value: string) => number) | null | undefined} [stringLength]\r\n *   Function to detect the length of table cell content (optional);\r\n *   this is used when aligning the delimiters (`|`) between table cells;\r\n *   full-width characters and emoji mess up delimiter alignment when viewing\r\n *   the markdown source;\r\n *   to fix this, you can pass this function,\r\n *   which receives the cell content and returns its “visible” size;\r\n *   note that what is and isn’t visible depends on where the text is displayed.\r\n *\r\n *   Without such a function, the following:\r\n *\r\n *   ```js\r\n *   markdownTable([\r\n *     ['Alpha', 'Bravo'],\r\n *     ['中文', 'Charlie'],\r\n *     ['👩‍❤️‍👩', 'Delta']\r\n *   ])\r\n *   ```\r\n *\r\n *   Yields:\r\n *\r\n *   ```markdown\r\n *   | Alpha | Bravo |\r\n *   | - | - |\r\n *   | 中文 | Charlie |\r\n *   | 👩‍❤️‍👩 | Delta |\r\n *   ```\r\n *\r\n *   With [`string-width`](https://github.com/sindresorhus/string-width):\r\n *\r\n *   ```js\r\n *   import stringWidth from 'string-width'\r\n *\r\n *   markdownTable(\r\n *     [\r\n *       ['Alpha', 'Bravo'],\r\n *       ['中文', 'Charlie'],\r\n *       ['👩‍❤️‍👩', 'Delta']\r\n *     ],\r\n *     {stringLength: stringWidth}\r\n *   )\r\n *   ```\r\n *\r\n *   Yields:\r\n *\r\n *   ```markdown\r\n *   | Alpha | Bravo   |\r\n *   | ----- | ------- |\r\n *   | 中文  | Charlie |\r\n *   | 👩‍❤️‍👩    | Delta   |\r\n *   ```\r\n */\r\n\r\n/**\r\n * @param {string} value\r\n *   Cell value.\r\n * @returns {number}\r\n *   Cell size.\r\n */\r\nfunction defaultStringLength(value) {\r\n  return value.length\r\n}\r\n\r\n/**\r\n * Generate a markdown\r\n * ([GFM](https://docs.github.com/en/github/writing-on-github/working-with-advanced-formatting/organizing-information-with-tables))\r\n * table.\r\n *\r\n * @param {ReadonlyArray<ReadonlyArray<string | null | undefined>>} table\r\n *   Table data (matrix of strings).\r\n * @param {Readonly<Options> | null | undefined} [options]\r\n *   Configuration (optional).\r\n * @returns {string}\r\n *   Result.\r\n */\r\nexport function markdownTable(table, options) {\r\n  const settings = options || {}\r\n  // To do: next major: change to spread.\r\n  const align = (settings.align || []).concat()\r\n  const stringLength = settings.stringLength || defaultStringLength\r\n  /** @type {Array<number>} Character codes as symbols for alignment per column. */\r\n  const alignments = []\r\n  /** @type {Array<Array<string>>} Cells per row. */\r\n  const cellMatrix = []\r\n  /** @type {Array<Array<number>>} Sizes of each cell per row. */\r\n  const sizeMatrix = []\r\n  /** @type {Array<number>} */\r\n  const longestCellByColumn = []\r\n  let mostCellsPerRow = 0\r\n  let rowIndex = -1\r\n\r\n  // This is a superfluous loop if we don’t align delimiters, but otherwise we’d\r\n  // do superfluous work when aligning, so optimize for aligning.\r\n  while (++rowIndex < table.length) {\r\n    /** @type {Array<string>} */\r\n    const row = []\r\n    /** @type {Array<number>} */\r\n    const sizes = []\r\n    let columnIndex = -1\r\n\r\n    if (table[rowIndex].length > mostCellsPerRow) {\r\n      mostCellsPerRow = table[rowIndex].length\r\n    }\r\n\r\n    while (++columnIndex < table[rowIndex].length) {\r\n      const cell = serialize(table[rowIndex][columnIndex])\r\n\r\n      if (settings.alignDelimiters !== false) {\r\n        const size = stringLength(cell)\r\n        sizes[columnIndex] = size\r\n\r\n        if (\r\n          longestCellByColumn[columnIndex] === undefined ||\r\n          size > longestCellByColumn[columnIndex]\r\n        ) {\r\n          longestCellByColumn[columnIndex] = size\r\n        }\r\n      }\r\n\r\n      row.push(cell)\r\n    }\r\n\r\n    cellMatrix[rowIndex] = row\r\n    sizeMatrix[rowIndex] = sizes\r\n  }\r\n\r\n  // Figure out which alignments to use.\r\n  let columnIndex = -1\r\n\r\n  if (typeof align === 'object' && 'length' in align) {\r\n    while (++columnIndex < mostCellsPerRow) {\r\n      alignments[columnIndex] = toAlignment(align[columnIndex])\r\n    }\r\n  } else {\r\n    const code = toAlignment(align)\r\n\r\n    while (++columnIndex < mostCellsPerRow) {\r\n      alignments[columnIndex] = code\r\n    }\r\n  }\r\n\r\n  // Inject the alignment row.\r\n  columnIndex = -1\r\n  /** @type {Array<string>} */\r\n  const row = []\r\n  /** @type {Array<number>} */\r\n  const sizes = []\r\n\r\n  while (++columnIndex < mostCellsPerRow) {\r\n    const code = alignments[columnIndex]\r\n    let before = ''\r\n    let after = ''\r\n\r\n    if (code === 99 /* `c` */) {\r\n      before = ':'\r\n      after = ':'\r\n    } else if (code === 108 /* `l` */) {\r\n      before = ':'\r\n    } else if (code === 114 /* `r` */) {\r\n      after = ':'\r\n    }\r\n\r\n    // There *must* be at least one hyphen-minus in each alignment cell.\r\n    let size =\r\n      settings.alignDelimiters === false\r\n        ? 1\r\n        : Math.max(\r\n            1,\r\n            longestCellByColumn[columnIndex] - before.length - after.length\r\n          )\r\n\r\n    const cell = before + '-'.repeat(size) + after\r\n\r\n    if (settings.alignDelimiters !== false) {\r\n      size = before.length + size + after.length\r\n\r\n      if (size > longestCellByColumn[columnIndex]) {\r\n        longestCellByColumn[columnIndex] = size\r\n      }\r\n\r\n      sizes[columnIndex] = size\r\n    }\r\n\r\n    row[columnIndex] = cell\r\n  }\r\n\r\n  // Inject the alignment row.\r\n  cellMatrix.splice(1, 0, row)\r\n  sizeMatrix.splice(1, 0, sizes)\r\n\r\n  rowIndex = -1\r\n  /** @type {Array<string>} */\r\n  const lines = []\r\n\r\n  while (++rowIndex < cellMatrix.length) {\r\n    const row = cellMatrix[rowIndex]\r\n    const sizes = sizeMatrix[rowIndex]\r\n    columnIndex = -1\r\n    /** @type {Array<string>} */\r\n    const line = []\r\n\r\n    while (++columnIndex < mostCellsPerRow) {\r\n      const cell = row[columnIndex] || ''\r\n      let before = ''\r\n      let after = ''\r\n\r\n      if (settings.alignDelimiters !== false) {\r\n        const size =\r\n          longestCellByColumn[columnIndex] - (sizes[columnIndex] || 0)\r\n        const code = alignments[columnIndex]\r\n\r\n        if (code === 114 /* `r` */) {\r\n          before = ' '.repeat(size)\r\n        } else if (code === 99 /* `c` */) {\r\n          if (size % 2) {\r\n            before = ' '.repeat(size / 2 + 0.5)\r\n            after = ' '.repeat(size / 2 - 0.5)\r\n          } else {\r\n            before = ' '.repeat(size / 2)\r\n            after = before\r\n          }\r\n        } else {\r\n          after = ' '.repeat(size)\r\n        }\r\n      }\r\n\r\n      if (settings.delimiterStart !== false && !columnIndex) {\r\n        line.push('|')\r\n      }\r\n\r\n      if (\r\n        settings.padding !== false &&\r\n        // Don’t add the opening space if we’re not aligning and the cell is\r\n        // empty: there will be a closing space.\r\n        !(settings.alignDelimiters === false && cell === '') &&\r\n        (settings.delimiterStart !== false || columnIndex)\r\n      ) {\r\n        line.push(' ')\r\n      }\r\n\r\n      if (settings.alignDelimiters !== false) {\r\n        line.push(before)\r\n      }\r\n\r\n      line.push(cell)\r\n\r\n      if (settings.alignDelimiters !== false) {\r\n        line.push(after)\r\n      }\r\n\r\n      if (settings.padding !== false) {\r\n        line.push(' ')\r\n      }\r\n\r\n      if (\r\n        settings.delimiterEnd !== false ||\r\n        columnIndex !== mostCellsPerRow - 1\r\n      ) {\r\n        line.push('|')\r\n      }\r\n    }\r\n\r\n    lines.push(\r\n      settings.delimiterEnd === false\r\n        ? line.join('').replace(/ +$/, '')\r\n        : line.join('')\r\n    )\r\n  }\r\n\r\n  return lines.join('\\n')\r\n}\r\n\r\n/**\r\n * @param {string | null | undefined} [value]\r\n *   Value to serialize.\r\n * @returns {string}\r\n *   Result.\r\n */\r\nfunction serialize(value) {\r\n  return value === null || value === undefined ? '' : String(value)\r\n}\r\n\r\n/**\r\n * @param {string | null | undefined} value\r\n *   Value.\r\n * @returns {number}\r\n *   Alignment.\r\n */\r\nfunction toAlignment(value) {\r\n  const code = typeof value === 'string' ? value.codePointAt(0) : 0\r\n\r\n  return code === 67 /* `C` */ || code === 99 /* `c` */\r\n    ? 99 /* `c` */\r\n    : code === 76 /* `L` */ || code === 108 /* `l` */\r\n      ? 108 /* `l` */\r\n      : code === 82 /* `R` */ || code === 114 /* `r` */\r\n        ? 114 /* `r` */\r\n        : 0\r\n}\r\n","/**\r\n * @import {Blockquote, Parents} from 'mdast'\r\n * @import {Info, Map, State} from 'mdast-util-to-markdown'\r\n */\r\n\r\n/**\r\n * @param {Blockquote} node\r\n * @param {Parents | undefined} _\r\n * @param {State} state\r\n * @param {Info} info\r\n * @returns {string}\r\n */\r\nexport function blockquote(node, _, state, info) {\r\n  const exit = state.enter('blockquote')\r\n  const tracker = state.createTracker(info)\r\n  tracker.move('> ')\r\n  tracker.shift(2)\r\n  const value = state.indentLines(\r\n    state.containerFlow(node, tracker.current()),\r\n    map\r\n  )\r\n  exit()\r\n  return value\r\n}\r\n\r\n/** @type {Map} */\r\nfunction map(line, _, blank) {\r\n  return '>' + (blank ? '' : ' ') + line\r\n}\r\n","/**\r\n * @import {ConstructName, Unsafe} from 'mdast-util-to-markdown'\r\n */\r\n\r\n/**\r\n * @param {Array<ConstructName>} stack\r\n * @param {Unsafe} pattern\r\n * @returns {boolean}\r\n */\r\nexport function patternInScope(stack, pattern) {\r\n  return (\r\n    listInScope(stack, pattern.inConstruct, true) &&\r\n    !listInScope(stack, pattern.notInConstruct, false)\r\n  )\r\n}\r\n\r\n/**\r\n * @param {Array<ConstructName>} stack\r\n * @param {Unsafe['inConstruct']} list\r\n * @param {boolean} none\r\n * @returns {boolean}\r\n */\r\nfunction listInScope(stack, list, none) {\r\n  if (typeof list === 'string') {\r\n    list = [list]\r\n  }\r\n\r\n  if (!list || list.length === 0) {\r\n    return none\r\n  }\r\n\r\n  let index = -1\r\n\r\n  while (++index < list.length) {\r\n    if (stack.includes(list[index])) {\r\n      return true\r\n    }\r\n  }\r\n\r\n  return false\r\n}\r\n","/**\r\n * @import {Break, Parents} from 'mdast'\r\n * @import {Info, State} from 'mdast-util-to-markdown'\r\n */\r\n\r\nimport {patternInScope} from '../util/pattern-in-scope.js'\r\n\r\n/**\r\n * @param {Break} _\r\n * @param {Parents | undefined} _1\r\n * @param {State} state\r\n * @param {Info} info\r\n * @returns {string}\r\n */\r\nexport function hardBreak(_, _1, state, info) {\r\n  let index = -1\r\n\r\n  while (++index < state.unsafe.length) {\r\n    // If we can’t put eols in this construct (setext headings, tables), use a\r\n    // space instead.\r\n    if (\r\n      state.unsafe[index].character === '\\n' &&\r\n      patternInScope(state.stack, state.unsafe[index])\r\n    ) {\r\n      return /[ \\t]/.test(info.before) ? '' : ' '\r\n    }\r\n  }\r\n\r\n  return '\\\\\\n'\r\n}\r\n","/**\r\n * Get the count of the longest repeating streak of `substring` in `value`.\r\n *\r\n * @param {string} value\r\n *   Content to search in.\r\n * @param {string} substring\r\n *   Substring to look for, typically one character.\r\n * @returns {number}\r\n *   Count of most frequent adjacent `substring`s in `value`.\r\n */\r\nexport function longestStreak(value, substring) {\r\n  const source = String(value)\r\n  let index = source.indexOf(substring)\r\n  let expected = index\r\n  let count = 0\r\n  let max = 0\r\n\r\n  if (typeof substring !== 'string') {\r\n    throw new TypeError('Expected substring')\r\n  }\r\n\r\n  while (index !== -1) {\r\n    if (index === expected) {\r\n      if (++count > max) {\r\n        max = count\r\n      }\r\n    } else {\r\n      count = 1\r\n    }\r\n\r\n    expected = index + substring.length\r\n    index = source.indexOf(substring, expected)\r\n  }\r\n\r\n  return max\r\n}\r\n","/**\r\n * @import {State} from 'mdast-util-to-markdown'\r\n * @import {Code} from 'mdast'\r\n */\r\n\r\n/**\r\n * @param {Code} node\r\n * @param {State} state\r\n * @returns {boolean}\r\n */\r\nexport function formatCodeAsIndented(node, state) {\r\n  return Boolean(\r\n    state.options.fences === false &&\r\n      node.value &&\r\n      // If there’s no info…\r\n      !node.lang &&\r\n      // And there’s a non-whitespace character…\r\n      /[^ \\r\\n]/.test(node.value) &&\r\n      // And the value doesn’t start or end in a blank…\r\n      !/^[\\t ]*(?:[\\r\\n]|$)|(?:^|[\\r\\n])[\\t ]*$/.test(node.value)\r\n  )\r\n}\r\n","/**\r\n * @import {Options, State} from 'mdast-util-to-markdown'\r\n */\r\n\r\n/**\r\n * @param {State} state\r\n * @returns {Exclude<Options['fence'], null | undefined>}\r\n */\r\nexport function checkFence(state) {\r\n  const marker = state.options.fence || '`'\r\n\r\n  if (marker !== '`' && marker !== '~') {\r\n    throw new Error(\r\n      'Cannot serialize code with `' +\r\n        marker +\r\n        '` for `options.fence`, expected `` ` `` or `~`'\r\n    )\r\n  }\r\n\r\n  return marker\r\n}\r\n","/**\r\n * @import {Info, Map, State} from 'mdast-util-to-markdown'\r\n * @import {Code, Parents} from 'mdast'\r\n */\r\n\r\nimport {longestStreak} from 'longest-streak'\r\nimport {formatCodeAsIndented} from '../util/format-code-as-indented.js'\r\nimport {checkFence} from '../util/check-fence.js'\r\n\r\n/**\r\n * @param {Code} node\r\n * @param {Parents | undefined} _\r\n * @param {State} state\r\n * @param {Info} info\r\n * @returns {string}\r\n */\r\nexport function code(node, _, state, info) {\r\n  const marker = checkFence(state)\r\n  const raw = node.value || ''\r\n  const suffix = marker === '`' ? 'GraveAccent' : 'Tilde'\r\n\r\n  if (formatCodeAsIndented(node, state)) {\r\n    const exit = state.enter('codeIndented')\r\n    const value = state.indentLines(raw, map)\r\n    exit()\r\n    return value\r\n  }\r\n\r\n  const tracker = state.createTracker(info)\r\n  const sequence = marker.repeat(Math.max(longestStreak(raw, marker) + 1, 3))\r\n  const exit = state.enter('codeFenced')\r\n  let value = tracker.move(sequence)\r\n\r\n  if (node.lang) {\r\n    const subexit = state.enter(`codeFencedLang${suffix}`)\r\n    value += tracker.move(\r\n      state.safe(node.lang, {\r\n        before: value,\r\n        after: ' ',\r\n        encode: ['`'],\r\n        ...tracker.current()\r\n      })\r\n    )\r\n    subexit()\r\n  }\r\n\r\n  if (node.lang && node.meta) {\r\n    const subexit = state.enter(`codeFencedMeta${suffix}`)\r\n    value += tracker.move(' ')\r\n    value += tracker.move(\r\n      state.safe(node.meta, {\r\n        before: value,\r\n        after: '\\n',\r\n        encode: ['`'],\r\n        ...tracker.current()\r\n      })\r\n    )\r\n    subexit()\r\n  }\r\n\r\n  value += tracker.move('\\n')\r\n\r\n  if (raw) {\r\n    value += tracker.move(raw + '\\n')\r\n  }\r\n\r\n  value += tracker.move(sequence)\r\n  exit()\r\n  return value\r\n}\r\n\r\n/** @type {Map} */\r\nfunction map(line, _, blank) {\r\n  return (blank ? '' : '    ') + line\r\n}\r\n","/**\r\n * @import {Options, State} from 'mdast-util-to-markdown'\r\n */\r\n\r\n/**\r\n * @param {State} state\r\n * @returns {Exclude<Options['quote'], null | undefined>}\r\n */\r\nexport function checkQuote(state) {\r\n  const marker = state.options.quote || '\"'\r\n\r\n  if (marker !== '\"' && marker !== \"'\") {\r\n    throw new Error(\r\n      'Cannot serialize title with `' +\r\n        marker +\r\n        '` for `options.quote`, expected `\"`, or `\\'`'\r\n    )\r\n  }\r\n\r\n  return marker\r\n}\r\n","/**\r\n * @import {Info, State} from 'mdast-util-to-markdown'\r\n * @import {Definition, Parents} from 'mdast'\r\n */\r\n\r\nimport {checkQuote} from '../util/check-quote.js'\r\n\r\n/**\r\n * @param {Definition} node\r\n * @param {Parents | undefined} _\r\n * @param {State} state\r\n * @param {Info} info\r\n * @returns {string}\r\n */\r\nexport function definition(node, _, state, info) {\r\n  const quote = checkQuote(state)\r\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\r\n  const exit = state.enter('definition')\r\n  let subexit = state.enter('label')\r\n  const tracker = state.createTracker(info)\r\n  let value = tracker.move('[')\r\n  value += tracker.move(\r\n    state.safe(state.associationId(node), {\r\n      before: value,\r\n      after: ']',\r\n      ...tracker.current()\r\n    })\r\n  )\r\n  value += tracker.move(']: ')\r\n\r\n  subexit()\r\n\r\n  if (\r\n    // If there’s no url, or…\r\n    !node.url ||\r\n    // If there are control characters or whitespace.\r\n    /[\\0- \\u007F]/.test(node.url)\r\n  ) {\r\n    subexit = state.enter('destinationLiteral')\r\n    value += tracker.move('<')\r\n    value += tracker.move(\r\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\r\n    )\r\n    value += tracker.move('>')\r\n  } else {\r\n    // No whitespace, raw is prettier.\r\n    subexit = state.enter('destinationRaw')\r\n    value += tracker.move(\r\n      state.safe(node.url, {\r\n        before: value,\r\n        after: node.title ? ' ' : '\\n',\r\n        ...tracker.current()\r\n      })\r\n    )\r\n  }\r\n\r\n  subexit()\r\n\r\n  if (node.title) {\r\n    subexit = state.enter(`title${suffix}`)\r\n    value += tracker.move(' ' + quote)\r\n    value += tracker.move(\r\n      state.safe(node.title, {\r\n        before: value,\r\n        after: quote,\r\n        ...tracker.current()\r\n      })\r\n    )\r\n    value += tracker.move(quote)\r\n    subexit()\r\n  }\r\n\r\n  exit()\r\n\r\n  return value\r\n}\r\n","/**\r\n * @import {Options, State} from 'mdast-util-to-markdown'\r\n */\r\n\r\n/**\r\n * @param {State} state\r\n * @returns {Exclude<Options['emphasis'], null | undefined>}\r\n */\r\nexport function checkEmphasis(state) {\r\n  const marker = state.options.emphasis || '*'\r\n\r\n  if (marker !== '*' && marker !== '_') {\r\n    throw new Error(\r\n      'Cannot serialize emphasis with `' +\r\n        marker +\r\n        '` for `options.emphasis`, expected `*`, or `_`'\r\n    )\r\n  }\r\n\r\n  return marker\r\n}\r\n","/**\r\n * Encode a code point as a character reference.\r\n *\r\n * @param {number} code\r\n *   Code point to encode.\r\n * @returns {string}\r\n *   Encoded character reference.\r\n */\r\nexport function encodeCharacterReference(code) {\r\n  return '&#x' + code.toString(16).toUpperCase() + ';'\r\n}\r\n","/**\r\n * @import {EncodeSides} from '../types.js'\r\n */\r\n\r\nimport {classifyCharacter} from 'micromark-util-classify-character'\r\n\r\n/**\r\n * Check whether to encode (as a character reference) the characters\r\n * surrounding an attention run.\r\n *\r\n * Which characters are around an attention run influence whether it works or\r\n * not.\r\n *\r\n * See <https://github.com/orgs/syntax-tree/discussions/60> for more info.\r\n * See this markdown in a particular renderer to see what works:\r\n *\r\n * ```markdown\r\n * |                         | A (letter inside) | B (punctuation inside) | C (whitespace inside) | D (nothing inside) |\r\n * | ----------------------- | ----------------- | ---------------------- | --------------------- | ------------------ |\r\n * | 1 (letter outside)      | x*y*z             | x*.*z                  | x* *z                 | x**z               |\r\n * | 2 (punctuation outside) | .*y*.             | .*.*.                  | .* *.                 | .**.               |\r\n * | 3 (whitespace outside)  | x *y* z           | x *.* z                | x * * z               | x ** z             |\r\n * | 4 (nothing outside)     | *x*               | *.*                    | * *                   | **                 |\r\n * ```\r\n *\r\n * @param {number} outside\r\n *   Code point on the outer side of the run.\r\n * @param {number} inside\r\n *   Code point on the inner side of the run.\r\n * @param {'*' | '_'} marker\r\n *   Marker of the run.\r\n *   Underscores are handled more strictly (they form less often) than\r\n *   asterisks.\r\n * @returns {EncodeSides}\r\n *   Whether to encode characters.\r\n */\r\n// Important: punctuation must never be encoded.\r\n// Punctuation is solely used by markdown constructs.\r\n// And by encoding itself.\r\n// Encoding them will break constructs or double encode things.\r\nexport function encodeInfo(outside, inside, marker) {\r\n  const outsideKind = classifyCharacter(outside)\r\n  const insideKind = classifyCharacter(inside)\r\n\r\n  // Letter outside:\r\n  if (outsideKind === undefined) {\r\n    return insideKind === undefined\r\n      ? // Letter inside:\r\n        // we have to encode *both* letters for `_` as it is looser.\r\n        // it already forms for `*` (and GFMs `~`).\r\n        marker === '_'\r\n        ? {inside: true, outside: true}\r\n        : {inside: false, outside: false}\r\n      : insideKind === 1\r\n        ? // Whitespace inside: encode both (letter, whitespace).\r\n          {inside: true, outside: true}\r\n        : // Punctuation inside: encode outer (letter)\r\n          {inside: false, outside: true}\r\n  }\r\n\r\n  // Whitespace outside:\r\n  if (outsideKind === 1) {\r\n    return insideKind === undefined\r\n      ? // Letter inside: already forms.\r\n        {inside: false, outside: false}\r\n      : insideKind === 1\r\n        ? // Whitespace inside: encode both (whitespace).\r\n          {inside: true, outside: true}\r\n        : // Punctuation inside: already forms.\r\n          {inside: false, outside: false}\r\n  }\r\n\r\n  // Punctuation outside:\r\n  return insideKind === undefined\r\n    ? // Letter inside: already forms.\r\n      {inside: false, outside: false}\r\n    : insideKind === 1\r\n      ? // Whitespace inside: encode inner (whitespace).\r\n        {inside: true, outside: false}\r\n      : // Punctuation inside: already forms.\r\n        {inside: false, outside: false}\r\n}\r\n","/**\r\n * @import {Info, State} from 'mdast-util-to-markdown'\r\n * @import {Emphasis, Parents} from 'mdast'\r\n */\r\n\r\nimport {checkEmphasis} from '../util/check-emphasis.js'\r\nimport {encodeCharacterReference} from '../util/encode-character-reference.js'\r\nimport {encodeInfo} from '../util/encode-info.js'\r\n\r\nemphasis.peek = emphasisPeek\r\n\r\n/**\r\n * @param {Emphasis} node\r\n * @param {Parents | undefined} _\r\n * @param {State} state\r\n * @param {Info} info\r\n * @returns {string}\r\n */\r\nexport function emphasis(node, _, state, info) {\r\n  const marker = checkEmphasis(state)\r\n  const exit = state.enter('emphasis')\r\n  const tracker = state.createTracker(info)\r\n  const before = tracker.move(marker)\r\n\r\n  let between = tracker.move(\r\n    state.containerPhrasing(node, {\r\n      after: marker,\r\n      before,\r\n      ...tracker.current()\r\n    })\r\n  )\r\n  const betweenHead = between.charCodeAt(0)\r\n  const open = encodeInfo(\r\n    info.before.charCodeAt(info.before.length - 1),\r\n    betweenHead,\r\n    marker\r\n  )\r\n\r\n  if (open.inside) {\r\n    between = encodeCharacterReference(betweenHead) + between.slice(1)\r\n  }\r\n\r\n  const betweenTail = between.charCodeAt(between.length - 1)\r\n  const close = encodeInfo(info.after.charCodeAt(0), betweenTail, marker)\r\n\r\n  if (close.inside) {\r\n    between = between.slice(0, -1) + encodeCharacterReference(betweenTail)\r\n  }\r\n\r\n  const after = tracker.move(marker)\r\n\r\n  exit()\r\n\r\n  state.attentionEncodeSurroundingInfo = {\r\n    after: close.outside,\r\n    before: open.outside\r\n  }\r\n  return before + between + after\r\n}\r\n\r\n/**\r\n * @param {Emphasis} _\r\n * @param {Parents | undefined} _1\r\n * @param {State} state\r\n * @returns {string}\r\n */\r\nfunction emphasisPeek(_, _1, state) {\r\n  return state.options.emphasis || '*'\r\n}\r\n","/**\r\n * @import {State} from 'mdast-util-to-markdown'\r\n * @import {Heading} from 'mdast'\r\n */\r\n\r\nimport {EXIT, visit} from 'unist-util-visit'\r\nimport {toString} from 'mdast-util-to-string'\r\n\r\n/**\r\n * @param {Heading} node\r\n * @param {State} state\r\n * @returns {boolean}\r\n */\r\nexport function formatHeadingAsSetext(node, state) {\r\n  let literalWithBreak = false\r\n\r\n  // Look for literals with a line break.\r\n  // Note that this also\r\n  visit(node, function (node) {\r\n    if (\r\n      ('value' in node && /\\r?\\n|\\r/.test(node.value)) ||\r\n      node.type === 'break'\r\n    ) {\r\n      literalWithBreak = true\r\n      return EXIT\r\n    }\r\n  })\r\n\r\n  return Boolean(\r\n    (!node.depth || node.depth < 3) &&\r\n      toString(node) &&\r\n      (state.options.setext || literalWithBreak)\r\n  )\r\n}\r\n","/**\r\n * @import {Info, State} from 'mdast-util-to-markdown'\r\n * @import {Heading, Parents} from 'mdast'\r\n */\r\n\r\nimport {encodeCharacterReference} from '../util/encode-character-reference.js'\r\nimport {formatHeadingAsSetext} from '../util/format-heading-as-setext.js'\r\n\r\n/**\r\n * @param {Heading} node\r\n * @param {Parents | undefined} _\r\n * @param {State} state\r\n * @param {Info} info\r\n * @returns {string}\r\n */\r\nexport function heading(node, _, state, info) {\r\n  const rank = Math.max(Math.min(6, node.depth || 1), 1)\r\n  const tracker = state.createTracker(info)\r\n\r\n  if (formatHeadingAsSetext(node, state)) {\r\n    const exit = state.enter('headingSetext')\r\n    const subexit = state.enter('phrasing')\r\n    const value = state.containerPhrasing(node, {\r\n      ...tracker.current(),\r\n      before: '\\n',\r\n      after: '\\n'\r\n    })\r\n    subexit()\r\n    exit()\r\n\r\n    return (\r\n      value +\r\n      '\\n' +\r\n      (rank === 1 ? '=' : '-').repeat(\r\n        // The whole size…\r\n        value.length -\r\n          // Minus the position of the character after the last EOL (or\r\n          // 0 if there is none)…\r\n          (Math.max(value.lastIndexOf('\\r'), value.lastIndexOf('\\n')) + 1)\r\n      )\r\n    )\r\n  }\r\n\r\n  const sequence = '#'.repeat(rank)\r\n  const exit = state.enter('headingAtx')\r\n  const subexit = state.enter('phrasing')\r\n\r\n  // Note: for proper tracking, we should reset the output positions when there\r\n  // is no content returned, because then the space is not output.\r\n  // Practically, in that case, there is no content, so it doesn’t matter that\r\n  // we’ve tracked one too many characters.\r\n  tracker.move(sequence + ' ')\r\n\r\n  let value = state.containerPhrasing(node, {\r\n    before: '# ',\r\n    after: '\\n',\r\n    ...tracker.current()\r\n  })\r\n\r\n  if (/^[\\t ]/.test(value)) {\r\n    // To do: what effect has the character reference on tracking?\r\n    value = encodeCharacterReference(value.charCodeAt(0)) + value.slice(1)\r\n  }\r\n\r\n  value = value ? sequence + ' ' + value : sequence\r\n\r\n  if (state.options.closeAtx) {\r\n    value += ' ' + sequence\r\n  }\r\n\r\n  subexit()\r\n  exit()\r\n\r\n  return value\r\n}\r\n","/**\r\n * @import {Html} from 'mdast'\r\n */\r\n\r\nhtml.peek = htmlPeek\r\n\r\n/**\r\n * @param {Html} node\r\n * @returns {string}\r\n */\r\nexport function html(node) {\r\n  return node.value || ''\r\n}\r\n\r\n/**\r\n * @returns {string}\r\n */\r\nfunction htmlPeek() {\r\n  return '<'\r\n}\r\n","/**\r\n * @import {Info, State} from 'mdast-util-to-markdown'\r\n * @import {Image, Parents} from 'mdast'\r\n */\r\n\r\nimport {checkQuote} from '../util/check-quote.js'\r\n\r\nimage.peek = imagePeek\r\n\r\n/**\r\n * @param {Image} node\r\n * @param {Parents | undefined} _\r\n * @param {State} state\r\n * @param {Info} info\r\n * @returns {string}\r\n */\r\nexport function image(node, _, state, info) {\r\n  const quote = checkQuote(state)\r\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\r\n  const exit = state.enter('image')\r\n  let subexit = state.enter('label')\r\n  const tracker = state.createTracker(info)\r\n  let value = tracker.move('![')\r\n  value += tracker.move(\r\n    state.safe(node.alt, {before: value, after: ']', ...tracker.current()})\r\n  )\r\n  value += tracker.move('](')\r\n\r\n  subexit()\r\n\r\n  if (\r\n    // If there’s no url but there is a title…\r\n    (!node.url && node.title) ||\r\n    // If there are control characters or whitespace.\r\n    /[\\0- \\u007F]/.test(node.url)\r\n  ) {\r\n    subexit = state.enter('destinationLiteral')\r\n    value += tracker.move('<')\r\n    value += tracker.move(\r\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\r\n    )\r\n    value += tracker.move('>')\r\n  } else {\r\n    // No whitespace, raw is prettier.\r\n    subexit = state.enter('destinationRaw')\r\n    value += tracker.move(\r\n      state.safe(node.url, {\r\n        before: value,\r\n        after: node.title ? ' ' : ')',\r\n        ...tracker.current()\r\n      })\r\n    )\r\n  }\r\n\r\n  subexit()\r\n\r\n  if (node.title) {\r\n    subexit = state.enter(`title${suffix}`)\r\n    value += tracker.move(' ' + quote)\r\n    value += tracker.move(\r\n      state.safe(node.title, {\r\n        before: value,\r\n        after: quote,\r\n        ...tracker.current()\r\n      })\r\n    )\r\n    value += tracker.move(quote)\r\n    subexit()\r\n  }\r\n\r\n  value += tracker.move(')')\r\n  exit()\r\n\r\n  return value\r\n}\r\n\r\n/**\r\n * @returns {string}\r\n */\r\nfunction imagePeek() {\r\n  return '!'\r\n}\r\n","/**\r\n * @import {Info, State} from 'mdast-util-to-markdown'\r\n * @import {ImageReference, Parents} from 'mdast'\r\n */\r\n\r\nimageReference.peek = imageReferencePeek\r\n\r\n/**\r\n * @param {ImageReference} node\r\n * @param {Parents | undefined} _\r\n * @param {State} state\r\n * @param {Info} info\r\n * @returns {string}\r\n */\r\nexport function imageReference(node, _, state, info) {\r\n  const type = node.referenceType\r\n  const exit = state.enter('imageReference')\r\n  let subexit = state.enter('label')\r\n  const tracker = state.createTracker(info)\r\n  let value = tracker.move('![')\r\n  const alt = state.safe(node.alt, {\r\n    before: value,\r\n    after: ']',\r\n    ...tracker.current()\r\n  })\r\n  value += tracker.move(alt + '][')\r\n\r\n  subexit()\r\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\r\n  const stack = state.stack\r\n  state.stack = []\r\n  subexit = state.enter('reference')\r\n  // Note: for proper tracking, we should reset the output positions when we end\r\n  // up making a `shortcut` reference, because then there is no brace output.\r\n  // Practically, in that case, there is no content, so it doesn’t matter that\r\n  // we’ve tracked one too many characters.\r\n  const reference = state.safe(state.associationId(node), {\r\n    before: value,\r\n    after: ']',\r\n    ...tracker.current()\r\n  })\r\n  subexit()\r\n  state.stack = stack\r\n  exit()\r\n\r\n  if (type === 'full' || !alt || alt !== reference) {\r\n    value += tracker.move(reference + ']')\r\n  } else if (type === 'shortcut') {\r\n    // Remove the unwanted `[`.\r\n    value = value.slice(0, -1)\r\n  } else {\r\n    value += tracker.move(']')\r\n  }\r\n\r\n  return value\r\n}\r\n\r\n/**\r\n * @returns {string}\r\n */\r\nfunction imageReferencePeek() {\r\n  return '!'\r\n}\r\n","/**\r\n * @import {State} from 'mdast-util-to-markdown'\r\n * @import {InlineCode, Parents} from 'mdast'\r\n */\r\n\r\ninlineCode.peek = inlineCodePeek\r\n\r\n/**\r\n * @param {InlineCode} node\r\n * @param {Parents | undefined} _\r\n * @param {State} state\r\n * @returns {string}\r\n */\r\nexport function inlineCode(node, _, state) {\r\n  let value = node.value || ''\r\n  let sequence = '`'\r\n  let index = -1\r\n\r\n  // If there is a single grave accent on its own in the code, use a fence of\r\n  // two.\r\n  // If there are two in a row, use one.\r\n  while (new RegExp('(^|[^`])' + sequence + '([^`]|$)').test(value)) {\r\n    sequence += '`'\r\n  }\r\n\r\n  // If this is not just spaces or eols (tabs don’t count), and either the\r\n  // first or last character are a space, eol, or tick, then pad with spaces.\r\n  if (\r\n    /[^ \\r\\n]/.test(value) &&\r\n    ((/^[ \\r\\n]/.test(value) && /[ \\r\\n]$/.test(value)) || /^`|`$/.test(value))\r\n  ) {\r\n    value = ' ' + value + ' '\r\n  }\r\n\r\n  // We have a potential problem: certain characters after eols could result in\r\n  // blocks being seen.\r\n  // For example, if someone injected the string `'\\n# b'`, then that would\r\n  // result in an ATX heading.\r\n  // We can’t escape characters in `inlineCode`, but because eols are\r\n  // transformed to spaces when going from markdown to HTML anyway, we can swap\r\n  // them out.\r\n  while (++index < state.unsafe.length) {\r\n    const pattern = state.unsafe[index]\r\n    const expression = state.compilePattern(pattern)\r\n    /** @type {RegExpExecArray | null} */\r\n    let match\r\n\r\n    // Only look for `atBreak`s.\r\n    // Btw: note that `atBreak` patterns will always start the regex at LF or\r\n    // CR.\r\n    if (!pattern.atBreak) continue\r\n\r\n    while ((match = expression.exec(value))) {\r\n      let position = match.index\r\n\r\n      // Support CRLF (patterns only look for one of the characters).\r\n      if (\r\n        value.charCodeAt(position) === 10 /* `\\n` */ &&\r\n        value.charCodeAt(position - 1) === 13 /* `\\r` */\r\n      ) {\r\n        position--\r\n      }\r\n\r\n      value = value.slice(0, position) + ' ' + value.slice(match.index + 1)\r\n    }\r\n  }\r\n\r\n  return sequence + value + sequence\r\n}\r\n\r\n/**\r\n * @returns {string}\r\n */\r\nfunction inlineCodePeek() {\r\n  return '`'\r\n}\r\n","/**\r\n * @import {State} from 'mdast-util-to-markdown'\r\n * @import {Link} from 'mdast'\r\n */\r\n\r\nimport {toString} from 'mdast-util-to-string'\r\n\r\n/**\r\n * @param {Link} node\r\n * @param {State} state\r\n * @returns {boolean}\r\n */\r\nexport function formatLinkAsAutolink(node, state) {\r\n  const raw = toString(node)\r\n\r\n  return Boolean(\r\n    !state.options.resourceLink &&\r\n      // If there’s a url…\r\n      node.url &&\r\n      // And there’s a no title…\r\n      !node.title &&\r\n      // And the content of `node` is a single text node…\r\n      node.children &&\r\n      node.children.length === 1 &&\r\n      node.children[0].type === 'text' &&\r\n      // And if the url is the same as the content…\r\n      (raw === node.url || 'mailto:' + raw === node.url) &&\r\n      // And that starts w/ a protocol…\r\n      /^[a-z][a-z+.-]+:/i.test(node.url) &&\r\n      // And that doesn’t contain ASCII control codes (character escapes and\r\n      // references don’t work), space, or angle brackets…\r\n      !/[\\0- <>\\u007F]/.test(node.url)\r\n  )\r\n}\r\n","/**\r\n * @import {Info, State} from 'mdast-util-to-markdown'\r\n * @import {Link, Parents} from 'mdast'\r\n * @import {Exit} from '../types.js'\r\n */\r\n\r\nimport {checkQuote} from '../util/check-quote.js'\r\nimport {formatLinkAsAutolink} from '../util/format-link-as-autolink.js'\r\n\r\nlink.peek = linkPeek\r\n\r\n/**\r\n * @param {Link} node\r\n * @param {Parents | undefined} _\r\n * @param {State} state\r\n * @param {Info} info\r\n * @returns {string}\r\n */\r\nexport function link(node, _, state, info) {\r\n  const quote = checkQuote(state)\r\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\r\n  const tracker = state.createTracker(info)\r\n  /** @type {Exit} */\r\n  let exit\r\n  /** @type {Exit} */\r\n  let subexit\r\n\r\n  if (formatLinkAsAutolink(node, state)) {\r\n    // Hide the fact that we’re in phrasing, because escapes don’t work.\r\n    const stack = state.stack\r\n    state.stack = []\r\n    exit = state.enter('autolink')\r\n    let value = tracker.move('<')\r\n    value += tracker.move(\r\n      state.containerPhrasing(node, {\r\n        before: value,\r\n        after: '>',\r\n        ...tracker.current()\r\n      })\r\n    )\r\n    value += tracker.move('>')\r\n    exit()\r\n    state.stack = stack\r\n    return value\r\n  }\r\n\r\n  exit = state.enter('link')\r\n  subexit = state.enter('label')\r\n  let value = tracker.move('[')\r\n  value += tracker.move(\r\n    state.containerPhrasing(node, {\r\n      before: value,\r\n      after: '](',\r\n      ...tracker.current()\r\n    })\r\n  )\r\n  value += tracker.move('](')\r\n  subexit()\r\n\r\n  if (\r\n    // If there’s no url but there is a title…\r\n    (!node.url && node.title) ||\r\n    // If there are control characters or whitespace.\r\n    /[\\0- \\u007F]/.test(node.url)\r\n  ) {\r\n    subexit = state.enter('destinationLiteral')\r\n    value += tracker.move('<')\r\n    value += tracker.move(\r\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\r\n    )\r\n    value += tracker.move('>')\r\n  } else {\r\n    // No whitespace, raw is prettier.\r\n    subexit = state.enter('destinationRaw')\r\n    value += tracker.move(\r\n      state.safe(node.url, {\r\n        before: value,\r\n        after: node.title ? ' ' : ')',\r\n        ...tracker.current()\r\n      })\r\n    )\r\n  }\r\n\r\n  subexit()\r\n\r\n  if (node.title) {\r\n    subexit = state.enter(`title${suffix}`)\r\n    value += tracker.move(' ' + quote)\r\n    value += tracker.move(\r\n      state.safe(node.title, {\r\n        before: value,\r\n        after: quote,\r\n        ...tracker.current()\r\n      })\r\n    )\r\n    value += tracker.move(quote)\r\n    subexit()\r\n  }\r\n\r\n  value += tracker.move(')')\r\n\r\n  exit()\r\n  return value\r\n}\r\n\r\n/**\r\n * @param {Link} node\r\n * @param {Parents | undefined} _\r\n * @param {State} state\r\n * @returns {string}\r\n */\r\nfunction linkPeek(node, _, state) {\r\n  return formatLinkAsAutolink(node, state) ? '<' : '['\r\n}\r\n","/**\r\n * @import {Info, State} from 'mdast-util-to-markdown'\r\n * @import {LinkReference, Parents} from 'mdast'\r\n */\r\n\r\nlinkReference.peek = linkReferencePeek\r\n\r\n/**\r\n * @param {LinkReference} node\r\n * @param {Parents | undefined} _\r\n * @param {State} state\r\n * @param {Info} info\r\n * @returns {string}\r\n */\r\nexport function linkReference(node, _, state, info) {\r\n  const type = node.referenceType\r\n  const exit = state.enter('linkReference')\r\n  let subexit = state.enter('label')\r\n  const tracker = state.createTracker(info)\r\n  let value = tracker.move('[')\r\n  const text = state.containerPhrasing(node, {\r\n    before: value,\r\n    after: ']',\r\n    ...tracker.current()\r\n  })\r\n  value += tracker.move(text + '][')\r\n\r\n  subexit()\r\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\r\n  const stack = state.stack\r\n  state.stack = []\r\n  subexit = state.enter('reference')\r\n  // Note: for proper tracking, we should reset the output positions when we end\r\n  // up making a `shortcut` reference, because then there is no brace output.\r\n  // Practically, in that case, there is no content, so it doesn’t matter that\r\n  // we’ve tracked one too many characters.\r\n  const reference = state.safe(state.associationId(node), {\r\n    before: value,\r\n    after: ']',\r\n    ...tracker.current()\r\n  })\r\n  subexit()\r\n  state.stack = stack\r\n  exit()\r\n\r\n  if (type === 'full' || !text || text !== reference) {\r\n    value += tracker.move(reference + ']')\r\n  } else if (type === 'shortcut') {\r\n    // Remove the unwanted `[`.\r\n    value = value.slice(0, -1)\r\n  } else {\r\n    value += tracker.move(']')\r\n  }\r\n\r\n  return value\r\n}\r\n\r\n/**\r\n * @returns {string}\r\n */\r\nfunction linkReferencePeek() {\r\n  return '['\r\n}\r\n","/**\r\n * @import {Options, State} from 'mdast-util-to-markdown'\r\n */\r\n\r\n/**\r\n * @param {State} state\r\n * @returns {Exclude<Options['bullet'], null | undefined>}\r\n */\r\nexport function checkBullet(state) {\r\n  const marker = state.options.bullet || '*'\r\n\r\n  if (marker !== '*' && marker !== '+' && marker !== '-') {\r\n    throw new Error(\r\n      'Cannot serialize items with `' +\r\n        marker +\r\n        '` for `options.bullet`, expected `*`, `+`, or `-`'\r\n    )\r\n  }\r\n\r\n  return marker\r\n}\r\n","/**\r\n * @import {Options, State} from 'mdast-util-to-markdown'\r\n */\r\n\r\nimport {checkBullet} from './check-bullet.js'\r\n\r\n/**\r\n * @param {State} state\r\n * @returns {Exclude<Options['bullet'], null | undefined>}\r\n */\r\nexport function checkBulletOther(state) {\r\n  const bullet = checkBullet(state)\r\n  const bulletOther = state.options.bulletOther\r\n\r\n  if (!bulletOther) {\r\n    return bullet === '*' ? '-' : '*'\r\n  }\r\n\r\n  if (bulletOther !== '*' && bulletOther !== '+' && bulletOther !== '-') {\r\n    throw new Error(\r\n      'Cannot serialize items with `' +\r\n        bulletOther +\r\n        '` for `options.bulletOther`, expected `*`, `+`, or `-`'\r\n    )\r\n  }\r\n\r\n  if (bulletOther === bullet) {\r\n    throw new Error(\r\n      'Expected `bullet` (`' +\r\n        bullet +\r\n        '`) and `bulletOther` (`' +\r\n        bulletOther +\r\n        '`) to be different'\r\n    )\r\n  }\r\n\r\n  return bulletOther\r\n}\r\n","/**\r\n * @import {Options, State} from 'mdast-util-to-markdown'\r\n */\r\n\r\n/**\r\n * @param {State} state\r\n * @returns {Exclude<Options['bulletOrdered'], null | undefined>}\r\n */\r\nexport function checkBulletOrdered(state) {\r\n  const marker = state.options.bulletOrdered || '.'\r\n\r\n  if (marker !== '.' && marker !== ')') {\r\n    throw new Error(\r\n      'Cannot serialize items with `' +\r\n        marker +\r\n        '` for `options.bulletOrdered`, expected `.` or `)`'\r\n    )\r\n  }\r\n\r\n  return marker\r\n}\r\n","/**\r\n * @import {Options, State} from 'mdast-util-to-markdown'\r\n */\r\n\r\n/**\r\n * @param {State} state\r\n * @returns {Exclude<Options['rule'], null | undefined>}\r\n */\r\nexport function checkRule(state) {\r\n  const marker = state.options.rule || '*'\r\n\r\n  if (marker !== '*' && marker !== '-' && marker !== '_') {\r\n    throw new Error(\r\n      'Cannot serialize rules with `' +\r\n        marker +\r\n        '` for `options.rule`, expected `*`, `-`, or `_`'\r\n    )\r\n  }\r\n\r\n  return marker\r\n}\r\n","/**\r\n * @import {Info, State} from 'mdast-util-to-markdown'\r\n * @import {List, Parents} from 'mdast'\r\n */\r\n\r\nimport {checkBullet} from '../util/check-bullet.js'\r\nimport {checkBulletOther} from '../util/check-bullet-other.js'\r\nimport {checkBulletOrdered} from '../util/check-bullet-ordered.js'\r\nimport {checkRule} from '../util/check-rule.js'\r\n\r\n/**\r\n * @param {List} node\r\n * @param {Parents | undefined} parent\r\n * @param {State} state\r\n * @param {Info} info\r\n * @returns {string}\r\n */\r\nexport function list(node, parent, state, info) {\r\n  const exit = state.enter('list')\r\n  const bulletCurrent = state.bulletCurrent\r\n  /** @type {string} */\r\n  let bullet = node.ordered ? checkBulletOrdered(state) : checkBullet(state)\r\n  /** @type {string} */\r\n  const bulletOther = node.ordered\r\n    ? bullet === '.'\r\n      ? ')'\r\n      : '.'\r\n    : checkBulletOther(state)\r\n  let useDifferentMarker =\r\n    parent && state.bulletLastUsed ? bullet === state.bulletLastUsed : false\r\n\r\n  if (!node.ordered) {\r\n    const firstListItem = node.children ? node.children[0] : undefined\r\n\r\n    // If there’s an empty first list item directly in two list items,\r\n    // we have to use a different bullet:\r\n    //\r\n    // ```markdown\r\n    // * - *\r\n    // ```\r\n    //\r\n    // …because otherwise it would become one big thematic break.\r\n    if (\r\n      // Bullet could be used as a thematic break marker:\r\n      (bullet === '*' || bullet === '-') &&\r\n      // Empty first list item:\r\n      firstListItem &&\r\n      (!firstListItem.children || !firstListItem.children[0]) &&\r\n      // Directly in two other list items:\r\n      state.stack[state.stack.length - 1] === 'list' &&\r\n      state.stack[state.stack.length - 2] === 'listItem' &&\r\n      state.stack[state.stack.length - 3] === 'list' &&\r\n      state.stack[state.stack.length - 4] === 'listItem' &&\r\n      // That are each the first child.\r\n      state.indexStack[state.indexStack.length - 1] === 0 &&\r\n      state.indexStack[state.indexStack.length - 2] === 0 &&\r\n      state.indexStack[state.indexStack.length - 3] === 0\r\n    ) {\r\n      useDifferentMarker = true\r\n    }\r\n\r\n    // If there’s a thematic break at the start of the first list item,\r\n    // we have to use a different bullet:\r\n    //\r\n    // ```markdown\r\n    // * ---\r\n    // ```\r\n    //\r\n    // …because otherwise it would become one big thematic break.\r\n    if (checkRule(state) === bullet && firstListItem) {\r\n      let index = -1\r\n\r\n      while (++index < node.children.length) {\r\n        const item = node.children[index]\r\n\r\n        if (\r\n          item &&\r\n          item.type === 'listItem' &&\r\n          item.children &&\r\n          item.children[0] &&\r\n          item.children[0].type === 'thematicBreak'\r\n        ) {\r\n          useDifferentMarker = true\r\n          break\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  if (useDifferentMarker) {\r\n    bullet = bulletOther\r\n  }\r\n\r\n  state.bulletCurrent = bullet\r\n  const value = state.containerFlow(node, info)\r\n  state.bulletLastUsed = bullet\r\n  state.bulletCurrent = bulletCurrent\r\n  exit()\r\n  return value\r\n}\r\n","/**\r\n * @import {Options, State} from 'mdast-util-to-markdown'\r\n */\r\n\r\n/**\r\n * @param {State} state\r\n * @returns {Exclude<Options['listItemIndent'], null | undefined>}\r\n */\r\nexport function checkListItemIndent(state) {\r\n  const style = state.options.listItemIndent || 'one'\r\n\r\n  if (style !== 'tab' && style !== 'one' && style !== 'mixed') {\r\n    throw new Error(\r\n      'Cannot serialize items with `' +\r\n        style +\r\n        '` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`'\r\n    )\r\n  }\r\n\r\n  return style\r\n}\r\n","/**\r\n * @import {Info, Map, State} from 'mdast-util-to-markdown'\r\n * @import {ListItem, Parents} from 'mdast'\r\n */\r\n\r\nimport {checkBullet} from '../util/check-bullet.js'\r\nimport {checkListItemIndent} from '../util/check-list-item-indent.js'\r\n\r\n/**\r\n * @param {ListItem} node\r\n * @param {Parents | undefined} parent\r\n * @param {State} state\r\n * @param {Info} info\r\n * @returns {string}\r\n */\r\nexport function listItem(node, parent, state, info) {\r\n  const listItemIndent = checkListItemIndent(state)\r\n  let bullet = state.bulletCurrent || checkBullet(state)\r\n\r\n  // Add the marker value for ordered lists.\r\n  if (parent && parent.type === 'list' && parent.ordered) {\r\n    bullet =\r\n      (typeof parent.start === 'number' && parent.start > -1\r\n        ? parent.start\r\n        : 1) +\r\n      (state.options.incrementListMarker === false\r\n        ? 0\r\n        : parent.children.indexOf(node)) +\r\n      bullet\r\n  }\r\n\r\n  let size = bullet.length + 1\r\n\r\n  if (\r\n    listItemIndent === 'tab' ||\r\n    (listItemIndent === 'mixed' &&\r\n      ((parent && parent.type === 'list' && parent.spread) || node.spread))\r\n  ) {\r\n    size = Math.ceil(size / 4) * 4\r\n  }\r\n\r\n  const tracker = state.createTracker(info)\r\n  tracker.move(bullet + ' '.repeat(size - bullet.length))\r\n  tracker.shift(size)\r\n  const exit = state.enter('listItem')\r\n  const value = state.indentLines(\r\n    state.containerFlow(node, tracker.current()),\r\n    map\r\n  )\r\n  exit()\r\n\r\n  return value\r\n\r\n  /** @type {Map} */\r\n  function map(line, index, blank) {\r\n    if (index) {\r\n      return (blank ? '' : ' '.repeat(size)) + line\r\n    }\r\n\r\n    return (blank ? bullet : bullet + ' '.repeat(size - bullet.length)) + line\r\n  }\r\n}\r\n","/**\r\n * @import {Info, State} from 'mdast-util-to-markdown'\r\n * @import {Paragraph, Parents} from 'mdast'\r\n */\r\n\r\n/**\r\n * @param {Paragraph} node\r\n * @param {Parents | undefined} _\r\n * @param {State} state\r\n * @param {Info} info\r\n * @returns {string}\r\n */\r\nexport function paragraph(node, _, state, info) {\r\n  const exit = state.enter('paragraph')\r\n  const subexit = state.enter('phrasing')\r\n  const value = state.containerPhrasing(node, info)\r\n  subexit()\r\n  exit()\r\n  return value\r\n}\r\n","/**\r\n * @typedef {import('mdast').Html} Html\r\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\r\n */\r\n\r\nimport {convert} from 'unist-util-is'\r\n\r\n/**\r\n * Check if the given value is *phrasing content*.\r\n *\r\n * > 👉 **Note**: Excludes `html`, which can be both phrasing or flow.\r\n *\r\n * @param node\r\n *   Thing to check, typically `Node`.\r\n * @returns\r\n *   Whether `value` is phrasing content.\r\n */\r\n\r\nexport const phrasing =\r\n  /** @type {(node?: unknown) => node is Exclude<PhrasingContent, Html>} */\r\n  (\r\n    convert([\r\n      'break',\r\n      'delete',\r\n      'emphasis',\r\n      // To do: next major: removed since footnotes were added to GFM.\r\n      'footnote',\r\n      'footnoteReference',\r\n      'image',\r\n      'imageReference',\r\n      'inlineCode',\r\n      // Enabled by `mdast-util-math`:\r\n      'inlineMath',\r\n      'link',\r\n      'linkReference',\r\n      // Enabled by `mdast-util-mdx`:\r\n      'mdxJsxTextElement',\r\n      // Enabled by `mdast-util-mdx`:\r\n      'mdxTextExpression',\r\n      'strong',\r\n      'text',\r\n      // Enabled by `mdast-util-directive`:\r\n      'textDirective'\r\n    ])\r\n  )\r\n","/**\r\n * @import {Info, State} from 'mdast-util-to-markdown'\r\n * @import {Parents, Root} from 'mdast'\r\n */\r\n\r\nimport {phrasing} from 'mdast-util-phrasing'\r\n\r\n/**\r\n * @param {Root} node\r\n * @param {Parents | undefined} _\r\n * @param {State} state\r\n * @param {Info} info\r\n * @returns {string}\r\n */\r\nexport function root(node, _, state, info) {\r\n  // Note: `html` nodes are ambiguous.\r\n  const hasPhrasing = node.children.some(function (d) {\r\n    return phrasing(d)\r\n  })\r\n\r\n  const container = hasPhrasing ? state.containerPhrasing : state.containerFlow\r\n  return container.call(state, node, info)\r\n}\r\n","/**\r\n * @import {Options, State} from 'mdast-util-to-markdown'\r\n */\r\n\r\n/**\r\n * @param {State} state\r\n * @returns {Exclude<Options['strong'], null | undefined>}\r\n */\r\nexport function checkStrong(state) {\r\n  const marker = state.options.strong || '*'\r\n\r\n  if (marker !== '*' && marker !== '_') {\r\n    throw new Error(\r\n      'Cannot serialize strong with `' +\r\n        marker +\r\n        '` for `options.strong`, expected `*`, or `_`'\r\n    )\r\n  }\r\n\r\n  return marker\r\n}\r\n","/**\r\n * @import {Info, State} from 'mdast-util-to-markdown'\r\n * @import {Parents, Strong} from 'mdast'\r\n */\r\n\r\nimport {checkStrong} from '../util/check-strong.js'\r\nimport {encodeCharacterReference} from '../util/encode-character-reference.js'\r\nimport {encodeInfo} from '../util/encode-info.js'\r\n\r\nstrong.peek = strongPeek\r\n\r\n/**\r\n * @param {Strong} node\r\n * @param {Parents | undefined} _\r\n * @param {State} state\r\n * @param {Info} info\r\n * @returns {string}\r\n */\r\nexport function strong(node, _, state, info) {\r\n  const marker = checkStrong(state)\r\n  const exit = state.enter('strong')\r\n  const tracker = state.createTracker(info)\r\n  const before = tracker.move(marker + marker)\r\n\r\n  let between = tracker.move(\r\n    state.containerPhrasing(node, {\r\n      after: marker,\r\n      before,\r\n      ...tracker.current()\r\n    })\r\n  )\r\n  const betweenHead = between.charCodeAt(0)\r\n  const open = encodeInfo(\r\n    info.before.charCodeAt(info.before.length - 1),\r\n    betweenHead,\r\n    marker\r\n  )\r\n\r\n  if (open.inside) {\r\n    between = encodeCharacterReference(betweenHead) + between.slice(1)\r\n  }\r\n\r\n  const betweenTail = between.charCodeAt(between.length - 1)\r\n  const close = encodeInfo(info.after.charCodeAt(0), betweenTail, marker)\r\n\r\n  if (close.inside) {\r\n    between = between.slice(0, -1) + encodeCharacterReference(betweenTail)\r\n  }\r\n\r\n  const after = tracker.move(marker + marker)\r\n\r\n  exit()\r\n\r\n  state.attentionEncodeSurroundingInfo = {\r\n    after: close.outside,\r\n    before: open.outside\r\n  }\r\n  return before + between + after\r\n}\r\n\r\n/**\r\n * @param {Strong} _\r\n * @param {Parents | undefined} _1\r\n * @param {State} state\r\n * @returns {string}\r\n */\r\nfunction strongPeek(_, _1, state) {\r\n  return state.options.strong || '*'\r\n}\r\n","/**\r\n * @import {Info, State} from 'mdast-util-to-markdown'\r\n * @import {Parents, Text} from 'mdast'\r\n */\r\n\r\n/**\r\n * @param {Text} node\r\n * @param {Parents | undefined} _\r\n * @param {State} state\r\n * @param {Info} info\r\n * @returns {string}\r\n */\r\nexport function text(node, _, state, info) {\r\n  return state.safe(node.value, info)\r\n}\r\n","/**\r\n * @import {Options, State} from 'mdast-util-to-markdown'\r\n */\r\n\r\n/**\r\n * @param {State} state\r\n * @returns {Exclude<Options['ruleRepetition'], null | undefined>}\r\n */\r\nexport function checkRuleRepetition(state) {\r\n  const repetition = state.options.ruleRepetition || 3\r\n\r\n  if (repetition < 3) {\r\n    throw new Error(\r\n      'Cannot serialize rules with repetition `' +\r\n        repetition +\r\n        '` for `options.ruleRepetition`, expected `3` or more'\r\n    )\r\n  }\r\n\r\n  return repetition\r\n}\r\n","/**\r\n * @import {State} from 'mdast-util-to-markdown'\r\n * @import {Parents, ThematicBreak} from 'mdast'\r\n */\r\n\r\nimport {checkRuleRepetition} from '../util/check-rule-repetition.js'\r\nimport {checkRule} from '../util/check-rule.js'\r\n\r\n/**\r\n * @param {ThematicBreak} _\r\n * @param {Parents | undefined} _1\r\n * @param {State} state\r\n * @returns {string}\r\n */\r\nexport function thematicBreak(_, _1, state) {\r\n  const value = (\r\n    checkRule(state) + (state.options.ruleSpaces ? ' ' : '')\r\n  ).repeat(checkRuleRepetition(state))\r\n\r\n  return state.options.ruleSpaces ? value.slice(0, -1) : value\r\n}\r\n","import {blockquote} from './blockquote.js'\r\nimport {hardBreak} from './break.js'\r\nimport {code} from './code.js'\r\nimport {definition} from './definition.js'\r\nimport {emphasis} from './emphasis.js'\r\nimport {heading} from './heading.js'\r\nimport {html} from './html.js'\r\nimport {image} from './image.js'\r\nimport {imageReference} from './image-reference.js'\r\nimport {inlineCode} from './inline-code.js'\r\nimport {link} from './link.js'\r\nimport {linkReference} from './link-reference.js'\r\nimport {list} from './list.js'\r\nimport {listItem} from './list-item.js'\r\nimport {paragraph} from './paragraph.js'\r\nimport {root} from './root.js'\r\nimport {strong} from './strong.js'\r\nimport {text} from './text.js'\r\nimport {thematicBreak} from './thematic-break.js'\r\n\r\n/**\r\n * Default (CommonMark) handlers.\r\n */\r\nexport const handle = {\r\n  blockquote,\r\n  break: hardBreak,\r\n  code,\r\n  definition,\r\n  emphasis,\r\n  hardBreak,\r\n  heading,\r\n  html,\r\n  image,\r\n  imageReference,\r\n  inlineCode,\r\n  link,\r\n  linkReference,\r\n  list,\r\n  listItem,\r\n  paragraph,\r\n  root,\r\n  strong,\r\n  text,\r\n  thematicBreak\r\n}\r\n","/**\r\n * @typedef {import('mdast').InlineCode} InlineCode\r\n * @typedef {import('mdast').Table} Table\r\n * @typedef {import('mdast').TableCell} TableCell\r\n * @typedef {import('mdast').TableRow} TableRow\r\n *\r\n * @typedef {import('markdown-table').Options} MarkdownTableOptions\r\n *\r\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\r\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\r\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\r\n *\r\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\r\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\r\n * @typedef {import('mdast-util-to-markdown').State} State\r\n * @typedef {import('mdast-util-to-markdown').Info} Info\r\n */\r\n\r\n/**\r\n * @typedef Options\r\n *   Configuration.\r\n * @property {boolean | null | undefined} [tableCellPadding=true]\r\n *   Whether to add a space of padding between delimiters and cells (default:\r\n *   `true`).\r\n * @property {boolean | null | undefined} [tablePipeAlign=true]\r\n *   Whether to align the delimiters (default: `true`).\r\n * @property {MarkdownTableOptions['stringLength'] | null | undefined} [stringLength]\r\n *   Function to detect the length of table cell content, used when aligning\r\n *   the delimiters between cells (optional).\r\n */\r\n\r\nimport {ok as assert} from 'devlop'\r\nimport {markdownTable} from 'markdown-table'\r\nimport {defaultHandlers} from 'mdast-util-to-markdown'\r\n\r\n/**\r\n * Create an extension for `mdast-util-from-markdown` to enable GFM tables in\r\n * markdown.\r\n *\r\n * @returns {FromMarkdownExtension}\r\n *   Extension for `mdast-util-from-markdown` to enable GFM tables.\r\n */\r\nexport function gfmTableFromMarkdown() {\r\n  return {\r\n    enter: {\r\n      table: enterTable,\r\n      tableData: enterCell,\r\n      tableHeader: enterCell,\r\n      tableRow: enterRow\r\n    },\r\n    exit: {\r\n      codeText: exitCodeText,\r\n      table: exitTable,\r\n      tableData: exit,\r\n      tableHeader: exit,\r\n      tableRow: exit\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @this {CompileContext}\r\n * @type {FromMarkdownHandle}\r\n */\r\nfunction enterTable(token) {\r\n  const align = token._align\r\n  assert(align, 'expected `_align` on table')\r\n  this.enter(\r\n    {\r\n      type: 'table',\r\n      align: align.map(function (d) {\r\n        return d === 'none' ? null : d\r\n      }),\r\n      children: []\r\n    },\r\n    token\r\n  )\r\n  this.data.inTable = true\r\n}\r\n\r\n/**\r\n * @this {CompileContext}\r\n * @type {FromMarkdownHandle}\r\n */\r\nfunction exitTable(token) {\r\n  this.exit(token)\r\n  this.data.inTable = undefined\r\n}\r\n\r\n/**\r\n * @this {CompileContext}\r\n * @type {FromMarkdownHandle}\r\n */\r\nfunction enterRow(token) {\r\n  this.enter({type: 'tableRow', children: []}, token)\r\n}\r\n\r\n/**\r\n * @this {CompileContext}\r\n * @type {FromMarkdownHandle}\r\n */\r\nfunction exit(token) {\r\n  this.exit(token)\r\n}\r\n\r\n/**\r\n * @this {CompileContext}\r\n * @type {FromMarkdownHandle}\r\n */\r\nfunction enterCell(token) {\r\n  this.enter({type: 'tableCell', children: []}, token)\r\n}\r\n\r\n// Overwrite the default code text data handler to unescape escaped pipes when\r\n// they are in tables.\r\n/**\r\n * @this {CompileContext}\r\n * @type {FromMarkdownHandle}\r\n */\r\nfunction exitCodeText(token) {\r\n  let value = this.resume()\r\n\r\n  if (this.data.inTable) {\r\n    value = value.replace(/\\\\([\\\\|])/g, replace)\r\n  }\r\n\r\n  const node = this.stack[this.stack.length - 1]\r\n  assert(node.type === 'inlineCode')\r\n  node.value = value\r\n  this.exit(token)\r\n}\r\n\r\n/**\r\n * @param {string} $0\r\n * @param {string} $1\r\n * @returns {string}\r\n */\r\nfunction replace($0, $1) {\r\n  // Pipes work, backslashes don’t (but can’t escape pipes).\r\n  return $1 === '|' ? $1 : $0\r\n}\r\n\r\n/**\r\n * Create an extension for `mdast-util-to-markdown` to enable GFM tables in\r\n * markdown.\r\n *\r\n * @param {Options | null | undefined} [options]\r\n *   Configuration.\r\n * @returns {ToMarkdownExtension}\r\n *   Extension for `mdast-util-to-markdown` to enable GFM tables.\r\n */\r\nexport function gfmTableToMarkdown(options) {\r\n  const settings = options || {}\r\n  const padding = settings.tableCellPadding\r\n  const alignDelimiters = settings.tablePipeAlign\r\n  const stringLength = settings.stringLength\r\n  const around = padding ? ' ' : '|'\r\n\r\n  return {\r\n    unsafe: [\r\n      {character: '\\r', inConstruct: 'tableCell'},\r\n      {character: '\\n', inConstruct: 'tableCell'},\r\n      // A pipe, when followed by a tab or space (padding), or a dash or colon\r\n      // (unpadded delimiter row), could result in a table.\r\n      {atBreak: true, character: '|', after: '[\\t :-]'},\r\n      // A pipe in a cell must be encoded.\r\n      {character: '|', inConstruct: 'tableCell'},\r\n      // A colon must be followed by a dash, in which case it could start a\r\n      // delimiter row.\r\n      {atBreak: true, character: ':', after: '-'},\r\n      // A delimiter row can also start with a dash, when followed by more\r\n      // dashes, a colon, or a pipe.\r\n      // This is a stricter version than the built in check for lists, thematic\r\n      // breaks, and setex heading underlines though:\r\n      // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>\r\n      {atBreak: true, character: '-', after: '[:|-]'}\r\n    ],\r\n    handlers: {\r\n      inlineCode: inlineCodeWithTable,\r\n      table: handleTable,\r\n      tableCell: handleTableCell,\r\n      tableRow: handleTableRow\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @type {ToMarkdownHandle}\r\n   * @param {Table} node\r\n   */\r\n  function handleTable(node, _, state, info) {\r\n    return serializeData(handleTableAsData(node, state, info), node.align)\r\n  }\r\n\r\n  /**\r\n   * This function isn’t really used normally, because we handle rows at the\r\n   * table level.\r\n   * But, if someone passes in a table row, this ensures we make somewhat sense.\r\n   *\r\n   * @type {ToMarkdownHandle}\r\n   * @param {TableRow} node\r\n   */\r\n  function handleTableRow(node, _, state, info) {\r\n    const row = handleTableRowAsData(node, state, info)\r\n    const value = serializeData([row])\r\n    // `markdown-table` will always add an align row\r\n    return value.slice(0, value.indexOf('\\n'))\r\n  }\r\n\r\n  /**\r\n   * @type {ToMarkdownHandle}\r\n   * @param {TableCell} node\r\n   */\r\n  function handleTableCell(node, _, state, info) {\r\n    const exit = state.enter('tableCell')\r\n    const subexit = state.enter('phrasing')\r\n    const value = state.containerPhrasing(node, {\r\n      ...info,\r\n      before: around,\r\n      after: around\r\n    })\r\n    subexit()\r\n    exit()\r\n    return value\r\n  }\r\n\r\n  /**\r\n   * @param {Array<Array<string>>} matrix\r\n   * @param {Array<string | null | undefined> | null | undefined} [align]\r\n   */\r\n  function serializeData(matrix, align) {\r\n    return markdownTable(matrix, {\r\n      align,\r\n      // @ts-expect-error: `markdown-table` types should support `null`.\r\n      alignDelimiters,\r\n      // @ts-expect-error: `markdown-table` types should support `null`.\r\n      padding,\r\n      // @ts-expect-error: `markdown-table` types should support `null`.\r\n      stringLength\r\n    })\r\n  }\r\n\r\n  /**\r\n   * @param {Table} node\r\n   * @param {State} state\r\n   * @param {Info} info\r\n   */\r\n  function handleTableAsData(node, state, info) {\r\n    const children = node.children\r\n    let index = -1\r\n    /** @type {Array<Array<string>>} */\r\n    const result = []\r\n    const subexit = state.enter('table')\r\n\r\n    while (++index < children.length) {\r\n      result[index] = handleTableRowAsData(children[index], state, info)\r\n    }\r\n\r\n    subexit()\r\n\r\n    return result\r\n  }\r\n\r\n  /**\r\n   * @param {TableRow} node\r\n   * @param {State} state\r\n   * @param {Info} info\r\n   */\r\n  function handleTableRowAsData(node, state, info) {\r\n    const children = node.children\r\n    let index = -1\r\n    /** @type {Array<string>} */\r\n    const result = []\r\n    const subexit = state.enter('tableRow')\r\n\r\n    while (++index < children.length) {\r\n      // Note: the positional info as used here is incorrect.\r\n      // Making it correct would be impossible due to aligning cells?\r\n      // And it would need copy/pasting `markdown-table` into this project.\r\n      result[index] = handleTableCell(children[index], node, state, info)\r\n    }\r\n\r\n    subexit()\r\n\r\n    return result\r\n  }\r\n\r\n  /**\r\n   * @type {ToMarkdownHandle}\r\n   * @param {InlineCode} node\r\n   */\r\n  function inlineCodeWithTable(node, parent, state) {\r\n    let value = defaultHandlers.inlineCode(node, parent, state)\r\n\r\n    if (state.stack.includes('tableCell')) {\r\n      value = value.replace(/\\|/g, '\\\\$&')\r\n    }\r\n\r\n    return value\r\n  }\r\n}\r\n","/**\r\n * @typedef {import('mdast').ListItem} ListItem\r\n * @typedef {import('mdast').Paragraph} Paragraph\r\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\r\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\r\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\r\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\r\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\r\n */\r\n\r\nimport {ok as assert} from 'devlop'\r\nimport {defaultHandlers} from 'mdast-util-to-markdown'\r\n\r\n/**\r\n * Create an extension for `mdast-util-from-markdown` to enable GFM task\r\n * list items in markdown.\r\n *\r\n * @returns {FromMarkdownExtension}\r\n *   Extension for `mdast-util-from-markdown` to enable GFM task list items.\r\n */\r\nexport function gfmTaskListItemFromMarkdown() {\r\n  return {\r\n    exit: {\r\n      taskListCheckValueChecked: exitCheck,\r\n      taskListCheckValueUnchecked: exitCheck,\r\n      paragraph: exitParagraphWithTaskListItem\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Create an extension for `mdast-util-to-markdown` to enable GFM task list\r\n * items in markdown.\r\n *\r\n * @returns {ToMarkdownExtension}\r\n *   Extension for `mdast-util-to-markdown` to enable GFM task list items.\r\n */\r\nexport function gfmTaskListItemToMarkdown() {\r\n  return {\r\n    unsafe: [{atBreak: true, character: '-', after: '[:|-]'}],\r\n    handlers: {listItem: listItemWithTaskListItem}\r\n  }\r\n}\r\n\r\n/**\r\n * @this {CompileContext}\r\n * @type {FromMarkdownHandle}\r\n */\r\nfunction exitCheck(token) {\r\n  // We’re always in a paragraph, in a list item.\r\n  const node = this.stack[this.stack.length - 2]\r\n  assert(node.type === 'listItem')\r\n  node.checked = token.type === 'taskListCheckValueChecked'\r\n}\r\n\r\n/**\r\n * @this {CompileContext}\r\n * @type {FromMarkdownHandle}\r\n */\r\nfunction exitParagraphWithTaskListItem(token) {\r\n  const parent = this.stack[this.stack.length - 2]\r\n\r\n  if (\r\n    parent &&\r\n    parent.type === 'listItem' &&\r\n    typeof parent.checked === 'boolean'\r\n  ) {\r\n    const node = this.stack[this.stack.length - 1]\r\n    assert(node.type === 'paragraph')\r\n    const head = node.children[0]\r\n\r\n    if (head && head.type === 'text') {\r\n      const siblings = parent.children\r\n      let index = -1\r\n      /** @type {Paragraph | undefined} */\r\n      let firstParaghraph\r\n\r\n      while (++index < siblings.length) {\r\n        const sibling = siblings[index]\r\n        if (sibling.type === 'paragraph') {\r\n          firstParaghraph = sibling\r\n          break\r\n        }\r\n      }\r\n\r\n      if (firstParaghraph === node) {\r\n        // Must start with a space or a tab.\r\n        head.value = head.value.slice(1)\r\n\r\n        if (head.value.length === 0) {\r\n          node.children.shift()\r\n        } else if (\r\n          node.position &&\r\n          head.position &&\r\n          typeof head.position.start.offset === 'number'\r\n        ) {\r\n          head.position.start.column++\r\n          head.position.start.offset++\r\n          node.position.start = Object.assign({}, head.position.start)\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  this.exit(token)\r\n}\r\n\r\n/**\r\n * @type {ToMarkdownHandle}\r\n * @param {ListItem} node\r\n */\r\nfunction listItemWithTaskListItem(node, parent, state, info) {\r\n  const head = node.children[0]\r\n  const checkable =\r\n    typeof node.checked === 'boolean' && head && head.type === 'paragraph'\r\n  const checkbox = '[' + (node.checked ? 'x' : ' ') + '] '\r\n  const tracker = state.createTracker(info)\r\n\r\n  if (checkable) {\r\n    tracker.move(checkbox)\r\n  }\r\n\r\n  let value = defaultHandlers.listItem(node, parent, state, {\r\n    ...info,\r\n    ...tracker.current()\r\n  })\r\n\r\n  if (checkable) {\r\n    value = value.replace(/^(?:[*+-]|\\d+\\.)([\\r\\n]| {1,3})/, check)\r\n  }\r\n\r\n  return value\r\n\r\n  /**\r\n   * @param {string} $0\r\n   * @returns {string}\r\n   */\r\n  function check($0) {\r\n    return $0 + checkbox\r\n  }\r\n}\r\n","/**\r\n * @import {Extension as FromMarkdownExtension} from 'mdast-util-from-markdown'\r\n * @import {Options} from 'mdast-util-gfm'\r\n * @import {Options as ToMarkdownExtension} from 'mdast-util-to-markdown'\r\n */\r\n\r\nimport {\r\n  gfmAutolinkLiteralFromMarkdown,\r\n  gfmAutolinkLiteralToMarkdown\r\n} from 'mdast-util-gfm-autolink-literal'\r\nimport {\r\n  gfmFootnoteFromMarkdown,\r\n  gfmFootnoteToMarkdown\r\n} from 'mdast-util-gfm-footnote'\r\nimport {\r\n  gfmStrikethroughFromMarkdown,\r\n  gfmStrikethroughToMarkdown\r\n} from 'mdast-util-gfm-strikethrough'\r\nimport {gfmTableFromMarkdown, gfmTableToMarkdown} from 'mdast-util-gfm-table'\r\nimport {\r\n  gfmTaskListItemFromMarkdown,\r\n  gfmTaskListItemToMarkdown\r\n} from 'mdast-util-gfm-task-list-item'\r\n\r\n/**\r\n * Create an extension for `mdast-util-from-markdown` to enable GFM (autolink\r\n * literals, footnotes, strikethrough, tables, tasklists).\r\n *\r\n * @returns {Array<FromMarkdownExtension>}\r\n *   Extension for `mdast-util-from-markdown` to enable GFM (autolink literals,\r\n *   footnotes, strikethrough, tables, tasklists).\r\n */\r\nexport function gfmFromMarkdown() {\r\n  return [\r\n    gfmAutolinkLiteralFromMarkdown(),\r\n    gfmFootnoteFromMarkdown(),\r\n    gfmStrikethroughFromMarkdown(),\r\n    gfmTableFromMarkdown(),\r\n    gfmTaskListItemFromMarkdown()\r\n  ]\r\n}\r\n\r\n/**\r\n * Create an extension for `mdast-util-to-markdown` to enable GFM (autolink\r\n * literals, footnotes, strikethrough, tables, tasklists).\r\n *\r\n * @param {Options | null | undefined} [options]\r\n *   Configuration (optional).\r\n * @returns {ToMarkdownExtension}\r\n *   Extension for `mdast-util-to-markdown` to enable GFM (autolink literals,\r\n *   footnotes, strikethrough, tables, tasklists).\r\n */\r\nexport function gfmToMarkdown(options) {\r\n  return {\r\n    extensions: [\r\n      gfmAutolinkLiteralToMarkdown(),\r\n      gfmFootnoteToMarkdown(options),\r\n      gfmStrikethroughToMarkdown(),\r\n      gfmTableToMarkdown(options),\r\n      gfmTaskListItemToMarkdown()\r\n    ]\r\n  }\r\n}\r\n","/**\r\n * @import {Code, ConstructRecord, Event, Extension, Previous, State, TokenizeContext, Tokenizer} from 'micromark-util-types'\r\n */\r\n\r\nimport { asciiAlpha, asciiAlphanumeric, asciiControl, markdownLineEndingOrSpace, unicodePunctuation, unicodeWhitespace } from 'micromark-util-character';\r\nconst wwwPrefix = {\r\n  tokenize: tokenizeWwwPrefix,\r\n  partial: true\r\n};\r\nconst domain = {\r\n  tokenize: tokenizeDomain,\r\n  partial: true\r\n};\r\nconst path = {\r\n  tokenize: tokenizePath,\r\n  partial: true\r\n};\r\nconst trail = {\r\n  tokenize: tokenizeTrail,\r\n  partial: true\r\n};\r\nconst emailDomainDotTrail = {\r\n  tokenize: tokenizeEmailDomainDotTrail,\r\n  partial: true\r\n};\r\nconst wwwAutolink = {\r\n  name: 'wwwAutolink',\r\n  tokenize: tokenizeWwwAutolink,\r\n  previous: previousWww\r\n};\r\nconst protocolAutolink = {\r\n  name: 'protocolAutolink',\r\n  tokenize: tokenizeProtocolAutolink,\r\n  previous: previousProtocol\r\n};\r\nconst emailAutolink = {\r\n  name: 'emailAutolink',\r\n  tokenize: tokenizeEmailAutolink,\r\n  previous: previousEmail\r\n};\r\n\r\n/** @type {ConstructRecord} */\r\nconst text = {};\r\n\r\n/**\r\n * Create an extension for `micromark` to support GitHub autolink literal\r\n * syntax.\r\n *\r\n * @returns {Extension}\r\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\r\n *   autolink literal syntax.\r\n */\r\nexport function gfmAutolinkLiteral() {\r\n  return {\r\n    text\r\n  };\r\n}\r\n\r\n/** @type {Code} */\r\nlet code = 48;\r\n\r\n// Add alphanumerics.\r\nwhile (code < 123) {\r\n  text[code] = emailAutolink;\r\n  code++;\r\n  if (code === 58) code = 65;else if (code === 91) code = 97;\r\n}\r\ntext[43] = emailAutolink;\r\ntext[45] = emailAutolink;\r\ntext[46] = emailAutolink;\r\ntext[95] = emailAutolink;\r\ntext[72] = [emailAutolink, protocolAutolink];\r\ntext[104] = [emailAutolink, protocolAutolink];\r\ntext[87] = [emailAutolink, wwwAutolink];\r\ntext[119] = [emailAutolink, wwwAutolink];\r\n\r\n// To do: perform email autolink literals on events, afterwards.\r\n// That’s where `markdown-rs` and `cmark-gfm` perform it.\r\n// It should look for `@`, then for atext backwards, and then for a label\r\n// forwards.\r\n// To do: `mailto:`, `xmpp:` protocol as prefix.\r\n\r\n/**\r\n * Email autolink literal.\r\n *\r\n * ```markdown\r\n * > | a contact@example.org b\r\n *       ^^^^^^^^^^^^^^^^^^^\r\n * ```\r\n *\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeEmailAutolink(effects, ok, nok) {\r\n  const self = this;\r\n  /** @type {boolean | undefined} */\r\n  let dot;\r\n  /** @type {boolean} */\r\n  let data;\r\n  return start;\r\n\r\n  /**\r\n   * Start of email autolink literal.\r\n   *\r\n   * ```markdown\r\n   * > | a contact@example.org b\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    if (!gfmAtext(code) || !previousEmail.call(self, self.previous) || previousUnbalanced(self.events)) {\r\n      return nok(code);\r\n    }\r\n    effects.enter('literalAutolink');\r\n    effects.enter('literalAutolinkEmail');\r\n    return atext(code);\r\n  }\r\n\r\n  /**\r\n   * In email atext.\r\n   *\r\n   * ```markdown\r\n   * > | a contact@example.org b\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function atext(code) {\r\n    if (gfmAtext(code)) {\r\n      effects.consume(code);\r\n      return atext;\r\n    }\r\n    if (code === 64) {\r\n      effects.consume(code);\r\n      return emailDomain;\r\n    }\r\n    return nok(code);\r\n  }\r\n\r\n  /**\r\n   * In email domain.\r\n   *\r\n   * The reference code is a bit overly complex as it handles the `@`, of which\r\n   * there may be just one.\r\n   * Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L318>\r\n   *\r\n   * ```markdown\r\n   * > | a contact@example.org b\r\n   *               ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function emailDomain(code) {\r\n    // Dot followed by alphanumerical (not `-` or `_`).\r\n    if (code === 46) {\r\n      return effects.check(emailDomainDotTrail, emailDomainAfter, emailDomainDot)(code);\r\n    }\r\n\r\n    // Alphanumerical, `-`, and `_`.\r\n    if (code === 45 || code === 95 || asciiAlphanumeric(code)) {\r\n      data = true;\r\n      effects.consume(code);\r\n      return emailDomain;\r\n    }\r\n\r\n    // To do: `/` if xmpp.\r\n\r\n    // Note: normally we’d truncate trailing punctuation from the link.\r\n    // However, email autolink literals cannot contain any of those markers,\r\n    // except for `.`, but that can only occur if it isn’t trailing.\r\n    // So we can ignore truncating!\r\n    return emailDomainAfter(code);\r\n  }\r\n\r\n  /**\r\n   * In email domain, on dot that is not a trail.\r\n   *\r\n   * ```markdown\r\n   * > | a contact@example.org b\r\n   *                      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function emailDomainDot(code) {\r\n    effects.consume(code);\r\n    dot = true;\r\n    return emailDomain;\r\n  }\r\n\r\n  /**\r\n   * After email domain.\r\n   *\r\n   * ```markdown\r\n   * > | a contact@example.org b\r\n   *                          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function emailDomainAfter(code) {\r\n    // Domain must not be empty, must include a dot, and must end in alphabetical.\r\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L332>.\r\n    if (data && dot && asciiAlpha(self.previous)) {\r\n      effects.exit('literalAutolinkEmail');\r\n      effects.exit('literalAutolink');\r\n      return ok(code);\r\n    }\r\n    return nok(code);\r\n  }\r\n}\r\n\r\n/**\r\n * `www` autolink literal.\r\n *\r\n * ```markdown\r\n * > | a www.example.org b\r\n *       ^^^^^^^^^^^^^^^\r\n * ```\r\n *\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeWwwAutolink(effects, ok, nok) {\r\n  const self = this;\r\n  return wwwStart;\r\n\r\n  /**\r\n   * Start of www autolink literal.\r\n   *\r\n   * ```markdown\r\n   * > | www.example.com/a?b#c\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function wwwStart(code) {\r\n    if (code !== 87 && code !== 119 || !previousWww.call(self, self.previous) || previousUnbalanced(self.events)) {\r\n      return nok(code);\r\n    }\r\n    effects.enter('literalAutolink');\r\n    effects.enter('literalAutolinkWww');\r\n    // Note: we *check*, so we can discard the `www.` we parsed.\r\n    // If it worked, we consider it as a part of the domain.\r\n    return effects.check(wwwPrefix, effects.attempt(domain, effects.attempt(path, wwwAfter), nok), nok)(code);\r\n  }\r\n\r\n  /**\r\n   * After a www autolink literal.\r\n   *\r\n   * ```markdown\r\n   * > | www.example.com/a?b#c\r\n   *                          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function wwwAfter(code) {\r\n    effects.exit('literalAutolinkWww');\r\n    effects.exit('literalAutolink');\r\n    return ok(code);\r\n  }\r\n}\r\n\r\n/**\r\n * Protocol autolink literal.\r\n *\r\n * ```markdown\r\n * > | a https://example.org b\r\n *       ^^^^^^^^^^^^^^^^^^^\r\n * ```\r\n *\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeProtocolAutolink(effects, ok, nok) {\r\n  const self = this;\r\n  let buffer = '';\r\n  let seen = false;\r\n  return protocolStart;\r\n\r\n  /**\r\n   * Start of protocol autolink literal.\r\n   *\r\n   * ```markdown\r\n   * > | https://example.com/a?b#c\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function protocolStart(code) {\r\n    if ((code === 72 || code === 104) && previousProtocol.call(self, self.previous) && !previousUnbalanced(self.events)) {\r\n      effects.enter('literalAutolink');\r\n      effects.enter('literalAutolinkHttp');\r\n      buffer += String.fromCodePoint(code);\r\n      effects.consume(code);\r\n      return protocolPrefixInside;\r\n    }\r\n    return nok(code);\r\n  }\r\n\r\n  /**\r\n   * In protocol.\r\n   *\r\n   * ```markdown\r\n   * > | https://example.com/a?b#c\r\n   *     ^^^^^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function protocolPrefixInside(code) {\r\n    // `5` is size of `https`\r\n    if (asciiAlpha(code) && buffer.length < 5) {\r\n      // @ts-expect-error: definitely number.\r\n      buffer += String.fromCodePoint(code);\r\n      effects.consume(code);\r\n      return protocolPrefixInside;\r\n    }\r\n    if (code === 58) {\r\n      const protocol = buffer.toLowerCase();\r\n      if (protocol === 'http' || protocol === 'https') {\r\n        effects.consume(code);\r\n        return protocolSlashesInside;\r\n      }\r\n    }\r\n    return nok(code);\r\n  }\r\n\r\n  /**\r\n   * In slashes.\r\n   *\r\n   * ```markdown\r\n   * > | https://example.com/a?b#c\r\n   *           ^^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function protocolSlashesInside(code) {\r\n    if (code === 47) {\r\n      effects.consume(code);\r\n      if (seen) {\r\n        return afterProtocol;\r\n      }\r\n      seen = true;\r\n      return protocolSlashesInside;\r\n    }\r\n    return nok(code);\r\n  }\r\n\r\n  /**\r\n   * After protocol, before domain.\r\n   *\r\n   * ```markdown\r\n   * > | https://example.com/a?b#c\r\n   *             ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function afterProtocol(code) {\r\n    // To do: this is different from `markdown-rs`:\r\n    // https://github.com/wooorm/markdown-rs/blob/b3a921c761309ae00a51fe348d8a43adbc54b518/src/construct/gfm_autolink_literal.rs#L172-L182\r\n    return code === null || asciiControl(code) || markdownLineEndingOrSpace(code) || unicodeWhitespace(code) || unicodePunctuation(code) ? nok(code) : effects.attempt(domain, effects.attempt(path, protocolAfter), nok)(code);\r\n  }\r\n\r\n  /**\r\n   * After a protocol autolink literal.\r\n   *\r\n   * ```markdown\r\n   * > | https://example.com/a?b#c\r\n   *                              ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function protocolAfter(code) {\r\n    effects.exit('literalAutolinkHttp');\r\n    effects.exit('literalAutolink');\r\n    return ok(code);\r\n  }\r\n}\r\n\r\n/**\r\n * `www` prefix.\r\n *\r\n * ```markdown\r\n * > | a www.example.org b\r\n *       ^^^^\r\n * ```\r\n *\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeWwwPrefix(effects, ok, nok) {\r\n  let size = 0;\r\n  return wwwPrefixInside;\r\n\r\n  /**\r\n   * In www prefix.\r\n   *\r\n   * ```markdown\r\n   * > | www.example.com\r\n   *     ^^^^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function wwwPrefixInside(code) {\r\n    if ((code === 87 || code === 119) && size < 3) {\r\n      size++;\r\n      effects.consume(code);\r\n      return wwwPrefixInside;\r\n    }\r\n    if (code === 46 && size === 3) {\r\n      effects.consume(code);\r\n      return wwwPrefixAfter;\r\n    }\r\n    return nok(code);\r\n  }\r\n\r\n  /**\r\n   * After www prefix.\r\n   *\r\n   * ```markdown\r\n   * > | www.example.com\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function wwwPrefixAfter(code) {\r\n    // If there is *anything*, we can link.\r\n    return code === null ? nok(code) : ok(code);\r\n  }\r\n}\r\n\r\n/**\r\n * Domain.\r\n *\r\n * ```markdown\r\n * > | a https://example.org b\r\n *               ^^^^^^^^^^^\r\n * ```\r\n *\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeDomain(effects, ok, nok) {\r\n  /** @type {boolean | undefined} */\r\n  let underscoreInLastSegment;\r\n  /** @type {boolean | undefined} */\r\n  let underscoreInLastLastSegment;\r\n  /** @type {boolean | undefined} */\r\n  let seen;\r\n  return domainInside;\r\n\r\n  /**\r\n   * In domain.\r\n   *\r\n   * ```markdown\r\n   * > | https://example.com/a\r\n   *             ^^^^^^^^^^^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function domainInside(code) {\r\n    // Check whether this marker, which is a trailing punctuation\r\n    // marker, optionally followed by more trailing markers, and then\r\n    // followed by an end.\r\n    if (code === 46 || code === 95) {\r\n      return effects.check(trail, domainAfter, domainAtPunctuation)(code);\r\n    }\r\n\r\n    // GH documents that only alphanumerics (other than `-`, `.`, and `_`) can\r\n    // occur, which sounds like ASCII only, but they also support `www.點看.com`,\r\n    // so that’s Unicode.\r\n    // Instead of some new production for Unicode alphanumerics, markdown\r\n    // already has that for Unicode punctuation and whitespace, so use those.\r\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L12>.\r\n    if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code) || code !== 45 && unicodePunctuation(code)) {\r\n      return domainAfter(code);\r\n    }\r\n    seen = true;\r\n    effects.consume(code);\r\n    return domainInside;\r\n  }\r\n\r\n  /**\r\n   * In domain, at potential trailing punctuation, that was not trailing.\r\n   *\r\n   * ```markdown\r\n   * > | https://example.com\r\n   *                    ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function domainAtPunctuation(code) {\r\n    // There is an underscore in the last segment of the domain\r\n    if (code === 95) {\r\n      underscoreInLastSegment = true;\r\n    }\r\n    // Otherwise, it’s a `.`: save the last segment underscore in the\r\n    // penultimate segment slot.\r\n    else {\r\n      underscoreInLastLastSegment = underscoreInLastSegment;\r\n      underscoreInLastSegment = undefined;\r\n    }\r\n    effects.consume(code);\r\n    return domainInside;\r\n  }\r\n\r\n  /**\r\n   * After domain.\r\n   *\r\n   * ```markdown\r\n   * > | https://example.com/a\r\n   *                        ^\r\n   * ```\r\n   *\r\n   * @type {State} */\r\n  function domainAfter(code) {\r\n    // Note: that’s GH says a dot is needed, but it’s not true:\r\n    // <https://github.com/github/cmark-gfm/issues/279>\r\n    if (underscoreInLastLastSegment || underscoreInLastSegment || !seen) {\r\n      return nok(code);\r\n    }\r\n    return ok(code);\r\n  }\r\n}\r\n\r\n/**\r\n * Path.\r\n *\r\n * ```markdown\r\n * > | a https://example.org/stuff b\r\n *                          ^^^^^^\r\n * ```\r\n *\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizePath(effects, ok) {\r\n  let sizeOpen = 0;\r\n  let sizeClose = 0;\r\n  return pathInside;\r\n\r\n  /**\r\n   * In path.\r\n   *\r\n   * ```markdown\r\n   * > | https://example.com/a\r\n   *                        ^^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function pathInside(code) {\r\n    if (code === 40) {\r\n      sizeOpen++;\r\n      effects.consume(code);\r\n      return pathInside;\r\n    }\r\n\r\n    // To do: `markdown-rs` also needs this.\r\n    // If this is a paren, and there are less closings than openings,\r\n    // we don’t check for a trail.\r\n    if (code === 41 && sizeClose < sizeOpen) {\r\n      return pathAtPunctuation(code);\r\n    }\r\n\r\n    // Check whether this trailing punctuation marker is optionally\r\n    // followed by more trailing markers, and then followed\r\n    // by an end.\r\n    if (code === 33 || code === 34 || code === 38 || code === 39 || code === 41 || code === 42 || code === 44 || code === 46 || code === 58 || code === 59 || code === 60 || code === 63 || code === 93 || code === 95 || code === 126) {\r\n      return effects.check(trail, ok, pathAtPunctuation)(code);\r\n    }\r\n    if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\r\n      return ok(code);\r\n    }\r\n    effects.consume(code);\r\n    return pathInside;\r\n  }\r\n\r\n  /**\r\n   * In path, at potential trailing punctuation, that was not trailing.\r\n   *\r\n   * ```markdown\r\n   * > | https://example.com/a\"b\r\n   *                          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function pathAtPunctuation(code) {\r\n    // Count closing parens.\r\n    if (code === 41) {\r\n      sizeClose++;\r\n    }\r\n    effects.consume(code);\r\n    return pathInside;\r\n  }\r\n}\r\n\r\n/**\r\n * Trail.\r\n *\r\n * This calls `ok` if this *is* the trail, followed by an end, which means\r\n * the entire trail is not part of the link.\r\n * It calls `nok` if this *is* part of the link.\r\n *\r\n * ```markdown\r\n * > | https://example.com\").\r\n *                        ^^^\r\n * ```\r\n *\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeTrail(effects, ok, nok) {\r\n  return trail;\r\n\r\n  /**\r\n   * In trail of domain or path.\r\n   *\r\n   * ```markdown\r\n   * > | https://example.com\").\r\n   *                        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function trail(code) {\r\n    // Regular trailing punctuation.\r\n    if (code === 33 || code === 34 || code === 39 || code === 41 || code === 42 || code === 44 || code === 46 || code === 58 || code === 59 || code === 63 || code === 95 || code === 126) {\r\n      effects.consume(code);\r\n      return trail;\r\n    }\r\n\r\n    // `&` followed by one or more alphabeticals and then a `;`, is\r\n    // as a whole considered as trailing punctuation.\r\n    // In all other cases, it is considered as continuation of the URL.\r\n    if (code === 38) {\r\n      effects.consume(code);\r\n      return trailCharacterReferenceStart;\r\n    }\r\n\r\n    // Needed because we allow literals after `[`, as we fix:\r\n    // <https://github.com/github/cmark-gfm/issues/278>.\r\n    // Check that it is not followed by `(` or `[`.\r\n    if (code === 93) {\r\n      effects.consume(code);\r\n      return trailBracketAfter;\r\n    }\r\n    if (\r\n    // `<` is an end.\r\n    code === 60 ||\r\n    // So is whitespace.\r\n    code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\r\n      return ok(code);\r\n    }\r\n    return nok(code);\r\n  }\r\n\r\n  /**\r\n   * In trail, after `]`.\r\n   *\r\n   * > 👉 **Note**: this deviates from `cmark-gfm` to fix a bug.\r\n   * > See end of <https://github.com/github/cmark-gfm/issues/278> for more.\r\n   *\r\n   * ```markdown\r\n   * > | https://example.com](\r\n   *                         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function trailBracketAfter(code) {\r\n    // Whitespace or something that could start a resource or reference is the end.\r\n    // Switch back to trail otherwise.\r\n    if (code === null || code === 40 || code === 91 || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\r\n      return ok(code);\r\n    }\r\n    return trail(code);\r\n  }\r\n\r\n  /**\r\n   * In character-reference like trail, after `&`.\r\n   *\r\n   * ```markdown\r\n   * > | https://example.com&amp;).\r\n   *                         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function trailCharacterReferenceStart(code) {\r\n    // When non-alpha, it’s not a trail.\r\n    return asciiAlpha(code) ? trailCharacterReferenceInside(code) : nok(code);\r\n  }\r\n\r\n  /**\r\n   * In character-reference like trail.\r\n   *\r\n   * ```markdown\r\n   * > | https://example.com&amp;).\r\n   *                         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function trailCharacterReferenceInside(code) {\r\n    // Switch back to trail if this is well-formed.\r\n    if (code === 59) {\r\n      effects.consume(code);\r\n      return trail;\r\n    }\r\n    if (asciiAlpha(code)) {\r\n      effects.consume(code);\r\n      return trailCharacterReferenceInside;\r\n    }\r\n\r\n    // It’s not a trail.\r\n    return nok(code);\r\n  }\r\n}\r\n\r\n/**\r\n * Dot in email domain trail.\r\n *\r\n * This calls `ok` if this *is* the trail, followed by an end, which means\r\n * the trail is not part of the link.\r\n * It calls `nok` if this *is* part of the link.\r\n *\r\n * ```markdown\r\n * > | contact@example.org.\r\n *                        ^\r\n * ```\r\n *\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeEmailDomainDotTrail(effects, ok, nok) {\r\n  return start;\r\n\r\n  /**\r\n   * Dot.\r\n   *\r\n   * ```markdown\r\n   * > | contact@example.org.\r\n   *                    ^   ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    // Must be dot.\r\n    effects.consume(code);\r\n    return after;\r\n  }\r\n\r\n  /**\r\n   * After dot.\r\n   *\r\n   * ```markdown\r\n   * > | contact@example.org.\r\n   *                     ^   ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function after(code) {\r\n    // Not a trail if alphanumeric.\r\n    return asciiAlphanumeric(code) ? nok(code) : ok(code);\r\n  }\r\n}\r\n\r\n/**\r\n * See:\r\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L156>.\r\n *\r\n * @type {Previous}\r\n */\r\nfunction previousWww(code) {\r\n  return code === null || code === 40 || code === 42 || code === 95 || code === 91 || code === 93 || code === 126 || markdownLineEndingOrSpace(code);\r\n}\r\n\r\n/**\r\n * See:\r\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L214>.\r\n *\r\n * @type {Previous}\r\n */\r\nfunction previousProtocol(code) {\r\n  return !asciiAlpha(code);\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Previous}\r\n */\r\nfunction previousEmail(code) {\r\n  // Do not allow a slash “inside” atext.\r\n  // The reference code is a bit weird, but that’s what it results in.\r\n  // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L307>.\r\n  // Other than slash, every preceding character is allowed.\r\n  return !(code === 47 || gfmAtext(code));\r\n}\r\n\r\n/**\r\n * @param {Code} code\r\n * @returns {boolean}\r\n */\r\nfunction gfmAtext(code) {\r\n  return code === 43 || code === 45 || code === 46 || code === 95 || asciiAlphanumeric(code);\r\n}\r\n\r\n/**\r\n * @param {Array<Event>} events\r\n * @returns {boolean}\r\n */\r\nfunction previousUnbalanced(events) {\r\n  let index = events.length;\r\n  let result = false;\r\n  while (index--) {\r\n    const token = events[index][1];\r\n    if ((token.type === 'labelLink' || token.type === 'labelImage') && !token._balanced) {\r\n      result = true;\r\n      break;\r\n    }\r\n\r\n    // If we’ve seen this token, and it was marked as not having any unbalanced\r\n    // bracket before it, we can exit.\r\n    if (token._gfmAutolinkLiteralWalkedInto) {\r\n      result = false;\r\n      break;\r\n    }\r\n  }\r\n  if (events.length > 0 && !result) {\r\n    // Mark the last token as “walked into” w/o finding\r\n    // anything.\r\n    events[events.length - 1][1]._gfmAutolinkLiteralWalkedInto = true;\r\n  }\r\n  return result;\r\n}","/**\r\n * @import {Event, Exiter, Extension, Resolver, State, Token, TokenizeContext, Tokenizer} from 'micromark-util-types'\r\n */\r\n\r\nimport { blankLine } from 'micromark-core-commonmark';\r\nimport { factorySpace } from 'micromark-factory-space';\r\nimport { markdownLineEndingOrSpace } from 'micromark-util-character';\r\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\r\nconst indent = {\r\n  tokenize: tokenizeIndent,\r\n  partial: true\r\n};\r\n\r\n// To do: micromark should support a `_hiddenGfmFootnoteSupport`, which only\r\n// affects label start (image).\r\n// That will let us drop `tokenizePotentialGfmFootnote*`.\r\n// It currently has a `_hiddenFootnoteSupport`, which affects that and more.\r\n// That can be removed when `micromark-extension-footnote` is archived.\r\n\r\n/**\r\n * Create an extension for `micromark` to enable GFM footnote syntax.\r\n *\r\n * @returns {Extension}\r\n *   Extension for `micromark` that can be passed in `extensions` to\r\n *   enable GFM footnote syntax.\r\n */\r\nexport function gfmFootnote() {\r\n  /** @type {Extension} */\r\n  return {\r\n    document: {\r\n      [91]: {\r\n        name: 'gfmFootnoteDefinition',\r\n        tokenize: tokenizeDefinitionStart,\r\n        continuation: {\r\n          tokenize: tokenizeDefinitionContinuation\r\n        },\r\n        exit: gfmFootnoteDefinitionEnd\r\n      }\r\n    },\r\n    text: {\r\n      [91]: {\r\n        name: 'gfmFootnoteCall',\r\n        tokenize: tokenizeGfmFootnoteCall\r\n      },\r\n      [93]: {\r\n        name: 'gfmPotentialFootnoteCall',\r\n        add: 'after',\r\n        tokenize: tokenizePotentialGfmFootnoteCall,\r\n        resolveTo: resolveToPotentialGfmFootnoteCall\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\n// To do: remove after micromark update.\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizePotentialGfmFootnoteCall(effects, ok, nok) {\r\n  const self = this;\r\n  let index = self.events.length;\r\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\r\n  /** @type {Token} */\r\n  let labelStart;\r\n\r\n  // Find an opening.\r\n  while (index--) {\r\n    const token = self.events[index][1];\r\n    if (token.type === \"labelImage\") {\r\n      labelStart = token;\r\n      break;\r\n    }\r\n\r\n    // Exit if we’ve walked far enough.\r\n    if (token.type === 'gfmFootnoteCall' || token.type === \"labelLink\" || token.type === \"label\" || token.type === \"image\" || token.type === \"link\") {\r\n      break;\r\n    }\r\n  }\r\n  return start;\r\n\r\n  /**\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    if (!labelStart || !labelStart._balanced) {\r\n      return nok(code);\r\n    }\r\n    const id = normalizeIdentifier(self.sliceSerialize({\r\n      start: labelStart.end,\r\n      end: self.now()\r\n    }));\r\n    if (id.codePointAt(0) !== 94 || !defined.includes(id.slice(1))) {\r\n      return nok(code);\r\n    }\r\n    effects.enter('gfmFootnoteCallLabelMarker');\r\n    effects.consume(code);\r\n    effects.exit('gfmFootnoteCallLabelMarker');\r\n    return ok(code);\r\n  }\r\n}\r\n\r\n// To do: remove after micromark update.\r\n/** @type {Resolver} */\r\nfunction resolveToPotentialGfmFootnoteCall(events, context) {\r\n  let index = events.length;\r\n  /** @type {Token | undefined} */\r\n  let labelStart;\r\n\r\n  // Find an opening.\r\n  while (index--) {\r\n    if (events[index][1].type === \"labelImage\" && events[index][0] === 'enter') {\r\n      labelStart = events[index][1];\r\n      break;\r\n    }\r\n  }\r\n  // Change the `labelImageMarker` to a `data`.\r\n  events[index + 1][1].type = \"data\";\r\n  events[index + 3][1].type = 'gfmFootnoteCallLabelMarker';\r\n\r\n  // The whole (without `!`):\r\n  /** @type {Token} */\r\n  const call = {\r\n    type: 'gfmFootnoteCall',\r\n    start: Object.assign({}, events[index + 3][1].start),\r\n    end: Object.assign({}, events[events.length - 1][1].end)\r\n  };\r\n  // The `^` marker\r\n  /** @type {Token} */\r\n  const marker = {\r\n    type: 'gfmFootnoteCallMarker',\r\n    start: Object.assign({}, events[index + 3][1].end),\r\n    end: Object.assign({}, events[index + 3][1].end)\r\n  };\r\n  // Increment the end 1 character.\r\n  marker.end.column++;\r\n  marker.end.offset++;\r\n  marker.end._bufferIndex++;\r\n  /** @type {Token} */\r\n  const string = {\r\n    type: 'gfmFootnoteCallString',\r\n    start: Object.assign({}, marker.end),\r\n    end: Object.assign({}, events[events.length - 1][1].start)\r\n  };\r\n  /** @type {Token} */\r\n  const chunk = {\r\n    type: \"chunkString\",\r\n    contentType: 'string',\r\n    start: Object.assign({}, string.start),\r\n    end: Object.assign({}, string.end)\r\n  };\r\n\r\n  /** @type {Array<Event>} */\r\n  const replacement = [\r\n  // Take the `labelImageMarker` (now `data`, the `!`)\r\n  events[index + 1], events[index + 2], ['enter', call, context],\r\n  // The `[`\r\n  events[index + 3], events[index + 4],\r\n  // The `^`.\r\n  ['enter', marker, context], ['exit', marker, context],\r\n  // Everything in between.\r\n  ['enter', string, context], ['enter', chunk, context], ['exit', chunk, context], ['exit', string, context],\r\n  // The ending (`]`, properly parsed and labelled).\r\n  events[events.length - 2], events[events.length - 1], ['exit', call, context]];\r\n  events.splice(index, events.length - index + 1, ...replacement);\r\n  return events;\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeGfmFootnoteCall(effects, ok, nok) {\r\n  const self = this;\r\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\r\n  let size = 0;\r\n  /** @type {boolean} */\r\n  let data;\r\n\r\n  // Note: the implementation of `markdown-rs` is different, because it houses\r\n  // core *and* extensions in one project.\r\n  // Therefore, it can include footnote logic inside `label-end`.\r\n  // We can’t do that, but luckily, we can parse footnotes in a simpler way than\r\n  // needed for labels.\r\n  return start;\r\n\r\n  /**\r\n   * Start of footnote label.\r\n   *\r\n   * ```markdown\r\n   * > | a [^b] c\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    effects.enter('gfmFootnoteCall');\r\n    effects.enter('gfmFootnoteCallLabelMarker');\r\n    effects.consume(code);\r\n    effects.exit('gfmFootnoteCallLabelMarker');\r\n    return callStart;\r\n  }\r\n\r\n  /**\r\n   * After `[`, at `^`.\r\n   *\r\n   * ```markdown\r\n   * > | a [^b] c\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function callStart(code) {\r\n    if (code !== 94) return nok(code);\r\n    effects.enter('gfmFootnoteCallMarker');\r\n    effects.consume(code);\r\n    effects.exit('gfmFootnoteCallMarker');\r\n    effects.enter('gfmFootnoteCallString');\r\n    effects.enter('chunkString').contentType = 'string';\r\n    return callData;\r\n  }\r\n\r\n  /**\r\n   * In label.\r\n   *\r\n   * ```markdown\r\n   * > | a [^b] c\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function callData(code) {\r\n    if (\r\n    // Too long.\r\n    size > 999 ||\r\n    // Closing brace with nothing.\r\n    code === 93 && !data ||\r\n    // Space or tab is not supported by GFM for some reason.\r\n    // `\\n` and `[` not being supported makes sense.\r\n    code === null || code === 91 || markdownLineEndingOrSpace(code)) {\r\n      return nok(code);\r\n    }\r\n    if (code === 93) {\r\n      effects.exit('chunkString');\r\n      const token = effects.exit('gfmFootnoteCallString');\r\n      if (!defined.includes(normalizeIdentifier(self.sliceSerialize(token)))) {\r\n        return nok(code);\r\n      }\r\n      effects.enter('gfmFootnoteCallLabelMarker');\r\n      effects.consume(code);\r\n      effects.exit('gfmFootnoteCallLabelMarker');\r\n      effects.exit('gfmFootnoteCall');\r\n      return ok;\r\n    }\r\n    if (!markdownLineEndingOrSpace(code)) {\r\n      data = true;\r\n    }\r\n    size++;\r\n    effects.consume(code);\r\n    return code === 92 ? callEscape : callData;\r\n  }\r\n\r\n  /**\r\n   * On character after escape.\r\n   *\r\n   * ```markdown\r\n   * > | a [^b\\c] d\r\n   *           ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function callEscape(code) {\r\n    if (code === 91 || code === 92 || code === 93) {\r\n      effects.consume(code);\r\n      size++;\r\n      return callData;\r\n    }\r\n    return callData(code);\r\n  }\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeDefinitionStart(effects, ok, nok) {\r\n  const self = this;\r\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\r\n  /** @type {string} */\r\n  let identifier;\r\n  let size = 0;\r\n  /** @type {boolean | undefined} */\r\n  let data;\r\n  return start;\r\n\r\n  /**\r\n   * Start of GFM footnote definition.\r\n   *\r\n   * ```markdown\r\n   * > | [^a]: b\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    effects.enter('gfmFootnoteDefinition')._container = true;\r\n    effects.enter('gfmFootnoteDefinitionLabel');\r\n    effects.enter('gfmFootnoteDefinitionLabelMarker');\r\n    effects.consume(code);\r\n    effects.exit('gfmFootnoteDefinitionLabelMarker');\r\n    return labelAtMarker;\r\n  }\r\n\r\n  /**\r\n   * In label, at caret.\r\n   *\r\n   * ```markdown\r\n   * > | [^a]: b\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function labelAtMarker(code) {\r\n    if (code === 94) {\r\n      effects.enter('gfmFootnoteDefinitionMarker');\r\n      effects.consume(code);\r\n      effects.exit('gfmFootnoteDefinitionMarker');\r\n      effects.enter('gfmFootnoteDefinitionLabelString');\r\n      effects.enter('chunkString').contentType = 'string';\r\n      return labelInside;\r\n    }\r\n    return nok(code);\r\n  }\r\n\r\n  /**\r\n   * In label.\r\n   *\r\n   * > 👉 **Note**: `cmark-gfm` prevents whitespace from occurring in footnote\r\n   * > definition labels.\r\n   *\r\n   * ```markdown\r\n   * > | [^a]: b\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function labelInside(code) {\r\n    if (\r\n    // Too long.\r\n    size > 999 ||\r\n    // Closing brace with nothing.\r\n    code === 93 && !data ||\r\n    // Space or tab is not supported by GFM for some reason.\r\n    // `\\n` and `[` not being supported makes sense.\r\n    code === null || code === 91 || markdownLineEndingOrSpace(code)) {\r\n      return nok(code);\r\n    }\r\n    if (code === 93) {\r\n      effects.exit('chunkString');\r\n      const token = effects.exit('gfmFootnoteDefinitionLabelString');\r\n      identifier = normalizeIdentifier(self.sliceSerialize(token));\r\n      effects.enter('gfmFootnoteDefinitionLabelMarker');\r\n      effects.consume(code);\r\n      effects.exit('gfmFootnoteDefinitionLabelMarker');\r\n      effects.exit('gfmFootnoteDefinitionLabel');\r\n      return labelAfter;\r\n    }\r\n    if (!markdownLineEndingOrSpace(code)) {\r\n      data = true;\r\n    }\r\n    size++;\r\n    effects.consume(code);\r\n    return code === 92 ? labelEscape : labelInside;\r\n  }\r\n\r\n  /**\r\n   * After `\\`, at a special character.\r\n   *\r\n   * > 👉 **Note**: `cmark-gfm` currently does not support escaped brackets:\r\n   * > <https://github.com/github/cmark-gfm/issues/240>\r\n   *\r\n   * ```markdown\r\n   * > | [^a\\*b]: c\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function labelEscape(code) {\r\n    if (code === 91 || code === 92 || code === 93) {\r\n      effects.consume(code);\r\n      size++;\r\n      return labelInside;\r\n    }\r\n    return labelInside(code);\r\n  }\r\n\r\n  /**\r\n   * After definition label.\r\n   *\r\n   * ```markdown\r\n   * > | [^a]: b\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function labelAfter(code) {\r\n    if (code === 58) {\r\n      effects.enter('definitionMarker');\r\n      effects.consume(code);\r\n      effects.exit('definitionMarker');\r\n      if (!defined.includes(identifier)) {\r\n        defined.push(identifier);\r\n      }\r\n\r\n      // Any whitespace after the marker is eaten, forming indented code\r\n      // is not possible.\r\n      // No space is also fine, just like a block quote marker.\r\n      return factorySpace(effects, whitespaceAfter, 'gfmFootnoteDefinitionWhitespace');\r\n    }\r\n    return nok(code);\r\n  }\r\n\r\n  /**\r\n   * After definition prefix.\r\n   *\r\n   * ```markdown\r\n   * > | [^a]: b\r\n   *           ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function whitespaceAfter(code) {\r\n    // `markdown-rs` has a wrapping token for the prefix that is closed here.\r\n    return ok(code);\r\n  }\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeDefinitionContinuation(effects, ok, nok) {\r\n  /// Start of footnote definition continuation.\r\n  ///\r\n  /// ```markdown\r\n  ///   | [^a]: b\r\n  /// > |     c\r\n  ///     ^\r\n  /// ```\r\n  //\r\n  // Either a blank line, which is okay, or an indented thing.\r\n  return effects.check(blankLine, ok, effects.attempt(indent, ok, nok));\r\n}\r\n\r\n/** @type {Exiter} */\r\nfunction gfmFootnoteDefinitionEnd(effects) {\r\n  effects.exit('gfmFootnoteDefinition');\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeIndent(effects, ok, nok) {\r\n  const self = this;\r\n  return factorySpace(effects, afterPrefix, 'gfmFootnoteDefinitionIndent', 4 + 1);\r\n\r\n  /**\r\n   * @type {State}\r\n   */\r\n  function afterPrefix(code) {\r\n    const tail = self.events[self.events.length - 1];\r\n    return tail && tail[1].type === 'gfmFootnoteDefinitionIndent' && tail[2].sliceSerialize(tail[1], true).length === 4 ? ok(code) : nok(code);\r\n  }\r\n}","/**\r\n * @import {Options} from 'micromark-extension-gfm-strikethrough'\r\n * @import {Event, Extension, Resolver, State, Token, TokenizeContext, Tokenizer} from 'micromark-util-types'\r\n */\r\n\r\nimport { splice } from 'micromark-util-chunked';\r\nimport { classifyCharacter } from 'micromark-util-classify-character';\r\nimport { resolveAll } from 'micromark-util-resolve-all';\r\n/**\r\n * Create an extension for `micromark` to enable GFM strikethrough syntax.\r\n *\r\n * @param {Options | null | undefined} [options={}]\r\n *   Configuration.\r\n * @returns {Extension}\r\n *   Extension for `micromark` that can be passed in `extensions`, to\r\n *   enable GFM strikethrough syntax.\r\n */\r\nexport function gfmStrikethrough(options) {\r\n  const options_ = options || {};\r\n  let single = options_.singleTilde;\r\n  const tokenizer = {\r\n    name: 'strikethrough',\r\n    tokenize: tokenizeStrikethrough,\r\n    resolveAll: resolveAllStrikethrough\r\n  };\r\n  if (single === null || single === undefined) {\r\n    single = true;\r\n  }\r\n  return {\r\n    text: {\r\n      [126]: tokenizer\r\n    },\r\n    insideSpan: {\r\n      null: [tokenizer]\r\n    },\r\n    attentionMarkers: {\r\n      null: [126]\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Take events and resolve strikethrough.\r\n   *\r\n   * @type {Resolver}\r\n   */\r\n  function resolveAllStrikethrough(events, context) {\r\n    let index = -1;\r\n\r\n    // Walk through all events.\r\n    while (++index < events.length) {\r\n      // Find a token that can close.\r\n      if (events[index][0] === 'enter' && events[index][1].type === 'strikethroughSequenceTemporary' && events[index][1]._close) {\r\n        let open = index;\r\n\r\n        // Now walk back to find an opener.\r\n        while (open--) {\r\n          // Find a token that can open the closer.\r\n          if (events[open][0] === 'exit' && events[open][1].type === 'strikethroughSequenceTemporary' && events[open][1]._open &&\r\n          // If the sizes are the same:\r\n          events[index][1].end.offset - events[index][1].start.offset === events[open][1].end.offset - events[open][1].start.offset) {\r\n            events[index][1].type = 'strikethroughSequence';\r\n            events[open][1].type = 'strikethroughSequence';\r\n\r\n            /** @type {Token} */\r\n            const strikethrough = {\r\n              type: 'strikethrough',\r\n              start: Object.assign({}, events[open][1].start),\r\n              end: Object.assign({}, events[index][1].end)\r\n            };\r\n\r\n            /** @type {Token} */\r\n            const text = {\r\n              type: 'strikethroughText',\r\n              start: Object.assign({}, events[open][1].end),\r\n              end: Object.assign({}, events[index][1].start)\r\n            };\r\n\r\n            // Opening.\r\n            /** @type {Array<Event>} */\r\n            const nextEvents = [['enter', strikethrough, context], ['enter', events[open][1], context], ['exit', events[open][1], context], ['enter', text, context]];\r\n            const insideSpan = context.parser.constructs.insideSpan.null;\r\n            if (insideSpan) {\r\n              // Between.\r\n              splice(nextEvents, nextEvents.length, 0, resolveAll(insideSpan, events.slice(open + 1, index), context));\r\n            }\r\n\r\n            // Closing.\r\n            splice(nextEvents, nextEvents.length, 0, [['exit', text, context], ['enter', events[index][1], context], ['exit', events[index][1], context], ['exit', strikethrough, context]]);\r\n            splice(events, open - 1, index - open + 3, nextEvents);\r\n            index = open + nextEvents.length - 2;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    index = -1;\r\n    while (++index < events.length) {\r\n      if (events[index][1].type === 'strikethroughSequenceTemporary') {\r\n        events[index][1].type = \"data\";\r\n      }\r\n    }\r\n    return events;\r\n  }\r\n\r\n  /**\r\n   * @this {TokenizeContext}\r\n   * @type {Tokenizer}\r\n   */\r\n  function tokenizeStrikethrough(effects, ok, nok) {\r\n    const previous = this.previous;\r\n    const events = this.events;\r\n    let size = 0;\r\n    return start;\r\n\r\n    /** @type {State} */\r\n    function start(code) {\r\n      if (previous === 126 && events[events.length - 1][1].type !== \"characterEscape\") {\r\n        return nok(code);\r\n      }\r\n      effects.enter('strikethroughSequenceTemporary');\r\n      return more(code);\r\n    }\r\n\r\n    /** @type {State} */\r\n    function more(code) {\r\n      const before = classifyCharacter(previous);\r\n      if (code === 126) {\r\n        // If this is the third marker, exit.\r\n        if (size > 1) return nok(code);\r\n        effects.consume(code);\r\n        size++;\r\n        return more;\r\n      }\r\n      if (size < 2 && !single) return nok(code);\r\n      const token = effects.exit('strikethroughSequenceTemporary');\r\n      const after = classifyCharacter(code);\r\n      token._open = !after || after === 2 && Boolean(before);\r\n      token._close = !before || before === 2 && Boolean(after);\r\n      return ok(code);\r\n    }\r\n  }\r\n}","/**\r\n * @import {Event} from 'micromark-util-types'\r\n */\r\n\r\n// Port of `edit_map.rs` from `markdown-rs`.\r\n// This should move to `markdown-js` later.\r\n\r\n// Deal with several changes in events, batching them together.\r\n//\r\n// Preferably, changes should be kept to a minimum.\r\n// Sometimes, it’s needed to change the list of events, because parsing can be\r\n// messy, and it helps to expose a cleaner interface of events to the compiler\r\n// and other users.\r\n// It can also help to merge many adjacent similar events.\r\n// And, in other cases, it’s needed to parse subcontent: pass some events\r\n// through another tokenizer and inject the result.\r\n\r\n/**\r\n * @typedef {[number, number, Array<Event>]} Change\r\n * @typedef {[number, number, number]} Jump\r\n */\r\n\r\n/**\r\n * Tracks a bunch of edits.\r\n */\r\nexport class EditMap {\r\n  /**\r\n   * Create a new edit map.\r\n   */\r\n  constructor() {\r\n    /**\r\n     * Record of changes.\r\n     *\r\n     * @type {Array<Change>}\r\n     */\r\n    this.map = [];\r\n  }\r\n\r\n  /**\r\n   * Create an edit: a remove and/or add at a certain place.\r\n   *\r\n   * @param {number} index\r\n   * @param {number} remove\r\n   * @param {Array<Event>} add\r\n   * @returns {undefined}\r\n   */\r\n  add(index, remove, add) {\r\n    addImplementation(this, index, remove, add);\r\n  }\r\n\r\n  // To do: add this when moving to `micromark`.\r\n  // /**\r\n  //  * Create an edit: but insert `add` before existing additions.\r\n  //  *\r\n  //  * @param {number} index\r\n  //  * @param {number} remove\r\n  //  * @param {Array<Event>} add\r\n  //  * @returns {undefined}\r\n  //  */\r\n  // addBefore(index, remove, add) {\r\n  //   addImplementation(this, index, remove, add, true)\r\n  // }\r\n\r\n  /**\r\n   * Done, change the events.\r\n   *\r\n   * @param {Array<Event>} events\r\n   * @returns {undefined}\r\n   */\r\n  consume(events) {\r\n    this.map.sort(function (a, b) {\r\n      return a[0] - b[0];\r\n    });\r\n\r\n    /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\r\n    if (this.map.length === 0) {\r\n      return;\r\n    }\r\n\r\n    // To do: if links are added in events, like they are in `markdown-rs`,\r\n    // this is needed.\r\n    // // Calculate jumps: where items in the current list move to.\r\n    // /** @type {Array<Jump>} */\r\n    // const jumps = []\r\n    // let index = 0\r\n    // let addAcc = 0\r\n    // let removeAcc = 0\r\n    // while (index < this.map.length) {\r\n    //   const [at, remove, add] = this.map[index]\r\n    //   removeAcc += remove\r\n    //   addAcc += add.length\r\n    //   jumps.push([at, removeAcc, addAcc])\r\n    //   index += 1\r\n    // }\r\n    //\r\n    // . shiftLinks(events, jumps)\r\n\r\n    let index = this.map.length;\r\n    /** @type {Array<Array<Event>>} */\r\n    const vecs = [];\r\n    while (index > 0) {\r\n      index -= 1;\r\n      vecs.push(events.slice(this.map[index][0] + this.map[index][1]), this.map[index][2]);\r\n\r\n      // Truncate rest.\r\n      events.length = this.map[index][0];\r\n    }\r\n    vecs.push(events.slice());\r\n    events.length = 0;\r\n    let slice = vecs.pop();\r\n    while (slice) {\r\n      for (const element of slice) {\r\n        events.push(element);\r\n      }\r\n      slice = vecs.pop();\r\n    }\r\n\r\n    // Truncate everything.\r\n    this.map.length = 0;\r\n  }\r\n}\r\n\r\n/**\r\n * Create an edit.\r\n *\r\n * @param {EditMap} editMap\r\n * @param {number} at\r\n * @param {number} remove\r\n * @param {Array<Event>} add\r\n * @returns {undefined}\r\n */\r\nfunction addImplementation(editMap, at, remove, add) {\r\n  let index = 0;\r\n\r\n  /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\r\n  if (remove === 0 && add.length === 0) {\r\n    return;\r\n  }\r\n  while (index < editMap.map.length) {\r\n    if (editMap.map[index][0] === at) {\r\n      editMap.map[index][1] += remove;\r\n\r\n      // To do: before not used by tables, use when moving to micromark.\r\n      // if (before) {\r\n      //   add.push(...editMap.map[index][2])\r\n      //   editMap.map[index][2] = add\r\n      // } else {\r\n      editMap.map[index][2].push(...add);\r\n      // }\r\n\r\n      return;\r\n    }\r\n    index += 1;\r\n  }\r\n  editMap.map.push([at, remove, add]);\r\n}\r\n\r\n// /**\r\n//  * Shift `previous` and `next` links according to `jumps`.\r\n//  *\r\n//  * This fixes links in case there are events removed or added between them.\r\n//  *\r\n//  * @param {Array<Event>} events\r\n//  * @param {Array<Jump>} jumps\r\n//  */\r\n// function shiftLinks(events, jumps) {\r\n//   let jumpIndex = 0\r\n//   let index = 0\r\n//   let add = 0\r\n//   let rm = 0\r\n\r\n//   while (index < events.length) {\r\n//     const rmCurr = rm\r\n\r\n//     while (jumpIndex < jumps.length && jumps[jumpIndex][0] <= index) {\r\n//       add = jumps[jumpIndex][2]\r\n//       rm = jumps[jumpIndex][1]\r\n//       jumpIndex += 1\r\n//     }\r\n\r\n//     // Ignore items that will be removed.\r\n//     if (rm > rmCurr) {\r\n//       index += rm - rmCurr\r\n//     } else {\r\n//       // ?\r\n//       // if let Some(link) = &events[index].link {\r\n//       //     if let Some(next) = link.next {\r\n//       //         events[next].link.as_mut().unwrap().previous = Some(index + add - rm);\r\n//       //         while jumpIndex < jumps.len() && jumps[jumpIndex].0 <= next {\r\n//       //             add = jumps[jumpIndex].2;\r\n//       //             rm = jumps[jumpIndex].1;\r\n//       //             jumpIndex += 1;\r\n//       //         }\r\n//       //         events[index].link.as_mut().unwrap().next = Some(next + add - rm);\r\n//       //         index = next;\r\n//       //         continue;\r\n//       //     }\r\n//       // }\r\n//       index += 1\r\n//     }\r\n//   }\r\n// }","/**\r\n * @import {Event} from 'micromark-util-types'\r\n */\r\n\r\n/**\r\n * @typedef {'center' | 'left' | 'none' | 'right'} Align\r\n */\r\n\r\n/**\r\n * Figure out the alignment of a GFM table.\r\n *\r\n * @param {Readonly<Array<Event>>} events\r\n *   List of events.\r\n * @param {number} index\r\n *   Table enter event.\r\n * @returns {Array<Align>}\r\n *   List of aligns.\r\n */\r\nexport function gfmTableAlign(events, index) {\r\n  let inDelimiterRow = false;\r\n  /** @type {Array<Align>} */\r\n  const align = [];\r\n  while (index < events.length) {\r\n    const event = events[index];\r\n    if (inDelimiterRow) {\r\n      if (event[0] === 'enter') {\r\n        // Start of alignment value: set a new column.\r\n        // To do: `markdown-rs` uses `tableDelimiterCellValue`.\r\n        if (event[1].type === 'tableContent') {\r\n          align.push(events[index + 1][1].type === 'tableDelimiterMarker' ? 'left' : 'none');\r\n        }\r\n      }\r\n      // Exits:\r\n      // End of alignment value: change the column.\r\n      // To do: `markdown-rs` uses `tableDelimiterCellValue`.\r\n      else if (event[1].type === 'tableContent') {\r\n        if (events[index - 1][1].type === 'tableDelimiterMarker') {\r\n          const alignIndex = align.length - 1;\r\n          align[alignIndex] = align[alignIndex] === 'left' ? 'center' : 'right';\r\n        }\r\n      }\r\n      // Done!\r\n      else if (event[1].type === 'tableDelimiterRow') {\r\n        break;\r\n      }\r\n    } else if (event[0] === 'enter' && event[1].type === 'tableDelimiterRow') {\r\n      inDelimiterRow = true;\r\n    }\r\n    index += 1;\r\n  }\r\n  return align;\r\n}","/**\r\n * @import {Event, Extension, Point, Resolver, State, Token, TokenizeContext, Tokenizer} from 'micromark-util-types'\r\n */\r\n\r\n/**\r\n * @typedef {[number, number, number, number]} Range\r\n *   Cell info.\r\n *\r\n * @typedef {0 | 1 | 2 | 3} RowKind\r\n *   Where we are: `1` for head row, `2` for delimiter row, `3` for body row.\r\n */\r\n\r\nimport { factorySpace } from 'micromark-factory-space';\r\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\r\nimport { EditMap } from './edit-map.js';\r\nimport { gfmTableAlign } from './infer.js';\r\n\r\n/**\r\n * Create an HTML extension for `micromark` to support GitHub tables syntax.\r\n *\r\n * @returns {Extension}\r\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\r\n *   table syntax.\r\n */\r\nexport function gfmTable() {\r\n  return {\r\n    flow: {\r\n      null: {\r\n        name: 'table',\r\n        tokenize: tokenizeTable,\r\n        resolveAll: resolveTable\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeTable(effects, ok, nok) {\r\n  const self = this;\r\n  let size = 0;\r\n  let sizeB = 0;\r\n  /** @type {boolean | undefined} */\r\n  let seen;\r\n  return start;\r\n\r\n  /**\r\n   * Start of a GFM table.\r\n   *\r\n   * If there is a valid table row or table head before, then we try to parse\r\n   * another row.\r\n   * Otherwise, we try to parse a head.\r\n   *\r\n   * ```markdown\r\n   * > | | a |\r\n   *     ^\r\n   *   | | - |\r\n   * > | | b |\r\n   *     ^\r\n   * ```\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    let index = self.events.length - 1;\r\n    while (index > -1) {\r\n      const type = self.events[index][1].type;\r\n      if (type === \"lineEnding\" ||\r\n      // Note: markdown-rs uses `whitespace` instead of `linePrefix`\r\n      type === \"linePrefix\") index--;else break;\r\n    }\r\n    const tail = index > -1 ? self.events[index][1].type : null;\r\n    const next = tail === 'tableHead' || tail === 'tableRow' ? bodyRowStart : headRowBefore;\r\n\r\n    // Don’t allow lazy body rows.\r\n    if (next === bodyRowStart && self.parser.lazy[self.now().line]) {\r\n      return nok(code);\r\n    }\r\n    return next(code);\r\n  }\r\n\r\n  /**\r\n   * Before table head row.\r\n   *\r\n   * ```markdown\r\n   * > | | a |\r\n   *     ^\r\n   *   | | - |\r\n   *   | | b |\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function headRowBefore(code) {\r\n    effects.enter('tableHead');\r\n    effects.enter('tableRow');\r\n    return headRowStart(code);\r\n  }\r\n\r\n  /**\r\n   * Before table head row, after whitespace.\r\n   *\r\n   * ```markdown\r\n   * > | | a |\r\n   *     ^\r\n   *   | | - |\r\n   *   | | b |\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function headRowStart(code) {\r\n    if (code === 124) {\r\n      return headRowBreak(code);\r\n    }\r\n\r\n    // To do: micromark-js should let us parse our own whitespace in extensions,\r\n    // like `markdown-rs`:\r\n    //\r\n    // ```js\r\n    // // 4+ spaces.\r\n    // if (markdownSpace(code)) {\r\n    //   return nok(code)\r\n    // }\r\n    // ```\r\n\r\n    seen = true;\r\n    // Count the first character, that isn’t a pipe, double.\r\n    sizeB += 1;\r\n    return headRowBreak(code);\r\n  }\r\n\r\n  /**\r\n   * At break in table head row.\r\n   *\r\n   * ```markdown\r\n   * > | | a |\r\n   *     ^\r\n   *       ^\r\n   *         ^\r\n   *   | | - |\r\n   *   | | b |\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function headRowBreak(code) {\r\n    if (code === null) {\r\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\r\n      return nok(code);\r\n    }\r\n    if (markdownLineEnding(code)) {\r\n      // If anything other than one pipe (ignoring whitespace) was used, it’s fine.\r\n      if (sizeB > 1) {\r\n        sizeB = 0;\r\n        // To do: check if this works.\r\n        // Feel free to interrupt:\r\n        self.interrupt = true;\r\n        effects.exit('tableRow');\r\n        effects.enter(\"lineEnding\");\r\n        effects.consume(code);\r\n        effects.exit(\"lineEnding\");\r\n        return headDelimiterStart;\r\n      }\r\n\r\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\r\n      return nok(code);\r\n    }\r\n    if (markdownSpace(code)) {\r\n      // To do: check if this is fine.\r\n      // effects.attempt(State::Next(StateName::GfmTableHeadRowBreak), State::Nok)\r\n      // State::Retry(space_or_tab(tokenizer))\r\n      return factorySpace(effects, headRowBreak, \"whitespace\")(code);\r\n    }\r\n    sizeB += 1;\r\n    if (seen) {\r\n      seen = false;\r\n      // Header cell count.\r\n      size += 1;\r\n    }\r\n    if (code === 124) {\r\n      effects.enter('tableCellDivider');\r\n      effects.consume(code);\r\n      effects.exit('tableCellDivider');\r\n      // Whether a delimiter was seen.\r\n      seen = true;\r\n      return headRowBreak;\r\n    }\r\n\r\n    // Anything else is cell data.\r\n    effects.enter(\"data\");\r\n    return headRowData(code);\r\n  }\r\n\r\n  /**\r\n   * In table head row data.\r\n   *\r\n   * ```markdown\r\n   * > | | a |\r\n   *       ^\r\n   *   | | - |\r\n   *   | | b |\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function headRowData(code) {\r\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\r\n      effects.exit(\"data\");\r\n      return headRowBreak(code);\r\n    }\r\n    effects.consume(code);\r\n    return code === 92 ? headRowEscape : headRowData;\r\n  }\r\n\r\n  /**\r\n   * In table head row escape.\r\n   *\r\n   * ```markdown\r\n   * > | | a\\-b |\r\n   *         ^\r\n   *   | | ---- |\r\n   *   | | c    |\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function headRowEscape(code) {\r\n    if (code === 92 || code === 124) {\r\n      effects.consume(code);\r\n      return headRowData;\r\n    }\r\n    return headRowData(code);\r\n  }\r\n\r\n  /**\r\n   * Before delimiter row.\r\n   *\r\n   * ```markdown\r\n   *   | | a |\r\n   * > | | - |\r\n   *     ^\r\n   *   | | b |\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function headDelimiterStart(code) {\r\n    // Reset `interrupt`.\r\n    self.interrupt = false;\r\n\r\n    // Note: in `markdown-rs`, we need to handle piercing here too.\r\n    if (self.parser.lazy[self.now().line]) {\r\n      return nok(code);\r\n    }\r\n    effects.enter('tableDelimiterRow');\r\n    // Track if we’ve seen a `:` or `|`.\r\n    seen = false;\r\n    if (markdownSpace(code)) {\r\n      return factorySpace(effects, headDelimiterBefore, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\r\n    }\r\n    return headDelimiterBefore(code);\r\n  }\r\n\r\n  /**\r\n   * Before delimiter row, after optional whitespace.\r\n   *\r\n   * Reused when a `|` is found later, to parse another cell.\r\n   *\r\n   * ```markdown\r\n   *   | | a |\r\n   * > | | - |\r\n   *     ^\r\n   *   | | b |\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function headDelimiterBefore(code) {\r\n    if (code === 45 || code === 58) {\r\n      return headDelimiterValueBefore(code);\r\n    }\r\n    if (code === 124) {\r\n      seen = true;\r\n      // If we start with a pipe, we open a cell marker.\r\n      effects.enter('tableCellDivider');\r\n      effects.consume(code);\r\n      effects.exit('tableCellDivider');\r\n      return headDelimiterCellBefore;\r\n    }\r\n\r\n    // More whitespace / empty row not allowed at start.\r\n    return headDelimiterNok(code);\r\n  }\r\n\r\n  /**\r\n   * After `|`, before delimiter cell.\r\n   *\r\n   * ```markdown\r\n   *   | | a |\r\n   * > | | - |\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function headDelimiterCellBefore(code) {\r\n    if (markdownSpace(code)) {\r\n      return factorySpace(effects, headDelimiterValueBefore, \"whitespace\")(code);\r\n    }\r\n    return headDelimiterValueBefore(code);\r\n  }\r\n\r\n  /**\r\n   * Before delimiter cell value.\r\n   *\r\n   * ```markdown\r\n   *   | | a |\r\n   * > | | - |\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function headDelimiterValueBefore(code) {\r\n    // Align: left.\r\n    if (code === 58) {\r\n      sizeB += 1;\r\n      seen = true;\r\n      effects.enter('tableDelimiterMarker');\r\n      effects.consume(code);\r\n      effects.exit('tableDelimiterMarker');\r\n      return headDelimiterLeftAlignmentAfter;\r\n    }\r\n\r\n    // Align: none.\r\n    if (code === 45) {\r\n      sizeB += 1;\r\n      // To do: seems weird that this *isn’t* left aligned, but that state is used?\r\n      return headDelimiterLeftAlignmentAfter(code);\r\n    }\r\n    if (code === null || markdownLineEnding(code)) {\r\n      return headDelimiterCellAfter(code);\r\n    }\r\n    return headDelimiterNok(code);\r\n  }\r\n\r\n  /**\r\n   * After delimiter cell left alignment marker.\r\n   *\r\n   * ```markdown\r\n   *   | | a  |\r\n   * > | | :- |\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function headDelimiterLeftAlignmentAfter(code) {\r\n    if (code === 45) {\r\n      effects.enter('tableDelimiterFiller');\r\n      return headDelimiterFiller(code);\r\n    }\r\n\r\n    // Anything else is not ok after the left-align colon.\r\n    return headDelimiterNok(code);\r\n  }\r\n\r\n  /**\r\n   * In delimiter cell filler.\r\n   *\r\n   * ```markdown\r\n   *   | | a |\r\n   * > | | - |\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function headDelimiterFiller(code) {\r\n    if (code === 45) {\r\n      effects.consume(code);\r\n      return headDelimiterFiller;\r\n    }\r\n\r\n    // Align is `center` if it was `left`, `right` otherwise.\r\n    if (code === 58) {\r\n      seen = true;\r\n      effects.exit('tableDelimiterFiller');\r\n      effects.enter('tableDelimiterMarker');\r\n      effects.consume(code);\r\n      effects.exit('tableDelimiterMarker');\r\n      return headDelimiterRightAlignmentAfter;\r\n    }\r\n    effects.exit('tableDelimiterFiller');\r\n    return headDelimiterRightAlignmentAfter(code);\r\n  }\r\n\r\n  /**\r\n   * After delimiter cell right alignment marker.\r\n   *\r\n   * ```markdown\r\n   *   | |  a |\r\n   * > | | -: |\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function headDelimiterRightAlignmentAfter(code) {\r\n    if (markdownSpace(code)) {\r\n      return factorySpace(effects, headDelimiterCellAfter, \"whitespace\")(code);\r\n    }\r\n    return headDelimiterCellAfter(code);\r\n  }\r\n\r\n  /**\r\n   * After delimiter cell.\r\n   *\r\n   * ```markdown\r\n   *   | |  a |\r\n   * > | | -: |\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function headDelimiterCellAfter(code) {\r\n    if (code === 124) {\r\n      return headDelimiterBefore(code);\r\n    }\r\n    if (code === null || markdownLineEnding(code)) {\r\n      // Exit when:\r\n      // * there was no `:` or `|` at all (it’s a thematic break or setext\r\n      //   underline instead)\r\n      // * the header cell count is not the delimiter cell count\r\n      if (!seen || size !== sizeB) {\r\n        return headDelimiterNok(code);\r\n      }\r\n\r\n      // Note: in markdown-rs`, a reset is needed here.\r\n      effects.exit('tableDelimiterRow');\r\n      effects.exit('tableHead');\r\n      // To do: in `markdown-rs`, resolvers need to be registered manually.\r\n      // effects.register_resolver(ResolveName::GfmTable)\r\n      return ok(code);\r\n    }\r\n    return headDelimiterNok(code);\r\n  }\r\n\r\n  /**\r\n   * In delimiter row, at a disallowed byte.\r\n   *\r\n   * ```markdown\r\n   *   | | a |\r\n   * > | | x |\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function headDelimiterNok(code) {\r\n    // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\r\n    return nok(code);\r\n  }\r\n\r\n  /**\r\n   * Before table body row.\r\n   *\r\n   * ```markdown\r\n   *   | | a |\r\n   *   | | - |\r\n   * > | | b |\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function bodyRowStart(code) {\r\n    // Note: in `markdown-rs` we need to manually take care of a prefix,\r\n    // but in `micromark-js` that is done for us, so if we’re here, we’re\r\n    // never at whitespace.\r\n    effects.enter('tableRow');\r\n    return bodyRowBreak(code);\r\n  }\r\n\r\n  /**\r\n   * At break in table body row.\r\n   *\r\n   * ```markdown\r\n   *   | | a |\r\n   *   | | - |\r\n   * > | | b |\r\n   *     ^\r\n   *       ^\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function bodyRowBreak(code) {\r\n    if (code === 124) {\r\n      effects.enter('tableCellDivider');\r\n      effects.consume(code);\r\n      effects.exit('tableCellDivider');\r\n      return bodyRowBreak;\r\n    }\r\n    if (code === null || markdownLineEnding(code)) {\r\n      effects.exit('tableRow');\r\n      return ok(code);\r\n    }\r\n    if (markdownSpace(code)) {\r\n      return factorySpace(effects, bodyRowBreak, \"whitespace\")(code);\r\n    }\r\n\r\n    // Anything else is cell content.\r\n    effects.enter(\"data\");\r\n    return bodyRowData(code);\r\n  }\r\n\r\n  /**\r\n   * In table body row data.\r\n   *\r\n   * ```markdown\r\n   *   | | a |\r\n   *   | | - |\r\n   * > | | b |\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function bodyRowData(code) {\r\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\r\n      effects.exit(\"data\");\r\n      return bodyRowBreak(code);\r\n    }\r\n    effects.consume(code);\r\n    return code === 92 ? bodyRowEscape : bodyRowData;\r\n  }\r\n\r\n  /**\r\n   * In table body row escape.\r\n   *\r\n   * ```markdown\r\n   *   | | a    |\r\n   *   | | ---- |\r\n   * > | | b\\-c |\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function bodyRowEscape(code) {\r\n    if (code === 92 || code === 124) {\r\n      effects.consume(code);\r\n      return bodyRowData;\r\n    }\r\n    return bodyRowData(code);\r\n  }\r\n}\r\n\r\n/** @type {Resolver} */\r\n\r\nfunction resolveTable(events, context) {\r\n  let index = -1;\r\n  let inFirstCellAwaitingPipe = true;\r\n  /** @type {RowKind} */\r\n  let rowKind = 0;\r\n  /** @type {Range} */\r\n  let lastCell = [0, 0, 0, 0];\r\n  /** @type {Range} */\r\n  let cell = [0, 0, 0, 0];\r\n  let afterHeadAwaitingFirstBodyRow = false;\r\n  let lastTableEnd = 0;\r\n  /** @type {Token | undefined} */\r\n  let currentTable;\r\n  /** @type {Token | undefined} */\r\n  let currentBody;\r\n  /** @type {Token | undefined} */\r\n  let currentCell;\r\n  const map = new EditMap();\r\n  while (++index < events.length) {\r\n    const event = events[index];\r\n    const token = event[1];\r\n    if (event[0] === 'enter') {\r\n      // Start of head.\r\n      if (token.type === 'tableHead') {\r\n        afterHeadAwaitingFirstBodyRow = false;\r\n\r\n        // Inject previous (body end and) table end.\r\n        if (lastTableEnd !== 0) {\r\n          flushTableEnd(map, context, lastTableEnd, currentTable, currentBody);\r\n          currentBody = undefined;\r\n          lastTableEnd = 0;\r\n        }\r\n\r\n        // Inject table start.\r\n        currentTable = {\r\n          type: 'table',\r\n          start: Object.assign({}, token.start),\r\n          // Note: correct end is set later.\r\n          end: Object.assign({}, token.end)\r\n        };\r\n        map.add(index, 0, [['enter', currentTable, context]]);\r\n      } else if (token.type === 'tableRow' || token.type === 'tableDelimiterRow') {\r\n        inFirstCellAwaitingPipe = true;\r\n        currentCell = undefined;\r\n        lastCell = [0, 0, 0, 0];\r\n        cell = [0, index + 1, 0, 0];\r\n\r\n        // Inject table body start.\r\n        if (afterHeadAwaitingFirstBodyRow) {\r\n          afterHeadAwaitingFirstBodyRow = false;\r\n          currentBody = {\r\n            type: 'tableBody',\r\n            start: Object.assign({}, token.start),\r\n            // Note: correct end is set later.\r\n            end: Object.assign({}, token.end)\r\n          };\r\n          map.add(index, 0, [['enter', currentBody, context]]);\r\n        }\r\n        rowKind = token.type === 'tableDelimiterRow' ? 2 : currentBody ? 3 : 1;\r\n      }\r\n      // Cell data.\r\n      else if (rowKind && (token.type === \"data\" || token.type === 'tableDelimiterMarker' || token.type === 'tableDelimiterFiller')) {\r\n        inFirstCellAwaitingPipe = false;\r\n\r\n        // First value in cell.\r\n        if (cell[2] === 0) {\r\n          if (lastCell[1] !== 0) {\r\n            cell[0] = cell[1];\r\n            currentCell = flushCell(map, context, lastCell, rowKind, undefined, currentCell);\r\n            lastCell = [0, 0, 0, 0];\r\n          }\r\n          cell[2] = index;\r\n        }\r\n      } else if (token.type === 'tableCellDivider') {\r\n        if (inFirstCellAwaitingPipe) {\r\n          inFirstCellAwaitingPipe = false;\r\n        } else {\r\n          if (lastCell[1] !== 0) {\r\n            cell[0] = cell[1];\r\n            currentCell = flushCell(map, context, lastCell, rowKind, undefined, currentCell);\r\n          }\r\n          lastCell = cell;\r\n          cell = [lastCell[1], index, 0, 0];\r\n        }\r\n      }\r\n    }\r\n    // Exit events.\r\n    else if (token.type === 'tableHead') {\r\n      afterHeadAwaitingFirstBodyRow = true;\r\n      lastTableEnd = index;\r\n    } else if (token.type === 'tableRow' || token.type === 'tableDelimiterRow') {\r\n      lastTableEnd = index;\r\n      if (lastCell[1] !== 0) {\r\n        cell[0] = cell[1];\r\n        currentCell = flushCell(map, context, lastCell, rowKind, index, currentCell);\r\n      } else if (cell[1] !== 0) {\r\n        currentCell = flushCell(map, context, cell, rowKind, index, currentCell);\r\n      }\r\n      rowKind = 0;\r\n    } else if (rowKind && (token.type === \"data\" || token.type === 'tableDelimiterMarker' || token.type === 'tableDelimiterFiller')) {\r\n      cell[3] = index;\r\n    }\r\n  }\r\n  if (lastTableEnd !== 0) {\r\n    flushTableEnd(map, context, lastTableEnd, currentTable, currentBody);\r\n  }\r\n  map.consume(context.events);\r\n\r\n  // To do: move this into `html`, when events are exposed there.\r\n  // That’s what `markdown-rs` does.\r\n  // That needs updates to `mdast-util-gfm-table`.\r\n  index = -1;\r\n  while (++index < context.events.length) {\r\n    const event = context.events[index];\r\n    if (event[0] === 'enter' && event[1].type === 'table') {\r\n      event[1]._align = gfmTableAlign(context.events, index);\r\n    }\r\n  }\r\n  return events;\r\n}\r\n\r\n/**\r\n * Generate a cell.\r\n *\r\n * @param {EditMap} map\r\n * @param {Readonly<TokenizeContext>} context\r\n * @param {Readonly<Range>} range\r\n * @param {RowKind} rowKind\r\n * @param {number | undefined} rowEnd\r\n * @param {Token | undefined} previousCell\r\n * @returns {Token | undefined}\r\n */\r\n// eslint-disable-next-line max-params\r\nfunction flushCell(map, context, range, rowKind, rowEnd, previousCell) {\r\n  // `markdown-rs` uses:\r\n  // rowKind === 2 ? 'tableDelimiterCell' : 'tableCell'\r\n  const groupName = rowKind === 1 ? 'tableHeader' : rowKind === 2 ? 'tableDelimiter' : 'tableData';\r\n  // `markdown-rs` uses:\r\n  // rowKind === 2 ? 'tableDelimiterCellValue' : 'tableCellText'\r\n  const valueName = 'tableContent';\r\n\r\n  // Insert an exit for the previous cell, if there is one.\r\n  //\r\n  // ```markdown\r\n  // > | | aa | bb | cc |\r\n  //          ^-- exit\r\n  //           ^^^^-- this cell\r\n  // ```\r\n  if (range[0] !== 0) {\r\n    previousCell.end = Object.assign({}, getPoint(context.events, range[0]));\r\n    map.add(range[0], 0, [['exit', previousCell, context]]);\r\n  }\r\n\r\n  // Insert enter of this cell.\r\n  //\r\n  // ```markdown\r\n  // > | | aa | bb | cc |\r\n  //           ^-- enter\r\n  //           ^^^^-- this cell\r\n  // ```\r\n  const now = getPoint(context.events, range[1]);\r\n  previousCell = {\r\n    type: groupName,\r\n    start: Object.assign({}, now),\r\n    // Note: correct end is set later.\r\n    end: Object.assign({}, now)\r\n  };\r\n  map.add(range[1], 0, [['enter', previousCell, context]]);\r\n\r\n  // Insert text start at first data start and end at last data end, and\r\n  // remove events between.\r\n  //\r\n  // ```markdown\r\n  // > | | aa | bb | cc |\r\n  //            ^-- enter\r\n  //             ^-- exit\r\n  //           ^^^^-- this cell\r\n  // ```\r\n  if (range[2] !== 0) {\r\n    const relatedStart = getPoint(context.events, range[2]);\r\n    const relatedEnd = getPoint(context.events, range[3]);\r\n    /** @type {Token} */\r\n    const valueToken = {\r\n      type: valueName,\r\n      start: Object.assign({}, relatedStart),\r\n      end: Object.assign({}, relatedEnd)\r\n    };\r\n    map.add(range[2], 0, [['enter', valueToken, context]]);\r\n    if (rowKind !== 2) {\r\n      // Fix positional info on remaining events\r\n      const start = context.events[range[2]];\r\n      const end = context.events[range[3]];\r\n      start[1].end = Object.assign({}, end[1].end);\r\n      start[1].type = \"chunkText\";\r\n      start[1].contentType = \"text\";\r\n\r\n      // Remove if needed.\r\n      if (range[3] > range[2] + 1) {\r\n        const a = range[2] + 1;\r\n        const b = range[3] - range[2] - 1;\r\n        map.add(a, b, []);\r\n      }\r\n    }\r\n    map.add(range[3] + 1, 0, [['exit', valueToken, context]]);\r\n  }\r\n\r\n  // Insert an exit for the last cell, if at the row end.\r\n  //\r\n  // ```markdown\r\n  // > | | aa | bb | cc |\r\n  //                    ^-- exit\r\n  //               ^^^^^^-- this cell (the last one contains two “between” parts)\r\n  // ```\r\n  if (rowEnd !== undefined) {\r\n    previousCell.end = Object.assign({}, getPoint(context.events, rowEnd));\r\n    map.add(rowEnd, 0, [['exit', previousCell, context]]);\r\n    previousCell = undefined;\r\n  }\r\n  return previousCell;\r\n}\r\n\r\n/**\r\n * Generate table end (and table body end).\r\n *\r\n * @param {Readonly<EditMap>} map\r\n * @param {Readonly<TokenizeContext>} context\r\n * @param {number} index\r\n * @param {Token} table\r\n * @param {Token | undefined} tableBody\r\n */\r\n// eslint-disable-next-line max-params\r\nfunction flushTableEnd(map, context, index, table, tableBody) {\r\n  /** @type {Array<Event>} */\r\n  const exits = [];\r\n  const related = getPoint(context.events, index);\r\n  if (tableBody) {\r\n    tableBody.end = Object.assign({}, related);\r\n    exits.push(['exit', tableBody, context]);\r\n  }\r\n  table.end = Object.assign({}, related);\r\n  exits.push(['exit', table, context]);\r\n  map.add(index + 1, 0, exits);\r\n}\r\n\r\n/**\r\n * @param {Readonly<Array<Event>>} events\r\n * @param {number} index\r\n * @returns {Readonly<Point>}\r\n */\r\nfunction getPoint(events, index) {\r\n  const event = events[index];\r\n  const side = event[0] === 'enter' ? 'start' : 'end';\r\n  return event[1][side];\r\n}","/**\r\n * @import {Extension, State, TokenizeContext, Tokenizer} from 'micromark-util-types'\r\n */\r\n\r\nimport { factorySpace } from 'micromark-factory-space';\r\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\r\nconst tasklistCheck = {\r\n  name: 'tasklistCheck',\r\n  tokenize: tokenizeTasklistCheck\r\n};\r\n\r\n/**\r\n * Create an HTML extension for `micromark` to support GFM task list items\r\n * syntax.\r\n *\r\n * @returns {Extension}\r\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\r\n *   support GFM task list items when serializing to HTML.\r\n */\r\nexport function gfmTaskListItem() {\r\n  return {\r\n    text: {\r\n      [91]: tasklistCheck\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeTasklistCheck(effects, ok, nok) {\r\n  const self = this;\r\n  return open;\r\n\r\n  /**\r\n   * At start of task list item check.\r\n   *\r\n   * ```markdown\r\n   * > | * [x] y.\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function open(code) {\r\n    if (\r\n    // Exit if there’s stuff before.\r\n    self.previous !== null ||\r\n    // Exit if not in the first content that is the first child of a list\r\n    // item.\r\n    !self._gfmTasklistFirstContentOfListItem) {\r\n      return nok(code);\r\n    }\r\n    effects.enter('taskListCheck');\r\n    effects.enter('taskListCheckMarker');\r\n    effects.consume(code);\r\n    effects.exit('taskListCheckMarker');\r\n    return inside;\r\n  }\r\n\r\n  /**\r\n   * In task list item check.\r\n   *\r\n   * ```markdown\r\n   * > | * [x] y.\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function inside(code) {\r\n    // Currently we match how GH works in files.\r\n    // To match how GH works in comments, use `markdownSpace` (`[\\t ]`) instead\r\n    // of `markdownLineEndingOrSpace` (`[\\t\\n\\r ]`).\r\n    if (markdownLineEndingOrSpace(code)) {\r\n      effects.enter('taskListCheckValueUnchecked');\r\n      effects.consume(code);\r\n      effects.exit('taskListCheckValueUnchecked');\r\n      return close;\r\n    }\r\n    if (code === 88 || code === 120) {\r\n      effects.enter('taskListCheckValueChecked');\r\n      effects.consume(code);\r\n      effects.exit('taskListCheckValueChecked');\r\n      return close;\r\n    }\r\n    return nok(code);\r\n  }\r\n\r\n  /**\r\n   * At close of task list item check.\r\n   *\r\n   * ```markdown\r\n   * > | * [x] y.\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function close(code) {\r\n    if (code === 93) {\r\n      effects.enter('taskListCheckMarker');\r\n      effects.consume(code);\r\n      effects.exit('taskListCheckMarker');\r\n      effects.exit('taskListCheck');\r\n      return after;\r\n    }\r\n    return nok(code);\r\n  }\r\n\r\n  /**\r\n   * @type {State}\r\n   */\r\n  function after(code) {\r\n    // EOL in paragraph means there must be something else after it.\r\n    if (markdownLineEnding(code)) {\r\n      return ok(code);\r\n    }\r\n\r\n    // Space or tab?\r\n    // Check what comes after.\r\n    if (markdownSpace(code)) {\r\n      return effects.check({\r\n        tokenize: spaceThenNonSpace\r\n      }, ok, nok)(code);\r\n    }\r\n\r\n    // EOF, or non-whitespace, both wrong.\r\n    return nok(code);\r\n  }\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction spaceThenNonSpace(effects, ok, nok) {\r\n  return factorySpace(effects, after, \"whitespace\");\r\n\r\n  /**\r\n   * After whitespace, after task list item check.\r\n   *\r\n   * ```markdown\r\n   * > | * [x] y.\r\n   *           ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function after(code) {\r\n    // EOF means there was nothing, so bad.\r\n    // EOL means there’s content after it, so good.\r\n    // Impossible to have more spaces.\r\n    // Anything else is good.\r\n    return code === null ? nok(code) : ok(code);\r\n  }\r\n}","/**\r\n * @typedef {import('micromark-extension-gfm-footnote').HtmlOptions} HtmlOptions\r\n * @typedef {import('micromark-extension-gfm-strikethrough').Options} Options\r\n * @typedef {import('micromark-util-types').Extension} Extension\r\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\r\n */\r\n\r\nimport {\r\n  combineExtensions,\r\n  combineHtmlExtensions\r\n} from 'micromark-util-combine-extensions'\r\nimport {\r\n  gfmAutolinkLiteral,\r\n  gfmAutolinkLiteralHtml\r\n} from 'micromark-extension-gfm-autolink-literal'\r\nimport {gfmFootnote, gfmFootnoteHtml} from 'micromark-extension-gfm-footnote'\r\nimport {\r\n  gfmStrikethrough,\r\n  gfmStrikethroughHtml\r\n} from 'micromark-extension-gfm-strikethrough'\r\nimport {gfmTable, gfmTableHtml} from 'micromark-extension-gfm-table'\r\nimport {gfmTagfilterHtml} from 'micromark-extension-gfm-tagfilter'\r\nimport {\r\n  gfmTaskListItem,\r\n  gfmTaskListItemHtml\r\n} from 'micromark-extension-gfm-task-list-item'\r\n\r\n/**\r\n * Create an extension for `micromark` to enable GFM syntax.\r\n *\r\n * @param {Options | null | undefined} [options]\r\n *   Configuration (optional).\r\n *\r\n *   Passed to `micromark-extens-gfm-strikethrough`.\r\n * @returns {Extension}\r\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\r\n *   syntax.\r\n */\r\nexport function gfm(options) {\r\n  return combineExtensions([\r\n    gfmAutolinkLiteral(),\r\n    gfmFootnote(),\r\n    gfmStrikethrough(options),\r\n    gfmTable(),\r\n    gfmTaskListItem()\r\n  ])\r\n}\r\n\r\n/**\r\n * Create an extension for `micromark` to support GFM when serializing to HTML.\r\n *\r\n * @param {HtmlOptions | null | undefined} [options]\r\n *   Configuration (optional).\r\n *\r\n *   Passed to `micromark-extens-gfm-footnote`.\r\n * @returns {HtmlExtension}\r\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\r\n *   support GFM when serializing to HTML.\r\n */\r\nexport function gfmHtml(options) {\r\n  return combineHtmlExtensions([\r\n    gfmAutolinkLiteralHtml(),\r\n    gfmFootnoteHtml(options),\r\n    gfmStrikethroughHtml(),\r\n    gfmTableHtml(),\r\n    gfmTagfilterHtml(),\r\n    gfmTaskListItemHtml()\r\n  ])\r\n}\r\n","/**\r\n * @import {Root} from 'mdast'\r\n * @import {Options} from 'remark-gfm'\r\n * @import {} from 'remark-parse'\r\n * @import {} from 'remark-stringify'\r\n * @import {Processor} from 'unified'\r\n */\r\n\r\nimport {gfmFromMarkdown, gfmToMarkdown} from 'mdast-util-gfm'\r\nimport {gfm} from 'micromark-extension-gfm'\r\n\r\n/** @type {Options} */\r\nconst emptyOptions = {}\r\n\r\n/**\r\n * Add support GFM (autolink literals, footnotes, strikethrough, tables,\r\n * tasklists).\r\n *\r\n * @param {Options | null | undefined} [options]\r\n *   Configuration (optional).\r\n * @returns {undefined}\r\n *   Nothing.\r\n */\r\nexport default function remarkGfm(options) {\r\n  // @ts-expect-error: TS is wrong about `this`.\r\n  // eslint-disable-next-line unicorn/no-this-assignment\r\n  const self = /** @type {Processor<Root>} */ (this)\r\n  const settings = options || emptyOptions\r\n  const data = self.data()\r\n\r\n  const micromarkExtensions =\r\n    data.micromarkExtensions || (data.micromarkExtensions = [])\r\n  const fromMarkdownExtensions =\r\n    data.fromMarkdownExtensions || (data.fromMarkdownExtensions = [])\r\n  const toMarkdownExtensions =\r\n    data.toMarkdownExtensions || (data.toMarkdownExtensions = [])\r\n\r\n  micromarkExtensions.push(gfm(settings))\r\n  fromMarkdownExtensions.push(gfmFromMarkdown())\r\n  toMarkdownExtensions.push(gfmToMarkdown(settings))\r\n}\r\n"],"names":["stringify","values","options","settings","nameRe","nameReJsx","emptyOptions","name","re","whitespace","thing","empty","value","Schema","property","normal","space","merge","definitions","definition","normalize","Info","attribute","powers","boolean","increment","booleanish","overloadedBoolean","number","spaceSeparated","commaSeparated","commaOrSpaceSeparated","checks","types","DefinedInfo","mask","index","mark","check","key","create","properties","normals","info","aria","_","caseSensitiveTransform","attributes","caseInsensitiveTransform","html","svg","xlink","xmlns","xml","hastToReact","cap","dash","valid","find","schema","Type","rest","camelcase","dashes","kebab","$0","htmlBase","svgBase","COMMENT_REGEX","NEWLINE_REGEX","WHITESPACE_REGEX","PROPERTY_REGEX","COLON_REGEX","VALUE_REGEX","SEMICOLON_REGEX","TRIM_REGEX","NEWLINE","FORWARD_SLASH","ASTERISK","EMPTY_STRING","TYPE_COMMENT","TYPE_DECLARATION","inlineStyleParser","style","lineno","column","updatePosition","str","lines","i","position","start","node","Position","error","msg","err","match","m","comments","rules","c","comment","pos","declaration","prop","val","ret","trim","declarations","decls","decl","__importDefault","this","mod","cjs","StyleToObject","inline_style_parser_1","require$$0","iterator","styleObject","hasIterator","utilities","CUSTOM_PROPERTY_REGEX","HYPHEN_REGEX","NO_HYPHEN_REGEX","VENDOR_PREFIX_REGEX","MS_VENDOR_PREFIX_REGEX","skipCamelCase","capitalize","character","trimHyphen","prefix","camelCase","style_to_object_1","utilities_1","require$$1","StyleToJS","output","pointEnd","point","pointStart","type","end","stringifyPosition","VFileMessage","causeOrReason","optionsOrParentOrPlace","origin","reason","legacyCause","parent","own","emptyMap","tableElements","tableCellElement","docs","toJsxRuntime","tree","filePath","developmentCreate","productionCreate","state","result","one","element","mdxExpression","mdxJsxElement","mdxEsm","root","text","parentSchema","findComponentFromName","props","createElementProps","children","createChildren","child","addNode","addChildren","expression","assert","crashEstree","createJsxElementProps","jsx","jsxs","fn","jsxDEV","isStaticChildren","alignValue","createProperty","objectExpression","countsByName","count","commas","spaces","parseStyle","transformStylesToCssCasing","styleToJs","cause","message","allowExpression","identifiers","isIdentifierName","place","domCasing","cssCasing","from","transformStyleToCssCasing","to","toDash","urlAttributes","toString","includeImageAlt","includeHtml","all","decodeNamedCharacterReference","characterReference","splice","list","remove","items","chunkStart","parameters","push","hasOwnProperty","combineExtensions","extensions","syntaxExtension","extension","hook","left","right","code","constructs","existing","before","decodeNumericCharacterReference","base","normalizeIdentifier","asciiAlpha","regexCheck","asciiAlphanumeric","asciiAtext","asciiControl","asciiDigit","asciiHexDigit","asciiPunctuation","markdownLineEnding","markdownLineEndingOrSpace","markdownSpace","unicodePunctuation","unicodeWhitespace","regex","normalizeUri","skip","replace","next","factorySpace","effects","ok","max","limit","size","content","initializeContent","contentStart","afterContentStartConstruct","paragraphInitial","previous","lineStart","token","data","document","initializeDocument","containerConstruct","tokenizeContainer","self","stack","continued","childFlow","childToken","lineStartOffset","item","documentContinue","checkNewContainers","closeFlow","indexBeforeExits","indexBeforeFlow","exitContainers","documentContinued","flowStart","thereIsANewContainer","thereIsNoNewContainer","containerContinue","flowContinue","writeToChild","endOfFile","stream","seen","entry","nok","classifyCharacter","resolveAll","events","context","called","resolve","attention","resolveAllAttention","tokenizeAttention","open","group","openingSequence","closingSequence","use","nextEvents","offset","movePoint","attentionMarkers","marker","inside","after","close","autolink","tokenizeAutolink","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","blankLine","tokenizeBlankLine","blockQuote","tokenizeBlockQuoteContinuation","exit","tokenizeBlockQuoteStart","contStart","contBefore","characterEscape","tokenizeCharacterEscape","tokenizeCharacterReference","test","numeric","nonLazyContinuation","tokenizeNonLazyContinuation","codeFenced","tokenizeCodeFenced","closeStart","tokenizeCloseStart","initialPrefix","sizeOpen","beforeSequenceOpen","tail","sequenceOpen","infoBefore","atNonLazyBreak","metaBefore","meta","contentBefore","beforeContentChunk","contentChunk","startBefore","beforeSequenceClose","sequenceClose","sequenceCloseAfter","codeIndented","tokenizeCodeIndented","furtherStart","tokenizeFurtherStart","afterPrefix","atBreak","codeText","resolveCodeText","tokenizeCodeText","tailExitIndex","headEnterIndex","enter","between","SpliceBuffer","initial","stop","deleteCount","removed","chunkedPush","n","subtokenize","eventsArray","jumps","event","lineIndex","otherIndex","otherEvent","subevents","more","subcontent","eventIndex","startPosition","startPositions","tokenizer","childEvents","gaps","current","adjust","breaks","slice","resolveContent","tokenizeContent","continuationConstruct","tokenizeContinuation","chunkInside","contentEnd","contentContinue","startLookahead","prefixed","factoryDestination","literalType","literalMarkerType","rawType","stringType","balance","enclosedBefore","raw","enclosed","enclosedEscape","rawEscape","factoryLabel","markerType","labelInside","labelEscape","factoryTitle","begin","escape","factoryWhitespace","tokenizeDefinition","titleBefore","tokenizeTitleBefore","identifier","labelAfter","markerAfter","destinationBefore","destinationAfter","afterWhitespace","beforeMarker","titleAfter","titleAfterOptionalWhitespace","hardBreakEscape","tokenizeHardBreakEscape","headingAtx","resolveHeadingAtx","tokenizeHeadingAtx","sequenceFurther","htmlBlockNames","htmlRawNames","htmlFlow","resolveToHtmlFlow","tokenizeHtmlFlow","blankLineBefore","tokenizeBlankLineBefore","nonLazyContinuationStart","tokenizeNonLazyContinuationStart","closingTag","buffer","markerB","declarationOpen","tagCloseStart","continuationDeclarationInside","tagName","commentOpenInside","cdataOpenInside","continuation","slash","basicSelfClosing","completeClosingTagAfter","completeAttributeNameBefore","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","continuationAfter","continuationStart","continuationStartNonLazy","continuationBefore","continuationRawEndTag","htmlText","tokenizeHtmlText","returnState","instruction","tagOpen","commentEnd","commentClose","lineEndingBefore","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","lineEndingAfter","lineEndingAfterPrefix","labelEnd","resolveAllLabelEnd","resolveToLabelEnd","tokenizeLabelEnd","resourceConstruct","tokenizeResource","referenceFullConstruct","tokenizeReferenceFull","referenceCollapsedConstruct","tokenizeReferenceCollapsed","newEvents","media","label","labelStart","defined","labelEndNok","labelEndOk","referenceNotFull","resourceStart","resourceBefore","resourceOpen","resourceEnd","resourceDestinationAfter","resourceDestinationMissing","resourceBetween","resourceTitleAfter","referenceFull","referenceFullAfter","referenceFullMissing","referenceCollapsedStart","referenceCollapsedOpen","labelStartImage","tokenizeLabelStartImage","labelStartLink","tokenizeLabelStartLink","lineEnding","tokenizeLineEnding","thematicBreak","tokenizeThematicBreak","sequence","tokenizeListContinuation","tokenizeListEnd","tokenizeListStart","listItemPrefixWhitespaceConstruct","tokenizeListItemPrefixWhitespace","indentConstruct","tokenizeIndent","initialSize","kind","atMarker","onBlank","endOfPrefix","otherPrefix","notBlank","notInCurrentItem","setextUnderline","resolveToSetextUnderline","tokenizeSetextUnderline","heading","paragraph","flow","initializeFlow","atBlankEnding","afterConstruct","resolver","createResolver","string","initializeFactory","field","resolveAllLineSuffixes","initializeText","notText","extraResolver","resolveAllText","chunks","bufferIndex","tabs","chunk","contentInitial","flowInitial","insideSpan","resolveText","disable","createTokenizer","parser","initialize","columnStart","resolveAllConstructs","constructFactory","onsuccessfulconstruct","onsuccessfulcheck","consume","defineSkip","now","sliceSerialize","sliceStream","write","main","addResult","expandTabs","serializeChunks","sliceChunks","_bufferIndex","_index","line","accountForPotentialSkip","chunkIndex","go","fields","construct","onreturn","bogusState","listOfConstructs","constructIndex","currentConstruct","handleListOfConstructs","handleMapOfConstructs","map","handleConstruct","store","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","restore","startIndex","startBufferIndex","endIndex","endBufferIndex","view","head","atTab","parse","defaultConstructs","creator","postprocess","search","preprocess","atCarriageReturn","preprocessor","encoding","endPosition","characterEscapeOrReference","decodeString","decode","$1","$2","hex","fromMarkdown","compiler","config","opener","link","onenterdata","codeFlow","emphasis","hardBreak","image","listItem","onenterlistitemvalue","onenterlistordered","onenterreference","strong","closer","onexitatxheadingsequence","onexitautolinkemail","onexitautolinkprotocol","onexitdata","onexitcharacterreferencemarker","onexitcharacterreferencevalue","onexitcharacterreference","onexitcodefenced","onexitcodefencedfence","onexitcodefencedfenceinfo","onexitcodefencedfencemeta","onexitcodeindented","onexitcodetext","onexitdefinitiondestinationstring","onexitdefinitionlabelstring","onexitdefinitiontitlestring","onexithardbreak","onexithtmlflow","onexithtmltext","onexitimage","onexitlabel","onexitlabeltext","onexitlineending","onexitlink","onexitreferencestring","onexitresourcedestinationstring","onexitresourcetitlestring","onexitresource","onexitsetextheading","onexitsetextheadinglinesequence","onexitsetextheadingtext","configure","compile","resume","listStack","prepareList","handler","defaultOnError","length","containerBalance","listSpread","firstBlankLineIndex","tailIndex","tailEvent","and","errorHandler","onExitError","ancestor","depth","siblings","referenceType","fragment","d","combined","remarkParse","doc","blockquote","strikethrough","footnoteReference","clobberPrefix","id","safeId","counter","reuseCounter","sup","revert","subtype","suffix","contents","imageReference","inlineCode","linkReference","results","loose","listLoose","listItemLoose","spread","table","rows","firstRow","tableContent","body","tableRow","align","cellIndex","cells","cell","tableCell","tab","trimLines","source","last","trimLine","handlers","ignore","VOID","PRIMITIVE","ARRAY","OBJECT","DATE","REGEXP","MAP","SET","ERROR","BIGINT","env","deserializer","$","as","out","unpair","arr","object","flags","set","deserialize","serialized","EMPTY","keys","typeOf","asString","shouldSkip","TYPE","serializer","strict","json","pair","entries","serialize","lossy","structuredClone$1","any","defaultFootnoteBackContent","rereferenceIndex","defaultFootnoteBackLabel","referenceIndex","footer","footnoteBackContent","footnoteBackLabel","footnoteLabel","footnoteLabelTagName","footnoteLabelProperties","listItems","backReferences","counts","tailTail","structuredClone","convert","castFactory","anyFactory","propsFactory","typeFactory","tests","checkAsRecord","nodeAsRecord","testFunction","looksLikeANode","CONTINUE","EXIT","SKIP","visitParents","visitor","reverse","is","step","factory","parents","visit","subresult","grandparents","toResult","nodeAsParent","testOrVisitor","visitorOrReverse","maybeReverse","overload","createState","definitionById","footnoteById","footnoteCounts","defaultHandlers","applyData","patch","wrap","handle","shallow","defaultUnknownHandler","nodes","trimMarkdownSpaceStart","hName","hChildren","hProperties","toHast","foot","remarkRehype","destination","file","hastTree","bail","hasOwn","toStr","defineProperty","gOPD","isArray","isPlainObject","obj","hasOwnConstructor","hasIsPrototypeOf","setProperty","target","getProperty","extend","src","copy","copyIsArray","clone","deep","prototype","trough","fns","pipeline","run","middlewareIndex","callback","middelware","middleware","wrapped","fnExpectsCallback","done","exception","then","minpath","basename","dirname","extname","join","path","assertPath","seenNonSlash","firstNonSlashEnd","extnameIndex","unmatchedSlash","startPart","startDot","preDotState","segments","joined","absolute","normalizeString","allowAboveRoot","lastSegmentLength","lastSlash","dots","lastSlashIndex","minproc","cwd","isUrl","fileUrlOrPath","urlToPath","getPathFromURLPosix","url","pathname","third","order","VFile","isUint8Array","assertNonEmpty","assertPart","stem","part","CallableInstance","proto","apply","Processor","attacher","assertUnfrozen","transformer","realFile","vfile","assertParser","assertCompiler","executor","reject","parseTree","realDone","compileTree","compileResult","looksLikeAValue","complete","assertDone","assertNode","transformers","outputTree","resultingTree","attachers","namespace","addPlugin","addList","addPreset","add","plugin","plugins","entryIndex","primary","currentPrimary","isPlainObj","unified","frozen","asyncName","looksLikeAVFile","changelog","emptyPlugins","emptyRemarkRehypeOptions","safeProtocol","deprecations","Markdown","processor","createProcessor","createFile","post","MarkdownAsync","MarkdownHooks","setError","useState","setTree","useEffect","cancelled","rehypePlugins","remarkPlugins","remarkRehypeOptions","allowedElements","allowElement","components","disallowedElements","skipHtml","unwrapDisallowed","urlTransform","defaultUrlTransform","deprecation","transform","Fragment","colon","questionMark","numberSign","ccount","escapeStringRegexp","findAndReplace","ignored","pairs","toPairs","pairIndex","grandparent","change","matchObject","tupleOrList","tuple","toExpression","toFunction","inConstruct","notInConstruct","gfmAutolinkLiteralFromMarkdown","transformGfmAutolinkLiterals","enterLiteralAutolink","enterLiteralAutolinkValue","exitLiteralAutolink","exitLiteralAutolinkEmail","exitLiteralAutolinkHttp","exitLiteralAutolinkWww","gfmAutolinkLiteralToMarkdown","findUrl","findEmail","protocol","domain","isCorrectDomain","parts","splitUrl","atext","trailExec","trail","closingParenIndex","openingParens","closingParens","email","footnoteReferencePeek","enterFootnoteCallString","enterFootnoteCall","enterFootnoteDefinitionLabelString","enterFootnoteDefinition","exitFootnoteCallString","exitFootnoteCall","exitFootnoteDefinitionLabelString","exitFootnoteDefinition","tracker","subexit","gfmFootnoteFromMarkdown","gfmFootnoteToMarkdown","firstLineBlank","footnoteDefinition","mapAll","mapExceptFirst","blank","constructsWithoutStrikethrough","handleDelete","peekDelete","gfmStrikethroughFromMarkdown","enterStrikethrough","exitStrikethrough","gfmStrikethroughToMarkdown","defaultStringLength","markdownTable","stringLength","alignments","cellMatrix","sizeMatrix","longestCellByColumn","mostCellsPerRow","rowIndex","row","sizes","columnIndex","toAlignment","patternInScope","pattern","listInScope","none","_1","longestStreak","substring","expected","formatCodeAsIndented","checkFence","checkQuote","quote","checkEmphasis","encodeCharacterReference","encodeInfo","outside","outsideKind","insideKind","emphasisPeek","betweenHead","betweenTail","formatHeadingAsSetext","literalWithBreak","rank","htmlPeek","imagePeek","imageReferencePeek","alt","reference","inlineCodePeek","formatLinkAsAutolink","linkPeek","linkReferencePeek","checkBullet","checkBulletOther","bullet","bulletOther","checkBulletOrdered","checkRule","bulletCurrent","useDifferentMarker","firstListItem","checkListItemIndent","listItemIndent","phrasing","checkStrong","strongPeek","checkRuleRepetition","repetition","gfmTableFromMarkdown","enterTable","enterCell","enterRow","exitCodeText","exitTable","gfmTableToMarkdown","padding","alignDelimiters","around","inlineCodeWithTable","handleTable","handleTableCell","handleTableRow","serializeData","handleTableAsData","handleTableRowAsData","matrix","gfmTaskListItemFromMarkdown","exitCheck","exitParagraphWithTaskListItem","gfmTaskListItemToMarkdown","listItemWithTaskListItem","firstParaghraph","sibling","checkable","checkbox","gfmFromMarkdown","gfmToMarkdown","wwwPrefix","tokenizeWwwPrefix","tokenizeDomain","tokenizePath","tokenizeTrail","emailDomainDotTrail","tokenizeEmailDomainDotTrail","wwwAutolink","tokenizeWwwAutolink","previousWww","protocolAutolink","tokenizeProtocolAutolink","previousProtocol","emailAutolink","tokenizeEmailAutolink","previousEmail","gfmAutolinkLiteral","dot","gfmAtext","previousUnbalanced","emailDomain","emailDomainAfter","emailDomainDot","wwwStart","wwwAfter","protocolStart","protocolPrefixInside","protocolSlashesInside","afterProtocol","protocolAfter","wwwPrefixInside","wwwPrefixAfter","underscoreInLastSegment","underscoreInLastLastSegment","domainInside","domainAfter","domainAtPunctuation","sizeClose","pathInside","pathAtPunctuation","trailCharacterReferenceStart","trailBracketAfter","trailCharacterReferenceInside","indent","gfmFootnote","tokenizeDefinitionStart","tokenizeDefinitionContinuation","gfmFootnoteDefinitionEnd","tokenizeGfmFootnoteCall","tokenizePotentialGfmFootnoteCall","resolveToPotentialGfmFootnoteCall","call","replacement","callStart","callData","callEscape","labelAtMarker","whitespaceAfter","gfmStrikethrough","single","tokenizeStrikethrough","resolveAllStrikethrough","EditMap","addImplementation","a","b","vecs","editMap","at","gfmTableAlign","inDelimiterRow","alignIndex","gfmTable","tokenizeTable","resolveTable","sizeB","bodyRowStart","headRowBefore","headRowStart","headRowBreak","headDelimiterStart","headRowData","headRowEscape","headDelimiterBefore","headDelimiterValueBefore","headDelimiterCellBefore","headDelimiterNok","headDelimiterLeftAlignmentAfter","headDelimiterCellAfter","headDelimiterFiller","headDelimiterRightAlignmentAfter","bodyRowBreak","bodyRowData","bodyRowEscape","inFirstCellAwaitingPipe","rowKind","lastCell","afterHeadAwaitingFirstBodyRow","lastTableEnd","currentTable","currentBody","currentCell","flushTableEnd","flushCell","range","rowEnd","previousCell","groupName","valueName","getPoint","relatedStart","relatedEnd","valueToken","tableBody","exits","related","side","tasklistCheck","tokenizeTasklistCheck","gfmTaskListItem","spaceThenNonSpace","gfm","remarkGfm","micromarkExtensions","fromMarkdownExtensions","toMarkdownExtensions"],"mappings":"wGA4DO,SAASA,GAAUC,EAAQC,EAAS,CACzC,MAAMC,EAAsB,CAAE,EAK9B,OAFcF,EAAOA,EAAO,OAAS,CAAC,IAAM,GAAK,CAAC,GAAGA,EAAQ,EAAE,EAAIA,GAGhE,MACEE,EAAS,SAAW,IAAM,IACzB,KACCA,EAAS,UAAY,GAAQ,GAAK,IACtC,EACA,KAAM,CACX,CC/DA,MAAMC,GAAS,0DACTC,GAAY,2DAGZC,GAAe,CAAE,EA0ChB,SAASC,GAAKA,EAAML,EAAS,CAGlC,OAF4BI,GACR,IAAMD,GAAYD,IAC5B,KAAKG,CAAI,CACrB,CCtDA,MAAMC,GAAK,eAaJ,SAASC,GAAWC,EAAO,CAChC,OAAO,OAAOA,GAAU,SACpBA,EAAM,OAAS,OACbC,GAAMD,EAAM,KAAK,EACjB,GACFC,GAAMD,CAAK,CACjB,CAMA,SAASC,GAAMC,EAAO,CACpB,OAAOA,EAAM,QAAQJ,GAAI,EAAE,IAAM,EACnC,CC5BO,MAAMK,EAAO,CAWlB,YAAYC,EAAUC,EAAQC,EAAO,CACnC,KAAK,OAASD,EACd,KAAK,SAAWD,EAEZE,IACF,KAAK,MAAQA,EAEhB,CACH,CAEAH,GAAO,UAAU,OAAS,CAAE,EAC5BA,GAAO,UAAU,SAAW,CAAE,EAC9BA,GAAO,UAAU,MAAQ,OCdlB,SAASI,GAAMC,EAAaF,EAAO,CAExC,MAAMF,EAAW,CAAE,EAEbC,EAAS,CAAE,EAEjB,UAAWI,KAAcD,EACvB,OAAO,OAAOJ,EAAUK,EAAW,QAAQ,EAC3C,OAAO,OAAOJ,EAAQI,EAAW,MAAM,EAGzC,OAAO,IAAIN,GAAOC,EAAUC,EAAQC,CAAK,CAC3C,CCjBO,SAASI,GAAUR,EAAO,CAC/B,OAAOA,EAAM,YAAa,CAC5B,CCNO,MAAMS,EAAK,CAShB,YAAYP,EAAUQ,EAAW,CAC/B,KAAK,UAAYA,EACjB,KAAK,SAAWR,CACjB,CACH,CAEAO,GAAK,UAAU,UAAY,GAC3BA,GAAK,UAAU,WAAa,GAC5BA,GAAK,UAAU,QAAU,GACzBA,GAAK,UAAU,sBAAwB,GACvCA,GAAK,UAAU,eAAiB,GAChCA,GAAK,UAAU,QAAU,GACzBA,GAAK,UAAU,gBAAkB,GACjCA,GAAK,UAAU,OAAS,GACxBA,GAAK,UAAU,kBAAoB,GACnCA,GAAK,UAAU,SAAW,GAC1BA,GAAK,UAAU,eAAiB,GAChCA,GAAK,UAAU,MAAQ,OC/BvB,IAAIE,GAAS,EAEN,MAAMC,EAAUC,GAAW,EACrBC,EAAaD,GAAW,EACxBE,GAAoBF,GAAW,EAC/BG,EAASH,GAAW,EACpBI,EAAiBJ,GAAW,EAC5BK,GAAiBL,GAAW,EAC5BM,GAAwBN,GAAW,EAEhD,SAASA,IAAY,CACnB,MAAO,IAAK,EAAEF,EAChB,sNCLMS,GACJ,OAAO,KAAKC,EAAK,EAGZ,MAAMC,WAAoBb,EAAK,CAcpC,YAAYP,EAAUQ,EAAWa,EAAMnB,EAAO,CAC5C,IAAIoB,EAAQ,GAMZ,GAJA,MAAMtB,EAAUQ,CAAS,EAEzBe,GAAK,KAAM,QAASrB,CAAK,EAErB,OAAOmB,GAAS,SAClB,KAAO,EAAEC,EAAQJ,GAAO,QAAQ,CAC9B,MAAMM,EAAQN,GAAOI,CAAK,EAC1BC,GAAK,KAAML,GAAOI,CAAK,GAAID,EAAOF,GAAMK,CAAK,KAAOL,GAAMK,CAAK,CAAC,CACjE,CAEJ,CACH,CAEAJ,GAAY,UAAU,QAAU,GAchC,SAASG,GAAKpC,EAAQsC,EAAK3B,EAAO,CAC5BA,IACFX,EAAOsC,CAAG,EAAI3B,EAElB,CCnBO,SAAS4B,GAAOrB,EAAY,CAEjC,MAAMsB,EAAa,CAAE,EAEfC,EAAU,CAAE,EAElB,SAAW,CAAC5B,EAAUF,CAAK,IAAK,OAAO,QAAQO,EAAW,UAAU,EAAG,CACrE,MAAMwB,EAAO,IAAIT,GACfpB,EACAK,EAAW,UAAUA,EAAW,YAAc,CAAA,EAAIL,CAAQ,EAC1DF,EACAO,EAAW,KACZ,EAGCA,EAAW,iBACXA,EAAW,gBAAgB,SAASL,CAAQ,IAE5C6B,EAAK,gBAAkB,IAGzBF,EAAW3B,CAAQ,EAAI6B,EAEvBD,EAAQtB,GAAUN,CAAQ,CAAC,EAAIA,EAC/B4B,EAAQtB,GAAUuB,EAAK,SAAS,CAAC,EAAI7B,CACtC,CAED,OAAO,IAAID,GAAO4B,EAAYC,EAASvB,EAAW,KAAK,CACzD,CCjEO,MAAMyB,GAAOJ,GAAO,CACzB,WAAY,CACV,qBAAsB,KACtB,WAAYd,EACZ,iBAAkB,KAClB,SAAUA,EACV,YAAaA,EACb,aAAcE,EACd,aAAcA,EACd,YAAaA,EACb,aAAcC,EACd,YAAa,KACb,gBAAiBA,EACjB,YAAa,KACb,aAAcH,EACd,eAAgBG,EAChB,iBAAkB,KAClB,aAAcH,EACd,WAAYG,EACZ,YAAaH,EACb,aAAc,KACd,WAAYA,EACZ,YAAa,KACb,iBAAkB,KAClB,UAAW,KACX,eAAgBG,EAChB,UAAWD,EACX,SAAU,KACV,UAAWF,EACX,cAAeA,EACf,oBAAqBA,EACrB,gBAAiB,KACjB,SAAUG,EACV,gBAAiB,KACjB,aAAcD,EACd,YAAaF,EACb,aAAcA,EACd,aAAc,KACd,aAAcA,EACd,oBAAqBG,EACrB,aAAcD,EACd,aAAcA,EACd,YAAaA,EACb,aAAcF,EACd,YAAaE,EACb,SAAU,KACV,aAAcA,EACd,aAAcA,EACd,aAAcA,EACd,cAAe,KACf,KAAM,IACP,EACD,UAAUiB,EAAG/B,EAAU,CACrB,OAAOA,IAAa,OAChBA,EACA,QAAUA,EAAS,MAAM,CAAC,EAAE,YAAa,CAC9C,CACH,CAAC,ECpDM,SAASgC,GAAuBC,EAAYzB,EAAW,CAC5D,OAAOA,KAAayB,EAAaA,EAAWzB,CAAS,EAAIA,CAC3D,CCAO,SAAS0B,GAAyBD,EAAYjC,EAAU,CAC7D,OAAOgC,GAAuBC,EAAYjC,EAAS,YAAW,CAAE,CAClE,CCDO,MAAMmC,GAAOT,GAAO,CACzB,WAAY,CACV,cAAe,iBACf,UAAW,QACX,QAAS,MACT,UAAW,YACZ,EACD,gBAAiB,CAAC,UAAW,WAAY,QAAS,UAAU,EAC5D,WAAY,CAEV,KAAM,KACN,OAAQV,GACR,cAAeD,EACf,UAAWA,EACX,OAAQ,KACR,MAAO,KACP,gBAAiBL,EACjB,oBAAqBA,EACrB,eAAgBA,EAChB,IAAK,KACL,GAAI,KACJ,MAAOA,EACP,eAAgB,KAChB,aAAcK,EACd,UAAWL,EACX,SAAUA,EACV,SAAUK,EACV,QAAS,KACT,QAAS,KACT,QAASL,EACT,KAAM,KACN,UAAWK,EACX,KAAMD,EACN,QAAS,KACT,QAAS,KACT,gBAAiBF,EACjB,SAAUF,EACV,aAAcK,EACd,OAAQD,EAASE,GACjB,YAAa,KACb,KAAM,KACN,SAAU,KACV,SAAU,KACV,QAASN,EACT,MAAOA,EACP,IAAK,KACL,QAAS,KACT,SAAUA,EACV,SAAUG,GACV,UAAWD,EACX,QAAS,KACT,aAAc,KACd,cAAe,KACf,KAAM,KACN,WAAY,KACZ,YAAa,KACb,WAAY,KACZ,eAAgBF,EAChB,WAAY,KACZ,QAASK,EACT,OAAQD,EACR,OAAQD,GACR,KAAMC,EACN,KAAM,KACN,SAAU,KACV,QAASC,EACT,UAAWA,EACX,GAAI,KACJ,WAAY,KACZ,YAAa,KACb,MAAOL,EACP,UAAW,KACX,UAAW,KACX,GAAI,KACJ,MAAOA,EACP,OAAQ,KACR,SAAUK,EACV,QAASA,EACT,UAAWL,EACX,SAAUK,EACV,KAAM,KACN,MAAO,KACP,KAAM,KACN,SAAU,KACV,KAAM,KACN,QAAS,KACT,KAAML,EACN,IAAKI,EACL,SAAU,KACV,IAAK,KACL,UAAWA,EACX,MAAO,KACP,OAAQ,KACR,IAAK,KACL,UAAWA,EACX,SAAUJ,EACV,MAAOA,EACP,KAAM,KACN,MAAO,KACP,SAAUA,EACV,WAAYA,EACZ,QAAS,KACT,aAAc,KACd,WAAY,KACZ,cAAe,KACf,cAAe,KACf,eAAgB,KAChB,eAAgB,KAChB,OAAQ,KACR,SAAU,KACV,UAAW,KACX,iBAAkB,KAClB,SAAU,KACV,QAAS,KACT,QAAS,KACT,cAAe,KACf,cAAe,KACf,kBAAmB,KACnB,OAAQ,KACR,YAAa,KACb,MAAO,KACP,WAAY,KACZ,OAAQ,KACR,UAAW,KACX,YAAa,KACb,WAAY,KACZ,YAAa,KACb,WAAY,KACZ,YAAa,KACb,OAAQ,KACR,iBAAkB,KAClB,UAAW,KACX,QAAS,KACT,QAAS,KACT,QAAS,KACT,WAAY,KACZ,aAAc,KACd,QAAS,KACT,UAAW,KACX,UAAW,KACX,WAAY,KACZ,QAAS,KACT,iBAAkB,KAClB,OAAQ,KACR,aAAc,KACd,iBAAkB,KAClB,UAAW,KACX,YAAa,KACb,UAAW,KACX,eAAgB,KAChB,YAAa,KACb,aAAc,KACd,aAAc,KACd,YAAa,KACb,WAAY,KACZ,YAAa,KACb,UAAW,KACX,UAAW,KACX,SAAU,KACV,WAAY,KACZ,WAAY,KACZ,QAAS,KACT,QAAS,KACT,OAAQ,KACR,UAAW,KACX,WAAY,KACZ,WAAY,KACZ,aAAc,KACd,mBAAoB,KACpB,QAAS,KACT,SAAU,KACV,SAAU,KACV,YAAa,KACb,0BAA2B,KAC3B,SAAU,KACV,UAAW,KACX,SAAU,KACV,aAAc,KACd,UAAW,KACX,UAAW,KACX,SAAU,KACV,UAAW,KACX,aAAc,KACd,SAAU,KACV,qBAAsB,KACtB,SAAU,KACV,eAAgB,KAChB,UAAW,KACX,QAAS,KACT,KAAMA,EACN,QAASI,EACT,QAAS,KACT,KAAMC,EACN,YAAa,KACb,YAAaL,EACb,QAAS,KACT,cAAe,KACf,oBAAqB,KACrB,OAAQ,KACR,QAAS,KACT,SAAUA,EACV,eAAgB,KAChB,IAAKK,EACL,SAAUL,EACV,SAAUA,EACV,KAAMI,EACN,QAASA,EACT,QAASC,EACT,MAAO,KACP,OAAQL,EACR,SAAUA,EACV,SAAUA,EACV,mBAAoBA,EACpB,yBAA0BA,EAC1B,eAAgB,KAChB,MAAO,KACP,KAAMI,EACN,MAAO,KACP,KAAM,KACN,KAAMA,EACN,WAAYF,EACZ,IAAK,KACL,OAAQ,KACR,QAAS,KACT,OAAQ,KACR,MAAOE,EACP,KAAM,KACN,MAAO,KACP,SAAUA,EACV,OAAQ,KACR,MAAO,KACP,UAAW,KACX,KAAM,KACN,cAAeJ,EACf,OAAQ,KACR,MAAOE,EACP,MAAOE,EACP,KAAM,KACN,mBAAoB,KAIpB,MAAO,KACP,MAAO,KACP,QAASC,EACT,KAAM,KACN,WAAY,KACZ,QAAS,KACT,OAAQD,EACR,YAAa,KACb,aAAcA,EACd,YAAa,KACb,YAAa,KACb,KAAM,KACN,QAAS,KACT,QAAS,KACT,MAAO,KACP,KAAM,KACN,SAAU,KACV,SAAU,KACV,MAAO,KACP,QAASJ,EACT,QAASA,EACT,MAAO,KACP,KAAM,KACN,MAAO,KACP,YAAa,KACb,OAAQI,EACR,WAAYA,EACZ,KAAM,KACN,SAAU,KACV,OAAQ,KACR,aAAcA,EACd,YAAaA,EACb,SAAUJ,EACV,OAAQA,EACR,QAASA,EACT,OAAQA,EACR,OAAQ,KACR,QAAS,KACT,OAAQ,KACR,IAAK,KACL,YAAaI,EACb,MAAO,KACP,OAAQ,KACR,UAAWF,EACX,QAAS,KACT,QAAS,KACT,KAAM,KACN,UAAWE,EACX,UAAW,KACX,QAAS,KACT,OAAQ,KACR,MAAO,KACP,OAAQA,EAGR,kBAAmB,KACnB,YAAa,KACb,SAAU,KACV,wBAAyBJ,EACzB,sBAAuBA,EACvB,OAAQ,KACR,SAAU,KACV,QAASI,EACT,SAAU,KACV,aAAc,IACf,EACD,MAAO,OACP,UAAWoB,EACb,CAAC,ECvTYE,GAAMV,GAAO,CACxB,WAAY,CACV,aAAc,gBACd,kBAAmB,qBACnB,WAAY,cACZ,cAAe,iBACf,UAAW,aACX,UAAW,QACX,SAAU,YACV,SAAU,YACV,mBAAoB,sBACpB,0BAA2B,8BAC3B,aAAc,gBACd,eAAgB,kBAChB,YAAa,cACb,SAAU,WACV,iBAAkB,oBAClB,iBAAkB,oBAClB,YAAa,eACb,SAAU,YACV,WAAY,cACZ,aAAc,gBACd,WAAY,cACZ,SAAU,YACV,eAAgB,mBAChB,YAAa,eACb,UAAW,aACX,YAAa,eACb,WAAY,cACZ,UAAW,aACX,2BAA4B,+BAC5B,yBAA0B,6BAC1B,SAAU,WACV,UAAW,cACX,aAAc,iBACd,aAAc,iBACd,eAAgB,kBAChB,cAAe,iBACf,cAAe,iBACf,UAAW,aACX,UAAW,aACX,YAAa,eACb,QAAS,WACT,YAAa,gBACb,aAAc,iBACd,QAAS,WACT,QAAS,WACT,QAAS,WACT,SAAU,YACV,MAAO,SACP,UAAW,cACX,WAAY,eACZ,QAAS,UACT,WAAY,aACZ,aAAc,eACd,cAAe,gBACf,QAAS,UACT,SAAU,WACV,UAAW,YACX,iBAAkB,mBAClB,SAAU,WACV,QAAS,UACT,QAAS,UACT,OAAQ,SACR,YAAa,cACb,MAAO,QACP,WAAY,aACZ,OAAQ,SACR,UAAW,YACX,YAAa,cACb,WAAY,aACZ,YAAa,cACb,WAAY,aACZ,YAAa,cACb,OAAQ,SACR,iBAAkB,mBAClB,UAAW,YACX,MAAO,QACP,QAAS,UACT,QAAS,UACT,QAAS,UACT,UAAW,YACX,WAAY,aACZ,aAAc,eACd,QAAS,UACT,UAAW,YACX,UAAW,YACX,WAAY,aACZ,QAAS,UACT,OAAQ,SACR,aAAc,eACd,iBAAkB,mBAClB,YAAa,cACb,UAAW,YACX,YAAa,cACb,aAAc,eACd,aAAc,eACd,YAAa,cACb,WAAY,aACZ,YAAa,cACb,UAAW,YACX,aAAc,eACd,UAAW,YACX,SAAU,WACV,WAAY,aACZ,WAAY,aACZ,QAAS,UACT,QAAS,UACT,OAAQ,SACR,UAAW,YACX,WAAY,aACZ,WAAY,aACZ,aAAc,eACd,SAAU,WACV,QAAS,UACT,SAAU,WACV,SAAU,WACV,SAAU,WACV,UAAW,YACX,SAAU,WACV,OAAQ,SACR,UAAW,YACX,UAAW,YACX,SAAU,WACV,UAAW,YACX,aAAc,eACd,SAAU,WACV,SAAU,WACV,eAAgB,iBAChB,UAAW,YACX,OAAQ,SACR,iBAAkB,oBAClB,kBAAmB,qBACnB,WAAY,cACZ,QAAS,WACT,cAAe,iBACf,eAAgB,iBAChB,gBAAiB,mBACjB,eAAgB,kBAChB,UAAW,aACX,YAAa,eACb,sBAAuB,yBACvB,uBAAwB,0BACxB,gBAAiB,mBACjB,iBAAkB,oBAClB,cAAe,iBACf,eAAgB,kBAChB,iBAAkB,oBAClB,cAAe,iBACf,YAAa,eACb,SAAU,WACV,WAAY,cACZ,eAAgB,kBAChB,cAAe,iBACf,gBAAiB,mBACjB,OAAQ,SACR,kBAAmB,qBACnB,mBAAoB,sBACpB,YAAa,eACb,aAAc,gBACd,WAAY,eACZ,YAAa,eACb,SAAU,YACV,aAAc,gBACd,cAAe,iBACf,aAAc,gBACd,SAAU,aACV,YAAa,gBACb,YAAa,gBACb,YAAa,eACb,YAAa,eACb,QAAS,WAET,cAAe,gBACf,cAAe,eAChB,EACD,WAAY,CACV,MAAOT,GACP,aAAcH,EACd,WAAY,KACZ,SAAU,KACV,kBAAmB,KACnB,WAAYA,EACZ,UAAWA,EACX,WAAY,KACZ,OAAQA,EACR,cAAe,KACf,cAAe,KACf,QAASA,EACT,UAAW,KACX,cAAe,KACf,cAAe,KACf,YAAa,KACb,KAAM,KACN,MAAO,KACP,KAAMA,EACN,GAAI,KACJ,SAAU,KACV,UAAWA,EACX,UAAWC,EACX,KAAM,KACN,SAAU,KACV,cAAe,KACf,SAAU,KACV,MAAO,KACP,mBAAoB,KACpB,0BAA2B,KAC3B,aAAc,KACd,eAAgB,KAChB,QAAS,KACT,kBAAmB,KACnB,iBAAkB,KAClB,YAAa,KACb,OAAQ,KACR,GAAI,KACJ,GAAI,KACJ,EAAG,KACH,SAAU,KACV,cAAe,KACf,QAASD,EACT,gBAAiBA,EACjB,UAAW,KACX,QAAS,KACT,IAAK,KACL,QAASA,EACT,iBAAkB,KAClB,SAAUJ,EACV,GAAI,KACJ,GAAI,KACJ,SAAU,KACV,SAAU,KACV,UAAWI,EACX,iBAAkB,KAClB,IAAK,KACL,MAAO,KACP,SAAUA,EACV,0BAA2B,KAC3B,KAAM,KACN,YAAaA,EACb,SAAU,KACV,OAAQ,KACR,UAAW,KACX,YAAa,KACb,WAAY,KACZ,aAAc,KACd,UAAW,KACX,eAAgB,KAChB,WAAY,KACZ,SAAU,KACV,eAAgB,KAChB,YAAa,KACb,UAAW,KACX,YAAa,KACb,WAAY,KACZ,OAAQ,KACR,GAAI,KACJ,KAAM,KACN,GAAI,KACJ,GAAI,KACJ,GAAIE,GACJ,GAAIA,GACJ,UAAWA,GACX,2BAA4B,KAC5B,yBAA0B,KAC1B,SAAU,KACV,kBAAmB,KACnB,cAAe,KACf,QAAS,KACT,QAASF,EACT,kBAAmB,KACnB,WAAY,KACZ,OAAQ,KACR,KAAM,KACN,SAAU,KACV,UAAWA,EACX,aAAcA,EACd,aAAcA,EACd,GAAI,KACJ,YAAaA,EACb,eAAgB,KAChB,kBAAmB,KACnB,GAAI,KACJ,IAAK,KACL,UAAWA,EACX,EAAGA,EACH,GAAIA,EACJ,GAAIA,EACJ,GAAIA,EACJ,GAAIA,EACJ,aAAcG,GACd,iBAAkB,KAClB,UAAW,KACX,WAAY,KACZ,SAAU,KACV,QAAS,KACT,KAAM,KACN,aAAc,KACd,cAAe,KACf,cAAe,KACf,kBAAmBH,EACnB,MAAO,KACP,UAAW,KACX,UAAW,KACX,YAAa,KACb,aAAc,KACd,YAAa,KACb,YAAa,KACb,KAAM,KACN,iBAAkB,KAClB,UAAW,KACX,aAAc,KACd,IAAK,KACL,MAAO,KACP,uBAAwB,KACxB,sBAAuB,KACvB,UAAWA,EACX,UAAW,KACX,OAAQ,KACR,IAAK,KACL,KAAM,KACN,KAAM,KACN,QAAS,KACT,YAAa,KACb,aAAc,KACd,QAAS,KACT,QAAS,KACT,QAAS,KACT,SAAU,KACV,MAAO,KACP,UAAW,KACX,WAAY,KACZ,WAAY,KACZ,SAAU,KACV,OAAQ,KACR,QAAS,KACT,WAAY,KACZ,aAAc,KACd,cAAe,KACf,QAAS,KACT,SAAU,KACV,UAAW,KACX,iBAAkB,KAClB,SAAU,KACV,QAAS,KACT,QAAS,KACT,OAAQ,KACR,YAAa,KACb,MAAO,KACP,WAAY,KACZ,OAAQ,KACR,UAAW,KACX,YAAa,KACb,WAAY,KACZ,YAAa,KACb,WAAY,KACZ,YAAa,KACb,OAAQ,KACR,iBAAkB,KAClB,UAAW,KACX,MAAO,KACP,QAAS,KACT,QAAS,KACT,QAAS,KACT,UAAW,KACX,WAAY,KACZ,aAAc,KACd,QAAS,KACT,UAAW,KACX,UAAW,KACX,WAAY,KACZ,QAAS,KACT,OAAQ,KACR,aAAc,KACd,iBAAkB,KAClB,YAAa,KACb,UAAW,KACX,YAAa,KACb,aAAc,KACd,aAAc,KACd,YAAa,KACb,WAAY,KACZ,YAAa,KACb,UAAW,KACX,aAAc,KACd,UAAW,KACX,SAAU,KACV,WAAY,KACZ,WAAY,KACZ,QAAS,KACT,QAAS,KACT,OAAQ,KACR,UAAW,KACX,WAAY,KACZ,WAAY,KACZ,aAAc,KACd,SAAU,KACV,QAAS,KACT,SAAU,KACV,SAAU,KACV,SAAU,KACV,UAAW,KACX,SAAU,KACV,OAAQ,KACR,UAAW,KACX,UAAW,KACX,SAAU,KACV,UAAW,KACX,aAAc,KACd,SAAU,KACV,SAAU,KACV,eAAgB,KAChB,UAAW,KACX,OAAQ,KACR,QAAS,KACT,SAAU,KACV,MAAO,KACP,OAAQ,KACR,YAAa,KACb,OAAQ,KACR,SAAU,KACV,QAAS,KACT,iBAAkBA,EAClB,kBAAmBA,EACnB,WAAY,KACZ,QAAS,KACT,KAAM,KACN,WAAYA,EACZ,oBAAqB,KACrB,iBAAkB,KAClB,aAAc,KACd,MAAO,KACP,KAAMC,EACN,MAAO,KACP,cAAe,KACf,cAAe,KACf,OAAQ,KACR,UAAWD,EACX,UAAWA,EACX,UAAWA,EACX,cAAe,KACf,oBAAqB,KACrB,eAAgB,KAChB,UAAW,KACX,SAAUG,GACV,EAAG,KACH,OAAQ,KACR,eAAgB,KAChB,KAAM,KACN,KAAM,KACN,IAAKA,GACL,IAAKA,GACL,gBAAiB,KACjB,YAAa,KACb,UAAW,KACX,mBAAoBA,GACpB,iBAAkBA,GAClB,cAAeA,GACf,gBAAiBA,GACjB,SAAU,KACV,QAAS,KACT,OAAQ,KACR,OAAQ,KACR,GAAI,KACJ,GAAI,KACJ,MAAO,KACP,KAAM,KACN,eAAgB,KAChB,KAAM,KACN,MAAO,KACP,aAAc,KACd,iBAAkBH,EAClB,iBAAkBA,EAClB,aAAc,KACd,QAAS,KACT,YAAa,KACb,aAAc,KACd,MAAO,KACP,MAAO,KACP,YAAa,KACb,UAAW,KACX,YAAa,KACb,sBAAuBA,EACvB,uBAAwBA,EACxB,OAAQ,KACR,OAAQ,KACR,gBAAiBG,GACjB,iBAAkB,KAClB,cAAe,KACf,eAAgB,KAChB,iBAAkBH,EAClB,cAAeA,EACf,YAAa,KACb,MAAO,KACP,aAAcA,EACd,aAAc,KACd,oBAAqB,KACrB,WAAY,KACZ,cAAe,KACf,qBAAsB,KACtB,eAAgBG,GAChB,SAAUH,EACV,YAAa,KACb,OAAQ,KACR,QAASA,EACT,QAASA,EACT,WAAY,KACZ,eAAgB,KAChB,cAAe,KACf,WAAY,KACZ,cAAe,KACf,MAAO,KACP,kBAAmB,KACnB,KAAM,KACN,OAAQG,GACR,GAAI,KACJ,UAAW,KACX,gBAAiB,KACjB,GAAI,KACJ,GAAI,KACJ,kBAAmBH,EACnB,mBAAoBA,EACpB,QAAS,KACT,YAAa,KACb,aAAc,KACd,WAAYA,EACZ,OAAQ,KACR,YAAaA,EACb,cAAeA,EACf,aAAc,KACd,SAAUA,EACV,aAAcA,EACd,QAAS,KACT,SAAUA,EACV,YAAaA,EACb,YAAaA,EACb,QAAS,KACT,WAAY,KACZ,WAAY,KACZ,MAAO,KACP,OAAQ,KACR,YAAa,KACb,YAAa,KACb,EAAG,KACH,GAAI,KACJ,GAAI,KACJ,iBAAkB,KAClB,QAASA,EACT,EAAG,KACH,GAAI,KACJ,GAAI,KACJ,iBAAkB,KAClB,EAAG,KACH,WAAY,IACb,EACD,MAAO,MACP,UAAWkB,EACb,CAAC,ECpjBYK,GAAQX,GAAO,CAC1B,WAAY,CACV,aAAc,KACd,aAAc,KACd,UAAW,KACX,UAAW,KACX,UAAW,KACX,WAAY,KACZ,UAAW,IACZ,EACD,MAAO,QACP,UAAUK,EAAG/B,EAAU,CACrB,MAAO,SAAWA,EAAS,MAAM,CAAC,EAAE,YAAa,CAClD,CACH,CAAC,ECbYsC,GAAQZ,GAAO,CAC1B,WAAY,CAAC,WAAY,aAAa,EACtC,WAAY,CAAC,WAAY,KAAM,MAAO,IAAI,EAC1C,MAAO,QACP,UAAWQ,EACb,CAAC,ECNYK,GAAMb,GAAO,CACxB,WAAY,CAAC,QAAS,KAAM,QAAS,KAAM,SAAU,IAAI,EACzD,MAAO,MACP,UAAUK,EAAG/B,EAAU,CACrB,MAAO,OAASA,EAAS,MAAM,CAAC,EAAE,YAAa,CAChD,CACH,CAAC,ECGYwC,GAAc,CACzB,QAAS,UACT,SAAU,WACV,OAAQ,SACR,gBAAiB,kBACjB,iBAAkB,mBAClB,cAAe,gBACf,eAAgB,iBAChB,iBAAkB,mBAClB,OAAQ,SACR,aAAc,eACd,aAAc,eACd,UAAW,YACX,UAAW,YACX,UAAW,YACX,WAAY,aACZ,UAAW,YACX,WAAY,YACd,ECrBMC,GAAM,SACNC,GAAO,UACPC,GAAQ,kBAgCP,SAASC,GAAKC,EAAQ/C,EAAO,CAClC,MAAMG,EAASK,GAAUR,CAAK,EAC9B,IAAIE,EAAWF,EACXgD,EAAOvC,GAEX,GAAIN,KAAU4C,EAAO,OACnB,OAAOA,EAAO,SAASA,EAAO,OAAO5C,CAAM,CAAC,EAG9C,GAAIA,EAAO,OAAS,GAAKA,EAAO,MAAM,EAAG,CAAC,IAAM,QAAU0C,GAAM,KAAK7C,CAAK,EAAG,CAE3E,GAAIA,EAAM,OAAO,CAAC,IAAM,IAAK,CAE3B,MAAMiD,EAAOjD,EAAM,MAAM,CAAC,EAAE,QAAQ4C,GAAMM,EAAS,EACnDhD,EAAW,OAAS+C,EAAK,OAAO,CAAC,EAAE,cAAgBA,EAAK,MAAM,CAAC,CACrE,KAAW,CAEL,MAAMA,EAAOjD,EAAM,MAAM,CAAC,EAE1B,GAAI,CAAC4C,GAAK,KAAKK,CAAI,EAAG,CACpB,IAAIE,EAASF,EAAK,QAAQN,GAAKS,EAAK,EAEhCD,EAAO,OAAO,CAAC,IAAM,MACvBA,EAAS,IAAMA,GAGjBnD,EAAQ,OAASmD,CAClB,CACF,CAEDH,EAAO1B,EACR,CAED,OAAO,IAAI0B,EAAK9C,EAAUF,CAAK,CACjC,CAQA,SAASoD,GAAMC,EAAI,CACjB,MAAO,IAAMA,EAAG,YAAa,CAC/B,CAQA,SAASH,GAAUG,EAAI,CACrB,OAAOA,EAAG,OAAO,CAAC,EAAE,YAAa,CACnC,CCrFO,MAAMhB,GAAOhC,GAAM,CAAC2B,GAAMsB,GAAUf,GAAOC,GAAOC,EAAG,EAAG,MAAM,EAKxDH,GAAMjC,GAAM,CAAC2B,GAAMuB,GAAShB,GAAOC,GAAOC,EAAG,EAAG,KAAK,ECK3D,SAASrD,GAAUC,EAAQ,CAChC,OAAOA,EAAO,KAAK,GAAG,EAAE,KAAM,CAChC,oDCrBA,IAAImE,EAAgB,kCAEhBC,EAAgB,MAChBC,EAAmB,OAGnBC,EAAiB,yCACjBC,EAAc,QACdC,EAAc,uDACdC,EAAkB,UAGlBC,EAAa,aAGbC,EAAU;AAAA,EACVC,EAAgB,IAChBC,EAAW,IACXC,EAAe,GAGfC,EAAe,UACfC,EAAmB,cASvBC,GAAiB,SAAUC,EAAOjF,EAAS,CACzC,GAAI,OAAOiF,GAAU,SACnB,MAAM,IAAI,UAAU,iCAAiC,EAGvD,GAAI,CAACA,EAAO,MAAO,GAEnBjF,EAAUA,GAAW,GAKrB,IAAIkF,EAAS,EACTC,EAAS,EAOb,SAASC,EAAeC,EAAK,CAC3B,IAAIC,EAAQD,EAAI,MAAMlB,CAAa,EAC/BmB,IAAOJ,GAAUI,EAAM,QAC3B,IAAIC,EAAIF,EAAI,YAAYX,CAAO,EAC/BS,EAAS,CAACI,EAAIF,EAAI,OAASE,EAAIJ,EAASE,EAAI,MAC7C,CAOD,SAASG,GAAW,CAClB,IAAIC,EAAQ,CAAE,KAAMP,EAAQ,OAAQC,CAAM,EAC1C,OAAO,SAAUO,EAAM,CACrB,OAAAA,EAAK,SAAW,IAAIC,EAASF,CAAK,EAClClF,IACOmF,CACb,CACG,CAUD,SAASC,EAASF,EAAO,CACvB,KAAK,MAAQA,EACb,KAAK,IAAM,CAAE,KAAMP,EAAQ,OAAQC,GACnC,KAAK,OAASnF,EAAQ,MACvB,CAKD2F,EAAS,UAAU,QAAUV,EAU7B,SAASW,EAAMC,EAAK,CAClB,IAAIC,EAAM,IAAI,MACZ9F,EAAQ,OAAS,IAAMkF,EAAS,IAAMC,EAAS,KAAOU,CAC5D,EAOI,GANAC,EAAI,OAASD,EACbC,EAAI,SAAW9F,EAAQ,OACvB8F,EAAI,KAAOZ,EACXY,EAAI,OAASX,EACbW,EAAI,OAASb,EAET,CAAAjF,EAAQ,OAGV,MAAM8F,CAET,CAQD,SAASC,EAAMzF,EAAI,CACjB,IAAI0F,EAAI1F,EAAG,KAAK2E,CAAK,EACrB,GAAKe,EACL,KAAIX,EAAMW,EAAE,CAAC,EACb,OAAAZ,EAAeC,CAAG,EAClBJ,EAAQA,EAAM,MAAMI,EAAI,MAAM,EACvBW,EACR,CAKD,SAASzF,GAAa,CACpBwF,EAAM3B,CAAgB,CACvB,CAQD,SAAS6B,EAASC,EAAO,CACvB,IAAIC,EAEJ,IADAD,EAAQA,GAAS,GACTC,EAAIC,KACND,IAAM,IACRD,EAAM,KAAKC,CAAC,EAGhB,OAAOD,CACR,CAQD,SAASE,GAAU,CACjB,IAAIC,EAAMb,IACV,GAAI,EAAAb,GAAiBM,EAAM,OAAO,CAAC,GAAKL,GAAYK,EAAM,OAAO,CAAC,GAGlE,SADIM,EAAI,EAENV,GAAgBI,EAAM,OAAOM,CAAC,IAC7BX,GAAYK,EAAM,OAAOM,CAAC,GAAKZ,GAAiBM,EAAM,OAAOM,EAAI,CAAC,IAEnE,EAAEA,EAIJ,GAFAA,GAAK,EAEDV,IAAiBI,EAAM,OAAOM,EAAI,CAAC,EACrC,OAAOK,EAAM,wBAAwB,EAGvC,IAAIP,EAAMJ,EAAM,MAAM,EAAGM,EAAI,CAAC,EAC9B,OAAAJ,GAAU,EACVC,EAAeC,CAAG,EAClBJ,EAAQA,EAAM,MAAMM,CAAC,EACrBJ,GAAU,EAEHkB,EAAI,CACT,KAAMvB,EACN,QAASO,CACf,CAAK,EACF,CAQD,SAASiB,GAAc,CACrB,IAAID,EAAMb,IAGNe,EAAOR,EAAM1B,CAAc,EAC/B,GAAKkC,EAIL,IAHAH,IAGI,CAACL,EAAMzB,CAAW,EAAG,OAAOsB,EAAM,sBAAsB,EAG5D,IAAIY,EAAMT,EAAMxB,CAAW,EAEvBkC,EAAMJ,EAAI,CACZ,KAAMtB,EACN,SAAU2B,EAAKH,EAAK,CAAC,EAAE,QAAQrC,EAAeW,CAAY,CAAC,EAC3D,MAAO2B,EACHE,EAAKF,EAAI,CAAC,EAAE,QAAQtC,EAAeW,CAAY,CAAC,EAChDA,CACV,CAAK,EAGD,OAAAkB,EAAMvB,CAAe,EAEdiC,EACR,CAOD,SAASE,GAAe,CACtB,IAAIC,EAAQ,CAAA,EAEZX,EAASW,CAAK,EAId,QADIC,EACIA,EAAOP,KACTO,IAAS,KACXD,EAAM,KAAKC,CAAI,EACfZ,EAASW,CAAK,GAIlB,OAAOA,CACR,CAED,OAAArG,IACOoG,EAAY,CACrB,EAQA,SAASD,EAAKrB,EAAK,CACjB,OAAOA,EAAMA,EAAI,QAAQZ,EAAYI,CAAY,EAAIA,CACvD,qDCnQA,IAAIiC,EAAmBC,IAAQA,GAAK,iBAAoB,SAAUC,EAAK,CACnE,OAAQA,GAAOA,EAAI,WAAcA,EAAM,CAAE,QAAWA,EACxD,EACA,OAAO,eAAeC,GAAS,aAAc,CAAE,MAAO,EAAI,CAAE,EAC7CA,GAAA,QAAGC,EAClB,IAAIC,EAAwBL,EAAgBM,GAAA,CAA8B,EAe1E,SAASF,EAAcjC,EAAOoC,EAAU,CACpC,IAAIC,EAAc,KAClB,GAAI,CAACrC,GAAS,OAAOA,GAAU,SAC3B,OAAOqC,EAEX,IAAIX,KAAmBQ,EAAsB,SAASlC,CAAK,EACvDsC,EAAc,OAAOF,GAAa,WACtC,OAAAV,EAAa,QAAQ,SAAUL,EAAa,CACxC,GAAIA,EAAY,OAAS,cAGzB,KAAI1F,EAAW0F,EAAY,SAAU5F,EAAQ4F,EAAY,MACrDiB,EACAF,EAASzG,EAAUF,EAAO4F,CAAW,EAEhC5F,IACL4G,EAAcA,GAAe,GAC7BA,EAAY1G,CAAQ,EAAIF,GAEpC,CAAK,EACM4G,CACV,2DCzCD,OAAO,eAAeE,GAAS,aAAc,CAAE,MAAO,EAAI,CAAE,EAC3CA,GAAA,UAAG,OACpB,IAAIC,EAAwB,qBACxBC,EAAe,YACfC,EAAkB,UAClBC,EAAsB,6BACtBC,EAAyB,UAIzBC,EAAgB,SAAUlH,EAAU,CACpC,MAAO,CAACA,GACJ+G,EAAgB,KAAK/G,CAAQ,GAC7B6G,EAAsB,KAAK7G,CAAQ,CAC3C,EAIImH,EAAa,SAAUhC,EAAOiC,EAAW,CACzC,OAAOA,EAAU,aACrB,EAIIC,EAAa,SAAUlC,EAAOmC,EAAQ,CAAE,MAAO,GAAG,OAAOA,EAAQ,GAAG,GAIpEC,EAAY,SAAUvH,EAAUZ,EAAS,CAEzC,OADIA,IAAY,SAAUA,EAAU,CAAE,GAClC8H,EAAclH,CAAQ,EACfA,GAEXA,EAAWA,EAAS,cAChBZ,EAAQ,YAERY,EAAWA,EAAS,QAAQiH,EAAwBI,CAAU,EAI9DrH,EAAWA,EAAS,QAAQgH,EAAqBK,CAAU,EAExDrH,EAAS,QAAQ8G,EAAcK,CAAU,EACpD,EACiB,OAAAP,GAAA,UAAGW,kDC5CpB,IAAIrB,EAAmBC,IAAQA,GAAK,iBAAoB,SAAUC,EAAK,CACnE,OAAQA,GAAOA,EAAI,WAAcA,EAAM,CAAE,QAAWA,EACxD,EACIoB,EAAoBtB,EAAgBM,GAAA,CAA0B,EAC9DiB,EAAcC,KAIlB,SAASC,EAAUtD,EAAOjF,EAAS,CAC/B,IAAIwI,EAAS,CAAA,EACb,MAAI,CAACvD,GAAS,OAAOA,GAAU,aAG3BmD,EAAkB,SAASnD,EAAO,SAAUrE,EAAUF,EAAO,CAEzDE,GAAYF,IACZ8H,KAAWH,EAAY,WAAWzH,EAAUZ,CAAO,CAAC,EAAIU,EAEpE,CAAK,EACM8H,CACV,CACD,OAAAD,EAAU,QAAUA,EACNtB,GAAGsB,iCCMJE,GAAWC,GAAM,KAAK,EAUtBC,GAAaD,GAAM,OAAO,EAUvC,SAASA,GAAME,EAAM,CACnB,OAAOF,EAQP,SAASA,EAAMhD,EAAM,CACnB,MAAMgD,EAAShD,GAAQA,EAAK,UAAYA,EAAK,SAASkD,CAAI,GAAM,CAAE,EAElE,GACE,OAAOF,EAAM,MAAS,UACtBA,EAAM,KAAO,GACb,OAAOA,EAAM,QAAW,UACxBA,EAAM,OAAS,EAEf,MAAO,CACL,KAAMA,EAAM,KACZ,OAAQA,EAAM,OACd,OACE,OAAOA,EAAM,QAAW,UAAYA,EAAM,OAAS,GAC/CA,EAAM,OACN,MACP,CAEJ,CACH,CAUO,SAASlD,GAASE,EAAM,CAC7B,MAAMD,EAAQkD,GAAWjD,CAAI,EACvBmD,EAAMJ,GAAS/C,CAAI,EAEzB,GAAID,GAASoD,EACX,MAAO,CAAC,MAAApD,EAAO,IAAAoD,CAAG,CAEtB,CC1DO,SAASC,GAAkBpI,EAAO,CAEvC,MAAI,CAACA,GAAS,OAAOA,GAAU,SACtB,GAIL,aAAcA,GAAS,SAAUA,EAC5B8E,GAAS9E,EAAM,QAAQ,EAI5B,UAAWA,GAAS,QAASA,EACxB8E,GAAS9E,CAAK,EAInB,SAAUA,GAAS,WAAYA,EAC1BgI,GAAMhI,CAAK,EAIb,EACT,CAMA,SAASgI,GAAMA,EAAO,CACpB,OAAOxG,GAAMwG,GAASA,EAAM,IAAI,EAAI,IAAMxG,GAAMwG,GAASA,EAAM,MAAM,CACvE,CAMA,SAASlD,GAASa,EAAK,CACrB,OAAOqC,GAAMrC,GAAOA,EAAI,KAAK,EAAI,IAAMqC,GAAMrC,GAAOA,EAAI,GAAG,CAC7D,CAMA,SAASnE,GAAMxB,EAAO,CACpB,OAAOA,GAAS,OAAOA,GAAU,SAAWA,EAAQ,CACtD,CCvDO,MAAMqI,UAAqB,KAAM,CAwDtC,YAAYC,EAAeC,EAAwBC,EAAQ,CACzD,MAAO,EAEH,OAAOD,GAA2B,WACpCC,EAASD,EACTA,EAAyB,QAI3B,IAAIE,EAAS,GAETnJ,EAAU,CAAE,EACZoJ,EAAc,GAwClB,GAtCIH,IAGA,SAAUA,GACV,WAAYA,EAEZjJ,EAAU,CAAC,MAAOiJ,CAAsB,EAIxC,UAAWA,GACX,QAASA,EAETjJ,EAAU,CAAC,MAAOiJ,CAAsB,EAGjC,SAAUA,EACjBjJ,EAAU,CACR,UAAW,CAACiJ,CAAsB,EAClC,MAAOA,EAAuB,QAC/B,EAIDjJ,EAAU,CAAC,GAAGiJ,CAAsB,GAIpC,OAAOD,GAAkB,SAC3BG,EAASH,EAGF,CAAChJ,EAAQ,OAASgJ,IACzBI,EAAc,GACdD,EAASH,EAAc,QACvBhJ,EAAQ,MAAQgJ,GAGd,CAAChJ,EAAQ,QAAU,CAACA,EAAQ,QAAU,OAAOkJ,GAAW,SAAU,CACpE,MAAMhH,EAAQgH,EAAO,QAAQ,GAAG,EAE5BhH,IAAU,GACZlC,EAAQ,OAASkJ,GAEjBlJ,EAAQ,OAASkJ,EAAO,MAAM,EAAGhH,CAAK,EACtClC,EAAQ,OAASkJ,EAAO,MAAMhH,EAAQ,CAAC,EAE1C,CAED,GAAI,CAAClC,EAAQ,OAASA,EAAQ,WAAaA,EAAQ,UAAW,CAC5D,MAAMqJ,EAASrJ,EAAQ,UAAUA,EAAQ,UAAU,OAAS,CAAC,EAEzDqJ,IACFrJ,EAAQ,MAAQqJ,EAAO,SAE1B,CAED,MAAM5D,EACJzF,EAAQ,OAAS,UAAWA,EAAQ,MAChCA,EAAQ,MAAM,MACdA,EAAQ,MAQd,KAAK,UAAYA,EAAQ,WAAa,OAOtC,KAAK,MAAQA,EAAQ,OAAS,OAO9B,KAAK,OAASyF,EAAQA,EAAM,OAAS,OAWrC,KAAK,MAAQ,OAOb,KAAK,KAQL,KAAK,QAAU0D,EAOf,KAAK,KAAO1D,EAAQA,EAAM,KAAO,OASjC,KAAK,KAAOqD,GAAkB9I,EAAQ,KAAK,GAAK,MAOhD,KAAK,MAAQA,EAAQ,OAAS,OAO9B,KAAK,OAAS,KAAK,QAOnB,KAAK,OAASA,EAAQ,QAAU,OAOhC,KAAK,OAASA,EAAQ,QAAU,OAWhC,KAAK,MACHoJ,GAAepJ,EAAQ,OAAS,OAAOA,EAAQ,MAAM,OAAU,SAC3DA,EAAQ,MAAM,MACd,GAYN,KAAK,OAOL,KAAK,SAOL,KAAK,KAUL,KAAK,GAEN,CACH,CAEA+I,EAAa,UAAU,KAAO,GAC9BA,EAAa,UAAU,KAAO,GAC9BA,EAAa,UAAU,OAAS,GAChCA,EAAa,UAAU,QAAU,GACjCA,EAAa,UAAU,MAAQ,GAC/BA,EAAa,UAAU,OAAS,OAChCA,EAAa,UAAU,KAAO,OAC9BA,EAAa,UAAU,UAAY,OACnCA,EAAa,UAAU,MAAQ,OAC/BA,EAAa,UAAU,MAAQ,OAC/BA,EAAa,UAAU,MAAQ,OAC/BA,EAAa,UAAU,OAAS,OAChCA,EAAa,UAAU,OAAS,OCvShC,MAAMO,GAAM,CAAE,EAAC,eAGTC,GAAW,IAAI,IAEflG,GAAM,SAaNmG,GAAgB,IAAI,IAAI,CAAC,QAAS,QAAS,QAAS,QAAS,IAAI,CAAC,EAElEC,GAAmB,IAAI,IAAI,CAAC,KAAM,IAAI,CAAC,EAEvCC,GAAO,0DAcN,SAASC,GAAaC,EAAM5J,EAAS,CAC1C,GAAI,CAACA,GAAWA,EAAQ,WAAa,OACnC,MAAM,IAAI,UAAU,gCAAgC,EAGtD,MAAM6J,EAAW7J,EAAQ,UAAY,OAErC,IAAIsC,EAEJ,GAAItC,EAAQ,YAAa,CACvB,GAAI,OAAOA,EAAQ,QAAW,WAC5B,MAAM,IAAI,UACR,uDACD,EAGHsC,EAASwH,GAAkBD,EAAU7J,EAAQ,MAAM,CACvD,KAAS,CACL,GAAI,OAAOA,EAAQ,KAAQ,WACzB,MAAM,IAAI,UAAU,sCAAsC,EAG5D,GAAI,OAAOA,EAAQ,MAAS,WAC1B,MAAM,IAAI,UAAU,uCAAuC,EAG7DsC,EAASyH,GAAiBF,EAAU7J,EAAQ,IAAKA,EAAQ,IAAI,CAC9D,CAGD,MAAMgK,EAAQ,CACZ,SAAUhK,EAAQ,SAClB,UAAW,CAAE,EACb,WAAYA,EAAQ,YAAc,CAAE,EACpC,OAAAsC,EACA,yBAA0BtC,EAAQ,0BAA4B,QAC9D,UAAWA,EAAQ,gBAAkBA,EAAQ,gBAAiB,EAAG,OACjE,SAAA6J,EACA,mBAAoB7J,EAAQ,oBAAsB,GAClD,SAAUA,EAAQ,WAAa,GAC/B,SAAUA,EAAQ,UAAY,GAC9B,OAAQA,EAAQ,QAAU,MAAQgD,GAAMD,GACxC,sBAAuB/C,EAAQ,uBAAyB,MACxD,sBAAuBA,EAAQ,wBAA0B,EAC1D,EAEKiK,EAASC,GAAIF,EAAOJ,EAAM,MAAS,EAGzC,OAAIK,GAAU,OAAOA,GAAW,SACvBA,EAIFD,EAAM,OACXJ,EACAI,EAAM,SACN,CAAC,SAAUC,GAAU,MAAS,EAC9B,MACD,CACH,CAcA,SAASC,GAAIF,EAAOtE,EAAMrD,EAAK,CAC7B,GAAIqD,EAAK,OAAS,UAChB,OAAOyE,GAAQH,EAAOtE,EAAMrD,CAAG,EAGjC,GAAIqD,EAAK,OAAS,qBAAuBA,EAAK,OAAS,oBACrD,OAAO0E,GAAcJ,EAAOtE,CAAI,EAGlC,GAAIA,EAAK,OAAS,qBAAuBA,EAAK,OAAS,oBACrD,OAAO2E,GAAcL,EAAOtE,EAAMrD,CAAG,EAGvC,GAAIqD,EAAK,OAAS,WAChB,OAAO4E,GAAON,EAAOtE,CAAI,EAG3B,GAAIA,EAAK,OAAS,OAChB,OAAO6E,GAAKP,EAAOtE,EAAMrD,CAAG,EAG9B,GAAIqD,EAAK,OAAS,OAChB,OAAO8E,GAAKR,EAAOtE,CAAI,CAE3B,CAcA,SAASyE,GAAQH,EAAOtE,EAAMrD,EAAK,CACjC,MAAMoI,EAAeT,EAAM,OAC3B,IAAIvG,EAASgH,EAET/E,EAAK,QAAQ,YAAW,IAAO,OAAS+E,EAAa,QAAU,SACjEhH,EAAST,GACTgH,EAAM,OAASvG,GAGjBuG,EAAM,UAAU,KAAKtE,CAAI,EAEzB,MAAMkD,EAAO8B,GAAsBV,EAAOtE,EAAK,QAAS,EAAK,EACvDiF,EAAQC,GAAmBZ,EAAOtE,CAAI,EAC5C,IAAImF,EAAWC,GAAed,EAAOtE,CAAI,EAEzC,OAAI8D,GAAc,IAAI9D,EAAK,OAAO,IAChCmF,EAAWA,EAAS,OAAO,SAAUE,EAAO,CAC1C,OAAO,OAAOA,GAAU,SAAW,CAACxK,GAAWwK,CAAK,EAAI,EAC9D,CAAK,GAGHC,GAAQhB,EAAOW,EAAO/B,EAAMlD,CAAI,EAChCuF,GAAYN,EAAOE,CAAQ,EAG3Bb,EAAM,UAAU,IAAK,EACrBA,EAAM,OAASS,EAERT,EAAM,OAAOtE,EAAMkD,EAAM+B,EAAOtI,CAAG,CAC5C,CAYA,SAAS+H,GAAcJ,EAAOtE,EAAM,CAClC,GAAIA,EAAK,MAAQA,EAAK,KAAK,QAAUsE,EAAM,UAAW,CAEpD,MAAMkB,EADUxF,EAAK,KAAK,OACC,KAAK,CAAC,EACjCyF,OAAOD,EAAW,KAIhBlB,EAAM,UAAU,mBAAmBkB,EAAW,UAAU,CAE3D,CAEDE,GAAYpB,EAAOtE,EAAK,QAAQ,CAClC,CAYA,SAAS4E,GAAON,EAAOtE,EAAM,CAC3B,GAAIA,EAAK,MAAQA,EAAK,KAAK,QAAUsE,EAAM,UAEzC,OACEA,EAAM,UAAU,gBAAgBtE,EAAK,KAAK,MAAM,EAIpD0F,GAAYpB,EAAOtE,EAAK,QAAQ,CAClC,CAcA,SAAS2E,GAAcL,EAAOtE,EAAMrD,EAAK,CACvC,MAAMoI,EAAeT,EAAM,OAC3B,IAAIvG,EAASgH,EAET/E,EAAK,OAAS,OAAS+E,EAAa,QAAU,SAChDhH,EAAST,GACTgH,EAAM,OAASvG,GAGjBuG,EAAM,UAAU,KAAKtE,CAAI,EAEzB,MAAMkD,EACJlD,EAAK,OAAS,KACVsE,EAAM,SACNU,GAAsBV,EAAOtE,EAAK,KAAM,EAAI,EAC5CiF,EAAQU,GAAsBrB,EAAOtE,CAAI,EACzCmF,EAAWC,GAAed,EAAOtE,CAAI,EAE3C,OAAAsF,GAAQhB,EAAOW,EAAO/B,EAAMlD,CAAI,EAChCuF,GAAYN,EAAOE,CAAQ,EAG3Bb,EAAM,UAAU,IAAK,EACrBA,EAAM,OAASS,EAERT,EAAM,OAAOtE,EAAMkD,EAAM+B,EAAOtI,CAAG,CAC5C,CAcA,SAASkI,GAAKP,EAAOtE,EAAMrD,EAAK,CAE9B,MAAMsI,EAAQ,CAAE,EAEhB,OAAAM,GAAYN,EAAOG,GAAed,EAAOtE,CAAI,CAAC,EAEvCsE,EAAM,OAAOtE,EAAMsE,EAAM,SAAUW,EAAOtI,CAAG,CACtD,CAYA,SAASmI,GAAK7H,EAAG+C,EAAM,CACrB,OAAOA,EAAK,KACd,CAgBA,SAASsF,GAAQhB,EAAOW,EAAO/B,EAAMlD,EAAM,CAErC,OAAOkD,GAAS,UAAYA,IAASoB,EAAM,UAAYA,EAAM,WAC/DW,EAAM,KAAOjF,EAEjB,CAYA,SAASuF,GAAYN,EAAOE,EAAU,CACpC,GAAIA,EAAS,OAAS,EAAG,CACvB,MAAMnK,EAAQmK,EAAS,OAAS,EAAIA,EAAWA,EAAS,CAAC,EAErDnK,IACFiK,EAAM,SAAWjK,EAEpB,CACH,CAYA,SAASqJ,GAAiBpH,EAAG2I,EAAKC,EAAM,CACtC,OAAOjJ,EAEP,SAASA,EAAOK,EAAGiG,EAAM+B,EAAOtI,EAAK,CAGnC,MAAMmJ,EADmB,MAAM,QAAQb,EAAM,QAAQ,EACvBY,EAAOD,EACrC,OAAOjJ,EAAMmJ,EAAG5C,EAAM+B,EAAOtI,CAAG,EAAImJ,EAAG5C,EAAM+B,CAAK,CACnD,CACH,CAUA,SAASb,GAAkBD,EAAU4B,EAAQ,CAC3C,OAAOnJ,EAEP,SAASA,EAAOoD,EAAMkD,EAAM+B,EAAOtI,EAAK,CAEtC,MAAMqJ,EAAmB,MAAM,QAAQf,EAAM,QAAQ,EAC/CjC,EAAQC,GAAWjD,CAAI,EAC7B,OAAO+F,EACL7C,EACA+B,EACAtI,EACAqJ,EACA,CACE,aAAchD,EAAQA,EAAM,OAAS,EAAI,OACzC,SAAUmB,EACV,WAAYnB,EAAQA,EAAM,KAAO,MAClC,EACD,MACD,CACF,CACH,CAYA,SAASkC,GAAmBZ,EAAOtE,EAAM,CAEvC,MAAMiF,EAAQ,CAAE,EAEhB,IAAIgB,EAEApF,EAEJ,IAAKA,KAAQb,EAAK,WAChB,GAAIa,IAAS,YAAc+C,GAAI,KAAK5D,EAAK,WAAYa,CAAI,EAAG,CAC1D,MAAM0D,EAAS2B,GAAe5B,EAAOzD,EAAMb,EAAK,WAAWa,CAAI,CAAC,EAEhE,GAAI0D,EAAQ,CACV,KAAM,CAAC5H,EAAK3B,CAAK,EAAIuJ,EAGnBD,EAAM,uBACN3H,IAAQ,SACR,OAAO3B,GAAU,UACjB+I,GAAiB,IAAI/D,EAAK,OAAO,EAEjCiG,EAAajL,EAEbiK,EAAMtI,CAAG,EAAI3B,CAEhB,CACF,CAGH,GAAIiL,EAAY,CAEd,MAAM1G,EAA8B0F,EAAM,QAAUA,EAAM,MAAQ,CAAA,GAClE1F,EAAM+E,EAAM,wBAA0B,MAAQ,aAAe,WAAW,EACtE2B,CACH,CAED,OAAOhB,CACT,CAYA,SAASU,GAAsBrB,EAAOtE,EAAM,CAE1C,MAAMiF,EAAQ,CAAE,EAEhB,UAAWvJ,KAAasE,EAAK,WAC3B,GAAItE,EAAU,OAAS,4BACrB,GAAIA,EAAU,MAAQA,EAAU,KAAK,QAAU4I,EAAM,UAAW,CAE9D,MAAMkB,EADU9J,EAAU,KAAK,OACJ,KAAK,CAAC,EAC1B8J,EAAW,KAClB,MAAMW,EAAmBX,EAAW,WAC7BW,EAAiB,KACxB,MAAMjL,EAAWiL,EAAiB,WAAW,CAAC,EACvCjL,EAAS,KAEhB,OAAO,OACL+J,EACAX,EAAM,UAAU,mBAAmBpJ,EAAS,QAAQ,CACrD,CACT,MACQwK,GAAYpB,EAAOtE,EAAK,QAAQ,MAE7B,CAEL,MAAMrF,EAAOe,EAAU,KAEvB,IAAIV,EAEJ,GAAIU,EAAU,OAAS,OAAOA,EAAU,OAAU,SAChD,GACEA,EAAU,MAAM,MAChBA,EAAU,MAAM,KAAK,QACrB4I,EAAM,UACN,CAEA,MAAMkB,EADU9J,EAAU,MAAM,KAAK,OACV,KAAK,CAAC,EAC1B8J,EAAW,KAClBxK,EAAQsJ,EAAM,UAAU,mBAAmBkB,EAAW,UAAU,CAC1E,MACUE,GAAYpB,EAAOtE,EAAK,QAAQ,OAGlChF,EAAQU,EAAU,QAAU,KAAO,GAAOA,EAAU,MAItDuJ,EAAMtK,CAAI,EAAuCK,CAClD,CAGH,OAAOiK,CACT,CAYA,SAASG,GAAed,EAAOtE,EAAM,CAEnC,MAAMmF,EAAW,CAAE,EACnB,IAAI3I,EAAQ,GAIZ,MAAM4J,EAAe9B,EAAM,SAAW,IAAI,IAAQT,GAElD,KAAO,EAAErH,EAAQwD,EAAK,SAAS,QAAQ,CACrC,MAAMqF,EAAQrF,EAAK,SAASxD,CAAK,EAEjC,IAAIG,EAEJ,GAAI2H,EAAM,SAAU,CAClB,MAAM3J,EACJ0K,EAAM,OAAS,UACXA,EAAM,QACNA,EAAM,OAAS,qBACbA,EAAM,OAAS,oBACfA,EAAM,KACN,OAER,GAAI1K,EAAM,CACR,MAAM0L,EAAQD,EAAa,IAAIzL,CAAI,GAAK,EACxCgC,EAAMhC,EAAO,IAAM0L,EACnBD,EAAa,IAAIzL,EAAM0L,EAAQ,CAAC,CACjC,CACF,CAED,MAAM9B,EAASC,GAAIF,EAAOe,EAAO1I,CAAG,EAChC4H,IAAW,QAAWY,EAAS,KAAKZ,CAAM,CAC/C,CAED,OAAOY,CACT,CAcA,SAASe,GAAe5B,EAAOzD,EAAM7F,EAAO,CAC1C,MAAM+B,EAAOe,GAAKwG,EAAM,OAAQzD,CAAI,EAGpC,GACE,EAAA7F,GAAU,MAET,OAAOA,GAAU,UAAY,OAAO,MAAMA,CAAK,GAYlD,IAPI,MAAM,QAAQA,CAAK,IAGrBA,EAAQ+B,EAAK,eAAiBuJ,GAAOtL,CAAK,EAAIuL,GAAOvL,CAAK,GAIxD+B,EAAK,WAAa,QAAS,CAC7B,IAAI6E,EACF,OAAO5G,GAAU,SAAWA,EAAQwL,GAAWlC,EAAO,OAAOtJ,CAAK,CAAC,EAErE,OAAIsJ,EAAM,wBAA0B,QAClC1C,EAAc6E,GAA2B7E,CAAW,GAG/C,CAAC,QAASA,CAAW,CAC7B,CAED,MAAO,CACL0C,EAAM,2BAA6B,SAAWvH,EAAK,MAC/CW,GAAYX,EAAK,QAAQ,GAAKA,EAAK,SACnCA,EAAK,UACT/B,CACD,EACH,CAcA,SAASwL,GAAWlC,EAAOtJ,EAAO,CAChC,GAAI,CACF,OAAO0L,GAAU1L,EAAO,CAAC,YAAa,EAAI,CAAC,CAC5C,OAAQkF,EAAO,CACd,GAAIoE,EAAM,mBACR,MAAO,CAAE,EAGX,MAAMqC,EAA8BzG,EAC9B0G,EAAU,IAAIvD,EAAa,iCAAkC,CACjE,UAAWiB,EAAM,UACjB,MAAAqC,EACA,OAAQ,QACR,OAAQ,0BACd,CAAK,EACD,MAAAC,EAAQ,KAAOtC,EAAM,UAAY,OACjCsC,EAAQ,IAAM5C,GAAO,gCAEf4C,CACP,CACH,CAcA,SAAS5B,GAAsBV,EAAO3J,EAAMkM,EAAiB,CAE3D,IAAItC,EAEJ,GAAI,CAACsC,EACHtC,EAAS,CAAC,KAAM,UAAW,MAAO5J,CAAI,UAC7BA,EAAK,SAAS,GAAG,EAAG,CAC7B,MAAMmM,EAAcnM,EAAK,MAAM,GAAG,EAClC,IAAI6B,EAAQ,GAERwD,EAEJ,KAAO,EAAExD,EAAQsK,EAAY,QAAQ,CAEnC,MAAMjG,EAAOkG,GAAiBD,EAAYtK,CAAK,CAAC,EAC5C,CAAC,KAAM,aAAc,KAAMsK,EAAYtK,CAAK,CAAC,EAC7C,CAAC,KAAM,UAAW,MAAOsK,EAAYtK,CAAK,CAAC,EAC/CwD,EAAOA,EACH,CACE,KAAM,mBACN,OAAQA,EACR,SAAUa,EACV,SAAU,GAAQrE,GAASqE,EAAK,OAAS,WACzC,SAAU,EACX,EACDA,CACL,CAGD0D,EAASvE,CACb,MACIuE,EACEwC,GAAiBpM,CAAI,GAAK,CAAC,SAAS,KAAKA,CAAI,EACzC,CAAC,KAAM,aAAY,KAAEA,CAAI,EACzB,CAAC,KAAM,UAAW,MAAOA,CAAI,EAKrC,GAAI4J,EAAO,OAAS,UAAW,CAC7B,MAAM5J,EAAuC4J,EAAO,MACpD,OAAOX,GAAI,KAAKU,EAAM,WAAY3J,CAAI,EAAI2J,EAAM,WAAW3J,CAAI,EAAIA,CACpE,CAGD,GAAI2J,EAAM,UACR,OAAOA,EAAM,UAAU,mBAAmBC,CAAM,EAGlDmB,GAAYpB,CAAK,CACnB,CAOA,SAASoB,GAAYpB,EAAO0C,EAAO,CACjC,MAAMJ,EAAU,IAAIvD,EAClB,sDACA,CACE,UAAWiB,EAAM,UACjB,MAAA0C,EACA,OAAQ,aACR,OAAQ,0BACT,CACF,EACD,MAAAJ,EAAQ,KAAOtC,EAAM,UAAY,OACjCsC,EAAQ,IAAM5C,GAAO,qDAEf4C,CACR,CAQA,SAASH,GAA2BQ,EAAW,CAE7C,MAAMC,EAAY,CAAE,EAEpB,IAAIC,EAEJ,IAAKA,KAAQF,EACPrD,GAAI,KAAKqD,EAAWE,CAAI,IAC1BD,EAAUE,GAA0BD,CAAI,CAAC,EAAIF,EAAUE,CAAI,GAI/D,OAAOD,CACT,CAQA,SAASE,GAA0BD,EAAM,CACvC,IAAIE,EAAKF,EAAK,QAAQxJ,GAAK2J,EAAM,EAEjC,OAAID,EAAG,MAAM,EAAG,CAAC,IAAM,QAAOA,EAAK,IAAMA,GAClCA,CACT,CAUA,SAASC,GAAOjJ,EAAI,CAClB,MAAO,IAAMA,EAAG,YAAa,CAC/B,CC1wBO,MAAMkJ,GAAgB,CAC3B,OAAQ,CAAC,MAAM,EACf,KAAM,CAAC,aAAc,MAAO,MAAO,GAAG,EACtC,KAAM,CAAC,QAAQ,EACf,WAAY,CAAC,SAAU,OAAO,EAC9B,KAAM,CAAC,IAAK,OAAQ,OAAQ,MAAM,EAClC,KAAM,CAAC,UAAU,EACjB,OAAQ,KACR,SAAU,CAAC,MAAM,EACjB,KAAM,CAAC,IAAK,MAAM,EAClB,OAAQ,CAAC,OAAO,EAChB,IAAK,CACH,QACA,QACA,SACA,MACA,QACA,SACA,SACA,QACA,OACD,CACH,EClBM7M,GAAe,CAAE,EAehB,SAAS8M,GAASxM,EAAOV,EAAS,CACvC,MAAMC,EAAsBG,GACtB+M,EACJ,OAAOlN,EAAS,iBAAoB,UAChCA,EAAS,gBACT,GACAmN,EACJ,OAAOnN,EAAS,aAAgB,UAAYA,EAAS,YAAc,GAErE,OAAOiK,GAAIxJ,EAAOyM,EAAiBC,CAAW,CAChD,CAcA,SAASlD,GAAIxJ,EAAOyM,EAAiBC,EAAa,CAChD,GAAI1H,GAAKhF,CAAK,EAAG,CACf,GAAI,UAAWA,EACb,OAAOA,EAAM,OAAS,QAAU,CAAC0M,EAAc,GAAK1M,EAAM,MAG5D,GAAIyM,GAAmB,QAASzM,GAASA,EAAM,IAC7C,OAAOA,EAAM,IAGf,GAAI,aAAcA,EAChB,OAAO2M,GAAI3M,EAAM,SAAUyM,EAAiBC,CAAW,CAE1D,CAED,OAAI,MAAM,QAAQ1M,CAAK,EACd2M,GAAI3M,EAAOyM,EAAiBC,CAAW,EAGzC,EACT,CAcA,SAASC,GAAItN,EAAQoN,EAAiBC,EAAa,CAEjD,MAAMnD,EAAS,CAAE,EACjB,IAAI/H,EAAQ,GAEZ,KAAO,EAAEA,EAAQnC,EAAO,QACtBkK,EAAO/H,CAAK,EAAIgI,GAAInK,EAAOmC,CAAK,EAAGiL,EAAiBC,CAAW,EAGjE,OAAOnD,EAAO,KAAK,EAAE,CACvB,CAUA,SAASvE,GAAKhF,EAAO,CACnB,MAAO,GAAQA,GAAS,OAAOA,GAAU,SAC3C,CCvGA,MAAMyJ,GAAU,SAAS,cAAc,GAAG,EAMnC,SAASmD,GAA8B5M,EAAO,CACnD,MAAM6M,EAAqB,IAAM7M,EAAQ,IACzCyJ,GAAQ,UAAYoD,EACpB,MAAMvF,EAAYmC,GAAQ,YAQ1B,OAGEnC,EAAU,WAAWA,EAAU,OAAS,CAAC,IAAM,IAC/CtH,IAAU,QASLsH,IAAcuF,EAPZ,GAOyCvF,CACpD,CCbO,SAASwF,GAAOC,EAAMhI,EAAOiI,EAAQC,EAAO,CACjD,MAAM9E,EAAM4E,EAAK,OACjB,IAAIG,EAAa,EAEbC,EAWJ,GARIpI,EAAQ,EACVA,EAAQ,CAACA,EAAQoD,EAAM,EAAIA,EAAMpD,EAEjCA,EAAQA,EAAQoD,EAAMA,EAAMpD,EAE9BiI,EAASA,EAAS,EAAIA,EAAS,EAG3BC,EAAM,OAAS,IACjBE,EAAa,MAAM,KAAKF,CAAK,EAC7BE,EAAW,QAAQpI,EAAOiI,CAAM,EAEhCD,EAAK,OAAO,GAAGI,CAAU,MAMzB,KAHIH,GAAQD,EAAK,OAAOhI,EAAOiI,CAAM,EAG9BE,EAAaD,EAAM,QACxBE,EAAaF,EAAM,MAAMC,EAAYA,EAAa,GAAK,EACvDC,EAAW,QAAQpI,EAAO,CAAC,EAE3BgI,EAAK,OAAO,GAAGI,CAAU,EACzBD,GAAc,IACdnI,GAAS,GAGf,CAkBO,SAASqI,GAAKL,EAAME,EAAO,CAChC,OAAIF,EAAK,OAAS,GAChBD,GAAOC,EAAMA,EAAK,OAAQ,EAAGE,CAAK,EAC3BF,GAEFE,CACT,CCrEA,MAAMI,GAAiB,CAAE,EAAC,eAUnB,SAASC,GAAkBC,EAAY,CAE5C,MAAMZ,EAAM,CAAE,EACd,IAAInL,EAAQ,GAEZ,KAAO,EAAEA,EAAQ+L,EAAW,QAC1BC,GAAgBb,EAAKY,EAAW/L,CAAK,CAAC,EAGxC,OAAOmL,CACT,CAYA,SAASa,GAAgBb,EAAKc,EAAW,CAEvC,IAAIC,EAEJ,IAAKA,KAAQD,EAAW,CAGtB,MAAME,GAFQN,GAAe,KAAKV,EAAKe,CAAI,EAAIf,EAAIe,CAAI,EAAI,UAEpCf,EAAIe,CAAI,EAAI,CAAA,GAE7BE,EAAQH,EAAUC,CAAI,EAE5B,IAAIG,EAEJ,GAAID,EACF,IAAKC,KAAQD,EAAO,CACbP,GAAe,KAAKM,EAAME,CAAI,IAAGF,EAAKE,CAAI,EAAI,CAAE,GACrD,MAAM7N,EAAQ4N,EAAMC,CAAI,EACxBC,GAEEH,EAAKE,CAAI,EACT,MAAM,QAAQ7N,CAAK,EAAIA,EAAQA,EAAQ,CAACA,CAAK,EAAI,CAAE,CACpD,CACF,CAEJ,CACH,CAaA,SAAS8N,GAAWC,EAAUhB,EAAM,CAClC,IAAIvL,EAAQ,GAEZ,MAAMwM,EAAS,CAAE,EAEjB,KAAO,EAAExM,EAAQuL,EAAK,SAElBA,EAAKvL,CAAK,EAAE,MAAQ,QAAUuM,EAAWC,GAAQ,KAAKjB,EAAKvL,CAAK,CAAC,EAGrEsL,GAAOiB,EAAU,EAAG,EAAGC,CAAM,CAC/B,CC9EO,SAASC,GAAgCjO,EAAOkO,EAAM,CAC3D,MAAML,EAAO,OAAO,SAAS7N,EAAOkO,CAAI,EACxC,OAEAL,EAAO,GAAKA,IAAS,IAAMA,EAAO,IAAMA,EAAO,IAE/CA,EAAO,KAAOA,EAAO,KAErBA,EAAO,OAAUA,EAAO,OAExBA,EAAO,OAAUA,EAAO,QACvBA,EAAO,SAAY,QAAWA,EAAO,SAAY,OAElDA,EAAO,QACE,IAEF,OAAO,cAAcA,CAAI,CAClC,CCZO,SAASM,GAAoBnO,EAAO,CACzC,OAAOA,EAEN,QAAQ,cAAe,GAAG,EAE1B,QAAQ,SAAU,EAAE,EAOpB,YAAW,EAAG,aACjB,CCXO,MAAMoO,EAAaC,GAAW,UAAU,EAclCC,EAAoBD,GAAW,YAAY,EAuB3CE,GAAaF,GAAW,qBAAqB,EAanD,SAASG,GAAaX,EAAM,CACjC,OAGEA,IAAS,OAASA,EAAO,IAAMA,IAAS,IAE5C,CAaO,MAAMY,GAAaJ,GAAW,IAAI,EAoB5BK,GAAgBL,GAAW,YAAY,EAevCM,GAAmBN,GAAW,gBAAgB,EAiBpD,SAASO,EAAmBf,EAAM,CACvC,OAAOA,IAAS,MAAQA,EAAO,EACjC,CAWO,SAASgB,EAA0BhB,EAAM,CAC9C,OAAOA,IAAS,OAASA,EAAO,GAAKA,IAAS,GAChD,CAiBO,SAASiB,EAAcjB,EAAM,CAClC,OAAOA,IAAS,IAAMA,IAAS,IAAMA,IAAS,EAChD,CAuBO,MAAMkB,GAAqBV,GAAW,WAAA,gBAAA,GAAc,GAsB9CW,GAAoBX,GAAW,IAAI,EAUhD,SAASA,GAAWY,EAAO,CACzB,OAAOvN,EAUP,SAASA,EAAMmM,EAAM,CACnB,OAAOA,IAAS,MAAQA,EAAO,IAAMoB,EAAM,KAAK,OAAO,aAAapB,CAAI,CAAC,CAC1E,CACH,CC7LO,SAASqB,GAAalP,EAAO,CAElC,MAAMuJ,EAAS,CAAA,EACf,IAAI/H,EAAQ,GACRuD,EAAQ,EACRoK,EAAO,EACX,KAAO,EAAE3N,EAAQxB,EAAM,QAAQ,CAC7B,MAAM6N,EAAO7N,EAAM,WAAWwB,CAAK,EAEnC,IAAI4N,EAAU,GAGd,GAAIvB,IAAS,IAAMS,EAAkBtO,EAAM,WAAWwB,EAAQ,CAAC,CAAC,GAAK8M,EAAkBtO,EAAM,WAAWwB,EAAQ,CAAC,CAAC,EAChH2N,EAAO,UAGAtB,EAAO,IACT,oBAAoB,KAAK,OAAO,aAAaA,CAAI,CAAC,IACrDuB,EAAU,OAAO,aAAavB,CAAI,WAI7BA,EAAO,OAAUA,EAAO,MAAQ,CACvC,MAAMwB,EAAOrP,EAAM,WAAWwB,EAAQ,CAAC,EAGnCqM,EAAO,OAAUwB,EAAO,OAAUA,EAAO,OAC3CD,EAAU,OAAO,aAAavB,EAAMwB,CAAI,EACxCF,EAAO,GAIPC,EAAU,GAEb,MAGCA,EAAU,OAAO,aAAavB,CAAI,EAEhCuB,IACF7F,EAAO,KAAKvJ,EAAM,MAAM+E,EAAOvD,CAAK,EAAG,mBAAmB4N,CAAO,CAAC,EAClErK,EAAQvD,EAAQ2N,EAAO,EACvBC,EAAU,IAERD,IACF3N,GAAS2N,EACTA,EAAO,EAEV,CACD,OAAO5F,EAAO,KAAK,EAAE,EAAIvJ,EAAM,MAAM+E,CAAK,CAC5C,CClEO,SAASuK,EAAaC,EAASC,EAAItH,EAAMuH,EAAK,CACnD,MAAMC,EAAQD,EAAMA,EAAM,EAAI,OAAO,kBACrC,IAAIE,EAAO,EACX,OAAO5K,EAGP,SAASA,EAAM8I,EAAM,CACnB,OAAIiB,EAAcjB,CAAI,GACpB0B,EAAQ,MAAMrH,CAAI,EACXV,EAAOqG,CAAI,GAEb2B,EAAG3B,CAAI,CACf,CAGD,SAASrG,EAAOqG,EAAM,CACpB,OAAIiB,EAAcjB,CAAI,GAAK8B,IAASD,GAClCH,EAAQ,QAAQ1B,CAAI,EACbrG,IAET+H,EAAQ,KAAKrH,CAAI,EACVsH,EAAG3B,CAAI,EACf,CACH,CClDO,MAAM+B,GAAU,CACrB,SAAUC,EACZ,EAQA,SAASA,GAAkBN,EAAS,CAClC,MAAMO,EAAeP,EAAQ,QAAQ,KAAK,OAAO,WAAW,eAAgBQ,EAA4BC,CAAgB,EAExH,IAAIC,EACJ,OAAOH,EAGP,SAASC,EAA2BlC,EAAM,CACxC,GAAIA,IAAS,KAAM,CACjB0B,EAAQ,QAAQ1B,CAAI,EACpB,MACD,CACD,OAAA0B,EAAQ,MAAM,YAAY,EAC1BA,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAK,YAAY,EAClBD,EAAaC,EAASO,EAAc,YAAY,CACxD,CAGD,SAASE,EAAiBnC,EAAM,CAC9B,OAAA0B,EAAQ,MAAM,WAAW,EAClBW,EAAUrC,CAAI,CACtB,CAGD,SAASqC,EAAUrC,EAAM,CACvB,MAAMsC,EAAQZ,EAAQ,MAAM,YAAa,CACvC,YAAa,OACb,SAAAU,CACN,CAAK,EACD,OAAIA,IACFA,EAAS,KAAOE,GAElBF,EAAWE,EACJC,EAAKvC,CAAI,CACjB,CAGD,SAASuC,EAAKvC,EAAM,CAClB,GAAIA,IAAS,KAAM,CACjB0B,EAAQ,KAAK,WAAW,EACxBA,EAAQ,KAAK,WAAW,EACxBA,EAAQ,QAAQ1B,CAAI,EACpB,MACD,CACD,OAAIe,EAAmBf,CAAI,GACzB0B,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAK,WAAW,EACjBW,IAITX,EAAQ,QAAQ1B,CAAI,EACbuC,EACR,CACH,CCvDO,MAAMC,GAAW,CACtB,SAAUC,EACZ,EAGMC,GAAqB,CACzB,SAAUC,EACZ,EAQA,SAASF,GAAmBf,EAAS,CACnC,MAAMkB,EAAO,KAEPC,EAAQ,CAAA,EACd,IAAIC,EAAY,EAEZC,EAEAC,EAEAC,EACJ,OAAO/L,EAGP,SAASA,EAAM8I,EAAM,CAWnB,GAAI8C,EAAYD,EAAM,OAAQ,CAC5B,MAAMK,EAAOL,EAAMC,CAAS,EAC5B,OAAAF,EAAK,eAAiBM,EAAK,CAAC,EACrBxB,EAAQ,QAAQwB,EAAK,CAAC,EAAE,aAAcC,EAAkBC,CAAkB,EAAEpD,CAAI,CACxF,CAGD,OAAOoD,EAAmBpD,CAAI,CAC/B,CAGD,SAASmD,EAAiBnD,EAAM,CAM9B,GALA8C,IAKIF,EAAK,eAAe,WAAY,CAClCA,EAAK,eAAe,WAAa,OAC7BG,GACFM,IAKF,MAAMC,EAAmBV,EAAK,OAAO,OACrC,IAAIW,EAAkBD,EAElBnJ,EAGJ,KAAOoJ,KACL,GAAIX,EAAK,OAAOW,CAAe,EAAE,CAAC,IAAM,QAAUX,EAAK,OAAOW,CAAe,EAAE,CAAC,EAAE,OAAS,YAAa,CACtGpJ,EAAQyI,EAAK,OAAOW,CAAe,EAAE,CAAC,EAAE,IACxC,KACD,CAEHC,EAAeV,CAAS,EAGxB,IAAInP,EAAQ2P,EACZ,KAAO3P,EAAQiP,EAAK,OAAO,QACzBA,EAAK,OAAOjP,CAAK,EAAE,CAAC,EAAE,IAAM,CAC1B,GAAGwG,CACb,EACQxG,IAIF,OAAAsL,GAAO2D,EAAK,OAAQW,EAAkB,EAAG,EAAGX,EAAK,OAAO,MAAMU,CAAgB,CAAC,EAG/EV,EAAK,OAAO,OAASjP,EACdyP,EAAmBpD,CAAI,CAC/B,CACD,OAAO9I,EAAM8I,CAAI,CAClB,CAGD,SAASoD,EAAmBpD,EAAM,CAMhC,GAAI8C,IAAcD,EAAM,OAAQ,CAI9B,GAAI,CAACE,EACH,OAAOU,EAAkBzD,CAAI,EAM/B,GAAI+C,EAAU,kBAAoBA,EAAU,iBAAiB,SAC3D,OAAOW,EAAU1D,CAAI,EAQvB4C,EAAK,UAAY,GAAQG,EAAU,kBAAoB,CAACA,EAAU,8BACnE,CAGD,OAAAH,EAAK,eAAiB,GACflB,EAAQ,MAAMgB,GAAoBiB,EAAsBC,CAAqB,EAAE5D,CAAI,CAC3F,CAGD,SAAS2D,EAAqB3D,EAAM,CAClC,OAAI+C,GAAWM,IACfG,EAAeV,CAAS,EACjBW,EAAkBzD,CAAI,CAC9B,CAGD,SAAS4D,EAAsB5D,EAAM,CACnC,OAAA4C,EAAK,OAAO,KAAKA,EAAK,MAAM,IAAI,EAAIE,IAAcD,EAAM,OACxDI,EAAkBL,EAAK,IAAK,EAAC,OACtBc,EAAU1D,CAAI,CACtB,CAGD,SAASyD,EAAkBzD,EAAM,CAE/B,OAAA4C,EAAK,eAAiB,GACflB,EAAQ,QAAQgB,GAAoBmB,EAAmBH,CAAS,EAAE1D,CAAI,CAC9E,CAGD,SAAS6D,EAAkB7D,EAAM,CAC/B,OAAA8C,IACAD,EAAM,KAAK,CAACD,EAAK,iBAAkBA,EAAK,cAAc,CAAC,EAEhDa,EAAkBzD,CAAI,CAC9B,CAGD,SAAS0D,EAAU1D,EAAM,CACvB,GAAIA,IAAS,KAAM,CACb+C,GAAWM,IACfG,EAAe,CAAC,EAChB9B,EAAQ,QAAQ1B,CAAI,EACpB,MACD,CACD,OAAA+C,EAAYA,GAAaH,EAAK,OAAO,KAAKA,EAAK,IAAG,CAAE,EACpDlB,EAAQ,MAAM,YAAa,CACzB,WAAYqB,EACZ,YAAa,OACb,SAAUC,CAChB,CAAK,EACMc,EAAa9D,CAAI,CACzB,CAGD,SAAS8D,EAAa9D,EAAM,CAC1B,GAAIA,IAAS,KAAM,CACjB+D,EAAarC,EAAQ,KAAK,WAAW,EAAG,EAAI,EAC5C8B,EAAe,CAAC,EAChB9B,EAAQ,QAAQ1B,CAAI,EACpB,MACD,CACD,OAAIe,EAAmBf,CAAI,GACzB0B,EAAQ,QAAQ1B,CAAI,EACpB+D,EAAarC,EAAQ,KAAK,WAAW,CAAC,EAEtCoB,EAAY,EACZF,EAAK,UAAY,OACV1L,IAETwK,EAAQ,QAAQ1B,CAAI,EACb8D,EACR,CAUD,SAASC,EAAazB,EAAO0B,EAAW,CACtC,MAAMC,EAASrB,EAAK,YAAYN,CAAK,EAyCrC,GAxCI0B,GAAWC,EAAO,KAAK,IAAI,EAC/B3B,EAAM,SAAWU,EACbA,IAAYA,EAAW,KAAOV,GAClCU,EAAaV,EACbS,EAAU,WAAWT,EAAM,KAAK,EAChCS,EAAU,MAAMkB,CAAM,EAmClBrB,EAAK,OAAO,KAAKN,EAAM,MAAM,IAAI,EAAG,CACtC,IAAI3O,EAAQoP,EAAU,OAAO,OAC7B,KAAOpP,KACL,GAEAoP,EAAU,OAAOpP,CAAK,EAAE,CAAC,EAAE,MAAM,OAASsP,IAE1C,CAACF,EAAU,OAAOpP,CAAK,EAAE,CAAC,EAAE,KAE5BoP,EAAU,OAAOpP,CAAK,EAAE,CAAC,EAAE,IAAI,OAASsP,GAGtC,OAMJ,MAAMK,EAAmBV,EAAK,OAAO,OACrC,IAAIW,EAAkBD,EAElBY,EAEA/J,EAGJ,KAAOoJ,KACL,GAAIX,EAAK,OAAOW,CAAe,EAAE,CAAC,IAAM,QAAUX,EAAK,OAAOW,CAAe,EAAE,CAAC,EAAE,OAAS,YAAa,CACtG,GAAIW,EAAM,CACR/J,EAAQyI,EAAK,OAAOW,CAAe,EAAE,CAAC,EAAE,IACxC,KACD,CACDW,EAAO,EACR,CAMH,IAJAV,EAAeV,CAAS,EAGxBnP,EAAQ2P,EACD3P,EAAQiP,EAAK,OAAO,QACzBA,EAAK,OAAOjP,CAAK,EAAE,CAAC,EAAE,IAAM,CAC1B,GAAGwG,CACb,EACQxG,IAIFsL,GAAO2D,EAAK,OAAQW,EAAkB,EAAG,EAAGX,EAAK,OAAO,MAAMU,CAAgB,CAAC,EAG/EV,EAAK,OAAO,OAASjP,CACtB,CACF,CAQD,SAAS6P,EAAe1B,EAAM,CAC5B,IAAInO,EAAQkP,EAAM,OAGlB,KAAOlP,KAAUmO,GAAM,CACrB,MAAMqC,EAAQtB,EAAMlP,CAAK,EACzBiP,EAAK,eAAiBuB,EAAM,CAAC,EAC7BA,EAAM,CAAC,EAAE,KAAK,KAAKvB,EAAMlB,CAAO,CACjC,CACDmB,EAAM,OAASf,CAChB,CACD,SAASuB,GAAY,CACnBN,EAAU,MAAM,CAAC,IAAI,CAAC,EACtBC,EAAa,OACbD,EAAY,OACZH,EAAK,eAAe,WAAa,MAClC,CACH,CAQA,SAASD,GAAkBjB,EAASC,EAAIyC,EAAK,CAG3C,OAAO3C,EAAaC,EAASA,EAAQ,QAAQ,KAAK,OAAO,WAAW,SAAUC,EAAIyC,CAAG,EAAG,aAAc,KAAK,OAAO,WAAW,QAAQ,KAAK,SAAS,cAAc,EAAI,OAAY,CAAC,CACpL,CCtVO,SAASC,GAAkBrE,EAAM,CACtC,GAAIA,IAAS,MAAQgB,EAA0BhB,CAAI,GAAKmB,GAAkBnB,CAAI,EAC5E,MAAO,GAET,GAAIkB,GAAmBlB,CAAI,EACzB,MAAO,EAEX,CCVO,SAASsE,GAAWrE,EAAYsE,EAAQC,EAAS,CAEtD,MAAMC,EAAS,CAAE,EACjB,IAAI9Q,EAAQ,GAEZ,KAAO,EAAEA,EAAQsM,EAAW,QAAQ,CAClC,MAAMyE,EAAUzE,EAAWtM,CAAK,EAAE,WAE9B+Q,GAAW,CAACD,EAAO,SAASC,CAAO,IACrCH,EAASG,EAAQH,EAAQC,CAAO,EAChCC,EAAO,KAAKC,CAAO,EAEtB,CAED,OAAOH,CACT,CCbO,MAAMI,GAAY,CACvB,KAAM,YACN,WAAYC,GACZ,SAAUC,EACZ,EAQA,SAASD,GAAoBL,EAAQC,EAAS,CAC5C,IAAI7Q,EAAQ,GAERmR,EAEAC,EAEA9I,EAEA+I,EAEAC,EAEAC,EAEAC,EAEAC,EAMJ,KAAO,EAAEzR,EAAQ4Q,EAAO,QAEtB,GAAIA,EAAO5Q,CAAK,EAAE,CAAC,IAAM,SAAW4Q,EAAO5Q,CAAK,EAAE,CAAC,EAAE,OAAS,qBAAuB4Q,EAAO5Q,CAAK,EAAE,CAAC,EAAE,QAIpG,IAHAmR,EAAOnR,EAGAmR,KAEL,GAAIP,EAAOO,CAAI,EAAE,CAAC,IAAM,QAAUP,EAAOO,CAAI,EAAE,CAAC,EAAE,OAAS,qBAAuBP,EAAOO,CAAI,EAAE,CAAC,EAAE,OAElGN,EAAQ,eAAeD,EAAOO,CAAI,EAAE,CAAC,CAAC,EAAE,WAAW,CAAC,IAAMN,EAAQ,eAAeD,EAAO5Q,CAAK,EAAE,CAAC,CAAC,EAAE,WAAW,CAAC,EAAG,CAKhH,IAAK4Q,EAAOO,CAAI,EAAE,CAAC,EAAE,QAAUP,EAAO5Q,CAAK,EAAE,CAAC,EAAE,SAAW4Q,EAAO5Q,CAAK,EAAE,CAAC,EAAE,IAAI,OAAS4Q,EAAO5Q,CAAK,EAAE,CAAC,EAAE,MAAM,QAAU,GAAK,GAAG4Q,EAAOO,CAAI,EAAE,CAAC,EAAE,IAAI,OAASP,EAAOO,CAAI,EAAE,CAAC,EAAE,MAAM,OAASP,EAAO5Q,CAAK,EAAE,CAAC,EAAE,IAAI,OAAS4Q,EAAO5Q,CAAK,EAAE,CAAC,EAAE,MAAM,QAAU,GAC3P,SAIFuR,EAAMX,EAAOO,CAAI,EAAE,CAAC,EAAE,IAAI,OAASP,EAAOO,CAAI,EAAE,CAAC,EAAE,MAAM,OAAS,GAAKP,EAAO5Q,CAAK,EAAE,CAAC,EAAE,IAAI,OAAS4Q,EAAO5Q,CAAK,EAAE,CAAC,EAAE,MAAM,OAAS,EAAI,EAAI,EAC7I,MAAMuD,EAAQ,CACZ,GAAGqN,EAAOO,CAAI,EAAE,CAAC,EAAE,GAC/B,EACgBxK,EAAM,CACV,GAAGiK,EAAO5Q,CAAK,EAAE,CAAC,EAAE,KAChC,EACU0R,GAAUnO,EAAO,CAACgO,CAAG,EACrBG,GAAU/K,EAAK4K,CAAG,EAClBF,EAAkB,CAChB,KAAME,EAAM,EAAI,iBAAmB,mBACnC,MAAAhO,EACA,IAAK,CACH,GAAGqN,EAAOO,CAAI,EAAE,CAAC,EAAE,GACpB,CACb,EACUG,EAAkB,CAChB,KAAMC,EAAM,EAAI,iBAAmB,mBACnC,MAAO,CACL,GAAGX,EAAO5Q,CAAK,EAAE,CAAC,EAAE,KACrB,EACD,IAAA2G,CACZ,EACU2B,EAAO,CACL,KAAMiJ,EAAM,EAAI,aAAe,eAC/B,MAAO,CACL,GAAGX,EAAOO,CAAI,EAAE,CAAC,EAAE,GACpB,EACD,IAAK,CACH,GAAGP,EAAO5Q,CAAK,EAAE,CAAC,EAAE,KACrB,CACb,EACUoR,EAAQ,CACN,KAAMG,EAAM,EAAI,SAAW,WAC3B,MAAO,CACL,GAAGF,EAAgB,KACpB,EACD,IAAK,CACH,GAAGC,EAAgB,GACpB,CACb,EACUV,EAAOO,CAAI,EAAE,CAAC,EAAE,IAAM,CACpB,GAAGE,EAAgB,KAC/B,EACUT,EAAO5Q,CAAK,EAAE,CAAC,EAAE,MAAQ,CACvB,GAAGsR,EAAgB,GAC/B,EACUE,EAAa,CAAA,EAGTZ,EAAOO,CAAI,EAAE,CAAC,EAAE,IAAI,OAASP,EAAOO,CAAI,EAAE,CAAC,EAAE,MAAM,SACrDK,EAAa5F,GAAK4F,EAAY,CAAC,CAAC,QAASZ,EAAOO,CAAI,EAAE,CAAC,EAAGN,CAAO,EAAG,CAAC,OAAQD,EAAOO,CAAI,EAAE,CAAC,EAAGN,CAAO,CAAC,CAAC,GAIzGW,EAAa5F,GAAK4F,EAAY,CAAC,CAAC,QAASJ,EAAOP,CAAO,EAAG,CAAC,QAASQ,EAAiBR,CAAO,EAAG,CAAC,OAAQQ,EAAiBR,CAAO,EAAG,CAAC,QAASvI,EAAMuI,CAAO,CAAC,CAAC,EAK5JW,EAAa5F,GAAK4F,EAAYb,GAAWE,EAAQ,OAAO,WAAW,WAAW,KAAMD,EAAO,MAAMO,EAAO,EAAGnR,CAAK,EAAG6Q,CAAO,CAAC,EAG3HW,EAAa5F,GAAK4F,EAAY,CAAC,CAAC,OAAQlJ,EAAMuI,CAAO,EAAG,CAAC,QAASS,EAAiBT,CAAO,EAAG,CAAC,OAAQS,EAAiBT,CAAO,EAAG,CAAC,OAAQO,EAAOP,CAAO,CAAC,CAAC,EAGtJD,EAAO5Q,CAAK,EAAE,CAAC,EAAE,IAAI,OAAS4Q,EAAO5Q,CAAK,EAAE,CAAC,EAAE,MAAM,QACvDyR,EAAS,EACTD,EAAa5F,GAAK4F,EAAY,CAAC,CAAC,QAASZ,EAAO5Q,CAAK,EAAE,CAAC,EAAG6Q,CAAO,EAAG,CAAC,OAAQD,EAAO5Q,CAAK,EAAE,CAAC,EAAG6Q,CAAO,CAAC,CAAC,GAEzGY,EAAS,EAEXnG,GAAOsF,EAAQO,EAAO,EAAGnR,EAAQmR,EAAO,EAAGK,CAAU,EACrDxR,EAAQmR,EAAOK,EAAW,OAASC,EAAS,EAC5C,KACD,EAOP,IADAzR,EAAQ,GACD,EAAEA,EAAQ4Q,EAAO,QAClBA,EAAO5Q,CAAK,EAAE,CAAC,EAAE,OAAS,sBAC5B4Q,EAAO5Q,CAAK,EAAE,CAAC,EAAE,KAAO,QAG5B,OAAO4Q,CACT,CAOA,SAASM,GAAkBnD,EAASC,EAAI,CACtC,MAAM2D,EAAmB,KAAK,OAAO,WAAW,iBAAiB,KAC3DlD,EAAW,KAAK,SAChBjC,EAASkE,GAAkBjC,CAAQ,EAGzC,IAAImD,EACJ,OAAOrO,EAYP,SAASA,EAAM8I,EAAM,CACnB,OAAAuF,EAASvF,EACT0B,EAAQ,MAAM,mBAAmB,EAC1B8D,EAAOxF,CAAI,CACnB,CAYD,SAASwF,EAAOxF,EAAM,CACpB,GAAIA,IAASuF,EACX,OAAA7D,EAAQ,QAAQ1B,CAAI,EACbwF,EAET,MAAMlD,EAAQZ,EAAQ,KAAK,mBAAmB,EAGxC+D,EAAQpB,GAAkBrE,CAAI,EAI9B8E,EAAO,CAACW,GAASA,IAAU,GAAKtF,GAAUmF,EAAiB,SAAStF,CAAI,EACxE0F,EAAQ,CAACvF,GAAUA,IAAW,GAAKsF,GAASH,EAAiB,SAASlD,CAAQ,EACpF,OAAAE,EAAM,MAAQ,GAAQiD,IAAW,GAAKT,EAAOA,IAAS3E,GAAU,CAACuF,IACjEpD,EAAM,OAAS,GAAQiD,IAAW,GAAKG,EAAQA,IAAUD,GAAS,CAACX,IAC5DnD,EAAG3B,CAAI,CACf,CACH,CAeA,SAASqF,GAAUlL,EAAOiL,EAAQ,CAChCjL,EAAM,QAAUiL,EAChBjL,EAAM,QAAUiL,EAChBjL,EAAM,cAAgBiL,CACxB,CCrOO,MAAMO,GAAW,CACtB,KAAM,WACN,SAAUC,EACZ,EAOA,SAASA,GAAiBlE,EAASC,EAAIyC,EAAK,CAC1C,IAAItC,EAAO,EACX,OAAO5K,EAcP,SAASA,EAAM8I,EAAM,CACnB,OAAA0B,EAAQ,MAAM,UAAU,EACxBA,EAAQ,MAAM,gBAAgB,EAC9BA,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAK,gBAAgB,EAC7BA,EAAQ,MAAM,kBAAkB,EACzBoD,CACR,CAcD,SAASA,EAAK9E,EAAM,CAClB,OAAIO,EAAWP,CAAI,GACjB0B,EAAQ,QAAQ1B,CAAI,EACb6F,GAEL7F,IAAS,GACJoE,EAAIpE,CAAI,EAEV8F,EAAW9F,CAAI,CACvB,CAcD,SAAS6F,EAAmB7F,EAAM,CAEhC,OAAIA,IAAS,IAAMA,IAAS,IAAMA,IAAS,IAAMS,EAAkBT,CAAI,GAErE8B,EAAO,EACAiE,EAAyB/F,CAAI,GAE/B8F,EAAW9F,CAAI,CACvB,CAcD,SAAS+F,EAAyB/F,EAAM,CACtC,OAAIA,IAAS,IACX0B,EAAQ,QAAQ1B,CAAI,EACpB8B,EAAO,EACAkE,IAIJhG,IAAS,IAAMA,IAAS,IAAMA,IAAS,IAAMS,EAAkBT,CAAI,IAAM8B,IAAS,IACrFJ,EAAQ,QAAQ1B,CAAI,EACb+F,IAETjE,EAAO,EACAgE,EAAW9F,CAAI,EACvB,CAYD,SAASgG,EAAUhG,EAAM,CACvB,OAAIA,IAAS,IACX0B,EAAQ,KAAK,kBAAkB,EAC/BA,EAAQ,MAAM,gBAAgB,EAC9BA,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAK,gBAAgB,EAC7BA,EAAQ,KAAK,UAAU,EAChBC,GAIL3B,IAAS,MAAQA,IAAS,IAAMA,IAAS,IAAMW,GAAaX,CAAI,EAC3DoE,EAAIpE,CAAI,GAEjB0B,EAAQ,QAAQ1B,CAAI,EACbgG,EACR,CAYD,SAASF,EAAW9F,EAAM,CACxB,OAAIA,IAAS,IACX0B,EAAQ,QAAQ1B,CAAI,EACbiG,GAELvF,GAAWV,CAAI,GACjB0B,EAAQ,QAAQ1B,CAAI,EACb8F,GAEF1B,EAAIpE,CAAI,CAChB,CAYD,SAASiG,EAAiBjG,EAAM,CAC9B,OAAOS,EAAkBT,CAAI,EAAIkG,EAAWlG,CAAI,EAAIoE,EAAIpE,CAAI,CAC7D,CAYD,SAASkG,EAAWlG,EAAM,CACxB,OAAIA,IAAS,IACX0B,EAAQ,QAAQ1B,CAAI,EACpB8B,EAAO,EACAmE,GAELjG,IAAS,IAEX0B,EAAQ,KAAK,kBAAkB,EAAE,KAAO,gBACxCA,EAAQ,MAAM,gBAAgB,EAC9BA,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAK,gBAAgB,EAC7BA,EAAQ,KAAK,UAAU,EAChBC,GAEFwE,EAAWnG,CAAI,CACvB,CAcD,SAASmG,EAAWnG,EAAM,CAExB,IAAKA,IAAS,IAAMS,EAAkBT,CAAI,IAAM8B,IAAS,GAAI,CAC3D,MAAMN,EAAOxB,IAAS,GAAKmG,EAAaD,EACxC,OAAAxE,EAAQ,QAAQ1B,CAAI,EACbwB,CACR,CACD,OAAO4C,EAAIpE,CAAI,CAChB,CACH,CC5NO,MAAMoG,GAAY,CACvB,QAAS,GACT,SAAUC,EACZ,EAOA,SAASA,GAAkB3E,EAASC,EAAIyC,EAAK,CAC3C,OAAOlN,EAgBP,SAASA,EAAM8I,EAAM,CACnB,OAAOiB,EAAcjB,CAAI,EAAIyB,EAAaC,EAAS+D,EAAO,YAAY,EAAEzF,CAAI,EAAIyF,EAAMzF,CAAI,CAC3F,CAgBD,SAASyF,EAAMzF,EAAM,CACnB,OAAOA,IAAS,MAAQe,EAAmBf,CAAI,EAAI2B,EAAG3B,CAAI,EAAIoE,EAAIpE,CAAI,CACvE,CACH,CC/CO,MAAMsG,GAAa,CACxB,aAAc,CACZ,SAAUC,EACX,EACH,KAAEC,GACA,KAAM,aACN,SAAUC,EACZ,EAOA,SAASA,GAAwB/E,EAASC,EAAIyC,EAAK,CACjD,MAAMxB,EAAO,KACb,OAAO1L,EAYP,SAASA,EAAM8I,EAAM,CACnB,GAAIA,IAAS,GAAI,CACf,MAAMvE,EAAQmH,EAAK,eACnB,OAAKnH,EAAM,OACTiG,EAAQ,MAAM,aAAc,CAC1B,WAAY,EACtB,CAAS,EACDjG,EAAM,KAAO,IAEfiG,EAAQ,MAAM,kBAAkB,EAChCA,EAAQ,MAAM,kBAAkB,EAChCA,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAK,kBAAkB,EACxB+D,CACR,CACD,OAAOrB,EAAIpE,CAAI,CAChB,CAYD,SAASyF,EAAMzF,EAAM,CACnB,OAAIiB,EAAcjB,CAAI,GACpB0B,EAAQ,MAAM,4BAA4B,EAC1CA,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAK,4BAA4B,EACzCA,EAAQ,KAAK,kBAAkB,EACxBC,IAETD,EAAQ,KAAK,kBAAkB,EACxBC,EAAG3B,CAAI,EACf,CACH,CAeA,SAASuG,GAA+B7E,EAASC,EAAIyC,EAAK,CACxD,MAAMxB,EAAO,KACb,OAAO8D,EAeP,SAASA,EAAU1G,EAAM,CACvB,OAAIiB,EAAcjB,CAAI,EAGbyB,EAAaC,EAASiF,EAAY,aAAc/D,EAAK,OAAO,WAAW,QAAQ,KAAK,SAAS,cAAc,EAAI,OAAY,CAAC,EAAE5C,CAAI,EAEpI2G,EAAW3G,CAAI,CACvB,CAeD,SAAS2G,EAAW3G,EAAM,CACxB,OAAO0B,EAAQ,QAAQ4E,GAAY3E,EAAIyC,CAAG,EAAEpE,CAAI,CACjD,CACH,CAGA,SAASwG,GAAK9E,EAAS,CACrBA,EAAQ,KAAK,YAAY,CAC3B,CCnIO,MAAMkF,GAAkB,CAC7B,KAAM,kBACN,SAAUC,EACZ,EAOA,SAASA,GAAwBnF,EAASC,EAAIyC,EAAK,CACjD,OAAOlN,EAYP,SAASA,EAAM8I,EAAM,CACnB,OAAA0B,EAAQ,MAAM,iBAAiB,EAC/BA,EAAQ,MAAM,cAAc,EAC5BA,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAK,cAAc,EACpB8D,CACR,CAYD,SAASA,EAAOxF,EAAM,CAEpB,OAAIc,GAAiBd,CAAI,GACvB0B,EAAQ,MAAM,sBAAsB,EACpCA,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAK,sBAAsB,EACnCA,EAAQ,KAAK,iBAAiB,EACvBC,GAEFyC,EAAIpE,CAAI,CAChB,CACH,CClDO,MAAMhB,GAAqB,CAChC,KAAM,qBACN,SAAU8H,EACZ,EAOA,SAASA,GAA2BpF,EAASC,EAAIyC,EAAK,CACpD,MAAMxB,EAAO,KACb,IAAId,EAAO,EAEPF,EAEAmF,EACJ,OAAO7P,EAgBP,SAASA,EAAM8I,EAAM,CACnB,OAAA0B,EAAQ,MAAM,oBAAoB,EAClCA,EAAQ,MAAM,0BAA0B,EACxCA,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAK,0BAA0B,EAChCoD,CACR,CAiBD,SAASA,EAAK9E,EAAM,CAClB,OAAIA,IAAS,IACX0B,EAAQ,MAAM,iCAAiC,EAC/CA,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAK,iCAAiC,EACvCsF,IAETtF,EAAQ,MAAM,yBAAyB,EACvCE,EAAM,GACNmF,EAAOtG,EACAtO,EAAM6N,CAAI,EAClB,CAcD,SAASgH,EAAQhH,EAAM,CACrB,OAAIA,IAAS,IAAMA,IAAS,KAC1B0B,EAAQ,MAAM,qCAAqC,EACnDA,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAK,qCAAqC,EAClDA,EAAQ,MAAM,yBAAyB,EACvCE,EAAM,EACNmF,EAAOlG,GACA1O,IAETuP,EAAQ,MAAM,yBAAyB,EACvCE,EAAM,EACNmF,EAAOnG,GACAzO,EAAM6N,CAAI,EAClB,CAmBD,SAAS7N,EAAM6N,EAAM,CACnB,GAAIA,IAAS,IAAM8B,EAAM,CACvB,MAAMQ,EAAQZ,EAAQ,KAAK,yBAAyB,EACpD,OAAIqF,IAAStG,GAAqB,CAAC1B,GAA8B6D,EAAK,eAAeN,CAAK,CAAC,EAClF8B,EAAIpE,CAAI,GAKjB0B,EAAQ,MAAM,0BAA0B,EACxCA,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAK,0BAA0B,EACvCA,EAAQ,KAAK,oBAAoB,EAC1BC,EACR,CACD,OAAIoF,EAAK/G,CAAI,GAAK8B,IAASF,GACzBF,EAAQ,QAAQ1B,CAAI,EACb7N,GAEFiS,EAAIpE,CAAI,CAChB,CACH,CCvIA,MAAMiH,GAAsB,CAC1B,QAAS,GACT,SAAUC,EACZ,EAGaC,GAAa,CACxB,SAAU,GACV,KAAM,aACN,SAAUC,EACZ,EAOA,SAASA,GAAmB1F,EAASC,EAAIyC,EAAK,CAC5C,MAAMxB,EAAO,KAEPyE,EAAa,CACjB,QAAS,GACT,SAAUC,CACd,EACE,IAAIC,EAAgB,EAChBC,EAAW,EAEXjC,EACJ,OAAOrO,EAcP,SAASA,EAAM8I,EAAM,CAEnB,OAAOyH,EAAmBzH,CAAI,CAC/B,CAcD,SAASyH,EAAmBzH,EAAM,CAChC,MAAM0H,EAAO9E,EAAK,OAAOA,EAAK,OAAO,OAAS,CAAC,EAC/C,OAAA2E,EAAgBG,GAAQA,EAAK,CAAC,EAAE,OAAS,aAAeA,EAAK,CAAC,EAAE,eAAeA,EAAK,CAAC,EAAG,EAAI,EAAE,OAAS,EACvGnC,EAASvF,EACT0B,EAAQ,MAAM,YAAY,EAC1BA,EAAQ,MAAM,iBAAiB,EAC/BA,EAAQ,MAAM,yBAAyB,EAChCiG,EAAa3H,CAAI,CACzB,CAcD,SAAS2H,EAAa3H,EAAM,CAC1B,OAAIA,IAASuF,GACXiC,IACA9F,EAAQ,QAAQ1B,CAAI,EACb2H,GAELH,EAAW,EACNpD,EAAIpE,CAAI,GAEjB0B,EAAQ,KAAK,yBAAyB,EAC/BT,EAAcjB,CAAI,EAAIyB,EAAaC,EAASkG,EAAY,YAAY,EAAE5H,CAAI,EAAI4H,EAAW5H,CAAI,EACrG,CAcD,SAAS4H,EAAW5H,EAAM,CACxB,OAAIA,IAAS,MAAQe,EAAmBf,CAAI,GAC1C0B,EAAQ,KAAK,iBAAiB,EACvBkB,EAAK,UAAYjB,EAAG3B,CAAI,EAAI0B,EAAQ,MAAMuF,GAAqBY,EAAgBpC,CAAK,EAAEzF,CAAI,IAEnG0B,EAAQ,MAAM,qBAAqB,EACnCA,EAAQ,MAAM,cAAe,CAC3B,YAAa,QACnB,CAAK,EACMxN,EAAK8L,CAAI,EACjB,CAcD,SAAS9L,EAAK8L,EAAM,CAClB,OAAIA,IAAS,MAAQe,EAAmBf,CAAI,GAC1C0B,EAAQ,KAAK,aAAa,EAC1BA,EAAQ,KAAK,qBAAqB,EAC3BkG,EAAW5H,CAAI,GAEpBiB,EAAcjB,CAAI,GACpB0B,EAAQ,KAAK,aAAa,EAC1BA,EAAQ,KAAK,qBAAqB,EAC3BD,EAAaC,EAASoG,EAAY,YAAY,EAAE9H,CAAI,GAEzDA,IAAS,IAAMA,IAASuF,EACnBnB,EAAIpE,CAAI,GAEjB0B,EAAQ,QAAQ1B,CAAI,EACb9L,EACR,CAcD,SAAS4T,EAAW9H,EAAM,CACxB,OAAIA,IAAS,MAAQe,EAAmBf,CAAI,EACnC4H,EAAW5H,CAAI,GAExB0B,EAAQ,MAAM,qBAAqB,EACnCA,EAAQ,MAAM,cAAe,CAC3B,YAAa,QACnB,CAAK,EACMqG,EAAK/H,CAAI,EACjB,CAcD,SAAS+H,EAAK/H,EAAM,CAClB,OAAIA,IAAS,MAAQe,EAAmBf,CAAI,GAC1C0B,EAAQ,KAAK,aAAa,EAC1BA,EAAQ,KAAK,qBAAqB,EAC3BkG,EAAW5H,CAAI,GAEpBA,IAAS,IAAMA,IAASuF,EACnBnB,EAAIpE,CAAI,GAEjB0B,EAAQ,QAAQ1B,CAAI,EACb+H,EACR,CAeD,SAASF,EAAe7H,EAAM,CAC5B,OAAO0B,EAAQ,QAAQ2F,EAAY5B,EAAOuC,CAAa,EAAEhI,CAAI,CAC9D,CAcD,SAASgI,EAAchI,EAAM,CAC3B,OAAA0B,EAAQ,MAAM,YAAY,EAC1BA,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAK,YAAY,EAClBO,CACR,CAcD,SAASA,EAAajC,EAAM,CAC1B,OAAOuH,EAAgB,GAAKtG,EAAcjB,CAAI,EAAIyB,EAAaC,EAASuG,EAAoB,aAAcV,EAAgB,CAAC,EAAEvH,CAAI,EAAIiI,EAAmBjI,CAAI,CAC7J,CAcD,SAASiI,EAAmBjI,EAAM,CAChC,OAAIA,IAAS,MAAQe,EAAmBf,CAAI,EACnC0B,EAAQ,MAAMuF,GAAqBY,EAAgBpC,CAAK,EAAEzF,CAAI,GAEvE0B,EAAQ,MAAM,eAAe,EACtBwG,EAAalI,CAAI,EACzB,CAcD,SAASkI,EAAalI,EAAM,CAC1B,OAAIA,IAAS,MAAQe,EAAmBf,CAAI,GAC1C0B,EAAQ,KAAK,eAAe,EACrBuG,EAAmBjI,CAAI,IAEhC0B,EAAQ,QAAQ1B,CAAI,EACbkI,EACR,CAcD,SAASzC,EAAMzF,EAAM,CACnB,OAAA0B,EAAQ,KAAK,YAAY,EAClBC,EAAG3B,CAAI,CACf,CAOD,SAASsH,EAAmB5F,EAASC,EAAIyC,EAAK,CAC5C,IAAItC,EAAO,EACX,OAAOqG,EAOP,SAASA,EAAYnI,EAAM,CACzB,OAAA0B,EAAQ,MAAM,YAAY,EAC1BA,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAK,YAAY,EAClBxK,CACR,CAcD,SAASA,EAAM8I,EAAM,CAInB,OAAA0B,EAAQ,MAAM,iBAAiB,EACxBT,EAAcjB,CAAI,EAAIyB,EAAaC,EAAS0G,EAAqB,aAAcxF,EAAK,OAAO,WAAW,QAAQ,KAAK,SAAS,cAAc,EAAI,OAAY,CAAC,EAAE5C,CAAI,EAAIoI,EAAoBpI,CAAI,CACrM,CAcD,SAASoI,EAAoBpI,EAAM,CACjC,OAAIA,IAASuF,GACX7D,EAAQ,MAAM,yBAAyB,EAChC2G,EAAcrI,CAAI,GAEpBoE,EAAIpE,CAAI,CAChB,CAcD,SAASqI,EAAcrI,EAAM,CAC3B,OAAIA,IAASuF,GACXzD,IACAJ,EAAQ,QAAQ1B,CAAI,EACbqI,GAELvG,GAAQ0F,GACV9F,EAAQ,KAAK,yBAAyB,EAC/BT,EAAcjB,CAAI,EAAIyB,EAAaC,EAAS4G,EAAoB,YAAY,EAAEtI,CAAI,EAAIsI,EAAmBtI,CAAI,GAE/GoE,EAAIpE,CAAI,CAChB,CAcD,SAASsI,EAAmBtI,EAAM,CAChC,OAAIA,IAAS,MAAQe,EAAmBf,CAAI,GAC1C0B,EAAQ,KAAK,iBAAiB,EACvBC,EAAG3B,CAAI,GAEToE,EAAIpE,CAAI,CAChB,CACF,CACH,CAOA,SAASkH,GAA4BxF,EAASC,EAAIyC,EAAK,CACrD,MAAMxB,EAAO,KACb,OAAO1L,EAOP,SAASA,EAAM8I,EAAM,CACnB,OAAIA,IAAS,KACJoE,EAAIpE,CAAI,GAEjB0B,EAAQ,MAAM,YAAY,EAC1BA,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAK,YAAY,EAClBW,EACR,CAOD,SAASA,EAAUrC,EAAM,CACvB,OAAO4C,EAAK,OAAO,KAAKA,EAAK,IAAK,EAAC,IAAI,EAAIwB,EAAIpE,CAAI,EAAI2B,EAAG3B,CAAI,CAC/D,CACH,CC/bO,MAAMuI,GAAe,CAC1B,KAAM,eACN,SAAUC,EACZ,EAGMC,GAAe,CACnB,QAAS,GACT,SAAUC,EACZ,EAOA,SAASF,GAAqB9G,EAASC,EAAIyC,EAAK,CAC9C,MAAMxB,EAAO,KACb,OAAO1L,EAgBP,SAASA,EAAM8I,EAAM,CAGnB,OAAA0B,EAAQ,MAAM,cAAc,EAGrBD,EAAaC,EAASiH,EAAa,aAAc,CAAK,EAAE3I,CAAI,CACpE,CAYD,SAAS2I,EAAY3I,EAAM,CACzB,MAAM0H,EAAO9E,EAAK,OAAOA,EAAK,OAAO,OAAS,CAAC,EAC/C,OAAO8E,GAAQA,EAAK,CAAC,EAAE,OAAS,cAAgBA,EAAK,CAAC,EAAE,eAAeA,EAAK,CAAC,EAAG,EAAI,EAAE,QAAU,EAAIkB,EAAQ5I,CAAI,EAAIoE,EAAIpE,CAAI,CAC7H,CAYD,SAAS4I,EAAQ5I,EAAM,CACrB,OAAIA,IAAS,KACJyF,EAAMzF,CAAI,EAEfe,EAAmBf,CAAI,EAClB0B,EAAQ,QAAQ+G,GAAcG,EAASnD,CAAK,EAAEzF,CAAI,GAE3D0B,EAAQ,MAAM,eAAe,EACtB8D,EAAOxF,CAAI,EACnB,CAYD,SAASwF,EAAOxF,EAAM,CACpB,OAAIA,IAAS,MAAQe,EAAmBf,CAAI,GAC1C0B,EAAQ,KAAK,eAAe,EACrBkH,EAAQ5I,CAAI,IAErB0B,EAAQ,QAAQ1B,CAAI,EACbwF,EACR,CAGD,SAASC,EAAMzF,EAAM,CACnB,OAAA0B,EAAQ,KAAK,cAAc,EAIpBC,EAAG3B,CAAI,CACf,CACH,CAOA,SAAS0I,GAAqBhH,EAASC,EAAIyC,EAAK,CAC9C,MAAMxB,EAAO,KACb,OAAO6F,EAaP,SAASA,EAAazI,EAAM,CAG1B,OAAI4C,EAAK,OAAO,KAAKA,EAAK,IAAG,EAAG,IAAI,EAC3BwB,EAAIpE,CAAI,EAEbe,EAAmBf,CAAI,GACzB0B,EAAQ,MAAM,YAAY,EAC1BA,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAK,YAAY,EAClB+G,GASFhH,EAAaC,EAASiH,EAAa,aAAc,CAAK,EAAE3I,CAAI,CACpE,CAYD,SAAS2I,EAAY3I,EAAM,CACzB,MAAM0H,EAAO9E,EAAK,OAAOA,EAAK,OAAO,OAAS,CAAC,EAC/C,OAAO8E,GAAQA,EAAK,CAAC,EAAE,OAAS,cAAgBA,EAAK,CAAC,EAAE,eAAeA,EAAK,CAAC,EAAG,EAAI,EAAE,QAAU,EAAI/F,EAAG3B,CAAI,EAAIe,EAAmBf,CAAI,EAAIyI,EAAazI,CAAI,EAAIoE,EAAIpE,CAAI,CACxK,CACH,CClKO,MAAM6I,GAAW,CACtB,KAAM,WACR,SAAEzG,GACA,QAAS0G,GACT,SAAUC,EACZ,EAIA,SAASD,GAAgBvE,EAAQ,CAC/B,IAAIyE,EAAgBzE,EAAO,OAAS,EAChC0E,EAAiB,EAEjBtV,EAEAuV,EAGJ,IAAK3E,EAAO0E,CAAc,EAAE,CAAC,EAAE,OAAS,cAAgB1E,EAAO0E,CAAc,EAAE,CAAC,EAAE,OAAS,WAAa1E,EAAOyE,CAAa,EAAE,CAAC,EAAE,OAAS,cAAgBzE,EAAOyE,CAAa,EAAE,CAAC,EAAE,OAAS,UAI1L,IAHArV,EAAQsV,EAGD,EAAEtV,EAAQqV,GACf,GAAIzE,EAAO5Q,CAAK,EAAE,CAAC,EAAE,OAAS,eAAgB,CAE5C4Q,EAAO0E,CAAc,EAAE,CAAC,EAAE,KAAO,kBACjC1E,EAAOyE,CAAa,EAAE,CAAC,EAAE,KAAO,kBAChCC,GAAkB,EAClBD,GAAiB,EACjB,KACD,EAOL,IAFArV,EAAQsV,EAAiB,EACzBD,IACO,EAAErV,GAASqV,GACZE,IAAU,OACRvV,IAAUqV,GAAiBzE,EAAO5Q,CAAK,EAAE,CAAC,EAAE,OAAS,eACvDuV,EAAQvV,IAEDA,IAAUqV,GAAiBzE,EAAO5Q,CAAK,EAAE,CAAC,EAAE,OAAS,gBAC9D4Q,EAAO2E,CAAK,EAAE,CAAC,EAAE,KAAO,eACpBvV,IAAUuV,EAAQ,IACpB3E,EAAO2E,CAAK,EAAE,CAAC,EAAE,IAAM3E,EAAO5Q,EAAQ,CAAC,EAAE,CAAC,EAAE,IAC5C4Q,EAAO,OAAO2E,EAAQ,EAAGvV,EAAQuV,EAAQ,CAAC,EAC1CF,GAAiBrV,EAAQuV,EAAQ,EACjCvV,EAAQuV,EAAQ,GAElBA,EAAQ,QAGZ,OAAO3E,CACT,CAOA,SAASnC,GAASpC,EAAM,CAEtB,OAAOA,IAAS,IAAM,KAAK,OAAO,KAAK,OAAO,OAAS,CAAC,EAAE,CAAC,EAAE,OAAS,iBACxE,CAOA,SAAS+I,GAAiBrH,EAASC,EAAIyC,EAAK,CAE1C,IAAIoD,EAAW,EAEX1F,EAEAQ,EACJ,OAAOpL,EAcP,SAASA,EAAM8I,EAAM,CACnB,OAAA0B,EAAQ,MAAM,UAAU,EACxBA,EAAQ,MAAM,kBAAkB,EACzBiG,EAAa3H,CAAI,CACzB,CAYD,SAAS2H,EAAa3H,EAAM,CAC1B,OAAIA,IAAS,IACX0B,EAAQ,QAAQ1B,CAAI,EACpBwH,IACOG,IAETjG,EAAQ,KAAK,kBAAkB,EACxByH,EAAQnJ,CAAI,EACpB,CAYD,SAASmJ,EAAQnJ,EAAM,CAErB,OAAIA,IAAS,KACJoE,EAAIpE,CAAI,EAMbA,IAAS,IACX0B,EAAQ,MAAM,OAAO,EACrBA,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAK,OAAO,EACbyH,GAILnJ,IAAS,IACXsC,EAAQZ,EAAQ,MAAM,kBAAkB,EACxCI,EAAO,EACAuG,EAAcrI,CAAI,GAEvBe,EAAmBf,CAAI,GACzB0B,EAAQ,MAAM,YAAY,EAC1BA,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAK,YAAY,EAClByH,IAITzH,EAAQ,MAAM,cAAc,EACrBa,EAAKvC,CAAI,EACjB,CAYD,SAASuC,EAAKvC,EAAM,CAClB,OAAIA,IAAS,MAAQA,IAAS,IAAMA,IAAS,IAAMe,EAAmBf,CAAI,GACxE0B,EAAQ,KAAK,cAAc,EACpByH,EAAQnJ,CAAI,IAErB0B,EAAQ,QAAQ1B,CAAI,EACbuC,EACR,CAYD,SAAS8F,EAAcrI,EAAM,CAE3B,OAAIA,IAAS,IACX0B,EAAQ,QAAQ1B,CAAI,EACpB8B,IACOuG,GAILvG,IAAS0F,GACX9F,EAAQ,KAAK,kBAAkB,EAC/BA,EAAQ,KAAK,UAAU,EAChBC,EAAG3B,CAAI,IAIhBsC,EAAM,KAAO,eACNC,EAAKvC,CAAI,EACjB,CACH,CCnMO,MAAMoJ,EAAa,CAOxB,YAAYC,EAAS,CAEnB,KAAK,KAAOA,EAAU,CAAC,GAAGA,CAAO,EAAI,CAAA,EAErC,KAAK,MAAQ,EACd,CAWD,IAAI1V,EAAO,CACT,GAAIA,EAAQ,GAAKA,GAAS,KAAK,KAAK,OAAS,KAAK,MAAM,OACtD,MAAM,IAAI,WAAW,wBAA0BA,EAAQ,kCAAoC,KAAK,KAAK,OAAS,KAAK,MAAM,QAAU,GAAG,EAExI,OAAIA,EAAQ,KAAK,KAAK,OAAe,KAAK,KAAKA,CAAK,EAC7C,KAAK,MAAM,KAAK,MAAM,OAASA,EAAQ,KAAK,KAAK,OAAS,CAAC,CACnE,CAMD,IAAI,QAAS,CACX,OAAO,KAAK,KAAK,OAAS,KAAK,MAAM,MACtC,CASD,OAAQ,CACN,YAAK,UAAU,CAAC,EACT,KAAK,MAAM,KACnB,CAaD,MAAMuD,EAAOoD,EAAK,CAEhB,MAAMgP,EAAOhP,GAAoC,OAAO,kBACxD,OAAIgP,EAAO,KAAK,KAAK,OACZ,KAAK,KAAK,MAAMpS,EAAOoS,CAAI,EAEhCpS,EAAQ,KAAK,KAAK,OACb,KAAK,MAAM,MAAM,KAAK,MAAM,OAASoS,EAAO,KAAK,KAAK,OAAQ,KAAK,MAAM,OAASpS,EAAQ,KAAK,KAAK,MAAM,EAAE,UAE9G,KAAK,KAAK,MAAMA,CAAK,EAAE,OAAO,KAAK,MAAM,MAAM,KAAK,MAAM,OAASoS,EAAO,KAAK,KAAK,MAAM,EAAE,QAAO,CAAE,CAC7G,CAsBD,OAAOpS,EAAOqS,EAAanK,EAAO,CAEhC,MAAM5B,EAAQ+L,GAAe,EAC7B,KAAK,UAAU,KAAK,MAAMrS,CAAK,CAAC,EAChC,MAAMsS,EAAU,KAAK,MAAM,OAAO,KAAK,MAAM,OAAShM,EAAO,OAAO,iBAAiB,EACrF,OAAI4B,GAAOqK,GAAY,KAAK,KAAMrK,CAAK,EAChCoK,EAAQ,SAChB,CAUD,KAAM,CACJ,YAAK,UAAU,OAAO,iBAAiB,EAChC,KAAK,KAAK,KAClB,CAWD,KAAKtG,EAAM,CACT,KAAK,UAAU,OAAO,iBAAiB,EACvC,KAAK,KAAK,KAAKA,CAAI,CACpB,CAWD,SAAS9D,EAAO,CACd,KAAK,UAAU,OAAO,iBAAiB,EACvCqK,GAAY,KAAK,KAAMrK,CAAK,CAC7B,CAWD,QAAQ8D,EAAM,CACZ,KAAK,UAAU,CAAC,EAChB,KAAK,MAAM,KAAKA,CAAI,CACrB,CAWD,YAAY9D,EAAO,CACjB,KAAK,UAAU,CAAC,EAChBqK,GAAY,KAAK,MAAOrK,EAAM,QAAS,CAAA,CACxC,CAcD,UAAUsK,EAAG,CACX,GAAI,EAAAA,IAAM,KAAK,KAAK,QAAUA,EAAI,KAAK,KAAK,QAAU,KAAK,MAAM,SAAW,GAAKA,EAAI,GAAK,KAAK,KAAK,SAAW,GAC/G,GAAIA,EAAI,KAAK,KAAK,OAAQ,CAExB,MAAMF,EAAU,KAAK,KAAK,OAAOE,EAAG,OAAO,iBAAiB,EAC5DD,GAAY,KAAK,MAAOD,EAAQ,QAAS,CAAA,CAC/C,KAAW,CAEL,MAAMA,EAAU,KAAK,MAAM,OAAO,KAAK,KAAK,OAAS,KAAK,MAAM,OAASE,EAAG,OAAO,iBAAiB,EACpGD,GAAY,KAAK,KAAMD,EAAQ,QAAS,CAAA,CACzC,CACF,CACH,CAcA,SAASC,GAAYvK,EAAMa,EAAO,CAEhC,IAAIV,EAAa,EACjB,GAAIU,EAAM,OAAS,IACjBb,EAAK,KAAK,GAAGa,CAAK,MAElB,MAAOV,EAAaU,EAAM,QACxBb,EAAK,KAAK,GAAGa,EAAM,MAAMV,EAAYA,EAAa,GAAK,CAAC,EACxDA,GAAc,GAGpB,CCvOO,SAASsK,GAAYC,EAAa,CAEvC,MAAMC,EAAQ,CAAA,EACd,IAAIlW,EAAQ,GAERmW,EAEAC,EAEAC,EAEAC,EAEA3K,EAEA4K,EAEAC,EACJ,MAAM5F,EAAS,IAAI6E,GAAaQ,CAAW,EAC3C,KAAO,EAAEjW,EAAQ4Q,EAAO,QAAQ,CAC9B,KAAO5Q,KAASkW,GACdlW,EAAQkW,EAAMlW,CAAK,EAMrB,GAJAmW,EAAQvF,EAAO,IAAI5Q,CAAK,EAIpBA,GAASmW,EAAM,CAAC,EAAE,OAAS,aAAevF,EAAO,IAAI5Q,EAAQ,CAAC,EAAE,CAAC,EAAE,OAAS,mBAC9EuW,EAAYJ,EAAM,CAAC,EAAE,WAAW,OAChCE,EAAa,EACTA,EAAaE,EAAU,QAAUA,EAAUF,CAAU,EAAE,CAAC,EAAE,OAAS,oBACrEA,GAAc,GAEZA,EAAaE,EAAU,QAAUA,EAAUF,CAAU,EAAE,CAAC,EAAE,OAAS,WACrE,KAAO,EAAEA,EAAaE,EAAU,QAC1BA,EAAUF,CAAU,EAAE,CAAC,EAAE,OAAS,WAGlCE,EAAUF,CAAU,EAAE,CAAC,EAAE,OAAS,cACpCE,EAAUF,CAAU,EAAE,CAAC,EAAE,4BAA8B,GACvDA,KAOR,GAAIF,EAAM,CAAC,IAAM,QACXA,EAAM,CAAC,EAAE,cACX,OAAO,OAAOD,EAAOO,GAAW7F,EAAQ5Q,CAAK,CAAC,EAC9CA,EAAQkW,EAAMlW,CAAK,EACnBwW,EAAO,YAIFL,EAAM,CAAC,EAAE,WAAY,CAG5B,IAFAE,EAAarW,EACboW,EAAY,OACLC,KAEL,GADAC,EAAa1F,EAAO,IAAIyF,CAAU,EAC9BC,EAAW,CAAC,EAAE,OAAS,cAAgBA,EAAW,CAAC,EAAE,OAAS,kBAC5DA,EAAW,CAAC,IAAM,UAChBF,IACFxF,EAAO,IAAIwF,CAAS,EAAE,CAAC,EAAE,KAAO,mBAElCE,EAAW,CAAC,EAAE,KAAO,aACrBF,EAAYC,WAEL,EAAAC,EAAW,CAAC,EAAE,OAAS,cAAgBA,EAAW,CAAC,EAAE,OAAS,kBAGvE,MAGAF,IAEFD,EAAM,CAAC,EAAE,IAAM,CACb,GAAGvF,EAAO,IAAIwF,CAAS,EAAE,CAAC,EAAE,KACtC,EAGQzK,EAAaiF,EAAO,MAAMwF,EAAWpW,CAAK,EAC1C2L,EAAW,QAAQwK,CAAK,EACxBvF,EAAO,OAAOwF,EAAWpW,EAAQoW,EAAY,EAAGzK,CAAU,EAE7D,CACF,CAGD,OAAAL,GAAO2K,EAAa,EAAG,OAAO,kBAAmBrF,EAAO,MAAM,CAAC,CAAC,EACzD,CAAC4F,CACV,CAYA,SAASC,GAAW7F,EAAQ8F,EAAY,CACtC,MAAM/H,EAAQiC,EAAO,IAAI8F,CAAU,EAAE,CAAC,EAChC7F,EAAUD,EAAO,IAAI8F,CAAU,EAAE,CAAC,EACxC,IAAIC,EAAgBD,EAAa,EAEjC,MAAME,EAAiB,CAAA,EACvB,IAAIC,EAAYlI,EAAM,WACjBkI,IACHA,EAAYhG,EAAQ,OAAOlC,EAAM,WAAW,EAAEA,EAAM,KAAK,EACrDA,EAAM,2BACRkI,EAAU,yBAA2B,KAGzC,MAAMC,EAAcD,EAAU,OAExBX,EAAQ,CAAA,EAERa,EAAO,CAAA,EAEb,IAAIzG,EAEA7B,EACAzO,EAAQ,GAERgX,EAAUrI,EACVsI,EAAS,EACT1T,EAAQ,EACZ,MAAM2T,EAAS,CAAC3T,CAAK,EAIrB,KAAOyT,GAAS,CAEd,KAAOpG,EAAO,IAAI,EAAE+F,CAAa,EAAE,CAAC,IAAMK,GAAS,CAGnDJ,EAAe,KAAKD,CAAa,EAC5BK,EAAQ,aACX1G,EAASO,EAAQ,YAAYmG,CAAO,EAC/BA,EAAQ,MACX1G,EAAO,KAAK,IAAI,EAEd7B,GACFoI,EAAU,WAAWG,EAAQ,KAAK,EAEhCA,EAAQ,8BACVH,EAAU,mCAAqC,IAEjDA,EAAU,MAAMvG,CAAM,EAClB0G,EAAQ,8BACVH,EAAU,mCAAqC,SAKnDpI,EAAWuI,EACXA,EAAUA,EAAQ,IACnB,CAKD,IADAA,EAAUrI,EACH,EAAE3O,EAAQ8W,EAAY,QAG3BA,EAAY9W,CAAK,EAAE,CAAC,IAAM,QAAU8W,EAAY9W,EAAQ,CAAC,EAAE,CAAC,IAAM,SAAW8W,EAAY9W,CAAK,EAAE,CAAC,EAAE,OAAS8W,EAAY9W,EAAQ,CAAC,EAAE,CAAC,EAAE,MAAQ8W,EAAY9W,CAAK,EAAE,CAAC,EAAE,MAAM,OAAS8W,EAAY9W,CAAK,EAAE,CAAC,EAAE,IAAI,OAC3MuD,EAAQvD,EAAQ,EAChBkX,EAAO,KAAK3T,CAAK,EAEjByT,EAAQ,WAAa,OACrBA,EAAQ,SAAW,OACnBA,EAAUA,EAAQ,MAqBtB,IAhBAH,EAAU,OAAS,GAKfG,GAEFA,EAAQ,WAAa,OACrBA,EAAQ,SAAW,QAEnBE,EAAO,IAAG,EAKZlX,EAAQkX,EAAO,OACRlX,KAAS,CACd,MAAMmX,EAAQL,EAAY,MAAMI,EAAOlX,CAAK,EAAGkX,EAAOlX,EAAQ,CAAC,CAAC,EAC1DuD,EAAQqT,EAAe,MAC7BV,EAAM,KAAK,CAAC3S,EAAOA,EAAQ4T,EAAM,OAAS,CAAC,CAAC,EAC5CvG,EAAO,OAAOrN,EAAO,EAAG4T,CAAK,CAC9B,CAGD,IAFAjB,EAAM,QAAO,EACblW,EAAQ,GACD,EAAEA,EAAQkW,EAAM,QACrBa,EAAKE,EAASf,EAAMlW,CAAK,EAAE,CAAC,CAAC,EAAIiX,EAASf,EAAMlW,CAAK,EAAE,CAAC,EACxDiX,GAAUf,EAAMlW,CAAK,EAAE,CAAC,EAAIkW,EAAMlW,CAAK,EAAE,CAAC,EAAI,EAEhD,OAAO+W,CACT,CCjNO,MAAM3I,GAAU,CACrB,QAASgJ,GACT,SAAUC,EACZ,EAGMC,GAAwB,CAC5B,QAAS,GACT,SAAUC,EACZ,EAQA,SAASH,GAAexG,EAAQ,CAC9B,OAAAoF,GAAYpF,CAAM,EACXA,CACT,CAOA,SAASyG,GAAgBtJ,EAASC,EAAI,CAEpC,IAAIS,EACJ,OAAO/C,EAYP,SAASA,EAAWW,EAAM,CACxB,OAAA0B,EAAQ,MAAM,SAAS,EACvBU,EAAWV,EAAQ,MAAM,eAAgB,CACvC,YAAa,SACnB,CAAK,EACMyJ,EAAYnL,CAAI,CACxB,CAYD,SAASmL,EAAYnL,EAAM,CACzB,OAAIA,IAAS,KACJoL,EAAWpL,CAAI,EAKpBe,EAAmBf,CAAI,EAClB0B,EAAQ,MAAMuJ,GAAuBI,EAAiBD,CAAU,EAAEpL,CAAI,GAI/E0B,EAAQ,QAAQ1B,CAAI,EACbmL,EACR,CAOD,SAASC,EAAWpL,EAAM,CACxB,OAAA0B,EAAQ,KAAK,cAAc,EAC3BA,EAAQ,KAAK,SAAS,EACfC,EAAG3B,CAAI,CACf,CAOD,SAASqL,EAAgBrL,EAAM,CAC7B,OAAA0B,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAK,cAAc,EAC3BU,EAAS,KAAOV,EAAQ,MAAM,eAAgB,CAC5C,YAAa,UACb,SAAAU,CACN,CAAK,EACDA,EAAWA,EAAS,KACb+I,CACR,CACH,CAOA,SAASD,GAAqBxJ,EAASC,EAAIyC,EAAK,CAC9C,MAAMxB,EAAO,KACb,OAAO0I,EAOP,SAASA,EAAetL,EAAM,CAC5B,OAAA0B,EAAQ,KAAK,cAAc,EAC3BA,EAAQ,MAAM,YAAY,EAC1BA,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAK,YAAY,EAClBD,EAAaC,EAAS6J,EAAU,YAAY,CACpD,CAOD,SAASA,EAASvL,EAAM,CACtB,GAAIA,IAAS,MAAQe,EAAmBf,CAAI,EAC1C,OAAOoE,EAAIpE,CAAI,EAKjB,MAAM0H,EAAO9E,EAAK,OAAOA,EAAK,OAAO,OAAS,CAAC,EAC/C,MAAI,CAACA,EAAK,OAAO,WAAW,QAAQ,KAAK,SAAS,cAAc,GAAK8E,GAAQA,EAAK,CAAC,EAAE,OAAS,cAAgBA,EAAK,CAAC,EAAE,eAAeA,EAAK,CAAC,EAAG,EAAI,EAAE,QAAU,EACrJ/F,EAAG3B,CAAI,EAET0B,EAAQ,UAAUkB,EAAK,OAAO,WAAW,KAAMwB,EAAKzC,CAAE,EAAE3B,CAAI,CACpE,CACH,CCxHO,SAASwL,GAAmB9J,EAASC,EAAIyC,EAAK/J,EAAMoR,EAAaC,EAAmBC,EAASC,EAAYhK,EAAK,CACnH,MAAMC,EAAQD,GAAO,OAAO,kBAC5B,IAAIiK,EAAU,EACd,OAAO3U,EAcP,SAASA,EAAM8I,EAAM,CACnB,OAAIA,IAAS,IACX0B,EAAQ,MAAMrH,CAAI,EAClBqH,EAAQ,MAAM+J,CAAW,EACzB/J,EAAQ,MAAMgK,CAAiB,EAC/BhK,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAKgK,CAAiB,EACvBI,GAIL9L,IAAS,MAAQA,IAAS,IAAMA,IAAS,IAAMW,GAAaX,CAAI,EAC3DoE,EAAIpE,CAAI,GAEjB0B,EAAQ,MAAMrH,CAAI,EAClBqH,EAAQ,MAAMiK,CAAO,EACrBjK,EAAQ,MAAMkK,CAAU,EACxBlK,EAAQ,MAAM,cAAe,CAC3B,YAAa,QACnB,CAAK,EACMqK,EAAI/L,CAAI,EAChB,CAYD,SAAS8L,EAAe9L,EAAM,CAC5B,OAAIA,IAAS,IACX0B,EAAQ,MAAMgK,CAAiB,EAC/BhK,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAKgK,CAAiB,EAC9BhK,EAAQ,KAAK+J,CAAW,EACxB/J,EAAQ,KAAKrH,CAAI,EACVsH,IAETD,EAAQ,MAAMkK,CAAU,EACxBlK,EAAQ,MAAM,cAAe,CAC3B,YAAa,QACnB,CAAK,EACMsK,EAAShM,CAAI,EACrB,CAYD,SAASgM,EAAShM,EAAM,CACtB,OAAIA,IAAS,IACX0B,EAAQ,KAAK,aAAa,EAC1BA,EAAQ,KAAKkK,CAAU,EAChBE,EAAe9L,CAAI,GAExBA,IAAS,MAAQA,IAAS,IAAMe,EAAmBf,CAAI,EAClDoE,EAAIpE,CAAI,GAEjB0B,EAAQ,QAAQ1B,CAAI,EACbA,IAAS,GAAKiM,EAAiBD,EACvC,CAYD,SAASC,EAAejM,EAAM,CAC5B,OAAIA,IAAS,IAAMA,IAAS,IAAMA,IAAS,IACzC0B,EAAQ,QAAQ1B,CAAI,EACbgM,GAEFA,EAAShM,CAAI,CACrB,CAYD,SAAS+L,EAAI/L,EAAM,CACjB,MAAI,CAAC6L,IAAY7L,IAAS,MAAQA,IAAS,IAAMgB,EAA0BhB,CAAI,IAC7E0B,EAAQ,KAAK,aAAa,EAC1BA,EAAQ,KAAKkK,CAAU,EACvBlK,EAAQ,KAAKiK,CAAO,EACpBjK,EAAQ,KAAKrH,CAAI,EACVsH,EAAG3B,CAAI,GAEZ6L,EAAUhK,GAAS7B,IAAS,IAC9B0B,EAAQ,QAAQ1B,CAAI,EACpB6L,IACOE,GAEL/L,IAAS,IACX0B,EAAQ,QAAQ1B,CAAI,EACpB6L,IACOE,GAML/L,IAAS,MAAQA,IAAS,IAAMA,IAAS,IAAMW,GAAaX,CAAI,EAC3DoE,EAAIpE,CAAI,GAEjB0B,EAAQ,QAAQ1B,CAAI,EACbA,IAAS,GAAKkM,EAAYH,EAClC,CAYD,SAASG,EAAUlM,EAAM,CACvB,OAAIA,IAAS,IAAMA,IAAS,IAAMA,IAAS,IACzC0B,EAAQ,QAAQ1B,CAAI,EACb+L,GAEFA,EAAI/L,CAAI,CAChB,CACH,CCpKO,SAASmM,GAAazK,EAASC,EAAIyC,EAAK/J,EAAM+R,EAAYR,EAAY,CAC3E,MAAMhJ,EAAO,KACb,IAAId,EAAO,EAEPoC,EACJ,OAAOhN,EAYP,SAASA,EAAM8I,EAAM,CACnB,OAAA0B,EAAQ,MAAMrH,CAAI,EAClBqH,EAAQ,MAAM0K,CAAU,EACxB1K,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAK0K,CAAU,EACvB1K,EAAQ,MAAMkK,CAAU,EACjBhD,CACR,CAYD,SAASA,EAAQ5I,EAAM,CACrB,OAAI8B,EAAO,KAAO9B,IAAS,MAAQA,IAAS,IAAMA,IAAS,IAAM,CAACkE,GAMlElE,IAAS,IAAM,CAAC8B,GAAQ,2BAA4Bc,EAAK,OAAO,WACvDwB,EAAIpE,CAAI,EAEbA,IAAS,IACX0B,EAAQ,KAAKkK,CAAU,EACvBlK,EAAQ,MAAM0K,CAAU,EACxB1K,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAK0K,CAAU,EACvB1K,EAAQ,KAAKrH,CAAI,EACVsH,GAILZ,EAAmBf,CAAI,GACzB0B,EAAQ,MAAM,YAAY,EAC1BA,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAK,YAAY,EAClBkH,IAETlH,EAAQ,MAAM,cAAe,CAC3B,YAAa,QACnB,CAAK,EACM2K,EAAYrM,CAAI,EACxB,CAYD,SAASqM,EAAYrM,EAAM,CACzB,OAAIA,IAAS,MAAQA,IAAS,IAAMA,IAAS,IAAMe,EAAmBf,CAAI,GAAK8B,IAAS,KACtFJ,EAAQ,KAAK,aAAa,EACnBkH,EAAQ5I,CAAI,IAErB0B,EAAQ,QAAQ1B,CAAI,EACfkE,IAAMA,EAAO,CAACjD,EAAcjB,CAAI,GAC9BA,IAAS,GAAKsM,EAAcD,EACpC,CAYD,SAASC,EAAYtM,EAAM,CACzB,OAAIA,IAAS,IAAMA,IAAS,IAAMA,IAAS,IACzC0B,EAAQ,QAAQ1B,CAAI,EACpB8B,IACOuK,GAEFA,EAAYrM,CAAI,CACxB,CACH,CCzGO,SAASuM,GAAa7K,EAASC,EAAIyC,EAAK/J,EAAM+R,EAAYR,EAAY,CAE3E,IAAIrG,EACJ,OAAOrO,EAYP,SAASA,EAAM8I,EAAM,CACnB,OAAIA,IAAS,IAAMA,IAAS,IAAMA,IAAS,IACzC0B,EAAQ,MAAMrH,CAAI,EAClBqH,EAAQ,MAAM0K,CAAU,EACxB1K,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAK0K,CAAU,EACvB7G,EAASvF,IAAS,GAAK,GAAKA,EACrBwM,GAEFpI,EAAIpE,CAAI,CAChB,CAcD,SAASwM,EAAMxM,EAAM,CACnB,OAAIA,IAASuF,GACX7D,EAAQ,MAAM0K,CAAU,EACxB1K,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAK0K,CAAU,EACvB1K,EAAQ,KAAKrH,CAAI,EACVsH,IAETD,EAAQ,MAAMkK,CAAU,EACjBhD,EAAQ5I,CAAI,EACpB,CAYD,SAAS4I,EAAQ5I,EAAM,CACrB,OAAIA,IAASuF,GACX7D,EAAQ,KAAKkK,CAAU,EAChBY,EAAMjH,CAAM,GAEjBvF,IAAS,KACJoE,EAAIpE,CAAI,EAIbe,EAAmBf,CAAI,GAEzB0B,EAAQ,MAAM,YAAY,EAC1BA,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAK,YAAY,EAClBD,EAAaC,EAASkH,EAAS,YAAY,IAEpDlH,EAAQ,MAAM,cAAe,CAC3B,YAAa,QACnB,CAAK,EACM8D,EAAOxF,CAAI,EACnB,CAOD,SAASwF,EAAOxF,EAAM,CACpB,OAAIA,IAASuF,GAAUvF,IAAS,MAAQe,EAAmBf,CAAI,GAC7D0B,EAAQ,KAAK,aAAa,EACnBkH,EAAQ5I,CAAI,IAErB0B,EAAQ,QAAQ1B,CAAI,EACbA,IAAS,GAAKyM,EAASjH,EAC/B,CAYD,SAASiH,EAAOzM,EAAM,CACpB,OAAIA,IAASuF,GAAUvF,IAAS,IAC9B0B,EAAQ,QAAQ1B,CAAI,EACbwF,GAEFA,EAAOxF,CAAI,CACnB,CACH,CCrIO,SAAS0M,GAAkBhL,EAASC,EAAI,CAE7C,IAAIuC,EACJ,OAAOhN,EAGP,SAASA,EAAM8I,EAAM,CACnB,OAAIe,EAAmBf,CAAI,GACzB0B,EAAQ,MAAM,YAAY,EAC1BA,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAK,YAAY,EACzBwC,EAAO,GACAhN,GAEL+J,EAAcjB,CAAI,EACbyB,EAAaC,EAASxK,EAAOgN,EAAO,aAAe,YAAY,EAAElE,CAAI,EAEvE2B,EAAG3B,CAAI,CACf,CACH,CC1BO,MAAMtN,GAAa,CACxB,KAAM,aACN,SAAUia,EACZ,EAGMC,GAAc,CAClB,QAAS,GACT,SAAUC,EACZ,EAOA,SAASF,GAAmBjL,EAASC,EAAIyC,EAAK,CAC5C,MAAMxB,EAAO,KAEb,IAAIkK,EACJ,OAAO5V,EAYP,SAASA,EAAM8I,EAAM,CAInB,OAAA0B,EAAQ,MAAM,YAAY,EACnBvB,EAAOH,CAAI,CACnB,CAYD,SAASG,EAAOH,EAAM,CAGpB,OAAOmM,GAAa,KAAKvJ,EAAMlB,EAASqL,EAExC3I,EAAK,kBAAmB,wBAAyB,uBAAuB,EAAEpE,CAAI,CAC/E,CAYD,SAAS+M,EAAW/M,EAAM,CAExB,OADA8M,EAAaxM,GAAoBsC,EAAK,eAAeA,EAAK,OAAOA,EAAK,OAAO,OAAS,CAAC,EAAE,CAAC,CAAC,EAAE,MAAM,EAAG,EAAE,CAAC,EACrG5C,IAAS,IACX0B,EAAQ,MAAM,kBAAkB,EAChCA,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAK,kBAAkB,EACxBsL,GAEF5I,EAAIpE,CAAI,CAChB,CAYD,SAASgN,EAAYhN,EAAM,CAEzB,OAAOgB,EAA0BhB,CAAI,EAAI0M,GAAkBhL,EAASuL,CAAiB,EAAEjN,CAAI,EAAIiN,EAAkBjN,CAAI,CACtH,CAYD,SAASiN,EAAkBjN,EAAM,CAC/B,OAAOwL,GAAmB9J,EAASwL,EAEnC9I,EAAK,wBAAyB,+BAAgC,qCAAsC,2BAA4B,6BAA6B,EAAEpE,CAAI,CACpK,CAYD,SAASkN,EAAiBlN,EAAM,CAC9B,OAAO0B,EAAQ,QAAQkL,GAAanH,EAAOA,CAAK,EAAEzF,CAAI,CACvD,CAcD,SAASyF,EAAMzF,EAAM,CACnB,OAAOiB,EAAcjB,CAAI,EAAIyB,EAAaC,EAASyL,EAAiB,YAAY,EAAEnN,CAAI,EAAImN,EAAgBnN,CAAI,CAC/G,CAcD,SAASmN,EAAgBnN,EAAM,CAC7B,OAAIA,IAAS,MAAQe,EAAmBf,CAAI,GAC1C0B,EAAQ,KAAK,YAAY,EAKzBkB,EAAK,OAAO,QAAQ,KAAKkK,CAAU,EAK5BnL,EAAG3B,CAAI,GAEToE,EAAIpE,CAAI,CAChB,CACH,CAOA,SAAS6M,GAAoBnL,EAASC,EAAIyC,EAAK,CAC7C,OAAOwI,EAcP,SAASA,EAAY5M,EAAM,CACzB,OAAOgB,EAA0BhB,CAAI,EAAI0M,GAAkBhL,EAAS0L,CAAY,EAAEpN,CAAI,EAAIoE,EAAIpE,CAAI,CACnG,CAaD,SAASoN,EAAapN,EAAM,CAC1B,OAAOuM,GAAa7K,EAAS2L,EAAYjJ,EAAK,kBAAmB,wBAAyB,uBAAuB,EAAEpE,CAAI,CACxH,CAYD,SAASqN,EAAWrN,EAAM,CACxB,OAAOiB,EAAcjB,CAAI,EAAIyB,EAAaC,EAAS4L,EAA8B,YAAY,EAAEtN,CAAI,EAAIsN,EAA6BtN,CAAI,CACzI,CAYD,SAASsN,EAA6BtN,EAAM,CAC1C,OAAOA,IAAS,MAAQe,EAAmBf,CAAI,EAAI2B,EAAG3B,CAAI,EAAIoE,EAAIpE,CAAI,CACvE,CACH,CClPO,MAAMuN,GAAkB,CAC7B,KAAM,kBACN,SAAUC,EACZ,EAOA,SAASA,GAAwB9L,EAASC,EAAIyC,EAAK,CACjD,OAAOlN,EAaP,SAASA,EAAM8I,EAAM,CACnB,OAAA0B,EAAQ,MAAM,iBAAiB,EAC/BA,EAAQ,QAAQ1B,CAAI,EACbyF,CACR,CAaD,SAASA,EAAMzF,EAAM,CACnB,OAAIe,EAAmBf,CAAI,GACzB0B,EAAQ,KAAK,iBAAiB,EACvBC,EAAG3B,CAAI,GAEToE,EAAIpE,CAAI,CAChB,CACH,CC5CO,MAAMyN,GAAa,CACxB,KAAM,aACN,QAASC,GACT,SAAUC,EACZ,EAGA,SAASD,GAAkBnJ,EAAQC,EAAS,CAC1C,IAAI4G,EAAa7G,EAAO,OAAS,EAC7BtC,EAAe,EAEfF,EAEA9F,EAGJ,OAAIsI,EAAOtC,CAAY,EAAE,CAAC,EAAE,OAAS,eACnCA,GAAgB,GAIdmJ,EAAa,EAAInJ,GAAgBsC,EAAO6G,CAAU,EAAE,CAAC,EAAE,OAAS,eAClEA,GAAc,GAEZ7G,EAAO6G,CAAU,EAAE,CAAC,EAAE,OAAS,uBAAyBnJ,IAAiBmJ,EAAa,GAAKA,EAAa,EAAInJ,GAAgBsC,EAAO6G,EAAa,CAAC,EAAE,CAAC,EAAE,OAAS,gBACjKA,GAAcnJ,EAAe,IAAMmJ,EAAa,EAAI,GAElDA,EAAanJ,IACfF,EAAU,CACR,KAAM,iBACN,MAAOwC,EAAOtC,CAAY,EAAE,CAAC,EAAE,MAC/B,IAAKsC,EAAO6G,CAAU,EAAE,CAAC,EAAE,GACjC,EACInP,EAAO,CACL,KAAM,YACN,MAAOsI,EAAOtC,CAAY,EAAE,CAAC,EAAE,MAC/B,IAAKsC,EAAO6G,CAAU,EAAE,CAAC,EAAE,IAC3B,YAAa,MACnB,EACInM,GAAOsF,EAAQtC,EAAcmJ,EAAanJ,EAAe,EAAG,CAAC,CAAC,QAASF,EAASyC,CAAO,EAAG,CAAC,QAASvI,EAAMuI,CAAO,EAAG,CAAC,OAAQvI,EAAMuI,CAAO,EAAG,CAAC,OAAQzC,EAASyC,CAAO,CAAC,CAAC,GAEnKD,CACT,CAOA,SAASoJ,GAAmBjM,EAASC,EAAIyC,EAAK,CAC5C,IAAItC,EAAO,EACX,OAAO5K,EAYP,SAASA,EAAM8I,EAAM,CAEnB,OAAA0B,EAAQ,MAAM,YAAY,EACnBvB,EAAOH,CAAI,CACnB,CAYD,SAASG,EAAOH,EAAM,CACpB,OAAA0B,EAAQ,MAAM,oBAAoB,EAC3BiG,EAAa3H,CAAI,CACzB,CAYD,SAAS2H,EAAa3H,EAAM,CAC1B,OAAIA,IAAS,IAAM8B,IAAS,GAC1BJ,EAAQ,QAAQ1B,CAAI,EACb2H,GAIL3H,IAAS,MAAQgB,EAA0BhB,CAAI,GACjD0B,EAAQ,KAAK,oBAAoB,EAC1BkH,EAAQ5I,CAAI,GAEdoE,EAAIpE,CAAI,CAChB,CAYD,SAAS4I,EAAQ5I,EAAM,CACrB,OAAIA,IAAS,IACX0B,EAAQ,MAAM,oBAAoB,EAC3BkM,EAAgB5N,CAAI,GAEzBA,IAAS,MAAQe,EAAmBf,CAAI,GAC1C0B,EAAQ,KAAK,YAAY,EAIlBC,EAAG3B,CAAI,GAEZiB,EAAcjB,CAAI,EACbyB,EAAaC,EAASkH,EAAS,YAAY,EAAE5I,CAAI,GAK1D0B,EAAQ,MAAM,gBAAgB,EACvBa,EAAKvC,CAAI,EACjB,CAcD,SAAS4N,EAAgB5N,EAAM,CAC7B,OAAIA,IAAS,IACX0B,EAAQ,QAAQ1B,CAAI,EACb4N,IAETlM,EAAQ,KAAK,oBAAoB,EAC1BkH,EAAQ5I,CAAI,EACpB,CAYD,SAASuC,EAAKvC,EAAM,CAClB,OAAIA,IAAS,MAAQA,IAAS,IAAMgB,EAA0BhB,CAAI,GAChE0B,EAAQ,KAAK,gBAAgB,EACtBkH,EAAQ5I,CAAI,IAErB0B,EAAQ,QAAQ1B,CAAI,EACbuC,EACR,CACH,CCnLO,MAAMsL,GAAiB,CAC5B,UACA,UACA,QACA,OACA,WACA,aACA,OACA,UACA,SACA,MACA,WACA,KACA,UACA,SACA,MACA,MACA,KACA,KACA,WACA,aACA,SACA,SACA,OACA,QACA,WACA,KACA,KACA,KACA,KACA,KACA,KACA,OACA,SACA,KACA,OACA,SACA,SACA,KACA,OACA,OACA,OACA,WACA,MACA,WACA,KACA,WACA,SACA,IACA,QACA,SACA,UACA,UACA,QACA,QACA,KACA,QACA,KACA,QACA,QACA,KACA,QACA,IACF,EAcaC,GAAe,CAAC,MAAO,SAAU,QAAS,UAAU,EC5EpDC,GAAW,CACtB,SAAU,GACV,KAAM,WACN,UAAWC,GACX,SAAUC,EACZ,EAGMC,GAAkB,CACtB,QAAS,GACT,SAAUC,EACZ,EACMC,GAA2B,CAC/B,QAAS,GACT,SAAUC,EACZ,EAGA,SAASL,GAAkBzJ,EAAQ,CACjC,IAAI5Q,EAAQ4Q,EAAO,OACnB,KAAO5Q,KACD,EAAA4Q,EAAO5Q,CAAK,EAAE,CAAC,IAAM,SAAW4Q,EAAO5Q,CAAK,EAAE,CAAC,EAAE,OAAS,aAA9D,CAIF,OAAIA,EAAQ,GAAK4Q,EAAO5Q,EAAQ,CAAC,EAAE,CAAC,EAAE,OAAS,eAE7C4Q,EAAO5Q,CAAK,EAAE,CAAC,EAAE,MAAQ4Q,EAAO5Q,EAAQ,CAAC,EAAE,CAAC,EAAE,MAE9C4Q,EAAO5Q,EAAQ,CAAC,EAAE,CAAC,EAAE,MAAQ4Q,EAAO5Q,EAAQ,CAAC,EAAE,CAAC,EAAE,MAElD4Q,EAAO,OAAO5Q,EAAQ,EAAG,CAAC,GAErB4Q,CACT,CAOA,SAAS0J,GAAiBvM,EAASC,EAAIyC,EAAK,CAC1C,MAAMxB,EAAO,KAEb,IAAI2C,EAEA+I,EAEAC,EAEA5a,EAEA6a,EACJ,OAAOtX,EAYP,SAASA,EAAM8I,EAAM,CAEnB,OAAOG,EAAOH,CAAI,CACnB,CAYD,SAASG,EAAOH,EAAM,CACpB,OAAA0B,EAAQ,MAAM,UAAU,EACxBA,EAAQ,MAAM,cAAc,EAC5BA,EAAQ,QAAQ1B,CAAI,EACb8E,CACR,CAgBD,SAASA,EAAK9E,EAAM,CAClB,OAAIA,IAAS,IACX0B,EAAQ,QAAQ1B,CAAI,EACbyO,GAELzO,IAAS,IACX0B,EAAQ,QAAQ1B,CAAI,EACpBsO,EAAa,GACNI,GAEL1O,IAAS,IACX0B,EAAQ,QAAQ1B,CAAI,EACpBuF,EAAS,EAMF3C,EAAK,UAAYjB,EAAKgN,GAI3BpO,EAAWP,CAAI,GAEjB0B,EAAQ,QAAQ1B,CAAI,EACpBuO,EAAS,OAAO,aAAavO,CAAI,EAC1B4O,GAEFxK,EAAIpE,CAAI,CAChB,CAgBD,SAASyO,EAAgBzO,EAAM,CAC7B,OAAIA,IAAS,IACX0B,EAAQ,QAAQ1B,CAAI,EACpBuF,EAAS,EACFsJ,GAEL7O,IAAS,IACX0B,EAAQ,QAAQ1B,CAAI,EACpBuF,EAAS,EACT5R,EAAQ,EACDmb,GAILvO,EAAWP,CAAI,GACjB0B,EAAQ,QAAQ1B,CAAI,EACpBuF,EAAS,EAGF3C,EAAK,UAAYjB,EAAKgN,GAExBvK,EAAIpE,CAAI,CAChB,CAYD,SAAS6O,EAAkB7O,EAAM,CAC/B,OAAIA,IAAS,IACX0B,EAAQ,QAAQ1B,CAAI,EAGb4C,EAAK,UAAYjB,EAAKgN,GAExBvK,EAAIpE,CAAI,CAChB,CAYD,SAAS8O,EAAgB9O,EAAM,CAC7B,MAAM7N,GAAQ,SACd,OAAI6N,IAAS7N,GAAM,WAAWwB,GAAO,GACnC+N,EAAQ,QAAQ1B,CAAI,EAChBrM,IAAUxB,GAAM,OAGXyQ,EAAK,UAAYjB,EAAKoN,EAExBD,GAEF1K,EAAIpE,CAAI,CAChB,CAYD,SAAS0O,EAAc1O,EAAM,CAC3B,OAAIO,EAAWP,CAAI,GAEjB0B,EAAQ,QAAQ1B,CAAI,EACpBuO,EAAS,OAAO,aAAavO,CAAI,EAC1B4O,GAEFxK,EAAIpE,CAAI,CAChB,CAcD,SAAS4O,EAAQ5O,EAAM,CACrB,GAAIA,IAAS,MAAQA,IAAS,IAAMA,IAAS,IAAMgB,EAA0BhB,CAAI,EAAG,CAClF,MAAMgP,GAAQhP,IAAS,GACjBlO,GAAOyc,EAAO,cACpB,MAAI,CAACS,IAAS,CAACV,GAAcR,GAAa,SAAShc,EAAI,GACrDyT,EAAS,EAGF3C,EAAK,UAAYjB,EAAG3B,CAAI,EAAI+O,EAAa/O,CAAI,GAElD6N,GAAe,SAASU,EAAO,YAAa,CAAA,GAC9ChJ,EAAS,EACLyJ,IACFtN,EAAQ,QAAQ1B,CAAI,EACbiP,GAKFrM,EAAK,UAAYjB,EAAG3B,CAAI,EAAI+O,EAAa/O,CAAI,IAEtDuF,EAAS,EAEF3C,EAAK,WAAa,CAACA,EAAK,OAAO,KAAKA,EAAK,MAAM,IAAI,EAAIwB,EAAIpE,CAAI,EAAIsO,EAAaY,EAAwBlP,CAAI,EAAImP,EAA4BnP,CAAI,EACxJ,CAGD,OAAIA,IAAS,IAAMS,EAAkBT,CAAI,GACvC0B,EAAQ,QAAQ1B,CAAI,EACpBuO,GAAU,OAAO,aAAavO,CAAI,EAC3B4O,GAEFxK,EAAIpE,CAAI,CAChB,CAYD,SAASiP,EAAiBjP,EAAM,CAC9B,OAAIA,IAAS,IACX0B,EAAQ,QAAQ1B,CAAI,EAGb4C,EAAK,UAAYjB,EAAKoN,GAExB3K,EAAIpE,CAAI,CAChB,CAYD,SAASkP,EAAwBlP,EAAM,CACrC,OAAIiB,EAAcjB,CAAI,GACpB0B,EAAQ,QAAQ1B,CAAI,EACbkP,GAEFE,EAAYpP,CAAI,CACxB,CAyBD,SAASmP,EAA4BnP,EAAM,CACzC,OAAIA,IAAS,IACX0B,EAAQ,QAAQ1B,CAAI,EACboP,GAILpP,IAAS,IAAMA,IAAS,IAAMO,EAAWP,CAAI,GAC/C0B,EAAQ,QAAQ1B,CAAI,EACbqP,GAELpO,EAAcjB,CAAI,GACpB0B,EAAQ,QAAQ1B,CAAI,EACbmP,GAEFC,EAAYpP,CAAI,CACxB,CAgBD,SAASqP,EAAsBrP,EAAM,CAEnC,OAAIA,IAAS,IAAMA,IAAS,IAAMA,IAAS,IAAMA,IAAS,IAAMS,EAAkBT,CAAI,GACpF0B,EAAQ,QAAQ1B,CAAI,EACbqP,GAEFC,EAA2BtP,CAAI,CACvC,CAeD,SAASsP,EAA2BtP,EAAM,CACxC,OAAIA,IAAS,IACX0B,EAAQ,QAAQ1B,CAAI,EACbuP,GAELtO,EAAcjB,CAAI,GACpB0B,EAAQ,QAAQ1B,CAAI,EACbsP,GAEFH,EAA4BnP,CAAI,CACxC,CAeD,SAASuP,EAA6BvP,EAAM,CAC1C,OAAIA,IAAS,MAAQA,IAAS,IAAMA,IAAS,IAAMA,IAAS,IAAMA,IAAS,GAClEoE,EAAIpE,CAAI,EAEbA,IAAS,IAAMA,IAAS,IAC1B0B,EAAQ,QAAQ1B,CAAI,EACpBwO,EAAUxO,EACHwP,GAELvO,EAAcjB,CAAI,GACpB0B,EAAQ,QAAQ1B,CAAI,EACbuP,GAEFE,EAA+BzP,CAAI,CAC3C,CAcD,SAASwP,EAA6BxP,EAAM,CAC1C,OAAIA,IAASwO,GACX9M,EAAQ,QAAQ1B,CAAI,EACpBwO,EAAU,KACHkB,GAEL1P,IAAS,MAAQe,EAAmBf,CAAI,EACnCoE,EAAIpE,CAAI,GAEjB0B,EAAQ,QAAQ1B,CAAI,EACbwP,EACR,CAYD,SAASC,EAA+BzP,EAAM,CAC5C,OAAIA,IAAS,MAAQA,IAAS,IAAMA,IAAS,IAAMA,IAAS,IAAMA,IAAS,IAAMA,IAAS,IAAMA,IAAS,IAAMA,IAAS,IAAMgB,EAA0BhB,CAAI,EACnJsP,EAA2BtP,CAAI,GAExC0B,EAAQ,QAAQ1B,CAAI,EACbyP,EACR,CAaD,SAASC,EAAkC1P,EAAM,CAC/C,OAAIA,IAAS,IAAMA,IAAS,IAAMiB,EAAcjB,CAAI,EAC3CmP,EAA4BnP,CAAI,EAElCoE,EAAIpE,CAAI,CAChB,CAYD,SAASoP,EAAYpP,EAAM,CACzB,OAAIA,IAAS,IACX0B,EAAQ,QAAQ1B,CAAI,EACb2P,GAEFvL,EAAIpE,CAAI,CAChB,CAYD,SAAS2P,EAAc3P,EAAM,CAC3B,OAAIA,IAAS,MAAQe,EAAmBf,CAAI,EAGnC+O,EAAa/O,CAAI,EAEtBiB,EAAcjB,CAAI,GACpB0B,EAAQ,QAAQ1B,CAAI,EACb2P,GAEFvL,EAAIpE,CAAI,CAChB,CAYD,SAAS+O,EAAa/O,EAAM,CAC1B,OAAIA,IAAS,IAAMuF,IAAW,GAC5B7D,EAAQ,QAAQ1B,CAAI,EACb4P,GAEL5P,IAAS,IAAMuF,IAAW,GAC5B7D,EAAQ,QAAQ1B,CAAI,EACb6P,GAEL7P,IAAS,IAAMuF,IAAW,GAC5B7D,EAAQ,QAAQ1B,CAAI,EACb8P,IAEL9P,IAAS,IAAMuF,IAAW,GAC5B7D,EAAQ,QAAQ1B,CAAI,EACb2O,GAEL3O,IAAS,IAAMuF,IAAW,GAC5B7D,EAAQ,QAAQ1B,CAAI,EACb+P,IAELhP,EAAmBf,CAAI,IAAMuF,IAAW,GAAKA,IAAW,IAC1D7D,EAAQ,KAAK,cAAc,EACpBA,EAAQ,MAAMwM,GAAiB8B,GAAmBC,CAAiB,EAAEjQ,CAAI,GAE9EA,IAAS,MAAQe,EAAmBf,CAAI,GAC1C0B,EAAQ,KAAK,cAAc,EACpBuO,EAAkBjQ,CAAI,IAE/B0B,EAAQ,QAAQ1B,CAAI,EACb+O,EACR,CAaD,SAASkB,EAAkBjQ,EAAM,CAC/B,OAAO0B,EAAQ,MAAM0M,GAA0B8B,EAA0BF,EAAiB,EAAEhQ,CAAI,CACjG,CAaD,SAASkQ,EAAyBlQ,EAAM,CACtC,OAAA0B,EAAQ,MAAM,YAAY,EAC1BA,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAK,YAAY,EAClByO,CACR,CAaD,SAASA,EAAmBnQ,EAAM,CAChC,OAAIA,IAAS,MAAQe,EAAmBf,CAAI,EACnCiQ,EAAkBjQ,CAAI,GAE/B0B,EAAQ,MAAM,cAAc,EACrBqN,EAAa/O,CAAI,EACzB,CAYD,SAAS4P,EAA0B5P,EAAM,CACvC,OAAIA,IAAS,IACX0B,EAAQ,QAAQ1B,CAAI,EACb2O,GAEFI,EAAa/O,CAAI,CACzB,CAYD,SAAS6P,EAAuB7P,EAAM,CACpC,OAAIA,IAAS,IACX0B,EAAQ,QAAQ1B,CAAI,EACpBuO,EAAS,GACF6B,IAEFrB,EAAa/O,CAAI,CACzB,CAYD,SAASoQ,GAAsBpQ,EAAM,CACnC,GAAIA,IAAS,GAAI,CACf,MAAMlO,GAAOyc,EAAO,cACpB,OAAIT,GAAa,SAAShc,EAAI,GAC5B4P,EAAQ,QAAQ1B,CAAI,EACb8P,IAEFf,EAAa/O,CAAI,CACzB,CACD,OAAIO,EAAWP,CAAI,GAAKuO,EAAO,OAAS,GAEtC7M,EAAQ,QAAQ1B,CAAI,EACpBuO,GAAU,OAAO,aAAavO,CAAI,EAC3BoQ,IAEFrB,EAAa/O,CAAI,CACzB,CAYD,SAAS+P,GAAwB/P,EAAM,CACrC,OAAIA,IAAS,IACX0B,EAAQ,QAAQ1B,CAAI,EACb2O,GAEFI,EAAa/O,CAAI,CACzB,CAoBD,SAAS2O,EAA8B3O,EAAM,CAC3C,OAAIA,IAAS,IACX0B,EAAQ,QAAQ1B,CAAI,EACb8P,IAIL9P,IAAS,IAAMuF,IAAW,GAC5B7D,EAAQ,QAAQ1B,CAAI,EACb2O,GAEFI,EAAa/O,CAAI,CACzB,CAYD,SAAS8P,GAAkB9P,EAAM,CAC/B,OAAIA,IAAS,MAAQe,EAAmBf,CAAI,GAC1C0B,EAAQ,KAAK,cAAc,EACpBsO,GAAkBhQ,CAAI,IAE/B0B,EAAQ,QAAQ1B,CAAI,EACb8P,GACR,CAYD,SAASE,GAAkBhQ,EAAM,CAC/B,OAAA0B,EAAQ,KAAK,UAAU,EAKhBC,EAAG3B,CAAI,CACf,CACH,CAOA,SAASqO,GAAiC3M,EAASC,EAAIyC,EAAK,CAC1D,MAAMxB,EAAO,KACb,OAAO1L,EAaP,SAASA,EAAM8I,EAAM,CACnB,OAAIe,EAAmBf,CAAI,GACzB0B,EAAQ,MAAM,YAAY,EAC1BA,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAK,YAAY,EAClB+D,GAEFrB,EAAIpE,CAAI,CAChB,CAaD,SAASyF,EAAMzF,EAAM,CACnB,OAAO4C,EAAK,OAAO,KAAKA,EAAK,IAAK,EAAC,IAAI,EAAIwB,EAAIpE,CAAI,EAAI2B,EAAG3B,CAAI,CAC/D,CACH,CAOA,SAASmO,GAAwBzM,EAASC,EAAIyC,EAAK,CACjD,OAAOlN,EAaP,SAASA,EAAM8I,EAAM,CACnB,OAAA0B,EAAQ,MAAM,YAAY,EAC1BA,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAK,YAAY,EAClBA,EAAQ,QAAQ0E,GAAWzE,EAAIyC,CAAG,CAC1C,CACH,CC91BO,MAAMiM,GAAW,CACtB,KAAM,WACN,SAAUC,EACZ,EAOA,SAASA,GAAiB5O,EAASC,EAAIyC,EAAK,CAC1C,MAAMxB,EAAO,KAEb,IAAI2C,EAEA5R,EAEA4c,EACJ,OAAOrZ,EAYP,SAASA,EAAM8I,EAAM,CACnB,OAAA0B,EAAQ,MAAM,UAAU,EACxBA,EAAQ,MAAM,cAAc,EAC5BA,EAAQ,QAAQ1B,CAAI,EACb8E,CACR,CAgBD,SAASA,EAAK9E,EAAM,CAClB,OAAIA,IAAS,IACX0B,EAAQ,QAAQ1B,CAAI,EACbyO,GAELzO,IAAS,IACX0B,EAAQ,QAAQ1B,CAAI,EACb0O,GAEL1O,IAAS,IACX0B,EAAQ,QAAQ1B,CAAI,EACbwQ,GAILjQ,EAAWP,CAAI,GACjB0B,EAAQ,QAAQ1B,CAAI,EACbyQ,GAEFrM,EAAIpE,CAAI,CAChB,CAgBD,SAASyO,EAAgBzO,EAAM,CAC7B,OAAIA,IAAS,IACX0B,EAAQ,QAAQ1B,CAAI,EACb6O,GAEL7O,IAAS,IACX0B,EAAQ,QAAQ1B,CAAI,EACpBrM,EAAQ,EACDmb,GAELvO,EAAWP,CAAI,GACjB0B,EAAQ,QAAQ1B,CAAI,EACbjI,GAEFqM,EAAIpE,CAAI,CAChB,CAYD,SAAS6O,EAAkB7O,EAAM,CAC/B,OAAIA,IAAS,IACX0B,EAAQ,QAAQ1B,CAAI,EACb0Q,GAEFtM,EAAIpE,CAAI,CAChB,CAYD,SAASnI,EAAQmI,EAAM,CACrB,OAAIA,IAAS,KACJoE,EAAIpE,CAAI,EAEbA,IAAS,IACX0B,EAAQ,QAAQ1B,CAAI,EACb2Q,GAEL5P,EAAmBf,CAAI,GACzBuQ,EAAc1Y,EACP+Y,EAAiB5Q,CAAI,IAE9B0B,EAAQ,QAAQ1B,CAAI,EACbnI,EACR,CAYD,SAAS8Y,EAAa3Q,EAAM,CAC1B,OAAIA,IAAS,IACX0B,EAAQ,QAAQ1B,CAAI,EACb0Q,GAEF7Y,EAAQmI,CAAI,CACpB,CAYD,SAAS0Q,EAAW1Q,EAAM,CACxB,OAAOA,IAAS,GAAK1F,EAAI0F,CAAI,EAAIA,IAAS,GAAK2Q,EAAa3Q,CAAI,EAAInI,EAAQmI,CAAI,CACjF,CAYD,SAAS8O,EAAgB9O,EAAM,CAC7B,MAAM7N,GAAQ,SACd,OAAI6N,IAAS7N,GAAM,WAAWwB,GAAO,GACnC+N,EAAQ,QAAQ1B,CAAI,EACbrM,IAAUxB,GAAM,OAAS0e,EAAQ/B,GAEnC1K,EAAIpE,CAAI,CAChB,CAYD,SAAS6Q,EAAM7Q,EAAM,CACnB,OAAIA,IAAS,KACJoE,EAAIpE,CAAI,EAEbA,IAAS,IACX0B,EAAQ,QAAQ1B,CAAI,EACb8Q,GAEL/P,EAAmBf,CAAI,GACzBuQ,EAAcM,EACPD,EAAiB5Q,CAAI,IAE9B0B,EAAQ,QAAQ1B,CAAI,EACb6Q,EACR,CAYD,SAASC,EAAW9Q,EAAM,CACxB,OAAIA,IAAS,IACX0B,EAAQ,QAAQ1B,CAAI,EACb+Q,GAEFF,EAAM7Q,CAAI,CAClB,CAYD,SAAS+Q,EAAS/Q,EAAM,CACtB,OAAIA,IAAS,GACJ1F,EAAI0F,CAAI,EAEbA,IAAS,IACX0B,EAAQ,QAAQ1B,CAAI,EACb+Q,GAEFF,EAAM7Q,CAAI,CAClB,CAYD,SAASjI,EAAYiI,EAAM,CACzB,OAAIA,IAAS,MAAQA,IAAS,GACrB1F,EAAI0F,CAAI,EAEbe,EAAmBf,CAAI,GACzBuQ,EAAcxY,EACP6Y,EAAiB5Q,CAAI,IAE9B0B,EAAQ,QAAQ1B,CAAI,EACbjI,EACR,CAYD,SAASyY,EAAYxQ,EAAM,CACzB,OAAIA,IAAS,KACJoE,EAAIpE,CAAI,EAEbA,IAAS,IACX0B,EAAQ,QAAQ1B,CAAI,EACbgR,GAELjQ,EAAmBf,CAAI,GACzBuQ,EAAcC,EACPI,EAAiB5Q,CAAI,IAE9B0B,EAAQ,QAAQ1B,CAAI,EACbwQ,EACR,CAYD,SAASQ,EAAiBhR,EAAM,CAC9B,OAAOA,IAAS,GAAK1F,EAAI0F,CAAI,EAAIwQ,EAAYxQ,CAAI,CAClD,CAYD,SAAS0O,EAAc1O,EAAM,CAE3B,OAAIO,EAAWP,CAAI,GACjB0B,EAAQ,QAAQ1B,CAAI,EACbiR,GAEF7M,EAAIpE,CAAI,CAChB,CAYD,SAASiR,EAASjR,EAAM,CAEtB,OAAIA,IAAS,IAAMS,EAAkBT,CAAI,GACvC0B,EAAQ,QAAQ1B,CAAI,EACbiR,GAEFC,EAAgBlR,CAAI,CAC5B,CAYD,SAASkR,EAAgBlR,EAAM,CAC7B,OAAIe,EAAmBf,CAAI,GACzBuQ,EAAcW,EACPN,EAAiB5Q,CAAI,GAE1BiB,EAAcjB,CAAI,GACpB0B,EAAQ,QAAQ1B,CAAI,EACbkR,GAEF5W,EAAI0F,CAAI,CAChB,CAYD,SAASyQ,EAAQzQ,EAAM,CAErB,OAAIA,IAAS,IAAMS,EAAkBT,CAAI,GACvC0B,EAAQ,QAAQ1B,CAAI,EACbyQ,GAELzQ,IAAS,IAAMA,IAAS,IAAMgB,EAA0BhB,CAAI,EACvDmR,EAAenR,CAAI,EAErBoE,EAAIpE,CAAI,CAChB,CAYD,SAASmR,EAAenR,EAAM,CAC5B,OAAIA,IAAS,IACX0B,EAAQ,QAAQ1B,CAAI,EACb1F,GAIL0F,IAAS,IAAMA,IAAS,IAAMO,EAAWP,CAAI,GAC/C0B,EAAQ,QAAQ1B,CAAI,EACboR,GAELrQ,EAAmBf,CAAI,GACzBuQ,EAAcY,EACPP,EAAiB5Q,CAAI,GAE1BiB,EAAcjB,CAAI,GACpB0B,EAAQ,QAAQ1B,CAAI,EACbmR,GAEF7W,EAAI0F,CAAI,CAChB,CAYD,SAASoR,EAAqBpR,EAAM,CAElC,OAAIA,IAAS,IAAMA,IAAS,IAAMA,IAAS,IAAMA,IAAS,IAAMS,EAAkBT,CAAI,GACpF0B,EAAQ,QAAQ1B,CAAI,EACboR,GAEFC,EAA0BrR,CAAI,CACtC,CAaD,SAASqR,EAA0BrR,EAAM,CACvC,OAAIA,IAAS,IACX0B,EAAQ,QAAQ1B,CAAI,EACbsR,GAELvQ,EAAmBf,CAAI,GACzBuQ,EAAcc,EACPT,EAAiB5Q,CAAI,GAE1BiB,EAAcjB,CAAI,GACpB0B,EAAQ,QAAQ1B,CAAI,EACbqR,GAEFF,EAAenR,CAAI,CAC3B,CAaD,SAASsR,EAA4BtR,EAAM,CACzC,OAAIA,IAAS,MAAQA,IAAS,IAAMA,IAAS,IAAMA,IAAS,IAAMA,IAAS,GAClEoE,EAAIpE,CAAI,EAEbA,IAAS,IAAMA,IAAS,IAC1B0B,EAAQ,QAAQ1B,CAAI,EACpBuF,EAASvF,EACFuR,GAELxQ,EAAmBf,CAAI,GACzBuQ,EAAce,EACPV,EAAiB5Q,CAAI,GAE1BiB,EAAcjB,CAAI,GACpB0B,EAAQ,QAAQ1B,CAAI,EACbsR,IAET5P,EAAQ,QAAQ1B,CAAI,EACbwR,EACR,CAYD,SAASD,EAA4BvR,EAAM,CACzC,OAAIA,IAASuF,GACX7D,EAAQ,QAAQ1B,CAAI,EACpBuF,EAAS,OACFkM,GAELzR,IAAS,KACJoE,EAAIpE,CAAI,EAEbe,EAAmBf,CAAI,GACzBuQ,EAAcgB,EACPX,EAAiB5Q,CAAI,IAE9B0B,EAAQ,QAAQ1B,CAAI,EACbuR,EACR,CAYD,SAASC,EAA8BxR,EAAM,CAC3C,OAAIA,IAAS,MAAQA,IAAS,IAAMA,IAAS,IAAMA,IAAS,IAAMA,IAAS,IAAMA,IAAS,GACjFoE,EAAIpE,CAAI,EAEbA,IAAS,IAAMA,IAAS,IAAMgB,EAA0BhB,CAAI,EACvDmR,EAAenR,CAAI,GAE5B0B,EAAQ,QAAQ1B,CAAI,EACbwR,EACR,CAaD,SAASC,EAAiCzR,EAAM,CAC9C,OAAIA,IAAS,IAAMA,IAAS,IAAMgB,EAA0BhB,CAAI,EACvDmR,EAAenR,CAAI,EAErBoE,EAAIpE,CAAI,CAChB,CAYD,SAAS1F,EAAI0F,EAAM,CACjB,OAAIA,IAAS,IACX0B,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAK,cAAc,EAC3BA,EAAQ,KAAK,UAAU,EAChBC,GAEFyC,EAAIpE,CAAI,CAChB,CAgBD,SAAS4Q,EAAiB5Q,EAAM,CAC9B,OAAA0B,EAAQ,KAAK,cAAc,EAC3BA,EAAQ,MAAM,YAAY,EAC1BA,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAK,YAAY,EAClBgQ,EACR,CAgBD,SAASA,GAAgB1R,EAAM,CAG7B,OAAOiB,EAAcjB,CAAI,EAAIyB,EAAaC,EAASiQ,GAAuB,aAAc/O,EAAK,OAAO,WAAW,QAAQ,KAAK,SAAS,cAAc,EAAI,OAAY,CAAC,EAAE5C,CAAI,EAAI2R,GAAsB3R,CAAI,CACzM,CAgBD,SAAS2R,GAAsB3R,EAAM,CACnC,OAAA0B,EAAQ,MAAM,cAAc,EACrB6O,EAAYvQ,CAAI,CACxB,CACH,CChpBO,MAAM4R,GAAW,CACtB,KAAM,WACN,WAAYC,GACZ,UAAWC,GACX,SAAUC,EACZ,EAGMC,GAAoB,CACxB,SAAUC,EACZ,EAEMC,GAAyB,CAC7B,SAAUC,EACZ,EAEMC,GAA8B,CAClC,SAAUC,EACZ,EAGA,SAASR,GAAmBtN,EAAQ,CAClC,IAAI5Q,EAAQ,GAEZ,MAAM2e,EAAY,CAAA,EAClB,KAAO,EAAE3e,EAAQ4Q,EAAO,QAAQ,CAC9B,MAAMjC,EAAQiC,EAAO5Q,CAAK,EAAE,CAAC,EAE7B,GADA2e,EAAU,KAAK/N,EAAO5Q,CAAK,CAAC,EACxB2O,EAAM,OAAS,cAAgBA,EAAM,OAAS,aAAeA,EAAM,OAAS,WAAY,CAE1F,MAAM8C,EAAS9C,EAAM,OAAS,aAAe,EAAI,EACjDA,EAAM,KAAO,OACb3O,GAASyR,CACV,CACF,CAGD,OAAIb,EAAO,SAAW+N,EAAU,QAC9BrT,GAAOsF,EAAQ,EAAGA,EAAO,OAAQ+N,CAAS,EAErC/N,CACT,CAGA,SAASuN,GAAkBvN,EAAQC,EAAS,CAC1C,IAAI7Q,EAAQ4Q,EAAO,OACfa,EAAS,EAET9C,EAEAwC,EAEAY,EAEA6M,EAGJ,KAAO5e,KAEL,GADA2O,EAAQiC,EAAO5Q,CAAK,EAAE,CAAC,EACnBmR,EAAM,CAER,GAAIxC,EAAM,OAAS,QAAUA,EAAM,OAAS,aAAeA,EAAM,UAC/D,MAKEiC,EAAO5Q,CAAK,EAAE,CAAC,IAAM,SAAW2O,EAAM,OAAS,cACjDA,EAAM,UAAY,GAErB,SAAUoD,GACT,GAAInB,EAAO5Q,CAAK,EAAE,CAAC,IAAM,UAAY2O,EAAM,OAAS,cAAgBA,EAAM,OAAS,cAAgB,CAACA,EAAM,YACxGwC,EAAOnR,EACH2O,EAAM,OAAS,aAAa,CAC9B8C,EAAS,EACT,KACD,OAEM9C,EAAM,OAAS,aACxBoD,EAAQ/R,GAGZ,MAAMoR,EAAQ,CACZ,KAAMR,EAAOO,CAAI,EAAE,CAAC,EAAE,OAAS,YAAc,OAAS,QACtD,MAAO,CACL,GAAGP,EAAOO,CAAI,EAAE,CAAC,EAAE,KACpB,EACD,IAAK,CACH,GAAGP,EAAOA,EAAO,OAAS,CAAC,EAAE,CAAC,EAAE,GACjC,CACL,EACQiO,EAAQ,CACZ,KAAM,QACN,MAAO,CACL,GAAGjO,EAAOO,CAAI,EAAE,CAAC,EAAE,KACpB,EACD,IAAK,CACH,GAAGP,EAAOmB,CAAK,EAAE,CAAC,EAAE,GACrB,CACL,EACQzJ,EAAO,CACX,KAAM,YACN,MAAO,CACL,GAAGsI,EAAOO,EAAOM,EAAS,CAAC,EAAE,CAAC,EAAE,GACjC,EACD,IAAK,CACH,GAAGb,EAAOmB,EAAQ,CAAC,EAAE,CAAC,EAAE,KACzB,CACL,EACE,OAAA6M,EAAQ,CAAC,CAAC,QAASxN,EAAOP,CAAO,EAAG,CAAC,QAASgO,EAAOhO,CAAO,CAAC,EAG7D+N,EAAQhT,GAAKgT,EAAOhO,EAAO,MAAMO,EAAO,EAAGA,EAAOM,EAAS,CAAC,CAAC,EAG7DmN,EAAQhT,GAAKgT,EAAO,CAAC,CAAC,QAAStW,EAAMuI,CAAO,CAAC,CAAC,EAK9C+N,EAAQhT,GAAKgT,EAAOjO,GAAWE,EAAQ,OAAO,WAAW,WAAW,KAAMD,EAAO,MAAMO,EAAOM,EAAS,EAAGM,EAAQ,CAAC,EAAGlB,CAAO,CAAC,EAG9H+N,EAAQhT,GAAKgT,EAAO,CAAC,CAAC,OAAQtW,EAAMuI,CAAO,EAAGD,EAAOmB,EAAQ,CAAC,EAAGnB,EAAOmB,EAAQ,CAAC,EAAG,CAAC,OAAQ8M,EAAOhO,CAAO,CAAC,CAAC,EAG7G+N,EAAQhT,GAAKgT,EAAOhO,EAAO,MAAMmB,EAAQ,CAAC,CAAC,EAG3C6M,EAAQhT,GAAKgT,EAAO,CAAC,CAAC,OAAQxN,EAAOP,CAAO,CAAC,CAAC,EAC9CvF,GAAOsF,EAAQO,EAAMP,EAAO,OAAQgO,CAAK,EAClChO,CACT,CAOA,SAASwN,GAAiBrQ,EAASC,EAAIyC,EAAK,CAC1C,MAAMxB,EAAO,KACb,IAAIjP,EAAQiP,EAAK,OAAO,OAEpB6P,EAEAC,EAGJ,KAAO/e,KACL,IAAKiP,EAAK,OAAOjP,CAAK,EAAE,CAAC,EAAE,OAAS,cAAgBiP,EAAK,OAAOjP,CAAK,EAAE,CAAC,EAAE,OAAS,cAAgB,CAACiP,EAAK,OAAOjP,CAAK,EAAE,CAAC,EAAE,UAAW,CACnI8e,EAAa7P,EAAK,OAAOjP,CAAK,EAAE,CAAC,EACjC,KACD,CAEH,OAAOuD,EAiBP,SAASA,EAAM8I,EAAM,CAEnB,OAAKyS,EAaDA,EAAW,UACNE,EAAY3S,CAAI,GAEzB0S,EAAU9P,EAAK,OAAO,QAAQ,SAAStC,GAAoBsC,EAAK,eAAe,CAC7E,MAAO6P,EAAW,IAClB,IAAK7P,EAAK,IAAK,CAChB,CAAA,CAAC,CAAC,EACHlB,EAAQ,MAAM,UAAU,EACxBA,EAAQ,MAAM,aAAa,EAC3BA,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAK,aAAa,EAC1BA,EAAQ,KAAK,UAAU,EAChB+D,GAxBErB,EAAIpE,CAAI,CAyBlB,CAkBD,SAASyF,EAAMzF,EAAM,CAKnB,OAAIA,IAAS,GACJ0B,EAAQ,QAAQsQ,GAAmBY,EAAYF,EAAUE,EAAaD,CAAW,EAAE3S,CAAI,EAI5FA,IAAS,GACJ0B,EAAQ,QAAQwQ,GAAwBU,EAAYF,EAAUG,EAAmBF,CAAW,EAAE3S,CAAI,EAIpG0S,EAAUE,EAAW5S,CAAI,EAAI2S,EAAY3S,CAAI,CACrD,CAgBD,SAAS6S,EAAiB7S,EAAM,CAC9B,OAAO0B,EAAQ,QAAQ0Q,GAA6BQ,EAAYD,CAAW,EAAE3S,CAAI,CAClF,CAkBD,SAAS4S,EAAW5S,EAAM,CAExB,OAAO2B,EAAG3B,CAAI,CACf,CAkBD,SAAS2S,EAAY3S,EAAM,CACzB,OAAAyS,EAAW,UAAY,GAChBrO,EAAIpE,CAAI,CAChB,CACH,CAOA,SAASiS,GAAiBvQ,EAASC,EAAIyC,EAAK,CAC1C,OAAO0O,EAYP,SAASA,EAAc9S,EAAM,CAC3B,OAAA0B,EAAQ,MAAM,UAAU,EACxBA,EAAQ,MAAM,gBAAgB,EAC9BA,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAK,gBAAgB,EACtBqR,CACR,CAYD,SAASA,EAAe/S,EAAM,CAC5B,OAAOgB,EAA0BhB,CAAI,EAAI0M,GAAkBhL,EAASsR,CAAY,EAAEhT,CAAI,EAAIgT,EAAahT,CAAI,CAC5G,CAYD,SAASgT,EAAahT,EAAM,CAC1B,OAAIA,IAAS,GACJiT,EAAYjT,CAAI,EAElBwL,GAAmB9J,EAASwR,EAA0BC,EAA4B,sBAAuB,6BAA8B,mCAAoC,yBAA0B,4BAA6B,EAAE,EAAEnT,CAAI,CAClP,CAYD,SAASkT,EAAyBlT,EAAM,CACtC,OAAOgB,EAA0BhB,CAAI,EAAI0M,GAAkBhL,EAAS0R,CAAe,EAAEpT,CAAI,EAAIiT,EAAYjT,CAAI,CAC9G,CAYD,SAASmT,EAA2BnT,EAAM,CACxC,OAAOoE,EAAIpE,CAAI,CAChB,CAYD,SAASoT,EAAgBpT,EAAM,CAC7B,OAAIA,IAAS,IAAMA,IAAS,IAAMA,IAAS,GAClCuM,GAAa7K,EAAS2R,EAAoBjP,EAAK,gBAAiB,sBAAuB,qBAAqB,EAAEpE,CAAI,EAEpHiT,EAAYjT,CAAI,CACxB,CAYD,SAASqT,EAAmBrT,EAAM,CAChC,OAAOgB,EAA0BhB,CAAI,EAAI0M,GAAkBhL,EAASuR,CAAW,EAAEjT,CAAI,EAAIiT,EAAYjT,CAAI,CAC1G,CAYD,SAASiT,EAAYjT,EAAM,CACzB,OAAIA,IAAS,IACX0B,EAAQ,MAAM,gBAAgB,EAC9BA,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAK,gBAAgB,EAC7BA,EAAQ,KAAK,UAAU,EAChBC,GAEFyC,EAAIpE,CAAI,CAChB,CACH,CAOA,SAASmS,GAAsBzQ,EAASC,EAAIyC,EAAK,CAC/C,MAAMxB,EAAO,KACb,OAAO0Q,EAYP,SAASA,EAActT,EAAM,CAC3B,OAAOmM,GAAa,KAAKvJ,EAAMlB,EAAS6R,EAAoBC,EAAsB,YAAa,kBAAmB,iBAAiB,EAAExT,CAAI,CAC1I,CAYD,SAASuT,EAAmBvT,EAAM,CAChC,OAAO4C,EAAK,OAAO,QAAQ,SAAStC,GAAoBsC,EAAK,eAAeA,EAAK,OAAOA,EAAK,OAAO,OAAS,CAAC,EAAE,CAAC,CAAC,EAAE,MAAM,EAAG,EAAE,CAAC,CAAC,EAAIjB,EAAG3B,CAAI,EAAIoE,EAAIpE,CAAI,CACzJ,CAYD,SAASwT,EAAqBxT,EAAM,CAClC,OAAOoE,EAAIpE,CAAI,CAChB,CACH,CAOA,SAASqS,GAA2B3Q,EAASC,EAAIyC,EAAK,CACpD,OAAOqP,EAcP,SAASA,EAAwBzT,EAAM,CAGrC,OAAA0B,EAAQ,MAAM,WAAW,EACzBA,EAAQ,MAAM,iBAAiB,EAC/BA,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAK,iBAAiB,EACvBgS,CACR,CAcD,SAASA,EAAuB1T,EAAM,CACpC,OAAIA,IAAS,IACX0B,EAAQ,MAAM,iBAAiB,EAC/BA,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAK,iBAAiB,EAC9BA,EAAQ,KAAK,WAAW,EACjBC,GAEFyC,EAAIpE,CAAI,CAChB,CACH,CCniBO,MAAM2T,GAAkB,CAC7B,KAAM,kBACN,WAAY/B,GAAS,WACrB,SAAUgC,EACZ,EAOA,SAASA,GAAwBlS,EAASC,EAAIyC,EAAK,CACjD,MAAMxB,EAAO,KACb,OAAO1L,EAYP,SAASA,EAAM8I,EAAM,CACnB,OAAA0B,EAAQ,MAAM,YAAY,EAC1BA,EAAQ,MAAM,kBAAkB,EAChCA,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAK,kBAAkB,EACxBoD,CACR,CAYD,SAASA,EAAK9E,EAAM,CAClB,OAAIA,IAAS,IACX0B,EAAQ,MAAM,aAAa,EAC3BA,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAK,aAAa,EAC1BA,EAAQ,KAAK,YAAY,EAClB+D,GAEFrB,EAAIpE,CAAI,CAChB,CA6BD,SAASyF,EAAMzF,EAAM,CAMnB,OAAOA,IAAS,IAAM,2BAA4B4C,EAAK,OAAO,WAAawB,EAAIpE,CAAI,EAAI2B,EAAG3B,CAAI,CAC/F,CACH,CCzFO,MAAM6T,GAAiB,CAC5B,KAAM,iBACN,WAAYjC,GAAS,WACrB,SAAUkC,EACZ,EAOA,SAASA,GAAuBpS,EAASC,EAAIyC,EAAK,CAChD,MAAMxB,EAAO,KACb,OAAO1L,EAYP,SAASA,EAAM8I,EAAM,CACnB,OAAA0B,EAAQ,MAAM,WAAW,EACzBA,EAAQ,MAAM,aAAa,EAC3BA,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAK,aAAa,EAC1BA,EAAQ,KAAK,WAAW,EACjB+D,CACR,CAGD,SAASA,EAAMzF,EAAM,CAKnB,OAAOA,IAAS,IAAM,2BAA4B4C,EAAK,OAAO,WAAawB,EAAIpE,CAAI,EAAI2B,EAAG3B,CAAI,CAC/F,CACH,CC1CO,MAAM+T,GAAa,CACxB,KAAM,aACN,SAAUC,EACZ,EAOA,SAASA,GAAmBtS,EAASC,EAAI,CACvC,OAAOzK,EAGP,SAASA,EAAM8I,EAAM,CACnB,OAAA0B,EAAQ,MAAM,YAAY,EAC1BA,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAK,YAAY,EAClBD,EAAaC,EAASC,EAAI,YAAY,CAC9C,CACH,CCnBO,MAAMsS,GAAgB,CAC3B,KAAM,gBACN,SAAUC,EACZ,EAOA,SAASA,GAAsBxS,EAASC,EAAIyC,EAAK,CAC/C,IAAItC,EAAO,EAEPyD,EACJ,OAAOrO,EAYP,SAASA,EAAM8I,EAAM,CACnB,OAAA0B,EAAQ,MAAM,eAAe,EAEtBvB,EAAOH,CAAI,CACnB,CAYD,SAASG,EAAOH,EAAM,CACpB,OAAAuF,EAASvF,EACF4I,EAAQ5I,CAAI,CACpB,CAYD,SAAS4I,EAAQ5I,EAAM,CACrB,OAAIA,IAASuF,GACX7D,EAAQ,MAAM,uBAAuB,EAC9ByS,EAASnU,CAAI,GAElB8B,GAAQ,IAAM9B,IAAS,MAAQe,EAAmBf,CAAI,IACxD0B,EAAQ,KAAK,eAAe,EACrBC,EAAG3B,CAAI,GAEToE,EAAIpE,CAAI,CAChB,CAYD,SAASmU,EAASnU,EAAM,CACtB,OAAIA,IAASuF,GACX7D,EAAQ,QAAQ1B,CAAI,EACpB8B,IACOqS,IAETzS,EAAQ,KAAK,uBAAuB,EAC7BT,EAAcjB,CAAI,EAAIyB,EAAaC,EAASkH,EAAS,YAAY,EAAE5I,CAAI,EAAI4I,EAAQ5I,CAAI,EAC/F,CACH,CCpFO,MAAMd,EAAO,CAClB,aAAc,CACZ,SAAUkV,EACX,EACD,KAAMC,GACN,KAAM,OACN,SAAUC,EACZ,EAGMC,GAAoC,CACxC,QAAS,GACT,SAAUC,EACZ,EAGMC,GAAkB,CACtB,QAAS,GACT,SAAUC,EACZ,EAUA,SAASJ,GAAkB5S,EAASC,EAAIyC,EAAK,CAC3C,MAAMxB,EAAO,KACP8E,EAAO9E,EAAK,OAAOA,EAAK,OAAO,OAAS,CAAC,EAC/C,IAAI+R,EAAcjN,GAAQA,EAAK,CAAC,EAAE,OAAS,aAAeA,EAAK,CAAC,EAAE,eAAeA,EAAK,CAAC,EAAG,EAAI,EAAE,OAAS,EACrG5F,EAAO,EACX,OAAO5K,EAGP,SAASA,EAAM8I,EAAM,CACnB,MAAM4U,EAAOhS,EAAK,eAAe,OAAS5C,IAAS,IAAMA,IAAS,IAAMA,IAAS,GAAK,gBAAkB,eACxG,GAAI4U,IAAS,gBAAkB,CAAChS,EAAK,eAAe,QAAU5C,IAAS4C,EAAK,eAAe,OAAShC,GAAWZ,CAAI,EAAG,CAOpH,GANK4C,EAAK,eAAe,OACvBA,EAAK,eAAe,KAAOgS,EAC3BlT,EAAQ,MAAMkT,EAAM,CAClB,WAAY,EACtB,CAAS,GAECA,IAAS,gBACX,OAAAlT,EAAQ,MAAM,gBAAgB,EACvB1B,IAAS,IAAMA,IAAS,GAAK0B,EAAQ,MAAMuS,GAAe7P,EAAKyQ,CAAQ,EAAE7U,CAAI,EAAI6U,EAAS7U,CAAI,EAEvG,GAAI,CAAC4C,EAAK,WAAa5C,IAAS,GAC9B,OAAA0B,EAAQ,MAAM,gBAAgB,EAC9BA,EAAQ,MAAM,eAAe,EACtB8D,EAAOxF,CAAI,CAErB,CACD,OAAOoE,EAAIpE,CAAI,CAChB,CAGD,SAASwF,EAAOxF,EAAM,CACpB,OAAIY,GAAWZ,CAAI,GAAK,EAAE8B,EAAO,IAC/BJ,EAAQ,QAAQ1B,CAAI,EACbwF,IAEJ,CAAC5C,EAAK,WAAad,EAAO,KAAOc,EAAK,eAAe,OAAS5C,IAAS4C,EAAK,eAAe,OAAS5C,IAAS,IAAMA,IAAS,KAC/H0B,EAAQ,KAAK,eAAe,EACrBmT,EAAS7U,CAAI,GAEfoE,EAAIpE,CAAI,CAChB,CAKD,SAAS6U,EAAS7U,EAAM,CACtB,OAAA0B,EAAQ,MAAM,gBAAgB,EAC9BA,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAK,gBAAgB,EAC7BkB,EAAK,eAAe,OAASA,EAAK,eAAe,QAAU5C,EACpD0B,EAAQ,MAAM0E,GAErBxD,EAAK,UAAYwB,EAAM0Q,EAASpT,EAAQ,QAAQ6S,GAAmCQ,EAAaC,CAAW,CAAC,CAC7G,CAGD,SAASF,EAAQ9U,EAAM,CACrB,OAAA4C,EAAK,eAAe,iBAAmB,GACvC+R,IACOI,EAAY/U,CAAI,CACxB,CAGD,SAASgV,EAAYhV,EAAM,CACzB,OAAIiB,EAAcjB,CAAI,GACpB0B,EAAQ,MAAM,0BAA0B,EACxCA,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAK,0BAA0B,EAChCqT,GAEF3Q,EAAIpE,CAAI,CAChB,CAGD,SAAS+U,EAAY/U,EAAM,CACzB,OAAA4C,EAAK,eAAe,KAAO+R,EAAc/R,EAAK,eAAelB,EAAQ,KAAK,gBAAgB,EAAG,EAAI,EAAE,OAC5FC,EAAG3B,CAAI,CACf,CACH,CAOA,SAASoU,GAAyB1S,EAASC,EAAIyC,EAAK,CAClD,MAAMxB,EAAO,KACb,OAAAA,EAAK,eAAe,WAAa,OAC1BlB,EAAQ,MAAM0E,GAAW0O,EAASG,CAAQ,EAGjD,SAASH,EAAQ9U,EAAM,CACrB,OAAA4C,EAAK,eAAe,kBAAoBA,EAAK,eAAe,mBAAqBA,EAAK,eAAe,iBAI9FnB,EAAaC,EAASC,EAAI,iBAAkBiB,EAAK,eAAe,KAAO,CAAC,EAAE5C,CAAI,CACtF,CAGD,SAASiV,EAASjV,EAAM,CACtB,OAAI4C,EAAK,eAAe,mBAAqB,CAAC3B,EAAcjB,CAAI,GAC9D4C,EAAK,eAAe,kBAAoB,OACxCA,EAAK,eAAe,iBAAmB,OAChCsS,EAAiBlV,CAAI,IAE9B4C,EAAK,eAAe,kBAAoB,OACxCA,EAAK,eAAe,iBAAmB,OAChClB,EAAQ,QAAQ+S,GAAiB9S,EAAIuT,CAAgB,EAAElV,CAAI,EACnE,CAGD,SAASkV,EAAiBlV,EAAM,CAE9B,OAAA4C,EAAK,eAAe,WAAa,GAEjCA,EAAK,UAAY,OAGVnB,EAAaC,EAASA,EAAQ,QAAQxC,EAAMyC,EAAIyC,CAAG,EAAG,aAAcxB,EAAK,OAAO,WAAW,QAAQ,KAAK,SAAS,cAAc,EAAI,OAAY,CAAC,EAAE5C,CAAI,CAC9J,CACH,CAOA,SAAS0U,GAAehT,EAASC,EAAIyC,EAAK,CACxC,MAAMxB,EAAO,KACb,OAAOnB,EAAaC,EAASiH,EAAa,iBAAkB/F,EAAK,eAAe,KAAO,CAAC,EAGxF,SAAS+F,EAAY3I,EAAM,CACzB,MAAM0H,EAAO9E,EAAK,OAAOA,EAAK,OAAO,OAAS,CAAC,EAC/C,OAAO8E,GAAQA,EAAK,CAAC,EAAE,OAAS,kBAAoBA,EAAK,CAAC,EAAE,eAAeA,EAAK,CAAC,EAAG,EAAI,EAAE,SAAW9E,EAAK,eAAe,KAAOjB,EAAG3B,CAAI,EAAIoE,EAAIpE,CAAI,CACpJ,CACH,CAOA,SAASqU,GAAgB3S,EAAS,CAChCA,EAAQ,KAAK,KAAK,eAAe,IAAI,CACvC,CAOA,SAAS8S,GAAiC9S,EAASC,EAAIyC,EAAK,CAC1D,MAAMxB,EAAO,KAIb,OAAOnB,EAAaC,EAASiH,EAAa,2BAA4B/F,EAAK,OAAO,WAAW,QAAQ,KAAK,SAAS,cAAc,EAAI,OAAY,CAAK,EAGtJ,SAAS+F,EAAY3I,EAAM,CACzB,MAAM0H,EAAO9E,EAAK,OAAOA,EAAK,OAAO,OAAS,CAAC,EAC/C,MAAO,CAAC3B,EAAcjB,CAAI,GAAK0H,GAAQA,EAAK,CAAC,EAAE,OAAS,2BAA6B/F,EAAG3B,CAAI,EAAIoE,EAAIpE,CAAI,CACzG,CACH,CCtMO,MAAMmV,GAAkB,CAC7B,KAAM,kBACN,UAAWC,GACX,SAAUC,EACZ,EAGA,SAASD,GAAyB7Q,EAAQC,EAAS,CAEjD,IAAI7Q,EAAQ4Q,EAAO,OAEfxC,EAEA9F,EAEAvJ,EAIJ,KAAOiB,KACL,GAAI4Q,EAAO5Q,CAAK,EAAE,CAAC,IAAM,QAAS,CAChC,GAAI4Q,EAAO5Q,CAAK,EAAE,CAAC,EAAE,OAAS,UAAW,CACvCoO,EAAUpO,EACV,KACD,CACG4Q,EAAO5Q,CAAK,EAAE,CAAC,EAAE,OAAS,cAC5BsI,EAAOtI,EAEV,MAGK4Q,EAAO5Q,CAAK,EAAE,CAAC,EAAE,OAAS,WAE5B4Q,EAAO,OAAO5Q,EAAO,CAAC,EAEpB,CAACjB,GAAc6R,EAAO5Q,CAAK,EAAE,CAAC,EAAE,OAAS,eAC3CjB,EAAaiB,GAInB,MAAM2hB,EAAU,CACd,KAAM,gBACN,MAAO,CACL,GAAG/Q,EAAOxC,CAAO,EAAE,CAAC,EAAE,KACvB,EACD,IAAK,CACH,GAAGwC,EAAOA,EAAO,OAAS,CAAC,EAAE,CAAC,EAAE,GACjC,CACL,EAGE,OAAAA,EAAOtI,CAAI,EAAE,CAAC,EAAE,KAAO,oBAInBvJ,GACF6R,EAAO,OAAOtI,EAAM,EAAG,CAAC,QAASqZ,EAAS9Q,CAAO,CAAC,EAClDD,EAAO,OAAO7R,EAAa,EAAG,EAAG,CAAC,OAAQ6R,EAAOxC,CAAO,EAAE,CAAC,EAAGyC,CAAO,CAAC,EACtED,EAAOxC,CAAO,EAAE,CAAC,EAAE,IAAM,CACvB,GAAGwC,EAAO7R,CAAU,EAAE,CAAC,EAAE,GAC/B,GAEI6R,EAAOxC,CAAO,EAAE,CAAC,EAAIuT,EAIvB/Q,EAAO,KAAK,CAAC,OAAQ+Q,EAAS9Q,CAAO,CAAC,EAC/BD,CACT,CAOA,SAAS8Q,GAAwB3T,EAASC,EAAIyC,EAAK,CACjD,MAAMxB,EAAO,KAEb,IAAI2C,EACJ,OAAOrO,EAaP,SAASA,EAAM8I,EAAM,CACnB,IAAIrM,EAAQiP,EAAK,OAAO,OAEpB2S,EAEJ,KAAO5hB,KAGL,GAAIiP,EAAK,OAAOjP,CAAK,EAAE,CAAC,EAAE,OAAS,cAAgBiP,EAAK,OAAOjP,CAAK,EAAE,CAAC,EAAE,OAAS,cAAgBiP,EAAK,OAAOjP,CAAK,EAAE,CAAC,EAAE,OAAS,UAAW,CAC1I4hB,EAAY3S,EAAK,OAAOjP,CAAK,EAAE,CAAC,EAAE,OAAS,YAC3C,KACD,CAKH,MAAI,CAACiP,EAAK,OAAO,KAAKA,EAAK,MAAM,IAAI,IAAMA,EAAK,WAAa2S,IAC3D7T,EAAQ,MAAM,mBAAmB,EACjC6D,EAASvF,EACFG,EAAOH,CAAI,GAEboE,EAAIpE,CAAI,CAChB,CAaD,SAASG,EAAOH,EAAM,CACpB,OAAA0B,EAAQ,MAAM,2BAA2B,EAClC8D,EAAOxF,CAAI,CACnB,CAaD,SAASwF,EAAOxF,EAAM,CACpB,OAAIA,IAASuF,GACX7D,EAAQ,QAAQ1B,CAAI,EACbwF,IAET9D,EAAQ,KAAK,2BAA2B,EACjCT,EAAcjB,CAAI,EAAIyB,EAAaC,EAAS+D,EAAO,YAAY,EAAEzF,CAAI,EAAIyF,EAAMzF,CAAI,EAC3F,CAaD,SAASyF,EAAMzF,EAAM,CACnB,OAAIA,IAAS,MAAQe,EAAmBf,CAAI,GAC1C0B,EAAQ,KAAK,mBAAmB,EACzBC,EAAG3B,CAAI,GAEToE,EAAIpE,CAAI,CAChB,CACH,CC3KO,MAAMwV,GAAO,CAClB,SAAUC,EACZ,EAQA,SAASA,GAAe/T,EAAS,CAC/B,MAAMkB,EAAO,KACPyG,EAAU3H,EAAQ,QAExB0E,GAAWsP,EAEXhU,EAAQ,QAAQ,KAAK,OAAO,WAAW,YAAaiU,EAAgBlU,EAAaC,EAASA,EAAQ,QAAQ,KAAK,OAAO,WAAW,KAAMiU,EAAgBjU,EAAQ,QAAQK,GAAS4T,CAAc,CAAC,EAAG,YAAY,CAAC,CAAC,EAChN,OAAOtM,EAGP,SAASqM,EAAc1V,EAAM,CAC3B,GAAIA,IAAS,KAAM,CACjB0B,EAAQ,QAAQ1B,CAAI,EACpB,MACD,CACD,OAAA0B,EAAQ,MAAM,iBAAiB,EAC/BA,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAK,iBAAiB,EAC9BkB,EAAK,iBAAmB,OACjByG,CACR,CAGD,SAASsM,EAAe3V,EAAM,CAC5B,GAAIA,IAAS,KAAM,CACjB0B,EAAQ,QAAQ1B,CAAI,EACpB,MACD,CACD,OAAA0B,EAAQ,MAAM,YAAY,EAC1BA,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAK,YAAY,EACzBkB,EAAK,iBAAmB,OACjByG,CACR,CACH,CC9CO,MAAMuM,GAAW,CACtB,WAAYC,GAAgB,CAC9B,EACaC,GAASC,GAAkB,QAAQ,EACnC9Z,GAAO8Z,GAAkB,MAAM,EAQ5C,SAASA,GAAkBC,EAAO,CAChC,MAAO,CACL,WAAYH,GAAeG,IAAU,OAASC,GAAyB,MAAS,EAChF,SAAUC,CACd,EAOE,SAASA,EAAexU,EAAS,CAC/B,MAAMkB,EAAO,KACP3C,EAAa,KAAK,OAAO,WAAW+V,CAAK,EACzC/Z,EAAOyF,EAAQ,QAAQzB,EAAY/I,EAAOif,CAAO,EACvD,OAAOjf,EAGP,SAASA,EAAM8I,EAAM,CACnB,OAAO4I,EAAQ5I,CAAI,EAAI/D,EAAK+D,CAAI,EAAImW,EAAQnW,CAAI,CACjD,CAGD,SAASmW,EAAQnW,EAAM,CACrB,GAAIA,IAAS,KAAM,CACjB0B,EAAQ,QAAQ1B,CAAI,EACpB,MACD,CACD,OAAA0B,EAAQ,MAAM,MAAM,EACpBA,EAAQ,QAAQ1B,CAAI,EACbuC,CACR,CAGD,SAASA,EAAKvC,EAAM,CAClB,OAAI4I,EAAQ5I,CAAI,GACd0B,EAAQ,KAAK,MAAM,EACZzF,EAAK+D,CAAI,IAIlB0B,EAAQ,QAAQ1B,CAAI,EACbuC,EACR,CAQD,SAASqG,EAAQ5I,EAAM,CACrB,GAAIA,IAAS,KACX,MAAO,GAET,MAAMd,EAAOe,EAAWD,CAAI,EAC5B,IAAIrM,EAAQ,GACZ,GAAIuL,EAGF,KAAO,EAAEvL,EAAQuL,EAAK,QAAQ,CAC5B,MAAMgE,EAAOhE,EAAKvL,CAAK,EACvB,GAAI,CAACuP,EAAK,UAAYA,EAAK,SAAS,KAAKN,EAAMA,EAAK,QAAQ,EAC1D,MAAO,EAEV,CAEH,MAAO,EACR,CACF,CACH,CAQA,SAASiT,GAAeO,EAAe,CACrC,OAAOC,EAGP,SAASA,EAAe9R,EAAQC,EAAS,CACvC,IAAI7Q,EAAQ,GAERuV,EAIJ,KAAO,EAAEvV,GAAS4Q,EAAO,QACnB2E,IAAU,OACR3E,EAAO5Q,CAAK,GAAK4Q,EAAO5Q,CAAK,EAAE,CAAC,EAAE,OAAS,SAC7CuV,EAAQvV,EACRA,MAEO,CAAC4Q,EAAO5Q,CAAK,GAAK4Q,EAAO5Q,CAAK,EAAE,CAAC,EAAE,OAAS,UAEjDA,IAAUuV,EAAQ,IACpB3E,EAAO2E,CAAK,EAAE,CAAC,EAAE,IAAM3E,EAAO5Q,EAAQ,CAAC,EAAE,CAAC,EAAE,IAC5C4Q,EAAO,OAAO2E,EAAQ,EAAGvV,EAAQuV,EAAQ,CAAC,EAC1CvV,EAAQuV,EAAQ,GAElBA,EAAQ,QAGZ,OAAOkN,EAAgBA,EAAc7R,EAAQC,CAAO,EAAID,CACzD,CACH,CAaA,SAAS0R,GAAuB1R,EAAQC,EAAS,CAC/C,IAAI6F,EAAa,EAEjB,KAAO,EAAEA,GAAc9F,EAAO,QAC5B,IAAK8F,IAAe9F,EAAO,QAAUA,EAAO8F,CAAU,EAAE,CAAC,EAAE,OAAS,eAAiB9F,EAAO8F,EAAa,CAAC,EAAE,CAAC,EAAE,OAAS,OAAQ,CAC9H,MAAM9H,EAAOgC,EAAO8F,EAAa,CAAC,EAAE,CAAC,EAC/BiM,EAAS9R,EAAQ,YAAYjC,CAAI,EACvC,IAAI5O,EAAQ2iB,EAAO,OACfC,EAAc,GACdzU,EAAO,EAEP0U,EACJ,KAAO7iB,KAAS,CACd,MAAM8iB,EAAQH,EAAO3iB,CAAK,EAC1B,GAAI,OAAO8iB,GAAU,SAAU,CAE7B,IADAF,EAAcE,EAAM,OACbA,EAAM,WAAWF,EAAc,CAAC,IAAM,IAC3CzU,IACAyU,IAEF,GAAIA,EAAa,MACjBA,EAAc,EACf,SAEQE,IAAU,GACjBD,EAAO,GACP1U,YACS2U,IAAU,GAEd,CAEL9iB,IACA,KACD,CACF,CAMD,GAHI6Q,EAAQ,0BAA4B6F,IAAe9F,EAAO,SAC5DzC,EAAO,GAELA,EAAM,CACR,MAAMQ,EAAQ,CACZ,KAAM+H,IAAe9F,EAAO,QAAUiS,GAAQ1U,EAAO,EAAI,aAAe,oBACxE,MAAO,CACL,aAAcnO,EAAQ4iB,EAAchU,EAAK,MAAM,aAAegU,EAC9D,OAAQhU,EAAK,MAAM,OAAS5O,EAC5B,KAAM4O,EAAK,IAAI,KACf,OAAQA,EAAK,IAAI,OAAST,EAC1B,OAAQS,EAAK,IAAI,OAAST,CAC3B,EACD,IAAK,CACH,GAAGS,EAAK,GACT,CACX,EACQA,EAAK,IAAM,CACT,GAAGD,EAAM,KACnB,EACYC,EAAK,MAAM,SAAWA,EAAK,IAAI,OACjC,OAAO,OAAOA,EAAMD,CAAK,GAEzBiC,EAAO,OAAO8F,EAAY,EAAG,CAAC,QAAS/H,EAAOkC,CAAO,EAAG,CAAC,OAAQlC,EAAOkC,CAAO,CAAC,EAChF6F,GAAc,EAEjB,CACDA,GACD,CAEH,OAAO9F,CACT,CC3MO,MAAM/B,GAAW,CACrB,GAAKtD,EACL,GAAKA,EACL,GAAKA,EACL,GAAKA,EACL,GAAKA,EACL,GAAKA,EACL,GAAKA,EACL,GAAKA,EACL,GAAKA,EACL,GAAKA,EACL,GAAKA,EACL,GAAKA,EACL,GAAKA,EACL,GAAKoH,EACR,EAGaoQ,GAAiB,CAC3B,GAAKhkB,EACR,EAGaikB,GAAc,CACzB,CAAC,EAAE,EAAGpO,GACN,CAAC,EAAE,EAAGA,GACL,GAAKA,EACR,EAGaiN,GAAO,CACjB,GAAK/H,GACL,GAAKwG,GACL,GAAK,CAACkB,GAAiBlB,EAAa,EACpC,GAAKlG,GACL,GAAKoH,GACL,GAAKlB,GACL,GAAK9M,GACL,IAAMA,EACT,EAGa2O,GAAS,CACnB,GAAK9W,GACL,GAAK4H,EACR,EAGa3K,GAAO,CAClB,CAAC,EAAE,EAAG8X,GACN,CAAC,EAAE,EAAGA,GACN,CAAC,EAAE,EAAGA,GACL,GAAKJ,GACL,GAAK3U,GACL,GAAK2F,GACL,GAAK,CAACgB,GAAU0K,EAAQ,EACxB,GAAKwD,GACL,GAAK,CAACtG,GAAiB3G,EAAe,EACtC,GAAKgL,GACL,GAAKjN,GACL,GAAKkE,EACR,EAGa+N,GAAa,CACxB,KAAM,CAACjS,GAAWkS,EAAW,CAC/B,EAGavR,GAAmB,CAC9B,KAAM,CAAC,GAAI,EAAE,CACf,EAGawR,GAAU,CACrB,KAAM,CAAE,CACV,oNCxBO,SAASC,GAAgBC,EAAQC,EAAY3Y,EAAM,CAExD,IAAInE,EAAQ,CACV,aAAc,GACd,OAAQ,EACR,KAAMmE,GAAQA,EAAK,MAAQ,EAC3B,OAAQA,GAAQA,EAAK,QAAU,EAC/B,OAAQA,GAAQA,EAAK,QAAU,CACnC,EAEE,MAAM4Y,EAAc,CAAA,EAEdC,EAAuB,CAAA,EAE7B,IAAIb,EAAS,CAAA,EAETzT,EAAQ,CAAA,EASZ,MAAMnB,EAAU,CACd,QAAS0V,EAAiBC,CAAqB,EAC/C,MAAOD,EAAiBE,CAAiB,EACzC,QAAAC,EACA,MAAArO,EACA,KAAA1C,EACA,UAAW4Q,EAAiBE,EAAmB,CAC7C,UAAW,EACjB,CAAK,CACL,EAOQ9S,EAAU,CACd,KAAM,KACN,eAAgB,CAAE,EAClB,WAAAgT,EACA,OAAQ,CAAE,EACV,IAAAC,EACA,OAAAT,EACA,SAAU,KACV,eAAAU,EACA,YAAAC,EACA,MAAAC,CACJ,EAOE,IAAInc,EAAQwb,EAAW,SAAS,KAAKzS,EAAS9C,CAAO,EAQrD,OAAIuV,EAAW,YACbE,EAAqB,KAAKF,CAAU,EAE/BzS,EAGP,SAASoT,EAAM9M,EAAO,CAKpB,OAJAwL,EAAS/W,GAAK+W,EAAQxL,CAAK,EAC3B+M,IAGIvB,EAAOA,EAAO,OAAS,CAAC,IAAM,KACzB,IAETwB,EAAUb,EAAY,CAAC,EAGvBzS,EAAQ,OAASF,GAAW6S,EAAsB3S,EAAQ,OAAQA,CAAO,EAClEA,EAAQ,OAChB,CAOD,SAASkT,EAAepV,EAAOyV,EAAY,CACzC,OAAOC,GAAgBL,EAAYrV,CAAK,EAAGyV,CAAU,CACtD,CAGD,SAASJ,EAAYrV,EAAO,CAC1B,OAAO2V,GAAY3B,EAAQhU,CAAK,CACjC,CAGD,SAASmV,GAAM,CAEb,KAAM,CACJ,aAAAS,EACA,OAAAC,EACA,KAAAC,EACA,OAAAxhB,EACA,OAAAwO,CACD,EAAGjL,EACJ,MAAO,CACL,aAAA+d,EACA,OAAAC,EACA,KAAAC,EACA,OAAAxhB,EACA,OAAAwO,CACN,CACG,CAGD,SAASoS,EAAWrlB,EAAO,CACzB+kB,EAAY/kB,EAAM,IAAI,EAAIA,EAAM,OAChCkmB,GACD,CAiBD,SAASR,GAAO,CAEd,IAAIS,EACJ,KAAOne,EAAM,OAASmc,EAAO,QAAQ,CACnC,MAAMG,EAAQH,EAAOnc,EAAM,MAAM,EAGjC,GAAI,OAAOsc,GAAU,SAKnB,IAJA6B,EAAane,EAAM,OACfA,EAAM,aAAe,IACvBA,EAAM,aAAe,GAEhBA,EAAM,SAAWme,GAAcne,EAAM,aAAesc,EAAM,QAC/D8B,EAAG9B,EAAM,WAAWtc,EAAM,YAAY,CAAC,OAGzCoe,EAAG9B,CAAK,CAEX,CACF,CAUD,SAAS8B,EAAGvY,EAAM,CAGhBvE,EAAQA,EAAMuE,CAAI,CACnB,CAGD,SAASuX,EAAQvX,EAAM,CACjBe,EAAmBf,CAAI,GACzB7F,EAAM,OACNA,EAAM,OAAS,EACfA,EAAM,QAAU6F,IAAS,GAAK,EAAI,EAClCqY,KACSrY,IAAS,KAClB7F,EAAM,SACNA,EAAM,UAIJA,EAAM,aAAe,EACvBA,EAAM,UAENA,EAAM,eAGFA,EAAM,eAIVmc,EAAOnc,EAAM,MAAM,EAAE,SACnBA,EAAM,aAAe,GACrBA,EAAM,WAKVqK,EAAQ,SAAWxE,CAIpB,CAGD,SAASkJ,EAAM7O,EAAMme,EAAQ,CAG3B,MAAMlW,EAAQkW,GAAU,GACxB,OAAAlW,EAAM,KAAOjI,EACbiI,EAAM,MAAQmV,IACdjT,EAAQ,OAAO,KAAK,CAAC,QAASlC,EAAOkC,CAAO,CAAC,EAC7C3B,EAAM,KAAKP,CAAK,EACTA,CACR,CAGD,SAASkE,EAAKnM,EAAM,CAClB,MAAMiI,EAAQO,EAAM,MACpB,OAAAP,EAAM,IAAMmV,IACZjT,EAAQ,OAAO,KAAK,CAAC,OAAQlC,EAAOkC,CAAO,CAAC,EACrClC,CACR,CAOD,SAAS+U,EAAsBoB,EAAWvkB,EAAM,CAC9C4jB,EAAUW,EAAWvkB,EAAK,IAAI,CAC/B,CAOD,SAASojB,EAAkBljB,EAAGF,EAAM,CAClCA,EAAK,QAAO,CACb,CAUD,SAASkjB,EAAiBsB,EAAUF,EAAQ,CAC1C,OAAO3Y,EAeP,SAASA,EAAKI,EAAYsQ,EAAaoI,EAAY,CAEjD,IAAIC,EAEAC,GAEAC,GAEA5kB,EACJ,OAAO,MAAM,QAAQ+L,CAAU,EAC/B8Y,GAAuB9Y,CAAU,EAAI,aAAcA,EAEnD8Y,GAAuB,CAA0B9Y,CAAU,CAAE,EAAI+Y,GAAsB/Y,CAAU,EAUjG,SAAS+Y,GAAsBC,EAAK,CAClC,OAAO/hB,GAGP,SAASA,GAAM8I,GAAM,CACnB,MAAMF,GAAOE,KAAS,MAAQiZ,EAAIjZ,EAAI,EAChClB,GAAMkB,KAAS,MAAQiZ,EAAI,KAC3B/Z,GAAO,CAGb,GAAI,MAAM,QAAQY,EAAI,EAAIA,GAAOA,GAAO,CAACA,EAAI,EAAI,GAAK,GAAI,MAAM,QAAQhB,EAAG,EAAIA,GAAMA,GAAM,CAACA,EAAG,EAAI,CAAE,CAAC,EACtG,OAAOia,GAAuB7Z,EAAI,EAAEc,EAAI,CACzC,CACF,CAUD,SAAS+Y,GAAuB7Z,EAAM,CAGpC,OAFA0Z,EAAmB1Z,EACnB2Z,GAAiB,EACb3Z,EAAK,SAAW,EACXyZ,EAEFO,EAAgBha,EAAK2Z,EAAc,CAAC,CAC5C,CAUD,SAASK,EAAgBT,EAAW,CAClC,OAAOvhB,GAGP,SAASA,GAAM8I,GAAM,CAanB,OARA9L,EAAOilB,EAAK,EACZL,GAAmBL,EACdA,EAAU,UACbjU,EAAQ,iBAAmBiU,GAKzBA,EAAU,MAAQjU,EAAQ,OAAO,WAAW,QAAQ,KAAK,SAASiU,EAAU,IAAI,EAC3ErU,GAAQ,EAEVqU,EAAU,SAAS,KAI1BD,EAAS,OAAO,OAAO,OAAO,OAAOhU,CAAO,EAAGgU,CAAM,EAAIhU,EAAS9C,EAASC,GAAIyC,EAAG,EAAEpE,EAAI,CACzF,CACF,CAGD,SAAS2B,GAAG3B,EAAM,CAEhB,OAAA0Y,EAASI,GAAkB5kB,CAAI,EACxBqc,CACR,CAGD,SAASnM,GAAIpE,EAAM,CAGjB,OADA9L,EAAK,QAAO,EACR,EAAE2kB,GAAiBD,EAAiB,OAC/BM,EAAgBN,EAAiBC,EAAc,CAAC,EAElDF,CACR,CACF,CACF,CAUD,SAASb,EAAUW,EAAWna,EAAM,CAC9Bma,EAAU,YAAc,CAACtB,EAAqB,SAASsB,CAAS,GAClEtB,EAAqB,KAAKsB,CAAS,EAEjCA,EAAU,SACZxZ,GAAOuF,EAAQ,OAAQlG,EAAMkG,EAAQ,OAAO,OAASlG,EAAMma,EAAU,QAAQjU,EAAQ,OAAO,MAAMlG,CAAI,EAAGkG,CAAO,CAAC,EAE/GiU,EAAU,YACZjU,EAAQ,OAASiU,EAAU,UAAUjU,EAAQ,OAAQA,CAAO,EAE/D,CAQD,SAAS2U,GAAQ,CACf,MAAMC,EAAa3B,IACb4B,EAAgB7U,EAAQ,SACxB8U,EAAwB9U,EAAQ,iBAChC+U,EAAmB/U,EAAQ,OAAO,OAClCgV,EAAa,MAAM,KAAK3W,CAAK,EACnC,MAAO,CACL,KAAM0W,EACN,QAAAE,CACN,EAQI,SAASA,GAAU,CACjBtf,EAAQif,EACR5U,EAAQ,SAAW6U,EACnB7U,EAAQ,iBAAmB8U,EAC3B9U,EAAQ,OAAO,OAAS+U,EACxB1W,EAAQ2W,EACRnB,GACD,CACF,CASD,SAASA,GAA0B,CAC7Ble,EAAM,QAAQ+c,GAAe/c,EAAM,OAAS,IAC9CA,EAAM,OAAS+c,EAAY/c,EAAM,IAAI,EACrCA,EAAM,QAAU+c,EAAY/c,EAAM,IAAI,EAAI,EAE7C,CACH,CAYA,SAAS8d,GAAY3B,EAAQhU,EAAO,CAClC,MAAMoX,EAAapX,EAAM,MAAM,OACzBqX,EAAmBrX,EAAM,MAAM,aAC/BsX,EAAWtX,EAAM,IAAI,OACrBuX,EAAiBvX,EAAM,IAAI,aAEjC,IAAIwX,EACJ,GAAIJ,IAAeE,EAEjBE,EAAO,CAACxD,EAAOoD,CAAU,EAAE,MAAMC,EAAkBE,CAAc,CAAC,MAC7D,CAEL,GADAC,EAAOxD,EAAO,MAAMoD,EAAYE,CAAQ,EACpCD,EAAmB,GAAI,CACzB,MAAMI,EAAOD,EAAK,CAAC,EACf,OAAOC,GAAS,SAClBD,EAAK,CAAC,EAAIC,EAAK,MAAMJ,CAAgB,EAGrCG,EAAK,MAAK,CAEb,CACGD,EAAiB,GAEnBC,EAAK,KAAKxD,EAAOsD,CAAQ,EAAE,MAAM,EAAGC,CAAc,CAAC,CAEtD,CACD,OAAOC,CACT,CAYA,SAAS9B,GAAgB1B,EAAQyB,EAAY,CAC3C,IAAIpkB,EAAQ,GAEZ,MAAM+H,EAAS,CAAA,EAEf,IAAIse,EACJ,KAAO,EAAErmB,EAAQ2iB,EAAO,QAAQ,CAC9B,MAAMG,EAAQH,EAAO3iB,CAAK,EAE1B,IAAIxB,EACJ,GAAI,OAAOskB,GAAU,SACnBtkB,EAAQskB,MACH,QAAQA,EAAK,CAClB,IAAK,GACH,CACEtkB,EAAQ,KACR,KACD,CACH,IAAK,GACH,CACEA,EAAQ;AAAA,EACR,KACD,CACH,IAAK,GACH,CACEA,EAAQ;AAAA,EACR,KACD,CACH,IAAK,GACH,CACEA,EAAQ4lB,EAAa,IAAM,IAC3B,KACD,CACH,IAAK,GACH,CACE,GAAI,CAACA,GAAciC,EAAO,SAC1B7nB,EAAQ,IACR,KACD,CACH,QAGIA,EAAQ,OAAO,aAAaskB,CAAK,CAEtC,CACDuD,EAAQvD,IAAU,GAClB/a,EAAO,KAAKvJ,CAAK,CAClB,CACD,OAAOuJ,EAAO,KAAK,EAAE,CACvB,CC1kBO,SAASue,GAAMxoB,EAAS,CAM7B,MAAMulB,EAAS,CACb,WAJFvX,GAAkB,CAACya,GAAmB,IAFrBzoB,GAAW,IAEuB,YAAc,CAAA,CAAG,CAAC,EAKnE,QAASsC,EAAOgO,EAAO,EACvB,QAAS,CAAE,EACX,SAAUhO,EAAOyO,EAAQ,EACzB,KAAMzO,EAAOyhB,EAAI,EACjB,KAAM,CAAE,EACR,OAAQzhB,EAAO+hB,EAAM,EACrB,KAAM/hB,EAAOkI,EAAI,CACrB,EACE,OAAO+a,EAQP,SAASjjB,EAAOsV,EAAS,CACvB,OAAO8Q,EAEP,SAASA,EAAQ7b,EAAM,CACrB,OAAOyY,GAAgBC,EAAQ3N,EAAS/K,CAAI,CAC7C,CACF,CACH,CC3CO,SAAS8b,GAAY7V,EAAQ,CAClC,KAAO,CAACoF,GAAYpF,CAAM,GAAG,CAG7B,OAAOA,CACT,CCAA,MAAM8V,GAAS,cAMR,SAASC,IAAa,CAC3B,IAAI1jB,EAAS,EACT2X,EAAS,GAETrX,EAAQ,GAERqjB,EACJ,OAAOC,EAIP,SAASA,EAAaroB,EAAOsoB,EAAUngB,EAAK,CAE1C,MAAMgc,EAAS,CAAA,EAEf,IAAI9e,EAEAgK,EAEA8I,EAEAoQ,EAEA1a,EAWJ,IAVA7N,EAAQoc,GAAU,OAAOpc,GAAU,SAAWA,EAAM,SAAQ,EAAK,IAAI,YAAYsoB,GAAY,MAAS,EAAE,OAAOtoB,CAAK,GACpHmY,EAAgB,EAChBiE,EAAS,GACLrX,IAEE/E,EAAM,WAAW,CAAC,IAAM,OAC1BmY,IAEFpT,EAAQ,QAEHoT,EAAgBnY,EAAM,QAAQ,CAKnC,GAJAkoB,GAAO,UAAY/P,EACnB9S,EAAQ6iB,GAAO,KAAKloB,CAAK,EACzBuoB,EAAcljB,GAASA,EAAM,QAAU,OAAYA,EAAM,MAAQrF,EAAM,OACvE6N,EAAO7N,EAAM,WAAWuoB,CAAW,EAC/B,CAACljB,EAAO,CACV+W,EAASpc,EAAM,MAAMmY,CAAa,EAClC,KACD,CACD,GAAItK,IAAS,IAAMsK,IAAkBoQ,GAAeH,EAClDjE,EAAO,KAAK,EAAE,EACdiE,EAAmB,WAUnB,QARIA,IACFjE,EAAO,KAAK,EAAE,EACdiE,EAAmB,QAEjBjQ,EAAgBoQ,IAClBpE,EAAO,KAAKnkB,EAAM,MAAMmY,EAAeoQ,CAAW,CAAC,EACnD9jB,GAAU8jB,EAAcpQ,GAElBtK,EAAI,CACV,IAAK,GACH,CACEsW,EAAO,KAAK,KAAK,EACjB1f,IACA,KACD,CACH,IAAK,GACH,CAGE,IAFA4K,EAAO,KAAK,KAAK5K,EAAS,CAAC,EAAI,EAC/B0f,EAAO,KAAK,EAAE,EACP1f,IAAW4K,GAAM8U,EAAO,KAAK,EAAE,EACtC,KACD,CACH,IAAK,IACH,CACEA,EAAO,KAAK,EAAE,EACd1f,EAAS,EACT,KACD,CACH,QAEI2jB,EAAmB,GACnB3jB,EAAS,CAEd,CAEH0T,EAAgBoQ,EAAc,CAC/B,CACD,OAAIpgB,IACEigB,GAAkBjE,EAAO,KAAK,EAAE,EAChC/H,GAAQ+H,EAAO,KAAK/H,CAAM,EAC9B+H,EAAO,KAAK,IAAI,GAEXA,CACR,CACH,CChHA,MAAMqE,GAA6B,oEAc5B,SAASC,GAAazoB,EAAO,CAClC,OAAOA,EAAM,QAAQwoB,GAA4BE,EAAM,CACzD,CAYA,SAASA,GAAOrlB,EAAIslB,EAAIC,EAAI,CAC1B,GAAID,EAEF,OAAOA,EAKT,GADaC,EAAG,WAAW,CAAC,IACf,GAAI,CACf,MAAMhB,EAAOgB,EAAG,WAAW,CAAC,EACtBC,EAAMjB,IAAS,KAAOA,IAAS,GACrC,OAAO3Z,GAAgC2a,EAAG,MAAMC,EAAM,EAAI,CAAC,EAAGA,EAAM,GAAK,EAAE,CAC5E,CACD,OAAOjc,GAA8Bgc,CAAE,GAAKvlB,CAC9C,CCIA,MAAMuF,GAAM,CAAE,EAAC,eAyBR,SAASkgB,GAAa9oB,EAAOsoB,EAAUhpB,EAAS,CACrD,OAAI,OAAOgpB,GAAa,WACtBhpB,EAAUgpB,EACVA,EAAW,QAENS,GAASzpB,CAAO,EAAE2oB,GAAYH,GAAMxoB,CAAO,EAAE,SAAQ,EAAG,MAAM6oB,GAAY,EAACnoB,EAAOsoB,EAAU,EAAI,CAAC,CAAC,CAAC,CAC5G,CAOA,SAASS,GAASzpB,EAAS,CAEzB,MAAM0pB,EAAS,CACb,WAAY,CAAE,EACd,eAAgB,CAAC,WAAY,WAAY,UAAW,YAAa,QAAQ,EACzE,MAAO,CACL,SAAUC,EAAOC,EAAI,EACrB,iBAAkBC,EAClB,cAAeA,EACf,WAAYF,EAAO9F,EAAO,EAC1B,WAAY8F,EAAO9U,EAAU,EAC7B,gBAAiBgV,EACjB,mBAAoBA,EACpB,WAAYF,EAAOG,EAAQ,EAC3B,oBAAqBhN,EACrB,oBAAqBA,EACrB,aAAc6M,EAAOG,GAAUhN,CAAM,EACrC,SAAU6M,EAAOvS,GAAU0F,CAAM,EACjC,aAAc+M,EACd,KAAMA,EACN,cAAeA,EACf,WAAYF,EAAO1oB,EAAU,EAC7B,4BAA6B6b,EAC7B,sBAAuBA,EACvB,sBAAuBA,EACvB,SAAU6M,EAAOI,EAAQ,EACzB,gBAAiBJ,EAAOK,EAAS,EACjC,kBAAmBL,EAAOK,EAAS,EACnC,SAAUL,EAAO5mB,GAAM+Z,CAAM,EAC7B,aAAc+M,EACd,SAAUF,EAAO5mB,GAAM+Z,CAAM,EAC7B,aAAc+M,EACd,MAAOF,EAAOM,EAAK,EACnB,MAAOnN,EACP,KAAM6M,EAAOC,EAAI,EACjB,SAAUD,EAAOO,EAAQ,EACzB,cAAeC,EACf,YAAaR,EAAOlc,GAAM2c,CAAkB,EAC5C,cAAeT,EAAOlc,EAAI,EAC1B,UAAWkc,EAAO7F,EAAS,EAC3B,UAAWuG,EACX,gBAAiBvN,EACjB,0BAA2BA,EAC3B,oBAAqBA,EACrB,cAAe6M,EAAO9F,EAAO,EAC7B,OAAQ8F,EAAOW,EAAM,EACrB,cAAeX,EAAOnH,EAAa,CACpC,EACD,KAAM,CACJ,WAAY+H,EAAQ,EACpB,mBAAoBC,EACpB,SAAUD,EAAQ,EAClB,cAAeE,GACf,iBAAkBC,GAClB,WAAYH,EAAQ,EACpB,qBAAsBI,EACtB,oCAAqCC,GACrC,gCAAiCA,GACjC,wBAAyBC,EACzB,mBAAoBC,GACpB,WAAYP,EAAOQ,CAAgB,EACnC,gBAAiBC,EACjB,oBAAqBC,EACrB,oBAAqBC,EACrB,cAAeP,EACf,aAAcJ,EAAOY,CAAkB,EACvC,SAAUZ,EAAOa,CAAc,EAC/B,aAAcT,EACd,KAAMA,EACN,WAAYJ,EAAQ,EACpB,4BAA6Bc,EAC7B,sBAAuBC,EACvB,sBAAuBC,EACvB,SAAUhB,EAAQ,EAClB,gBAAiBA,EAAOiB,CAAe,EACvC,kBAAmBjB,EAAOiB,CAAe,EACzC,SAAUjB,EAAOkB,CAAc,EAC/B,aAAcd,EACd,SAAUJ,EAAOmB,CAAc,EAC/B,aAAcf,EACd,MAAOJ,EAAOoB,CAAW,EACzB,MAAOC,GACP,UAAWC,GACX,WAAYC,EACZ,KAAMvB,EAAOwB,CAAU,EACvB,SAAUxB,EAAQ,EAClB,YAAaA,EAAQ,EACrB,cAAeA,EAAQ,EACvB,UAAWA,EAAQ,EACnB,gBAAiByB,GACjB,0BAA2BC,EAC3B,oBAAqBC,GACrB,SAAUC,GACV,cAAe5B,EAAO6B,CAAmB,EACzC,0BAA2BC,EAC3B,kBAAmBC,EACnB,OAAQ/B,EAAQ,EAChB,cAAeA,EAAQ,CACxB,CACL,EACEgC,GAAU7C,GAAS1pB,GAAW,CAAA,GAAI,iBAAmB,CAAA,CAAE,EAGvD,MAAM8Q,EAAO,CAAA,EACb,OAAO0b,EAUP,SAASA,EAAQ1Z,EAAQ,CAEvB,IAAIlJ,EAAO,CACT,KAAM,OACN,SAAU,CAAE,CAClB,EAEI,MAAMmJ,EAAU,CACd,MAAO,CAACnJ,CAAI,EACZ,WAAY,CAAE,EACd,OAAA8f,EACA,MAAAjS,EACA,KAAA1C,EACA,OAAA+H,EACA,OAAA2P,EACA,KAAA3b,CACN,EAEU4b,EAAY,CAAA,EAClB,IAAIxqB,EAAQ,GACZ,KAAO,EAAEA,EAAQ4Q,EAAO,QAGtB,GAAIA,EAAO5Q,CAAK,EAAE,CAAC,EAAE,OAAS,eAAiB4Q,EAAO5Q,CAAK,EAAE,CAAC,EAAE,OAAS,gBACvE,GAAI4Q,EAAO5Q,CAAK,EAAE,CAAC,IAAM,QACvBwqB,EAAU,KAAKxqB,CAAK,MACf,CACL,MAAM+T,GAAOyW,EAAU,MACvBxqB,EAAQyqB,EAAY7Z,EAAQmD,GAAM/T,CAAK,CACxC,CAIL,IADAA,EAAQ,GACD,EAAEA,EAAQ4Q,EAAO,QAAQ,CAC9B,MAAM8Z,GAAUlD,EAAO5W,EAAO5Q,CAAK,EAAE,CAAC,CAAC,EACnCoH,GAAI,KAAKsjB,GAAS9Z,EAAO5Q,CAAK,EAAE,CAAC,EAAE,IAAI,GACzC0qB,GAAQ9Z,EAAO5Q,CAAK,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,OAAO,OAAO,CAChD,eAAgB4Q,EAAO5Q,CAAK,EAAE,CAAC,EAAE,cAC3C,EAAW6Q,CAAO,EAAGD,EAAO5Q,CAAK,EAAE,CAAC,CAAC,CAEhC,CAGD,GAAI6Q,EAAQ,WAAW,OAAS,EAAG,CACjC,MAAMkD,GAAOlD,EAAQ,WAAWA,EAAQ,WAAW,OAAS,CAAC,GAC7CkD,GAAK,CAAC,GAAK4W,IACnB,KAAK9Z,EAAS,OAAWkD,GAAK,CAAC,CAAC,CACzC,CAkBD,IAfArM,EAAK,SAAW,CACd,MAAOlB,GAAMoK,EAAO,OAAS,EAAIA,EAAO,CAAC,EAAE,CAAC,EAAE,MAAQ,CACpD,KAAM,EACN,OAAQ,EACR,OAAQ,CAChB,CAAO,EACD,IAAKpK,GAAMoK,EAAO,OAAS,EAAIA,EAAOA,EAAO,OAAS,CAAC,EAAE,CAAC,EAAE,IAAM,CAChE,KAAM,EACN,OAAQ,EACR,OAAQ,CAChB,CAAO,CACP,EAGI5Q,EAAQ,GACD,EAAEA,EAAQwnB,EAAO,WAAW,QACjC9f,EAAO8f,EAAO,WAAWxnB,CAAK,EAAE0H,CAAI,GAAKA,EAE3C,OAAOA,CACR,CAQD,SAAS+iB,EAAY7Z,EAAQrN,EAAOqnB,EAAQ,CAC1C,IAAI5qB,EAAQuD,EAAQ,EAChBsnB,EAAmB,GACnBC,GAAa,GAEb9C,GAEA5R,GAEA2U,GAEA7J,GACJ,KAAO,EAAElhB,GAAS4qB,GAAQ,CACxB,MAAMzU,GAAQvF,EAAO5Q,CAAK,EAC1B,OAAQmW,GAAM,CAAC,EAAE,KAAI,CACnB,IAAK,gBACL,IAAK,cACL,IAAK,aACH,CACMA,GAAM,CAAC,IAAM,QACf0U,IAEAA,IAEF3J,GAAW,OACX,KACD,CACH,IAAK,kBACH,CACM/K,GAAM,CAAC,IAAM,UACX6R,IAAY,CAAC9G,IAAY,CAAC2J,GAAoB,CAACE,KACjDA,GAAsB/qB,GAExBkhB,GAAW,QAEb,KACD,CACH,IAAK,aACL,IAAK,gBACL,IAAK,iBACL,IAAK,iBACL,IAAK,2BAID,MAEJ,QAEIA,GAAW,MAEhB,CACD,GAAI,CAAC2J,GAAoB1U,GAAM,CAAC,IAAM,SAAWA,GAAM,CAAC,EAAE,OAAS,kBAAoB0U,IAAqB,IAAM1U,GAAM,CAAC,IAAM,SAAWA,GAAM,CAAC,EAAE,OAAS,iBAAmBA,GAAM,CAAC,EAAE,OAAS,eAAgB,CAC/M,GAAI6R,GAAU,CACZ,IAAIgD,GAAYhrB,EAEhB,IADAoW,GAAY,OACL4U,MAAa,CAClB,MAAMC,GAAYra,EAAOoa,EAAS,EAClC,GAAIC,GAAU,CAAC,EAAE,OAAS,cAAgBA,GAAU,CAAC,EAAE,OAAS,kBAAmB,CACjF,GAAIA,GAAU,CAAC,IAAM,OAAQ,SACzB7U,KACFxF,EAAOwF,EAAS,EAAE,CAAC,EAAE,KAAO,kBAC5B0U,GAAa,IAEfG,GAAU,CAAC,EAAE,KAAO,aACpB7U,GAAY4U,EACb,SAAU,EAAAC,GAAU,CAAC,EAAE,OAAS,cAAgBA,GAAU,CAAC,EAAE,OAAS,oBAAsBA,GAAU,CAAC,EAAE,OAAS,8BAAgCA,GAAU,CAAC,EAAE,OAAS,oBAAsBA,GAAU,CAAC,EAAE,OAAS,kBAGnN,KAEH,CACGF,KAAwB,CAAC3U,IAAa2U,GAAsB3U,MAC9D4R,GAAS,QAAU,IAIrBA,GAAS,IAAM,OAAO,OAAO,CAAE,EAAE5R,GAAYxF,EAAOwF,EAAS,EAAE,CAAC,EAAE,MAAQD,GAAM,CAAC,EAAE,GAAG,EACtFvF,EAAO,OAAOwF,IAAapW,EAAO,EAAG,CAAC,OAAQgoB,GAAU7R,GAAM,CAAC,CAAC,CAAC,EACjEnW,IACA4qB,GACD,CAGD,GAAIzU,GAAM,CAAC,EAAE,OAAS,iBAAkB,CAEtC,MAAM5G,GAAO,CACX,KAAM,WACN,QAAS,GACT,MAAO,OAAO,OAAO,CAAA,EAAI4G,GAAM,CAAC,EAAE,KAAK,EAEvC,IAAK,MACjB,EACU6R,GAAWzY,GACXqB,EAAO,OAAO5Q,EAAO,EAAG,CAAC,QAASuP,GAAM4G,GAAM,CAAC,CAAC,CAAC,EACjDnW,IACA4qB,IACAG,GAAsB,OACtB7J,GAAW,EACZ,CACF,CACF,CACD,OAAAtQ,EAAOrN,CAAK,EAAE,CAAC,EAAE,QAAUunB,GACpBF,CACR,CAYD,SAASnD,EAAOrnB,EAAQ8qB,EAAK,CAC3B,OAAO/Z,EAOP,SAASA,EAAKxC,EAAO,CACnB4G,EAAM,KAAK,KAAMnV,EAAOuO,CAAK,EAAGA,CAAK,EACjCuc,GAAKA,EAAI,KAAK,KAAMvc,CAAK,CAC9B,CACF,CAKD,SAASiM,GAAS,CAChB,KAAK,MAAM,KAAK,CACd,KAAM,WACN,SAAU,CAAE,CAClB,CAAK,CACF,CAKD,SAASrF,EAAM/R,EAAMmL,EAAOwc,EAAc,CACzB,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAEvB,SACf,KAAK3nB,CAAI,EAClB,KAAK,MAAM,KAAKA,CAAI,EACpB,KAAK,WAAW,KAAK,CAACmL,EAAOwc,GAAgB,MAAS,CAAC,EACvD3nB,EAAK,SAAW,CACd,MAAOgD,GAAMmI,EAAM,KAAK,EAExB,IAAK,MACX,CACG,CAUD,SAAS0Z,EAAO6C,EAAK,CACnB,OAAOnZ,EAOP,SAASA,EAAMpD,EAAO,CAChBuc,GAAKA,EAAI,KAAK,KAAMvc,CAAK,EAC7BkE,EAAK,KAAK,KAAMlE,CAAK,CACtB,CACF,CAKD,SAASkE,EAAKlE,EAAOyc,EAAa,CAChC,MAAM5nB,EAAO,KAAK,MAAM,IAAG,EACrB2N,EAAO,KAAK,WAAW,IAAG,EAChC,GAAKA,EAKMA,EAAK,CAAC,EAAE,OAASxC,EAAM,OAC5Byc,EACFA,EAAY,KAAK,KAAMzc,EAAOwC,EAAK,CAAC,CAAC,GAErBA,EAAK,CAAC,GAAKwZ,IACnB,KAAK,KAAMhc,EAAOwC,EAAK,CAAC,CAAC,OATnC,OAAM,IAAI,MAAM,iBAAmBxC,EAAM,KAAO,MAAQ/H,GAAkB,CACxE,MAAO+H,EAAM,MACb,IAAKA,EAAM,GACnB,CAAO,EAAI,kBAAkB,EASzBnL,EAAK,SAAS,IAAMgD,GAAMmI,EAAM,GAAG,CACpC,CAKD,SAAS4b,GAAS,CAChB,OAAOvf,GAAS,KAAK,MAAM,IAAK,CAAA,CACjC,CAUD,SAASkd,GAAqB,CAC5B,KAAK,KAAK,4BAA8B,EACzC,CAMD,SAASD,EAAqBtZ,EAAO,CACnC,GAAI,KAAK,KAAK,4BAA6B,CACzC,MAAM0c,EAAW,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EACjDA,EAAS,MAAQ,OAAO,SAAS,KAAK,eAAe1c,CAAK,EAAG,EAAE,EAC/D,KAAK,KAAK,4BAA8B,MACzC,CACF,CAMD,SAASoa,GAA4B,CACnC,MAAMna,EAAO,KAAK,SACZpL,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAC7CA,EAAK,KAAOoL,CACb,CAMD,SAASoa,GAA4B,CACnC,MAAMpa,EAAO,KAAK,SACZpL,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAC7CA,EAAK,KAAOoL,CACb,CAMD,SAASka,GAAwB,CAE3B,KAAK,KAAK,iBACd,KAAK,OAAM,EACX,KAAK,KAAK,eAAiB,GAC5B,CAMD,SAASD,GAAmB,CAC1B,MAAMja,EAAO,KAAK,SACZpL,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAC7CA,EAAK,MAAQoL,EAAK,QAAQ,2BAA4B,EAAE,EACxD,KAAK,KAAK,eAAiB,MAC5B,CAMD,SAASqa,GAAqB,CAC5B,MAAMra,EAAO,KAAK,SACZpL,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAC7CA,EAAK,MAAQoL,EAAK,QAAQ,eAAgB,EAAE,CAC7C,CAMD,SAASwa,EAA4Bza,EAAO,CAC1C,MAAMkQ,EAAQ,KAAK,SACbrb,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAC7CA,EAAK,MAAQqb,EACbrb,EAAK,WAAamJ,GAAoB,KAAK,eAAegC,CAAK,CAAC,EAAE,aACnE,CAMD,SAAS0a,GAA8B,CACrC,MAAMza,EAAO,KAAK,SACZpL,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAC7CA,EAAK,MAAQoL,CACd,CAMD,SAASua,GAAoC,CAC3C,MAAMva,EAAO,KAAK,SACZpL,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAC7CA,EAAK,IAAMoL,CACZ,CAMD,SAAS0Z,EAAyB3Z,EAAO,CACvC,MAAMnL,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAC7C,GAAI,CAACA,EAAK,MAAO,CACf,MAAM8nB,EAAQ,KAAK,eAAe3c,CAAK,EAAE,OACzCnL,EAAK,MAAQ8nB,CACd,CACF,CAMD,SAASlB,GAA0B,CACjC,KAAK,KAAK,6BAA+B,EAC1C,CAMD,SAASD,EAAgCxb,EAAO,CAC9C,MAAMnL,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAC7CA,EAAK,MAAQ,KAAK,eAAemL,CAAK,EAAE,YAAY,CAAC,IAAM,GAAK,EAAI,CACrE,CAMD,SAASub,GAAsB,CAC7B,KAAK,KAAK,6BAA+B,MAC1C,CAOD,SAASvC,EAAYhZ,EAAO,CAG1B,MAAM4c,EAFO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAEvB,SACtB,IAAIxX,EAAOwX,EAASA,EAAS,OAAS,CAAC,GACnC,CAACxX,GAAQA,EAAK,OAAS,UAEzBA,EAAOzL,GAAI,EACXyL,EAAK,SAAW,CACd,MAAOvN,GAAMmI,EAAM,KAAK,EAExB,IAAK,MACb,EACM4c,EAAS,KAAKxX,CAAI,GAEpB,KAAK,MAAM,KAAKA,CAAI,CACrB,CAOD,SAAS0U,EAAW9Z,EAAO,CACzB,MAAMoF,EAAO,KAAK,MAAM,IAAG,EAC3BA,EAAK,OAAS,KAAK,eAAepF,CAAK,EACvCoF,EAAK,SAAS,IAAMvN,GAAMmI,EAAM,GAAG,CACpC,CAOD,SAASib,EAAiBjb,EAAO,CAC/B,MAAMkC,EAAU,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAEhD,GAAI,KAAK,KAAK,YAAa,CACzB,MAAMkD,EAAOlD,EAAQ,SAASA,EAAQ,SAAS,OAAS,CAAC,EACzDkD,EAAK,SAAS,IAAMvN,GAAMmI,EAAM,GAAG,EACnC,KAAK,KAAK,YAAc,OACxB,MACD,CACG,CAAC,KAAK,KAAK,8BAAgC6Y,EAAO,eAAe,SAAS3W,EAAQ,IAAI,IACxF8W,EAAY,KAAK,KAAMhZ,CAAK,EAC5B8Z,EAAW,KAAK,KAAM9Z,CAAK,EAE9B,CAOD,SAAS2a,GAAkB,CACzB,KAAK,KAAK,YAAc,EACzB,CAOD,SAASC,GAAiB,CACxB,MAAM3a,EAAO,KAAK,SACZpL,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAC7CA,EAAK,MAAQoL,CACd,CAOD,SAAS4a,GAAiB,CACxB,MAAM5a,EAAO,KAAK,SACZpL,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAC7CA,EAAK,MAAQoL,CACd,CAOD,SAASsa,GAAiB,CACxB,MAAMta,EAAO,KAAK,SACZpL,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAC7CA,EAAK,MAAQoL,CACd,CAOD,SAASib,GAAa,CACpB,MAAMrmB,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAK7C,GAAI,KAAK,KAAK,YAAa,CAEzB,MAAMgoB,EAAgB,KAAK,KAAK,eAAiB,WACjDhoB,EAAK,MAAQ,YAEbA,EAAK,cAAgBgoB,EAErB,OAAOhoB,EAAK,IACZ,OAAOA,EAAK,KAClB,MAEM,OAAOA,EAAK,WAEZ,OAAOA,EAAK,MAEd,KAAK,KAAK,cAAgB,MAC3B,CAOD,SAASimB,GAAc,CACrB,MAAMjmB,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAK7C,GAAI,KAAK,KAAK,YAAa,CAEzB,MAAMgoB,EAAgB,KAAK,KAAK,eAAiB,WACjDhoB,EAAK,MAAQ,YAEbA,EAAK,cAAgBgoB,EAErB,OAAOhoB,EAAK,IACZ,OAAOA,EAAK,KAClB,MAEM,OAAOA,EAAK,WAEZ,OAAOA,EAAK,MAEd,KAAK,KAAK,cAAgB,MAC3B,CAOD,SAASmmB,GAAgBhb,EAAO,CAC9B,MAAMwT,EAAS,KAAK,eAAexT,CAAK,EAClC0c,EAAW,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAGjDA,EAAS,MAAQpE,GAAa9E,CAAM,EAEpCkJ,EAAS,WAAa1e,GAAoBwV,CAAM,EAAE,YAAW,CAC9D,CAOD,SAASuH,IAAc,CACrB,MAAM+B,EAAW,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAC3CjtB,EAAQ,KAAK,SACbgF,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAG7C,GADA,KAAK,KAAK,YAAc,GACpBA,EAAK,OAAS,OAAQ,CAExB,MAAMmF,EAAW8iB,EAAS,SAC1BjoB,EAAK,SAAWmF,CACtB,MACMnF,EAAK,IAAMhF,CAEd,CAOD,SAASurB,GAAkC,CACzC,MAAMnb,EAAO,KAAK,SACZpL,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAC7CA,EAAK,IAAMoL,CACZ,CAOD,SAASob,IAA4B,CACnC,MAAMpb,EAAO,KAAK,SACZpL,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAC7CA,EAAK,MAAQoL,CACd,CAOD,SAASqb,IAAiB,CACxB,KAAK,KAAK,YAAc,MACzB,CAOD,SAAS9B,GAAmB,CAC1B,KAAK,KAAK,cAAgB,WAC3B,CAOD,SAAS2B,GAAsBnb,EAAO,CACpC,MAAMkQ,EAAQ,KAAK,SACbrb,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAG7CA,EAAK,MAAQqb,EAEbrb,EAAK,WAAamJ,GAAoB,KAAK,eAAegC,CAAK,CAAC,EAAE,cAClE,KAAK,KAAK,cAAgB,MAC3B,CAOD,SAAS+Z,GAA+B/Z,EAAO,CAC7C,KAAK,KAAK,uBAAyBA,EAAM,IAC1C,CAMD,SAASga,EAA8Bha,EAAO,CAC5C,MAAMC,EAAO,KAAK,eAAeD,CAAK,EAChCjI,EAAO,KAAK,KAAK,uBAEvB,IAAIlI,EACAkI,GACFlI,EAAQiO,GAAgCmC,EAAMlI,IAAS,kCAAoC,GAAK,EAAE,EAClG,KAAK,KAAK,uBAAyB,QAGnClI,EADe4M,GAA8BwD,CAAI,EAGnD,MAAMmF,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAC7CA,EAAK,OAASvV,CACf,CAMD,SAASoqB,GAAyBja,EAAO,CACvC,MAAMoF,EAAO,KAAK,MAAM,IAAG,EAC3BA,EAAK,SAAS,IAAMvN,GAAMmI,EAAM,GAAG,CACpC,CAMD,SAAS6Z,GAAuB7Z,EAAO,CACrC8Z,EAAW,KAAK,KAAM9Z,CAAK,EAC3B,MAAMnL,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAC7CA,EAAK,IAAM,KAAK,eAAemL,CAAK,CACrC,CAMD,SAAS4Z,GAAoB5Z,EAAO,CAClC8Z,EAAW,KAAK,KAAM9Z,CAAK,EAC3B,MAAMnL,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAC7CA,EAAK,IAAM,UAAY,KAAK,eAAemL,CAAK,CACjD,CAOD,SAASgE,IAAa,CACpB,MAAO,CACL,KAAM,aACN,SAAU,CAAE,CAClB,CACG,CAGD,SAASiV,IAAW,CAClB,MAAO,CACL,KAAM,OACN,KAAM,KACN,KAAM,KACN,MAAO,EACb,CACG,CAGD,SAAS1S,IAAW,CAClB,MAAO,CACL,KAAM,aACN,MAAO,EACb,CACG,CAGD,SAASnW,IAAa,CACpB,MAAO,CACL,KAAM,aACN,WAAY,GACZ,MAAO,KACP,MAAO,KACP,IAAK,EACX,CACG,CAGD,SAAS8oB,IAAW,CAClB,MAAO,CACL,KAAM,WACN,SAAU,CAAE,CAClB,CACG,CAGD,SAASlG,IAAU,CACjB,MAAO,CACL,KAAM,UAEN,MAAO,EACP,SAAU,CAAE,CAClB,CACG,CAGD,SAASmG,IAAY,CACnB,MAAO,CACL,KAAM,OACZ,CACG,CAGD,SAASjnB,IAAO,CACd,MAAO,CACL,KAAM,OACN,MAAO,EACb,CACG,CAGD,SAASknB,IAAQ,CACf,MAAO,CACL,KAAM,QACN,MAAO,KACP,IAAK,GACL,IAAK,IACX,CACG,CAGD,SAASL,IAAO,CACd,MAAO,CACL,KAAM,OACN,MAAO,KACP,IAAK,GACL,SAAU,CAAE,CAClB,CACG,CAMD,SAASnc,GAAKoD,EAAO,CACnB,MAAO,CACL,KAAM,OACN,QAASA,EAAM,OAAS,cACxB,MAAO,KACP,OAAQA,EAAM,QACd,SAAU,CAAE,CAClB,CACG,CAMD,SAASqZ,GAASrZ,EAAO,CACvB,MAAO,CACL,KAAM,WACN,OAAQA,EAAM,QACd,QAAS,KACT,SAAU,CAAE,CAClB,CACG,CAGD,SAASiT,IAAY,CACnB,MAAO,CACL,KAAM,YACN,SAAU,CAAE,CAClB,CACG,CAGD,SAASwG,IAAS,CAChB,MAAO,CACL,KAAM,SACN,SAAU,CAAE,CAClB,CACG,CAGD,SAAS9f,IAAO,CACd,MAAO,CACL,KAAM,OACN,MAAO,EACb,CACG,CAGD,SAASgY,IAAgB,CACvB,MAAO,CACL,KAAM,eACZ,CACG,CACH,CAUA,SAAS9Z,GAAMklB,EAAG,CAChB,MAAO,CACL,KAAMA,EAAE,KACR,OAAQA,EAAE,OACV,OAAQA,EAAE,MACd,CACA,CAOA,SAASrB,GAAUsB,EAAU5f,EAAY,CACvC,IAAI/L,EAAQ,GACZ,KAAO,EAAEA,EAAQ+L,EAAW,QAAQ,CAClC,MAAMvN,EAAQuN,EAAW/L,CAAK,EAC1B,MAAM,QAAQxB,CAAK,EACrB6rB,GAAUsB,EAAUntB,CAAK,EAEzByN,GAAU0f,EAAUntB,CAAK,CAE5B,CACH,CAOA,SAASyN,GAAU0f,EAAU1f,EAAW,CAEtC,IAAI9L,EACJ,IAAKA,KAAO8L,EACV,GAAI7E,GAAI,KAAK6E,EAAW9L,CAAG,EACzB,OAAQA,EAAG,CACT,IAAK,iBACH,CACE,MAAMiM,EAAQH,EAAU9L,CAAG,EACvBiM,GACFuf,EAASxrB,CAAG,EAAE,KAAK,GAAGiM,CAAK,EAE7B,KACD,CACH,IAAK,aACH,CACE,MAAMA,EAAQH,EAAU9L,CAAG,EACvBiM,GACFuf,EAASxrB,CAAG,EAAE,KAAK,GAAGiM,CAAK,EAE7B,KACD,CACH,IAAK,QACL,IAAK,OACH,CACE,MAAMA,EAAQH,EAAU9L,CAAG,EACvBiM,GACF,OAAO,OAAOuf,EAASxrB,CAAG,EAAGiM,CAAK,EAEpC,KACD,CAEJ,CAGP,CAGA,SAASue,GAAexe,EAAMC,EAAO,CACnC,MAAID,EACI,IAAI,MAAM,iBAAmBA,EAAK,KAAO,MAAQvF,GAAkB,CACvE,MAAOuF,EAAK,MACZ,IAAKA,EAAK,GACX,CAAA,EAAI,0BAA4BC,EAAM,KAAO,MAAQxF,GAAkB,CACtE,MAAOwF,EAAM,MACb,IAAKA,EAAM,GACjB,CAAK,EAAI,WAAW,EAEV,IAAI,MAAM,oCAAsCA,EAAM,KAAO,MAAQxF,GAAkB,CAC3F,MAAOwF,EAAM,MACb,IAAKA,EAAM,GACjB,CAAK,EAAI,iBAAiB,CAE1B,CCnoCe,SAASwf,GAAY9tB,EAAS,CAG3C,MAAMmR,EAAO,KAEbA,EAAK,OAASoU,EAKd,SAASA,EAAOwI,EAAK,CACnB,OAAOvE,GAAauE,EAAK,CACvB,GAAG5c,EAAK,KAAK,UAAU,EACvB,GAAGnR,EAIH,WAAYmR,EAAK,KAAK,qBAAqB,GAAK,CAAE,EAClD,gBAAiBA,EAAK,KAAK,wBAAwB,GAAK,CAAE,CAChE,CAAK,CACF,CACH,CCvBO,SAAS6c,GAAWhkB,EAAOtE,EAAM,CAEtC,MAAMuE,EAAS,CACb,KAAM,UACN,QAAS,aACT,WAAY,CAAE,EACd,SAAUD,EAAM,KAAKA,EAAM,IAAItE,CAAI,EAAG,EAAI,CAC3C,EACD,OAAAsE,EAAM,MAAMtE,EAAMuE,CAAM,EACjBD,EAAM,UAAUtE,EAAMuE,CAAM,CACrC,CCTO,SAAS+f,GAAUhgB,EAAOtE,EAAM,CAErC,MAAMuE,EAAS,CAAC,KAAM,UAAW,QAAS,KAAM,WAAY,CAAA,EAAI,SAAU,EAAE,EAC5E,OAAAD,EAAM,MAAMtE,EAAMuE,CAAM,EACjB,CAACD,EAAM,UAAUtE,EAAMuE,CAAM,EAAG,CAAC,KAAM,OAAQ,MAAO;AAAA,CAAI,CAAC,CACpE,CCLO,SAASsE,GAAKvE,EAAOtE,EAAM,CAChC,MAAMhF,EAAQgF,EAAK,MAAQA,EAAK,MAAQ;AAAA,EAAO,GAEzCnD,EAAa,CAAE,EAEjBmD,EAAK,OACPnD,EAAW,UAAY,CAAC,YAAcmD,EAAK,IAAI,GAKjD,IAAIuE,EAAS,CACX,KAAM,UACN,QAAS,OACT,WAAA1H,EACA,SAAU,CAAC,CAAC,KAAM,OAAQ,MAAA7B,CAAK,CAAC,CACjC,EAED,OAAIgF,EAAK,OACPuE,EAAO,KAAO,CAAC,KAAMvE,EAAK,IAAI,GAGhCsE,EAAM,MAAMtE,EAAMuE,CAAM,EACxBA,EAASD,EAAM,UAAUtE,EAAMuE,CAAM,EAGrCA,EAAS,CAAC,KAAM,UAAW,QAAS,MAAO,WAAY,GAAI,SAAU,CAACA,CAAM,CAAC,EAC7ED,EAAM,MAAMtE,EAAMuE,CAAM,EACjBA,CACT,CC9BO,SAASgkB,GAAcjkB,EAAOtE,EAAM,CAEzC,MAAMuE,EAAS,CACb,KAAM,UACN,QAAS,MACT,WAAY,CAAE,EACd,SAAUD,EAAM,IAAItE,CAAI,CACzB,EACD,OAAAsE,EAAM,MAAMtE,EAAMuE,CAAM,EACjBD,EAAM,UAAUtE,EAAMuE,CAAM,CACrC,CCVO,SAAS8f,GAAS/f,EAAOtE,EAAM,CAEpC,MAAMuE,EAAS,CACb,KAAM,UACN,QAAS,KACT,WAAY,CAAE,EACd,SAAUD,EAAM,IAAItE,CAAI,CACzB,EACD,OAAAsE,EAAM,MAAMtE,EAAMuE,CAAM,EACjBD,EAAM,UAAUtE,EAAMuE,CAAM,CACrC,CCXO,SAASikB,GAAkBlkB,EAAOtE,EAAM,CAC7C,MAAMyoB,EACJ,OAAOnkB,EAAM,QAAQ,eAAkB,SACnCA,EAAM,QAAQ,cACd,gBACAokB,EAAK,OAAO1oB,EAAK,UAAU,EAAE,YAAa,EAC1C2oB,EAASze,GAAawe,EAAG,YAAW,CAAE,EACtClsB,EAAQ8H,EAAM,cAAc,QAAQokB,CAAE,EAE5C,IAAIE,EAEAC,EAAevkB,EAAM,eAAe,IAAIokB,CAAE,EAE1CG,IAAiB,QACnBA,EAAe,EACfvkB,EAAM,cAAc,KAAKokB,CAAE,EAC3BE,EAAUtkB,EAAM,cAAc,QAE9BskB,EAAUpsB,EAAQ,EAGpBqsB,GAAgB,EAChBvkB,EAAM,eAAe,IAAIokB,EAAIG,CAAY,EAGzC,MAAM3E,EAAO,CACX,KAAM,UACN,QAAS,IACT,WAAY,CACV,KAAM,IAAMuE,EAAgB,MAAQE,EACpC,GACEF,EACA,SACAE,GACCE,EAAe,EAAI,IAAMA,EAAe,IAC3C,gBAAiB,GACjB,gBAAiB,CAAC,gBAAgB,CACnC,EACD,SAAU,CAAC,CAAC,KAAM,OAAQ,MAAO,OAAOD,CAAO,CAAC,CAAC,CAClD,EACDtkB,EAAM,MAAMtE,EAAMkkB,CAAI,EAGtB,MAAM4E,EAAM,CACV,KAAM,UACN,QAAS,MACT,WAAY,CAAE,EACd,SAAU,CAAC5E,CAAI,CAChB,EACD,OAAA5f,EAAM,MAAMtE,EAAM8oB,CAAG,EACdxkB,EAAM,UAAUtE,EAAM8oB,CAAG,CAClC,CClDO,SAAS3K,GAAQ7Z,EAAOtE,EAAM,CAEnC,MAAMuE,EAAS,CACb,KAAM,UACN,QAAS,IAAMvE,EAAK,MACpB,WAAY,CAAE,EACd,SAAUsE,EAAM,IAAItE,CAAI,CACzB,EACD,OAAAsE,EAAM,MAAMtE,EAAMuE,CAAM,EACjBD,EAAM,UAAUtE,EAAMuE,CAAM,CACrC,CCRO,SAASlH,GAAKiH,EAAOtE,EAAM,CAChC,GAAIsE,EAAM,QAAQ,mBAAoB,CAEpC,MAAMC,EAAS,CAAC,KAAM,MAAO,MAAOvE,EAAK,KAAK,EAC9C,OAAAsE,EAAM,MAAMtE,EAAMuE,CAAM,EACjBD,EAAM,UAAUtE,EAAMuE,CAAM,CACpC,CAGH,CCRO,SAASwkB,GAAOzkB,EAAOtE,EAAM,CAClC,MAAMgpB,EAAUhpB,EAAK,cACrB,IAAIipB,EAAS,IAQb,GANID,IAAY,YACdC,GAAU,KACDD,IAAY,SACrBC,GAAU,KAAOjpB,EAAK,OAASA,EAAK,YAAc,KAGhDA,EAAK,OAAS,iBAChB,MAAO,CAAC,CAAC,KAAM,OAAQ,MAAO,KAAOA,EAAK,IAAMipB,CAAM,CAAC,EAGzD,MAAMC,EAAW5kB,EAAM,IAAItE,CAAI,EACzB4iB,EAAOsG,EAAS,CAAC,EAEnBtG,GAAQA,EAAK,OAAS,OACxBA,EAAK,MAAQ,IAAMA,EAAK,MAExBsG,EAAS,QAAQ,CAAC,KAAM,OAAQ,MAAO,GAAG,CAAC,EAG7C,MAAM3Y,EAAO2Y,EAASA,EAAS,OAAS,CAAC,EAEzC,OAAI3Y,GAAQA,EAAK,OAAS,OACxBA,EAAK,OAAS0Y,EAEdC,EAAS,KAAK,CAAC,KAAM,OAAQ,MAAOD,CAAM,CAAC,EAGtCC,CACT,CCjCO,SAASC,GAAe7kB,EAAOtE,EAAM,CAC1C,MAAM0oB,EAAK,OAAO1oB,EAAK,UAAU,EAAE,YAAa,EAC1CzE,EAAa+I,EAAM,eAAe,IAAIokB,CAAE,EAE9C,GAAI,CAACntB,EACH,OAAOwtB,GAAOzkB,EAAOtE,CAAI,EAI3B,MAAMnD,EAAa,CAAC,IAAKqN,GAAa3O,EAAW,KAAO,EAAE,EAAG,IAAKyE,EAAK,GAAG,EAEtEzE,EAAW,QAAU,MAAQA,EAAW,QAAU,SACpDsB,EAAW,MAAQtB,EAAW,OAIhC,MAAMgJ,EAAS,CAAC,KAAM,UAAW,QAAS,MAAO,WAAA1H,EAAY,SAAU,EAAE,EACzE,OAAAyH,EAAM,MAAMtE,EAAMuE,CAAM,EACjBD,EAAM,UAAUtE,EAAMuE,CAAM,CACrC,CCrBO,SAASggB,GAAMjgB,EAAOtE,EAAM,CAEjC,MAAMnD,EAAa,CAAC,IAAKqN,GAAalK,EAAK,GAAG,CAAC,EAE3CA,EAAK,MAAQ,MAAQA,EAAK,MAAQ,SACpCnD,EAAW,IAAMmD,EAAK,KAGpBA,EAAK,QAAU,MAAQA,EAAK,QAAU,SACxCnD,EAAW,MAAQmD,EAAK,OAI1B,MAAMuE,EAAS,CAAC,KAAM,UAAW,QAAS,MAAO,WAAA1H,EAAY,SAAU,EAAE,EACzE,OAAAyH,EAAM,MAAMtE,EAAMuE,CAAM,EACjBD,EAAM,UAAUtE,EAAMuE,CAAM,CACrC,CCfO,SAAS6kB,GAAW9kB,EAAOtE,EAAM,CAEtC,MAAM8E,EAAO,CAAC,KAAM,OAAQ,MAAO9E,EAAK,MAAM,QAAQ,YAAa,GAAG,CAAC,EACvEsE,EAAM,MAAMtE,EAAM8E,CAAI,EAGtB,MAAMP,EAAS,CACb,KAAM,UACN,QAAS,OACT,WAAY,CAAE,EACd,SAAU,CAACO,CAAI,CAChB,EACD,OAAAR,EAAM,MAAMtE,EAAMuE,CAAM,EACjBD,EAAM,UAAUtE,EAAMuE,CAAM,CACrC,CCbO,SAAS8kB,GAAc/kB,EAAOtE,EAAM,CACzC,MAAM0oB,EAAK,OAAO1oB,EAAK,UAAU,EAAE,YAAa,EAC1CzE,EAAa+I,EAAM,eAAe,IAAIokB,CAAE,EAE9C,GAAI,CAACntB,EACH,OAAOwtB,GAAOzkB,EAAOtE,CAAI,EAI3B,MAAMnD,EAAa,CAAC,KAAMqN,GAAa3O,EAAW,KAAO,EAAE,CAAC,EAExDA,EAAW,QAAU,MAAQA,EAAW,QAAU,SACpDsB,EAAW,MAAQtB,EAAW,OAIhC,MAAMgJ,EAAS,CACb,KAAM,UACN,QAAS,IACT,WAAA1H,EACA,SAAUyH,EAAM,IAAItE,CAAI,CACzB,EACD,OAAAsE,EAAM,MAAMtE,EAAMuE,CAAM,EACjBD,EAAM,UAAUtE,EAAMuE,CAAM,CACrC,CC1BO,SAAS2f,GAAK5f,EAAOtE,EAAM,CAEhC,MAAMnD,EAAa,CAAC,KAAMqN,GAAalK,EAAK,GAAG,CAAC,EAE5CA,EAAK,QAAU,MAAQA,EAAK,QAAU,SACxCnD,EAAW,MAAQmD,EAAK,OAI1B,MAAMuE,EAAS,CACb,KAAM,UACN,QAAS,IACT,WAAA1H,EACA,SAAUyH,EAAM,IAAItE,CAAI,CACzB,EACD,OAAAsE,EAAM,MAAMtE,EAAMuE,CAAM,EACjBD,EAAM,UAAUtE,EAAMuE,CAAM,CACrC,CCZO,SAASigB,GAASlgB,EAAOtE,EAAM2D,EAAQ,CAC5C,MAAM2lB,EAAUhlB,EAAM,IAAItE,CAAI,EACxBupB,EAAQ5lB,EAAS6lB,GAAU7lB,CAAM,EAAI8lB,GAAczpB,CAAI,EAEvDnD,EAAa,CAAE,EAEfsI,EAAW,CAAE,EAEnB,GAAI,OAAOnF,EAAK,SAAY,UAAW,CACrC,MAAM4iB,EAAO0G,EAAQ,CAAC,EAEtB,IAAIlL,EAEAwE,GAAQA,EAAK,OAAS,WAAaA,EAAK,UAAY,IACtDxE,EAAYwE,GAEZxE,EAAY,CAAC,KAAM,UAAW,QAAS,IAAK,WAAY,CAAA,EAAI,SAAU,EAAE,EACxEkL,EAAQ,QAAQlL,CAAS,GAGvBA,EAAU,SAAS,OAAS,GAC9BA,EAAU,SAAS,QAAQ,CAAC,KAAM,OAAQ,MAAO,GAAG,CAAC,EAGvDA,EAAU,SAAS,QAAQ,CACzB,KAAM,UACN,QAAS,QACT,WAAY,CAAC,KAAM,WAAY,QAASpe,EAAK,QAAS,SAAU,EAAI,EACpE,SAAU,CAAE,CAClB,CAAK,EAIDnD,EAAW,UAAY,CAAC,gBAAgB,CACzC,CAED,IAAIL,EAAQ,GAEZ,KAAO,EAAEA,EAAQ8sB,EAAQ,QAAQ,CAC/B,MAAMjkB,EAAQikB,EAAQ9sB,CAAK,GAIzB+sB,GACA/sB,IAAU,GACV6I,EAAM,OAAS,WACfA,EAAM,UAAY,MAElBF,EAAS,KAAK,CAAC,KAAM,OAAQ,MAAO;AAAA,CAAI,CAAC,EAGvCE,EAAM,OAAS,WAAaA,EAAM,UAAY,KAAO,CAACkkB,EACxDpkB,EAAS,KAAK,GAAGE,EAAM,QAAQ,EAE/BF,EAAS,KAAKE,CAAK,CAEtB,CAED,MAAMkL,EAAO+Y,EAAQA,EAAQ,OAAS,CAAC,EAGnC/Y,IAASgZ,GAAShZ,EAAK,OAAS,WAAaA,EAAK,UAAY,MAChEpL,EAAS,KAAK,CAAC,KAAM,OAAQ,MAAO;AAAA,CAAI,CAAC,EAI3C,MAAMZ,EAAS,CAAC,KAAM,UAAW,QAAS,KAAM,WAAA1H,EAAY,SAAAsI,CAAQ,EACpE,OAAAb,EAAM,MAAMtE,EAAMuE,CAAM,EACjBD,EAAM,UAAUtE,EAAMuE,CAAM,CACrC,CAMA,SAASilB,GAAUxpB,EAAM,CACvB,IAAIupB,EAAQ,GACZ,GAAIvpB,EAAK,OAAS,OAAQ,CACxBupB,EAAQvpB,EAAK,QAAU,GACvB,MAAMmF,EAAWnF,EAAK,SACtB,IAAIxD,EAAQ,GAEZ,KAAO,CAAC+sB,GAAS,EAAE/sB,EAAQ2I,EAAS,QAClCokB,EAAQE,GAActkB,EAAS3I,CAAK,CAAC,CAExC,CAED,OAAO+sB,CACT,CAMA,SAASE,GAAczpB,EAAM,CAC3B,MAAM0pB,EAAS1pB,EAAK,OAEpB,OAAO0pB,GACH1pB,EAAK,SAAS,OAAS,CAE7B,CCxGO,SAAS+H,GAAKzD,EAAOtE,EAAM,CAEhC,MAAMnD,EAAa,CAAE,EACfysB,EAAUhlB,EAAM,IAAItE,CAAI,EAC9B,IAAIxD,EAAQ,GAOZ,IALI,OAAOwD,EAAK,OAAU,UAAYA,EAAK,QAAU,IACnDnD,EAAW,MAAQmD,EAAK,OAInB,EAAExD,EAAQ8sB,EAAQ,QAAQ,CAC/B,MAAMjkB,EAAQikB,EAAQ9sB,CAAK,EAE3B,GACE6I,EAAM,OAAS,WACfA,EAAM,UAAY,MAClBA,EAAM,YACN,MAAM,QAAQA,EAAM,WAAW,SAAS,GACxCA,EAAM,WAAW,UAAU,SAAS,gBAAgB,EACpD,CACAxI,EAAW,UAAY,CAAC,oBAAoB,EAC5C,KACD,CACF,CAGD,MAAM0H,EAAS,CACb,KAAM,UACN,QAASvE,EAAK,QAAU,KAAO,KAC/B,WAAAnD,EACA,SAAUyH,EAAM,KAAKglB,EAAS,EAAI,CACnC,EACD,OAAAhlB,EAAM,MAAMtE,EAAMuE,CAAM,EACjBD,EAAM,UAAUtE,EAAMuE,CAAM,CACrC,CCpCO,SAAS6Z,GAAU9Z,EAAOtE,EAAM,CAErC,MAAMuE,EAAS,CACb,KAAM,UACN,QAAS,IACT,WAAY,CAAE,EACd,SAAUD,EAAM,IAAItE,CAAI,CACzB,EACD,OAAAsE,EAAM,MAAMtE,EAAMuE,CAAM,EACjBD,EAAM,UAAUtE,EAAMuE,CAAM,CACrC,CCTO,SAASM,GAAKP,EAAOtE,EAAM,CAEhC,MAAMuE,EAAS,CAAC,KAAM,OAAQ,SAAUD,EAAM,KAAKA,EAAM,IAAItE,CAAI,CAAC,CAAC,EACnE,OAAAsE,EAAM,MAAMtE,EAAMuE,CAAM,EACjBD,EAAM,UAAUtE,EAAMuE,CAAM,CACrC,CCNO,SAASqgB,GAAOtgB,EAAOtE,EAAM,CAElC,MAAMuE,EAAS,CACb,KAAM,UACN,QAAS,SACT,WAAY,CAAE,EACd,SAAUD,EAAM,IAAItE,CAAI,CACzB,EACD,OAAAsE,EAAM,MAAMtE,EAAMuE,CAAM,EACjBD,EAAM,UAAUtE,EAAMuE,CAAM,CACrC,CCXO,SAASolB,GAAMrlB,EAAOtE,EAAM,CACjC,MAAM4pB,EAAOtlB,EAAM,IAAItE,CAAI,EACrB6pB,EAAWD,EAAK,MAAO,EAEvBE,EAAe,CAAE,EAEvB,GAAID,EAAU,CAEZ,MAAMjH,EAAO,CACX,KAAM,UACN,QAAS,QACT,WAAY,CAAE,EACd,SAAUte,EAAM,KAAK,CAACulB,CAAQ,EAAG,EAAI,CACtC,EACDvlB,EAAM,MAAMtE,EAAK,SAAS,CAAC,EAAG4iB,CAAI,EAClCkH,EAAa,KAAKlH,CAAI,CACvB,CAED,GAAIgH,EAAK,OAAS,EAAG,CAEnB,MAAMG,EAAO,CACX,KAAM,UACN,QAAS,QACT,WAAY,CAAE,EACd,SAAUzlB,EAAM,KAAKslB,EAAM,EAAI,CAChC,EAEK7pB,EAAQkD,GAAWjD,EAAK,SAAS,CAAC,CAAC,EACnCmD,EAAMJ,GAAS/C,EAAK,SAASA,EAAK,SAAS,OAAS,CAAC,CAAC,EACxDD,GAASoD,IAAK4mB,EAAK,SAAW,CAAC,MAAAhqB,EAAO,IAAAoD,CAAG,GAC7C2mB,EAAa,KAAKC,CAAI,CACvB,CAGD,MAAMxlB,EAAS,CACb,KAAM,UACN,QAAS,QACT,WAAY,CAAE,EACd,SAAUD,EAAM,KAAKwlB,EAAc,EAAI,CACxC,EACD,OAAAxlB,EAAM,MAAMtE,EAAMuE,CAAM,EACjBD,EAAM,UAAUtE,EAAMuE,CAAM,CACrC,CCpCO,SAASylB,GAAS1lB,EAAOtE,EAAM2D,EAAQ,CAC5C,MAAMokB,EAAWpkB,EAASA,EAAO,SAAW,OAGtC8T,GADWsQ,EAAWA,EAAS,QAAQ/nB,CAAI,EAAI,KACxB,EAAI,KAAO,KAElCiqB,EAAQtmB,GAAUA,EAAO,OAAS,QAAUA,EAAO,MAAQ,OAC3DyjB,EAAS6C,EAAQA,EAAM,OAASjqB,EAAK,SAAS,OACpD,IAAIkqB,EAAY,GAEhB,MAAMC,EAAQ,CAAE,EAEhB,KAAO,EAAED,EAAY9C,GAAQ,CAE3B,MAAMgD,EAAOpqB,EAAK,SAASkqB,CAAS,EAE9BrtB,EAAa,CAAE,EACfoJ,EAAagkB,EAAQA,EAAMC,CAAS,EAAI,OAE1CjkB,IACFpJ,EAAW,MAAQoJ,GAIrB,IAAI1B,EAAS,CAAC,KAAM,UAAW,QAAAkT,EAAS,WAAA5a,EAAY,SAAU,EAAE,EAE5DutB,IACF7lB,EAAO,SAAWD,EAAM,IAAI8lB,CAAI,EAChC9lB,EAAM,MAAM8lB,EAAM7lB,CAAM,EACxBA,EAASD,EAAM,UAAU8lB,EAAM7lB,CAAM,GAGvC4lB,EAAM,KAAK5lB,CAAM,CAClB,CAGD,MAAMA,EAAS,CACb,KAAM,UACN,QAAS,KACT,WAAY,CAAE,EACd,SAAUD,EAAM,KAAK6lB,EAAO,EAAI,CACjC,EACD,OAAA7lB,EAAM,MAAMtE,EAAMuE,CAAM,EACjBD,EAAM,UAAUtE,EAAMuE,CAAM,CACrC,CCjDO,SAAS8lB,GAAU/lB,EAAOtE,EAAM,CAIrC,MAAMuE,EAAS,CACb,KAAM,UACN,QAAS,KACT,WAAY,CAAE,EACd,SAAUD,EAAM,IAAItE,CAAI,CACzB,EACD,OAAAsE,EAAM,MAAMtE,EAAMuE,CAAM,EACjBD,EAAM,UAAUtE,EAAMuE,CAAM,CACrC,CC/BA,MAAM+lB,GAAM,EACNlvB,GAAQ,GAWP,SAASmvB,GAAUvvB,EAAO,CAC/B,MAAMwvB,EAAS,OAAOxvB,CAAK,EACrBkoB,EAAS,YACf,IAAI7iB,EAAQ6iB,EAAO,KAAKsH,CAAM,EAC1BC,EAAO,EAEX,MAAM7qB,EAAQ,CAAE,EAEhB,KAAOS,GACLT,EAAM,KACJ8qB,GAASF,EAAO,MAAMC,EAAMpqB,EAAM,KAAK,EAAGoqB,EAAO,EAAG,EAAI,EACxDpqB,EAAM,CAAC,CACR,EAEDoqB,EAAOpqB,EAAM,MAAQA,EAAM,CAAC,EAAE,OAC9BA,EAAQ6iB,EAAO,KAAKsH,CAAM,EAG5B,OAAA5qB,EAAM,KAAK8qB,GAASF,EAAO,MAAMC,CAAI,EAAGA,EAAO,EAAG,EAAK,CAAC,EAEjD7qB,EAAM,KAAK,EAAE,CACtB,CAYA,SAAS8qB,GAAS1vB,EAAO+E,EAAOoD,EAAK,CACnC,IAAIof,EAAa,EACbE,EAAWznB,EAAM,OAErB,GAAI+E,EAAO,CACT,IAAI8I,EAAO7N,EAAM,YAAYunB,CAAU,EAEvC,KAAO1Z,IAASyhB,IAAOzhB,IAASzN,IAC9BmnB,IACA1Z,EAAO7N,EAAM,YAAYunB,CAAU,CAEtC,CAED,GAAIpf,EAAK,CACP,IAAI0F,EAAO7N,EAAM,YAAYynB,EAAW,CAAC,EAEzC,KAAO5Z,IAASyhB,IAAOzhB,IAASzN,IAC9BqnB,IACA5Z,EAAO7N,EAAM,YAAYynB,EAAW,CAAC,CAExC,CAED,OAAOA,EAAWF,EAAavnB,EAAM,MAAMunB,EAAYE,CAAQ,EAAI,EACrE,CCjDO,SAAS3d,GAAKR,EAAOtE,EAAM,CAEhC,MAAMuE,EAAS,CAAC,KAAM,OAAQ,MAAOgmB,GAAU,OAAOvqB,EAAK,KAAK,CAAC,CAAC,EAClE,OAAAsE,EAAM,MAAMtE,EAAMuE,CAAM,EACjBD,EAAM,UAAUtE,EAAMuE,CAAM,CACrC,CCLO,SAASuY,GAAcxY,EAAOtE,EAAM,CAEzC,MAAMuE,EAAS,CACb,KAAM,UACN,QAAS,KACT,WAAY,CAAE,EACd,SAAU,CAAE,CACb,EACD,OAAAD,EAAM,MAAMtE,EAAMuE,CAAM,EACjBD,EAAM,UAAUtE,EAAMuE,CAAM,CACrC,CCAO,MAAMomB,GAAW,CACxB,WAAErC,GACA,MAAOhE,GACT,KAAEzb,GACA,OAAQ0f,GACV,SAAElE,GACF,kBAAEmE,GACF,QAAErK,GACF,KAAE9gB,GACF,eAAE8rB,GACF,MAAE5E,GACF,WAAE6E,GACF,cAAEC,GACF,KAAEnF,GACF,SAAEM,GACF,KAAEzc,GACF,UAAEqW,GAEF,KAAEvZ,GACF,OAAE+f,GACA,MAAA+E,GACA,UAAAU,GACA,SAAAL,GACF,KAAEllB,GACF,cAAEgY,GACA,KAAM8N,GACN,KAAMA,GACN,WAAYA,GACZ,mBAAoBA,EACtB,EAGA,SAASA,IAAS,CAElB,CC/DO,MAAMC,GAAa,GACbC,GAAa,EACbC,GAAa,EACbC,GAAa,EACbC,GAAa,EACbC,GAAa,EACbC,GAAa,EACbC,GAAa,EACbC,GAAa,EACbC,GAAa,ECFpBC,GAAM,OAAO,MAAS,SAAW,KAAO,WAExCC,GAAe,CAACC,EAAGxuB,IAAM,CAC7B,MAAMyuB,EAAK,CAACC,EAAKnvB,KACfivB,EAAE,IAAIjvB,EAAOmvB,CAAG,EACTA,GAGHC,EAASpvB,GAAS,CACtB,GAAIivB,EAAE,IAAIjvB,CAAK,EACb,OAAOivB,EAAE,IAAIjvB,CAAK,EAEpB,KAAM,CAAC0G,EAAMlI,CAAK,EAAIiC,EAAET,CAAK,EAC7B,OAAQ0G,EAAI,CACV,KAAK4nB,GACL,KAAKD,GACH,OAAOa,EAAG1wB,EAAOwB,CAAK,EACxB,KAAKuuB,GAAO,CACV,MAAMc,EAAMH,EAAG,CAAE,EAAElvB,CAAK,EACxB,UAAWA,KAASxB,EAClB6wB,EAAI,KAAKD,EAAOpvB,CAAK,CAAC,EACxB,OAAOqvB,CACR,CACD,KAAKb,GAAQ,CACX,MAAMc,EAASJ,EAAG,CAAE,EAAElvB,CAAK,EAC3B,SAAW,CAACG,EAAKH,CAAK,IAAKxB,EACzB8wB,EAAOF,EAAOjvB,CAAG,CAAC,EAAIivB,EAAOpvB,CAAK,EACpC,OAAOsvB,CACR,CACD,KAAKb,GACH,OAAOS,EAAG,IAAI,KAAK1wB,CAAK,EAAGwB,CAAK,EAClC,KAAK0uB,GAAQ,CACX,KAAM,CAAC,OAAAV,EAAQ,MAAAuB,CAAK,EAAI/wB,EACxB,OAAO0wB,EAAG,IAAI,OAAOlB,EAAQuB,CAAK,EAAGvvB,CAAK,CAC3C,CACD,KAAK2uB,GAAK,CACR,MAAMrJ,EAAM4J,EAAG,IAAI,IAAKlvB,CAAK,EAC7B,SAAW,CAACG,EAAKH,CAAK,IAAKxB,EACzB8mB,EAAI,IAAI8J,EAAOjvB,CAAG,EAAGivB,EAAOpvB,CAAK,CAAC,EACpC,OAAOslB,CACR,CACD,KAAKsJ,GAAK,CACR,MAAMY,EAAMN,EAAG,IAAI,IAAKlvB,CAAK,EAC7B,UAAWA,KAASxB,EAClBgxB,EAAI,IAAIJ,EAAOpvB,CAAK,CAAC,EACvB,OAAOwvB,CACR,CACD,KAAKX,GAAO,CACV,KAAM,CAAC,KAAA1wB,EAAM,QAAAiM,CAAO,EAAI5L,EACxB,OAAO0wB,EAAG,IAAIH,GAAI5wB,CAAI,EAAEiM,CAAO,EAAGpK,CAAK,CACxC,CACD,KAAK8uB,GACH,OAAOI,EAAG,OAAO1wB,CAAK,EAAGwB,CAAK,EAChC,IAAK,SACH,OAAOkvB,EAAG,OAAO,OAAO1wB,CAAK,CAAC,EAAGwB,CAAK,EACxC,IAAK,cACH,OAAOkvB,EAAG,IAAI,WAAW1wB,CAAK,EAAE,OAAQA,CAAK,EAC/C,IAAK,WAAY,CACf,KAAM,CAAE,OAAAoc,CAAQ,EAAG,IAAI,WAAWpc,CAAK,EACvC,OAAO0wB,EAAG,IAAI,SAAStU,CAAM,EAAGpc,CAAK,CACtC,CACF,CACD,OAAO0wB,EAAG,IAAIH,GAAIroB,CAAI,EAAElI,CAAK,EAAGwB,CAAK,CACzC,EAEE,OAAOovB,CACT,EAWaK,GAAcC,GAAcV,GAAa,IAAI,IAAKU,CAAU,EAAE,CAAC,EC7EtEC,GAAQ,GAER,CAAC,SAAA3kB,EAAQ,EAAI,GACb,CAAC,KAAA4kB,EAAI,EAAI,OAETC,GAASrxB,GAAS,CACtB,MAAMkI,EAAO,OAAOlI,EACpB,GAAIkI,IAAS,UAAY,CAAClI,EACxB,MAAO,CAAC8vB,GAAW5nB,CAAI,EAEzB,MAAMopB,EAAW9kB,GAAS,KAAKxM,CAAK,EAAE,MAAM,EAAG,EAAE,EACjD,OAAQsxB,EAAQ,CACd,IAAK,QACH,MAAO,CAACvB,GAAOoB,EAAK,EACtB,IAAK,SACH,MAAO,CAACnB,GAAQmB,EAAK,EACvB,IAAK,OACH,MAAO,CAAClB,GAAMkB,EAAK,EACrB,IAAK,SACH,MAAO,CAACjB,GAAQiB,EAAK,EACvB,IAAK,MACH,MAAO,CAAChB,GAAKgB,EAAK,EACpB,IAAK,MACH,MAAO,CAACf,GAAKe,EAAK,EACpB,IAAK,WACH,MAAO,CAACpB,GAAOuB,CAAQ,CAC1B,CAED,OAAIA,EAAS,SAAS,OAAO,EACpB,CAACvB,GAAOuB,CAAQ,EAErBA,EAAS,SAAS,OAAO,EACpB,CAACjB,GAAOiB,CAAQ,EAElB,CAACtB,GAAQsB,CAAQ,CAC1B,EAEMC,GAAa,CAAC,CAACC,EAAMtpB,CAAI,IAC7BspB,IAAS1B,KACR5nB,IAAS,YAAcA,IAAS,UAG7BupB,GAAa,CAACC,EAAQC,EAAMlB,EAAGxuB,IAAM,CAEzC,MAAMyuB,EAAK,CAACC,EAAK3wB,IAAU,CACzB,MAAMwB,EAAQS,EAAE,KAAK0uB,CAAG,EAAI,EAC5B,OAAAF,EAAE,IAAIzwB,EAAOwB,CAAK,EACXA,CACX,EAEQowB,EAAO5xB,GAAS,CACpB,GAAIywB,EAAE,IAAIzwB,CAAK,EACb,OAAOywB,EAAE,IAAIzwB,CAAK,EAEpB,GAAI,CAACwxB,EAAMtpB,CAAI,EAAImpB,GAAOrxB,CAAK,EAC/B,OAAQwxB,EAAI,CACV,KAAK1B,GAAW,CACd,IAAI9d,EAAQhS,EACZ,OAAQkI,EAAI,CACV,IAAK,SACHspB,EAAOlB,GACPte,EAAQhS,EAAM,WACd,MACF,IAAK,WACL,IAAK,SACH,GAAI0xB,EACF,MAAM,IAAI,UAAU,uBAAyBxpB,CAAI,EACnD8J,EAAQ,KACR,MACF,IAAK,YACH,OAAO0e,EAAG,CAACb,EAAI,EAAG7vB,CAAK,CAC1B,CACD,OAAO0wB,EAAG,CAACc,EAAMxf,CAAK,EAAGhS,CAAK,CAC/B,CACD,KAAK+vB,GAAO,CACV,GAAI7nB,EAAM,CACR,IAAIwmB,EAAS1uB,EACb,OAAIkI,IAAS,WACXwmB,EAAS,IAAI,WAAW1uB,EAAM,MAAM,EAE7BkI,IAAS,gBAChBwmB,EAAS,IAAI,WAAW1uB,CAAK,GAExB0wB,EAAG,CAACxoB,EAAM,CAAC,GAAGwmB,CAAM,CAAC,EAAG1uB,CAAK,CACrC,CAED,MAAM6wB,EAAM,CAAA,EACNrvB,EAAQkvB,EAAG,CAACc,EAAMX,CAAG,EAAG7wB,CAAK,EACnC,UAAWgS,KAAShS,EAClB6wB,EAAI,KAAKe,EAAK5f,CAAK,CAAC,EACtB,OAAOxQ,CACR,CACD,KAAKwuB,GAAQ,CACX,GAAI9nB,EACF,OAAQA,EAAI,CACV,IAAK,SACH,OAAOwoB,EAAG,CAACxoB,EAAMlI,EAAM,SAAU,CAAA,EAAGA,CAAK,EAC3C,IAAK,UACL,IAAK,SACL,IAAK,SACH,OAAO0wB,EAAG,CAACxoB,EAAMlI,EAAM,QAAS,CAAA,EAAGA,CAAK,CAC3C,CAGH,GAAI2xB,GAAS,WAAY3xB,EACvB,OAAO4xB,EAAK5xB,EAAM,OAAM,CAAE,EAE5B,MAAM6xB,EAAU,CAAA,EACVrwB,EAAQkvB,EAAG,CAACc,EAAMK,CAAO,EAAG7xB,CAAK,EACvC,UAAW2B,KAAOyvB,GAAKpxB,CAAK,GACtB0xB,GAAU,CAACH,GAAWF,GAAOrxB,EAAM2B,CAAG,CAAC,CAAC,IAC1CkwB,EAAQ,KAAK,CAACD,EAAKjwB,CAAG,EAAGiwB,EAAK5xB,EAAM2B,CAAG,CAAC,CAAC,CAAC,EAE9C,OAAOH,CACR,CACD,KAAKyuB,GACH,OAAOS,EAAG,CAACc,EAAMxxB,EAAM,YAAa,CAAA,EAAGA,CAAK,EAC9C,KAAKkwB,GAAQ,CACX,KAAM,CAAC,OAAAV,EAAQ,MAAAuB,CAAK,EAAI/wB,EACxB,OAAO0wB,EAAG,CAACc,EAAM,CAAC,OAAAhC,EAAQ,MAAAuB,CAAK,CAAC,EAAG/wB,CAAK,CACzC,CACD,KAAKmwB,GAAK,CACR,MAAM0B,EAAU,CAAA,EACVrwB,EAAQkvB,EAAG,CAACc,EAAMK,CAAO,EAAG7xB,CAAK,EACvC,SAAW,CAAC2B,EAAKqQ,CAAK,IAAKhS,GACrB0xB,GAAU,EAAEH,GAAWF,GAAO1vB,CAAG,CAAC,GAAK4vB,GAAWF,GAAOrf,CAAK,CAAC,KACjE6f,EAAQ,KAAK,CAACD,EAAKjwB,CAAG,EAAGiwB,EAAK5f,CAAK,CAAC,CAAC,EAEzC,OAAOxQ,CACR,CACD,KAAK4uB,GAAK,CACR,MAAMyB,EAAU,CAAA,EACVrwB,EAAQkvB,EAAG,CAACc,EAAMK,CAAO,EAAG7xB,CAAK,EACvC,UAAWgS,KAAShS,GACd0xB,GAAU,CAACH,GAAWF,GAAOrf,CAAK,CAAC,IACrC6f,EAAQ,KAAKD,EAAK5f,CAAK,CAAC,EAE5B,OAAOxQ,CACR,CACF,CAED,KAAM,CAAC,QAAAoK,CAAO,EAAI5L,EAClB,OAAO0wB,EAAG,CAACc,EAAM,CAAC,KAAMtpB,EAAM,QAAA0D,CAAO,CAAC,EAAG5L,CAAK,CAClD,EAEE,OAAO4xB,CACT,EAccE,GAAY,CAAC9xB,EAAO,CAAC,KAAA2xB,EAAM,MAAAI,CAAK,EAAI,KAAO,CACvD,MAAM9vB,EAAI,CAAA,EACV,OAAOwvB,GAAW,EAAEE,GAAQI,GAAQ,CAAC,CAACJ,EAAM,IAAI,IAAK1vB,CAAC,EAAEjC,CAAK,EAAGiC,CAClE,EC3Je+vB,GAAA,OAAO,iBAAoB,WAExC,CAACC,EAAK3yB,IACJA,IAAY,SAAUA,GAAW,UAAWA,GAC1C2xB,GAAYa,GAAUG,EAAK3yB,CAAO,CAAC,EAAI,gBAAgB2yB,CAAG,EAE9D,CAACA,EAAK3yB,IAAY2xB,GAAYa,GAAUG,EAAK3yB,CAAO,CAAC,EC2DhD,SAAS4yB,GAA2BjwB,EAAGkwB,EAAkB,CAE9D,MAAM5oB,EAAS,CAAC,CAAC,KAAM,OAAQ,MAAO,GAAG,CAAC,EAE1C,OAAI4oB,EAAmB,GACrB5oB,EAAO,KAAK,CACV,KAAM,UACN,QAAS,MACT,WAAY,CAAE,EACd,SAAU,CAAC,CAAC,KAAM,OAAQ,MAAO,OAAO4oB,CAAgB,CAAC,CAAC,CAChE,CAAK,EAGI5oB,CACT,CAaO,SAAS6oB,GAAyBC,EAAgBF,EAAkB,CACzE,MACE,sBACCE,EAAiB,IACjBF,EAAmB,EAAI,IAAMA,EAAmB,GAErD,CAWO,SAASG,GAAOhpB,EAAO,CAC5B,MAAMmkB,EACJ,OAAOnkB,EAAM,QAAQ,eAAkB,SACnCA,EAAM,QAAQ,cACd,gBACAipB,EACJjpB,EAAM,QAAQ,qBAAuB4oB,GACjCM,EACJlpB,EAAM,QAAQ,mBAAqB8oB,GAC/BK,EAAgBnpB,EAAM,QAAQ,eAAiB,YAC/CopB,EAAuBppB,EAAM,QAAQ,sBAAwB,KAC7DqpB,EAA0BrpB,EAAM,QAAQ,yBAA2B,CACvE,UAAW,CAAC,SAAS,CACtB,EAEKspB,EAAY,CAAE,EACpB,IAAIP,EAAiB,GAErB,KAAO,EAAEA,EAAiB/oB,EAAM,cAAc,QAAQ,CACpD,MAAM/I,EAAa+I,EAAM,aAAa,IACpCA,EAAM,cAAc+oB,CAAc,CACnC,EAED,GAAI,CAAC9xB,EACH,SAGF,MAAMqP,EAAUtG,EAAM,IAAI/I,CAAU,EAC9BmtB,EAAK,OAAOntB,EAAW,UAAU,EAAE,YAAa,EAChDotB,EAASze,GAAawe,EAAG,YAAW,CAAE,EAC5C,IAAIyE,EAAmB,EAEvB,MAAMU,EAAiB,CAAE,EACnBC,EAASxpB,EAAM,eAAe,IAAIokB,CAAE,EAG1C,KAAOoF,IAAW,QAAa,EAAEX,GAAoBW,GAAQ,CACvDD,EAAe,OAAS,GAC1BA,EAAe,KAAK,CAAC,KAAM,OAAQ,MAAO,GAAG,CAAC,EAGhD,IAAI1oB,EACF,OAAOooB,GAAwB,SAC3BA,EACAA,EAAoBF,EAAgBF,CAAgB,EAEtD,OAAOhoB,GAAa,WACtBA,EAAW,CAAC,KAAM,OAAQ,MAAOA,CAAQ,GAG3C0oB,EAAe,KAAK,CAClB,KAAM,UACN,QAAS,IACT,WAAY,CACV,KACE,IACApF,EACA,SACAE,GACCwE,EAAmB,EAAI,IAAMA,EAAmB,IACnD,oBAAqB,GACrB,UACE,OAAOK,GAAsB,SACzBA,EACAA,EAAkBH,EAAgBF,CAAgB,EACxD,UAAW,CAAC,uBAAuB,CACpC,EACD,SAAU,MAAM,QAAQhoB,CAAQ,EAAIA,EAAW,CAACA,CAAQ,CAChE,CAAO,CACF,CAED,MAAMoL,EAAO3F,EAAQA,EAAQ,OAAS,CAAC,EAEvC,GAAI2F,GAAQA,EAAK,OAAS,WAAaA,EAAK,UAAY,IAAK,CAC3D,MAAMwd,EAAWxd,EAAK,SAASA,EAAK,SAAS,OAAS,CAAC,EACnDwd,GAAYA,EAAS,OAAS,OAChCA,EAAS,OAAS,IAElBxd,EAAK,SAAS,KAAK,CAAC,KAAM,OAAQ,MAAO,GAAG,CAAC,EAG/CA,EAAK,SAAS,KAAK,GAAGsd,CAAc,CAC1C,MACMjjB,EAAQ,KAAK,GAAGijB,CAAc,EAIhC,MAAMrJ,EAAW,CACf,KAAM,UACN,QAAS,KACT,WAAY,CAAC,GAAIiE,EAAgB,MAAQE,CAAM,EAC/C,SAAUrkB,EAAM,KAAKsG,EAAS,EAAI,CACnC,EAEDtG,EAAM,MAAM/I,EAAYipB,CAAQ,EAEhCoJ,EAAU,KAAKpJ,CAAQ,CACxB,CAED,GAAIoJ,EAAU,SAAW,EAIzB,MAAO,CACL,KAAM,UACN,QAAS,UACT,WAAY,CAAC,cAAe,GAAM,UAAW,CAAC,WAAW,CAAC,EAC1D,SAAU,CACR,CACE,KAAM,UACN,QAASF,EACT,WAAY,CACV,GAAGM,GAAgBL,CAAuB,EAC1C,GAAI,gBACL,EACD,SAAU,CAAC,CAAC,KAAM,OAAQ,MAAOF,CAAa,CAAC,CAChD,EACD,CAAC,KAAM,OAAQ,MAAO;AAAA,CAAI,EAC1B,CACE,KAAM,UACN,QAAS,KACT,WAAY,CAAE,EACd,SAAUnpB,EAAM,KAAKspB,EAAW,EAAI,CACrC,EACD,CAAC,KAAM,OAAQ,MAAO;AAAA,CAAI,CAC3B,CACF,CACH,CChHO,MAAMK,GAgBT,SAAUre,EAAM,CACd,GAAIA,GAAS,KACX,OAAOpF,GAGT,GAAI,OAAOoF,GAAS,WAClB,OAAOse,GAAYte,CAAI,EAGzB,GAAI,OAAOA,GAAS,SAClB,OAAO,MAAM,QAAQA,CAAI,EAAIue,GAAWve,CAAI,EAAIwe,GAAaxe,CAAI,EAGnE,GAAI,OAAOA,GAAS,SAClB,OAAOye,GAAYze,CAAI,EAGzB,MAAM,IAAI,MAAM,8CAA8C,CAC/D,EAOL,SAASue,GAAWG,EAAO,CAEzB,MAAMlyB,EAAS,CAAE,EACjB,IAAII,EAAQ,GAEZ,KAAO,EAAEA,EAAQ8xB,EAAM,QACrBlyB,EAAOI,CAAK,EAAIyxB,GAAQK,EAAM9xB,CAAK,CAAC,EAGtC,OAAO0xB,GAAYjB,CAAG,EAMtB,SAASA,KAAO9kB,EAAY,CAC1B,IAAI3L,EAAQ,GAEZ,KAAO,EAAEA,EAAQJ,EAAO,QACtB,GAAIA,EAAOI,CAAK,EAAE,MAAM,KAAM2L,CAAU,EAAG,MAAO,GAGpD,MAAO,EACR,CACH,CAQA,SAASimB,GAAa1xB,EAAO,CAC3B,MAAM6xB,EAAwD7xB,EAE9D,OAAOwxB,GAAYvmB,CAAG,EAMtB,SAASA,EAAI3H,EAAM,CACjB,MAAMwuB,EACoBxuB,EAI1B,IAAIrD,EAEJ,IAAKA,KAAOD,EACV,GAAI8xB,EAAa7xB,CAAG,IAAM4xB,EAAc5xB,CAAG,EAAG,MAAO,GAGvD,MAAO,EACR,CACH,CAQA,SAAS0xB,GAAY3xB,EAAO,CAC1B,OAAOwxB,GAAYhrB,CAAI,EAKvB,SAASA,EAAKlD,EAAM,CAClB,OAAOA,GAAQA,EAAK,OAAStD,CAC9B,CACH,CAQA,SAASwxB,GAAYO,EAAc,CACjC,OAAO/xB,EAMP,SAASA,EAAM1B,EAAOwB,EAAOmH,EAAQ,CACnC,MAAO,GACL+qB,GAAe1zB,CAAK,GAClByzB,EAAa,KACX,KACAzzB,EACA,OAAOwB,GAAU,SAAWA,EAAQ,OACpCmH,GAAU,MACX,EAEN,CACH,CAEA,SAAS6G,IAAK,CACZ,MAAO,EACT,CAMA,SAASkkB,GAAe1zB,EAAO,CAC7B,OAAOA,IAAU,MAAQ,OAAOA,GAAU,UAAY,SAAUA,CAClE,CCnEA,MAAMD,GAAQ,CAAE,EAKH4zB,GAAW,GAKXC,GAAO,GAKPC,GAAO,OAiDb,SAASC,GAAa5qB,EAAM0L,EAAMmf,EAASC,EAAS,CAEzD,IAAItyB,EAEA,OAAOkT,GAAS,YAAc,OAAOmf,GAAY,YACnDC,EAAUD,EAEVA,EAAUnf,GAGVlT,EAAQkT,EAGV,MAAMqf,EAAKhB,GAAQvxB,CAAK,EAClBwyB,EAAOF,EAAU,GAAK,EAE5BG,EAAQjrB,EAAM,OAAW,CAAA,CAAE,EAAG,EAO9B,SAASirB,EAAQnvB,EAAMxD,EAAO4yB,EAAS,CACrC,MAAMp0B,EACJgF,GAAQ,OAAOA,GAAS,SAAWA,EAAO,CAAE,EAG9C,GAAI,OAAOhF,EAAM,MAAS,SAAU,CAClC,MAAML,EAEJ,OAAOK,EAAM,SAAY,SACrBA,EAAM,QAER,OAAOA,EAAM,MAAS,SACpBA,EAAM,KACN,OAEN,OAAO,eAAeq0B,EAAO,OAAQ,CACnC,MACE,UAAiBrvB,EAAK,MAAQrF,EAAO,IAAMA,EAAO,IAAM,KAAO,GACzE,CAAO,CACF,CAED,OAAO00B,EAEP,SAASA,GAAQ,CAEf,IAAI9qB,EAASxJ,GAETu0B,EAEArhB,EAEAshB,EAEJ,IAAI,CAAC3f,GAAQqf,EAAGjvB,EAAMxD,EAAO4yB,EAAQA,EAAQ,OAAS,CAAC,GAAK,MAAS,KAEnE7qB,EAASirB,GAAST,EAAQ/uB,EAAMovB,CAAO,CAAC,EAEpC7qB,EAAO,CAAC,IAAMqqB,IAChB,OAAOrqB,EAIX,GAAI,aAAcvE,GAAQA,EAAK,SAAU,CACvC,MAAMyvB,EAA2CzvB,EAEjD,GAAIyvB,EAAa,UAAYlrB,EAAO,CAAC,IAAMsqB,GAIzC,IAHA5gB,GAAU+gB,EAAUS,EAAa,SAAS,OAAS,IAAMP,EACzDK,EAAeH,EAAQ,OAAOK,CAAY,EAEnCxhB,EAAS,IAAMA,EAASwhB,EAAa,SAAS,QAAQ,CAC3D,MAAMpqB,EAAQoqB,EAAa,SAASxhB,CAAM,EAI1C,GAFAqhB,EAAYH,EAAQ9pB,EAAO4I,EAAQshB,CAAY,EAAG,EAE9CD,EAAU,CAAC,IAAMV,GACnB,OAAOU,EAGTrhB,EACE,OAAOqhB,EAAU,CAAC,GAAM,SAAWA,EAAU,CAAC,EAAIrhB,EAASihB,CAC9D,CAEJ,CAED,OAAO3qB,CACR,CACF,CACH,CAUA,SAASirB,GAASx0B,EAAO,CACvB,OAAI,MAAM,QAAQA,CAAK,EACdA,EAGL,OAAOA,GAAU,SACZ,CAAC2zB,GAAU3zB,CAAK,EAGlBA,GAAU,KAA8BD,GAAQ,CAACC,CAAK,CAC/D,CCvHO,SAASq0B,GAAMnrB,EAAMwrB,EAAeC,EAAkBC,EAAc,CAEzE,IAAIZ,EAEApf,EAEAmf,EAGF,OAAOW,GAAkB,YAGzB9f,EAAO,OACPmf,EAAUW,EACVV,EAAUW,IAGV/f,EAAO8f,EAEPX,EAAUY,EACVX,EAAUY,GAGZd,GAAa5qB,EAAM0L,EAAMigB,EAAUb,CAAO,EAM1C,SAASa,EAAS7vB,EAAMovB,EAAS,CAC/B,MAAMzrB,EAASyrB,EAAQA,EAAQ,OAAS,CAAC,EACnC5yB,EAAQmH,EAASA,EAAO,SAAS,QAAQ3D,CAAI,EAAI,OACvD,OAAO+uB,EAAQ/uB,EAAMxD,EAAOmH,CAAM,CACnC,CACH,CCrIA,MAAMC,GAAM,CAAE,EAAC,eAGTlJ,GAAe,CAAE,EAYhB,SAASo1B,GAAY5rB,EAAM5J,EAAS,CACzC,MAAMC,EAAWD,GAAWI,GAEtBq1B,EAAiB,IAAI,IAErBC,EAAe,IAAI,IAEnBC,EAAiB,IAAI,IAIrBtF,EAAW,CAAC,GAAGuF,GAAiB,GAAG31B,EAAS,QAAQ,EAGpD+J,EAAQ,CACZ,IAAAqD,EACA,UAAAwoB,GACA,eAAAJ,EACA,aAAAC,EACA,eAAAC,EACA,cAAe,CAAE,EACrB,SAAItF,EACA,IAAAnmB,EACA,QAASjK,EACT,MAAA61B,GACJ,KAAIC,EACD,EAED,OAAAhB,GAAMnrB,EAAM,SAAUlE,EAAM,CAC1B,GAAIA,EAAK,OAAS,cAAgBA,EAAK,OAAS,qBAAsB,CACpE,MAAM8hB,EAAM9hB,EAAK,OAAS,aAAe+vB,EAAiBC,EACpDtH,EAAK,OAAO1oB,EAAK,UAAU,EAAE,YAAa,EAI3C8hB,EAAI,IAAI4G,CAAE,GAEb5G,EAAI,IAAI4G,EAAI1oB,CAAI,CAEnB,CACL,CAAG,EAEMsE,EAYP,SAASE,EAAIxE,EAAM2D,EAAQ,CACzB,MAAMT,EAAOlD,EAAK,KACZswB,EAAShsB,EAAM,SAASpB,CAAI,EAElC,GAAIU,GAAI,KAAKU,EAAM,SAAUpB,CAAI,GAAKotB,EACpC,OAAOA,EAAOhsB,EAAOtE,EAAM2D,CAAM,EAGnC,GAAIW,EAAM,QAAQ,aAAeA,EAAM,QAAQ,YAAY,SAASpB,CAAI,EAAG,CACzE,GAAI,aAAclD,EAAM,CACtB,KAAM,CAAC,SAAAmF,EAAU,GAAGorB,CAAO,EAAIvwB,EACzBuE,EAASypB,GAAgBuC,CAAO,EAEtC,OAAAhsB,EAAO,SAAWD,EAAM,IAAItE,CAAI,EAEzBuE,CACR,CAGD,OAAOypB,GAAgBhuB,CAAI,CAC5B,CAID,OAFgBsE,EAAM,QAAQ,gBAAkBksB,IAEjClsB,EAAOtE,EAAM2D,CAAM,CACnC,CAUD,SAASgE,EAAIhE,EAAQ,CAEnB,MAAMtJ,EAAS,CAAE,EAEjB,GAAI,aAAcsJ,EAAQ,CACxB,MAAM8sB,EAAQ9sB,EAAO,SACrB,IAAInH,EAAQ,GACZ,KAAO,EAAEA,EAAQi0B,EAAM,QAAQ,CAC7B,MAAMlsB,EAASD,EAAM,IAAImsB,EAAMj0B,CAAK,EAAGmH,CAAM,EAG7C,GAAIY,EAAQ,CACV,GAAI/H,GAASi0B,EAAMj0B,EAAQ,CAAC,EAAE,OAAS,UACjC,CAAC,MAAM,QAAQ+H,CAAM,GAAKA,EAAO,OAAS,SAC5CA,EAAO,MAAQmsB,GAAuBnsB,EAAO,KAAK,GAGhD,CAAC,MAAM,QAAQA,CAAM,GAAKA,EAAO,OAAS,WAAW,CACvD,MAAMqe,EAAOre,EAAO,SAAS,CAAC,EAE1Bqe,GAAQA,EAAK,OAAS,SACxBA,EAAK,MAAQ8N,GAAuB9N,EAAK,KAAK,EAEjD,CAGC,MAAM,QAAQre,CAAM,EACtBlK,EAAO,KAAK,GAAGkK,CAAM,EAErBlK,EAAO,KAAKkK,CAAM,CAErB,CACF,CACF,CAED,OAAOlK,CACR,CACH,CAYA,SAAS+1B,GAAMjpB,EAAME,EAAI,CACnBF,EAAK,WAAUE,EAAG,SAAWvH,GAASqH,CAAI,EAChD,CAcA,SAASgpB,GAAUhpB,EAAME,EAAI,CAE3B,IAAI9C,EAAS8C,EAGb,GAAIF,GAAQA,EAAK,KAAM,CACrB,MAAMwpB,EAAQxpB,EAAK,KAAK,MAClBypB,EAAYzpB,EAAK,KAAK,UACtB0pB,EAAc1pB,EAAK,KAAK,YAE9B,GAAI,OAAOwpB,GAAU,SAGnB,GAAIpsB,EAAO,OAAS,UAClBA,EAAO,QAAUosB,MAMd,CAGH,MAAMxrB,EAAW,aAAcZ,EAASA,EAAO,SAAW,CAACA,CAAM,EACjEA,EAAS,CAAC,KAAM,UAAW,QAASosB,EAAO,WAAY,CAAE,EAAE,SAAAxrB,CAAQ,CACpE,CAGCZ,EAAO,OAAS,WAAassB,GAC/B,OAAO,OAAOtsB,EAAO,WAAYypB,GAAgB6C,CAAW,CAAC,EAI7D,aAActsB,GACdA,EAAO,UACPqsB,IAAc,MACdA,IAAc,SAEdrsB,EAAO,SAAWqsB,EAErB,CAED,OAAOrsB,CACT,CAYA,SAASisB,GAAsBlsB,EAAOtE,EAAM,CAC1C,MAAMoL,EAAOpL,EAAK,MAAQ,CAAE,EAEtBuE,EACJ,UAAWvE,GACX,EAAE4D,GAAI,KAAKwH,EAAM,aAAa,GAAKxH,GAAI,KAAKwH,EAAM,WAAW,GACzD,CAAC,KAAM,OAAQ,MAAOpL,EAAK,KAAK,EAChC,CACE,KAAM,UACN,QAAS,MACT,WAAY,CAAE,EACd,SAAUsE,EAAM,IAAItE,CAAI,CACzB,EAEP,OAAAsE,EAAM,MAAMtE,EAAMuE,CAAM,EACjBD,EAAM,UAAUtE,EAAMuE,CAAM,CACrC,CAcO,SAAS8rB,GAAKI,EAAOlH,EAAO,CAEjC,MAAMhlB,EAAS,CAAE,EACjB,IAAI/H,EAAQ,GAMZ,IAJI+sB,GACFhlB,EAAO,KAAK,CAAC,KAAM,OAAQ,MAAO;AAAA,CAAI,CAAC,EAGlC,EAAE/H,EAAQi0B,EAAM,QACjBj0B,GAAO+H,EAAO,KAAK,CAAC,KAAM,OAAQ,MAAO;AAAA,CAAI,CAAC,EAClDA,EAAO,KAAKksB,EAAMj0B,CAAK,CAAC,EAG1B,OAAI+sB,GAASkH,EAAM,OAAS,GAC1BlsB,EAAO,KAAK,CAAC,KAAM,OAAQ,MAAO;AAAA,CAAI,CAAC,EAGlCA,CACT,CAUA,SAASmsB,GAAuB11B,EAAO,CACrC,IAAIwB,EAAQ,EACRqM,EAAO7N,EAAM,WAAWwB,CAAK,EAEjC,KAAOqM,IAAS,GAAKA,IAAS,IAC5BrM,IACAqM,EAAO7N,EAAM,WAAWwB,CAAK,EAG/B,OAAOxB,EAAM,MAAMwB,CAAK,CAC1B,CCjYO,SAASs0B,GAAO5sB,EAAM5J,EAAS,CACpC,MAAMgK,EAAQwrB,GAAY5rB,EAAM5J,CAAO,EACjC0F,EAAOsE,EAAM,IAAIJ,EAAM,MAAS,EAChC6sB,EAAOzD,GAAOhpB,CAAK,EAEnBC,EAAS,MAAM,QAAQvE,CAAI,EAC7B,CAAC,KAAM,OAAQ,SAAUA,CAAI,EAC7BA,GAAQ,CAAC,KAAM,OAAQ,SAAU,CAAA,CAAE,EAEvC,OAAI+wB,GAKFxsB,EAAO,SAAS,KAAK,CAAC,KAAM,OAAQ,MAAO;AAAA,CAAI,EAAGwsB,CAAI,EAGjDxsB,CACT,CC0Ce,SAASysB,GAAaC,EAAa32B,EAAS,CACzD,OAAI22B,GAAe,QAASA,EAInB,eAAgB/sB,EAAMgtB,EAAM,CAEjC,MAAMC,EACJL,GAAO5sB,EAAM,CAAC,KAAAgtB,EAAM,GAAG52B,CAAO,CAAC,EAEjC,MAAM22B,EAAY,IAAIE,EAAUD,CAAI,CACrC,EAMI,SAAUhtB,EAAMgtB,EAAM,CAM3B,OACEJ,GAAO5sB,EAAM,CAAC,KAAAgtB,EAAM,GAAID,GAAe32B,CAAQ,CAAC,CAEnD,CACH,CCvKO,SAAS82B,GAAKlxB,EAAO,CAC1B,GAAIA,EACF,MAAMA,CAEV,8CCTA,IAAImxB,EAAS,OAAO,UAAU,eAC1BC,EAAQ,OAAO,UAAU,SACzBC,EAAiB,OAAO,eACxBC,EAAO,OAAO,yBAEdC,EAAU,SAAiB5F,EAAK,CACnC,OAAI,OAAO,MAAM,SAAY,WACrB,MAAM,QAAQA,CAAG,EAGlByF,EAAM,KAAKzF,CAAG,IAAM,gBAC5B,EAEI6F,EAAgB,SAAuBC,EAAK,CAC/C,GAAI,CAACA,GAAOL,EAAM,KAAKK,CAAG,IAAM,kBAC/B,MAAO,GAGR,IAAIC,EAAoBP,EAAO,KAAKM,EAAK,aAAa,EAClDE,EAAmBF,EAAI,aAAeA,EAAI,YAAY,WAAaN,EAAO,KAAKM,EAAI,YAAY,UAAW,eAAe,EAE7H,GAAIA,EAAI,aAAe,CAACC,GAAqB,CAACC,EAC7C,MAAO,GAKR,IAAIl1B,EACJ,IAAKA,KAAOg1B,EAAK,CAEjB,OAAO,OAAOh1B,EAAQ,KAAe00B,EAAO,KAAKM,EAAKh1B,CAAG,CAC1D,EAGIm1B,EAAc,SAAqBC,EAAQz3B,EAAS,CACnDi3B,GAAkBj3B,EAAQ,OAAS,YACtCi3B,EAAeQ,EAAQz3B,EAAQ,KAAM,CACpC,WAAY,GACZ,aAAc,GACd,MAAOA,EAAQ,SACf,SAAU,EACb,CAAG,EAEDy3B,EAAOz3B,EAAQ,IAAI,EAAIA,EAAQ,QAEjC,EAGI03B,EAAc,SAAqBL,EAAKh3B,EAAM,CACjD,GAAIA,IAAS,YACZ,GAAK02B,EAAO,KAAKM,EAAKh3B,CAAI,GAEnB,GAAI62B,EAGV,OAAOA,EAAKG,EAAKh3B,CAAI,EAAE,UAJvB,QAQF,OAAOg3B,EAAIh3B,CAAI,CAChB,EAEcs3B,OAAAA,GAAG,SAASA,GAAS,CAClC,IAAI33B,EAASK,EAAMu3B,EAAKC,EAAMC,EAAaC,EACvCN,EAAS,UAAU,CAAC,EACpBlyB,EAAI,EACJunB,EAAS,UAAU,OACnBkL,EAAO,GAaX,IAVI,OAAOP,GAAW,YACrBO,EAAOP,EACPA,EAAS,UAAU,CAAC,GAAK,GAEzBlyB,EAAI,IAEDkyB,GAAU,MAAS,OAAOA,GAAW,UAAY,OAAOA,GAAW,cACtEA,EAAS,CAAA,GAGHlyB,EAAIunB,EAAQ,EAAEvnB,EAGpB,GAFAvF,EAAU,UAAUuF,CAAC,EAEjBvF,GAAW,KAEd,IAAKK,KAAQL,EACZ43B,EAAMF,EAAYD,EAAQp3B,CAAI,EAC9Bw3B,EAAOH,EAAY13B,EAASK,CAAI,EAG5Bo3B,IAAWI,IAEVG,GAAQH,IAAST,EAAcS,CAAI,IAAMC,EAAcX,EAAQU,CAAI,KAClEC,GACHA,EAAc,GACdC,EAAQH,GAAOT,EAAQS,CAAG,EAAIA,EAAM,CAAA,GAEpCG,EAAQH,GAAOR,EAAcQ,CAAG,EAAIA,EAAM,CAAA,EAI3CJ,EAAYC,EAAQ,CAAE,KAAMp3B,EAAM,SAAUs3B,EAAOK,EAAMD,EAAOF,CAAI,CAAG,CAAA,GAG7D,OAAOA,EAAS,KAC1BL,EAAYC,EAAQ,CAAE,KAAMp3B,EAAM,SAAUw3B,CAAI,CAAE,GAQvD,OAAOJ,CACP,iCCpHc,SAASL,GAAc12B,EAAO,CAC5C,GAAI,OAAOA,GAAU,UAAYA,IAAU,KAC1C,MAAO,GAGR,MAAMu3B,EAAY,OAAO,eAAev3B,CAAK,EAC7C,OAAQu3B,IAAc,MAAQA,IAAc,OAAO,WAAa,OAAO,eAAeA,CAAS,IAAM,OAAS,EAAE,OAAO,eAAev3B,IAAU,EAAE,OAAO,YAAYA,EACtK,CC+BO,SAASw3B,IAAS,CAEvB,MAAMC,EAAM,CAAE,EAERC,EAAW,CAAC,IAAAC,EAAK,IAAA5kB,CAAG,EAE1B,OAAO2kB,EAGP,SAASC,KAAOt4B,EAAQ,CACtB,IAAIu4B,EAAkB,GAEtB,MAAMC,EAAWx4B,EAAO,IAAK,EAE7B,GAAI,OAAOw4B,GAAa,WACtB,MAAM,IAAI,UAAU,2CAA6CA,CAAQ,EAG3ExoB,EAAK,KAAM,GAAGhQ,CAAM,EAQpB,SAASgQ,EAAKnK,KAAU4C,EAAQ,CAC9B,MAAMgD,EAAK2sB,EAAI,EAAEG,CAAe,EAChC,IAAIp2B,EAAQ,GAEZ,GAAI0D,EAAO,CACT2yB,EAAS3yB,CAAK,EACd,MACD,CAGD,KAAO,EAAE1D,EAAQnC,EAAO,SAClByI,EAAOtG,CAAK,IAAM,MAAQsG,EAAOtG,CAAK,IAAM,UAC9CsG,EAAOtG,CAAK,EAAInC,EAAOmC,CAAK,GAKhCnC,EAASyI,EAGLgD,EACFuqB,GAAKvqB,EAAIuE,CAAI,EAAE,GAAGvH,CAAM,EAExB+vB,EAAS,KAAM,GAAG/vB,CAAM,CAE3B,CACF,CAGD,SAASiL,EAAI+kB,EAAY,CACvB,GAAI,OAAOA,GAAe,WACxB,MAAM,IAAI,UACR,+CAAiDA,CAClD,EAGH,OAAAL,EAAI,KAAKK,CAAU,EACZJ,CACR,CACH,CAkCO,SAASrC,GAAK0C,EAAYF,EAAU,CAEzC,IAAIvlB,EAEJ,OAAO0lB,EAQP,SAASA,KAAW7qB,EAAY,CAC9B,MAAM8qB,EAAoBF,EAAW,OAAS5qB,EAAW,OAEzD,IAAI5D,EAEA0uB,GACF9qB,EAAW,KAAK+qB,CAAI,EAGtB,GAAI,CACF3uB,EAASwuB,EAAW,MAAM,KAAM5qB,CAAU,CAC3C,OAAQjI,EAAO,CACd,MAAMizB,EAAkCjzB,EAMxC,GAAI+yB,GAAqB3lB,EACvB,MAAM6lB,EAGR,OAAOD,EAAKC,CAAS,CACtB,CAEIF,IACC1uB,GAAUA,EAAO,MAAQ,OAAOA,EAAO,MAAS,WAClDA,EAAO,KAAK6uB,EAAMF,CAAI,EACb3uB,aAAkB,MAC3B2uB,EAAK3uB,CAAM,EAEX6uB,EAAK7uB,CAAM,EAGhB,CAOD,SAAS2uB,EAAKhzB,KAAU4C,EAAQ,CACzBwK,IACHA,EAAS,GACTulB,EAAS3yB,EAAO,GAAG4C,CAAM,EAE5B,CAOD,SAASswB,EAAKp4B,EAAO,CACnBk4B,EAAK,KAAMl4B,CAAK,CACjB,CACH,CC1JO,MAAMq4B,GAAU,CAAC,SAAAC,GAAU,QAAAC,GAAS,QAAAC,GAAS,KAAAC,GAAM,IAAK,GAAG,EAclE,SAASH,GAASI,EAAMF,EAAS,CAC/B,GAAIA,IAAY,QAAa,OAAOA,GAAY,SAC9C,MAAM,IAAI,UAAU,iCAAiC,EAGvDG,GAAWD,CAAI,EACf,IAAI3zB,EAAQ,EACRoD,EAAM,GACN3G,EAAQk3B,EAAK,OAEbE,EAEJ,GACEJ,IAAY,QACZA,EAAQ,SAAW,GACnBA,EAAQ,OAASE,EAAK,OACtB,CACA,KAAOl3B,KACL,GAAIk3B,EAAK,YAAYl3B,CAAK,IAAM,IAG9B,GAAIo3B,EAAc,CAChB7zB,EAAQvD,EAAQ,EAChB,KACD,OACQ2G,EAAM,IAGfywB,EAAe,GACfzwB,EAAM3G,EAAQ,GAIlB,OAAO2G,EAAM,EAAI,GAAKuwB,EAAK,MAAM3zB,EAAOoD,CAAG,CAC5C,CAED,GAAIqwB,IAAYE,EACd,MAAO,GAGT,IAAIG,EAAmB,GACnBC,EAAeN,EAAQ,OAAS,EAEpC,KAAOh3B,KACL,GAAIk3B,EAAK,YAAYl3B,CAAK,IAAM,IAG9B,GAAIo3B,EAAc,CAChB7zB,EAAQvD,EAAQ,EAChB,KACD,OAEGq3B,EAAmB,IAGrBD,EAAe,GACfC,EAAmBr3B,EAAQ,GAGzBs3B,EAAe,KAEbJ,EAAK,YAAYl3B,CAAK,IAAMg3B,EAAQ,YAAYM,GAAc,EAC5DA,EAAe,IAGjB3wB,EAAM3G,IAKRs3B,EAAe,GACf3wB,EAAM0wB,IAMd,OAAI9zB,IAAUoD,EACZA,EAAM0wB,EACG1wB,EAAM,IACfA,EAAMuwB,EAAK,QAGNA,EAAK,MAAM3zB,EAAOoD,CAAG,CAC9B,CAUA,SAASowB,GAAQG,EAAM,CAGrB,GAFAC,GAAWD,CAAI,EAEXA,EAAK,SAAW,EAClB,MAAO,IAGT,IAAIvwB,EAAM,GACN3G,EAAQk3B,EAAK,OAEbK,EAGJ,KAAO,EAAEv3B,GACP,GAAIk3B,EAAK,YAAYl3B,CAAK,IAAM,IAC9B,GAAIu3B,EAAgB,CAClB5wB,EAAM3G,EACN,KACD,OACSu3B,IAEVA,EAAiB,IAIrB,OAAO5wB,EAAM,EACTuwB,EAAK,YAAY,CAAC,IAAM,GACtB,IACA,IACFvwB,IAAQ,GAAKuwB,EAAK,YAAY,CAAC,IAAM,GACnC,KACAA,EAAK,MAAM,EAAGvwB,CAAG,CACzB,CAUA,SAASqwB,GAAQE,EAAM,CACrBC,GAAWD,CAAI,EAEf,IAAIl3B,EAAQk3B,EAAK,OAEbvwB,EAAM,GACN6wB,EAAY,EACZC,EAAW,GAGXC,EAAc,EAEdH,EAEJ,KAAOv3B,KAAS,CACd,MAAMqM,EAAO6qB,EAAK,YAAYl3B,CAAK,EAEnC,GAAIqM,IAAS,GAAc,CAGzB,GAAIkrB,EAAgB,CAClBC,EAAYx3B,EAAQ,EACpB,KACD,CAED,QACD,CAEG2G,EAAM,IAGR4wB,EAAiB,GACjB5wB,EAAM3G,EAAQ,GAGZqM,IAAS,GAEPorB,EAAW,EACbA,EAAWz3B,EACF03B,IAAgB,IACzBA,EAAc,GAEPD,EAAW,KAGpBC,EAAc,GAEjB,CAED,OACED,EAAW,GACX9wB,EAAM,GAEN+wB,IAAgB,GAEfA,IAAgB,GAAKD,IAAa9wB,EAAM,GAAK8wB,IAAaD,EAAY,EAEhE,GAGFN,EAAK,MAAMO,EAAU9wB,CAAG,CACjC,CAUA,SAASswB,MAAQU,EAAU,CACzB,IAAI33B,EAAQ,GAER43B,EAEJ,KAAO,EAAE53B,EAAQ23B,EAAS,QACxBR,GAAWQ,EAAS33B,CAAK,CAAC,EAEtB23B,EAAS33B,CAAK,IAChB43B,EACEA,IAAW,OAAYD,EAAS33B,CAAK,EAAI43B,EAAS,IAAMD,EAAS33B,CAAK,GAI5E,OAAO43B,IAAW,OAAY,IAAM54B,GAAU44B,CAAM,CACtD,CAYA,SAAS54B,GAAUk4B,EAAM,CACvBC,GAAWD,CAAI,EAEf,MAAMW,EAAWX,EAAK,YAAY,CAAC,IAAM,GAGzC,IAAI14B,EAAQs5B,GAAgBZ,EAAM,CAACW,CAAQ,EAE3C,OAAIr5B,EAAM,SAAW,GAAK,CAACq5B,IACzBr5B,EAAQ,KAGNA,EAAM,OAAS,GAAK04B,EAAK,YAAYA,EAAK,OAAS,CAAC,IAAM,KAC5D14B,GAAS,KAGJq5B,EAAW,IAAMr5B,EAAQA,CAClC,CAYA,SAASs5B,GAAgBZ,EAAMa,EAAgB,CAC7C,IAAIhwB,EAAS,GACTiwB,EAAoB,EACpBC,EAAY,GACZC,EAAO,EACPl4B,EAAQ,GAERqM,EAEA8rB,EAEJ,KAAO,EAAEn4B,GAASk3B,EAAK,QAAQ,CAC7B,GAAIl3B,EAAQk3B,EAAK,OACf7qB,EAAO6qB,EAAK,YAAYl3B,CAAK,MACxB,IAAIqM,IAAS,GAClB,MAEAA,EAAO,GAGT,GAAIA,IAAS,GAAc,CACzB,GAAI,EAAA4rB,IAAcj4B,EAAQ,GAAKk4B,IAAS,GAEjC,GAAID,IAAcj4B,EAAQ,GAAKk4B,IAAS,EAAG,CAChD,GACEnwB,EAAO,OAAS,GAChBiwB,IAAsB,GACtBjwB,EAAO,YAAYA,EAAO,OAAS,CAAC,IAAM,IAC1CA,EAAO,YAAYA,EAAO,OAAS,CAAC,IAAM,IAE1C,GAAIA,EAAO,OAAS,GAGlB,GAFAowB,EAAiBpwB,EAAO,YAAY,GAAG,EAEnCowB,IAAmBpwB,EAAO,OAAS,EAAG,CACpCowB,EAAiB,GACnBpwB,EAAS,GACTiwB,EAAoB,IAEpBjwB,EAASA,EAAO,MAAM,EAAGowB,CAAc,EACvCH,EAAoBjwB,EAAO,OAAS,EAAIA,EAAO,YAAY,GAAG,GAGhEkwB,EAAYj4B,EACZk4B,EAAO,EACP,QACD,UACQnwB,EAAO,OAAS,EAAG,CAC5BA,EAAS,GACTiwB,EAAoB,EACpBC,EAAYj4B,EACZk4B,EAAO,EACP,QACD,EAGCH,IACFhwB,EAASA,EAAO,OAAS,EAAIA,EAAS,MAAQ,KAC9CiwB,EAAoB,EAE9B,MACYjwB,EAAO,OAAS,EAClBA,GAAU,IAAMmvB,EAAK,MAAMe,EAAY,EAAGj4B,CAAK,EAE/C+H,EAASmvB,EAAK,MAAMe,EAAY,EAAGj4B,CAAK,EAG1Cg4B,EAAoBh4B,EAAQi4B,EAAY,EAG1CA,EAAYj4B,EACZk4B,EAAO,CACR,MAAU7rB,IAAS,IAAgB6rB,EAAO,GACzCA,IAEAA,EAAO,EAEV,CAED,OAAOnwB,CACT,CAUA,SAASovB,GAAWD,EAAM,CACxB,GAAI,OAAOA,GAAS,SAClB,MAAM,IAAI,UACR,mCAAqC,KAAK,UAAUA,CAAI,CACzD,CAEL,CCpaO,MAAMkB,GAAU,CAAC,IAAAC,EAAG,EAE3B,SAASA,IAAM,CACb,MAAO,GACT,CCYO,SAASC,GAAMC,EAAe,CACnC,MAAO,GACLA,IAAkB,MAChB,OAAOA,GAAkB,UACzB,SAAUA,GACVA,EAAc,MACd,aAAcA,GACdA,EAAc,UAEdA,EAAc,OAAS,OAE7B,CClBO,SAASC,GAAUtB,EAAM,CAC9B,GAAI,OAAOA,GAAS,SAClBA,EAAO,IAAI,IAAIA,CAAI,UACV,CAACoB,GAAMpB,CAAI,EAAG,CAEvB,MAAMxzB,EAAQ,IAAI,UAChB,+EACEwzB,EACA,GACH,EACD,MAAAxzB,EAAM,KAAO,uBACPA,CACP,CAED,GAAIwzB,EAAK,WAAa,QAAS,CAE7B,MAAMxzB,EAAQ,IAAI,UAAU,gCAAgC,EAC5D,MAAAA,EAAM,KAAO,yBACPA,CACP,CAED,OAAO+0B,GAAoBvB,CAAI,CACjC,CAUA,SAASuB,GAAoBC,EAAK,CAChC,GAAIA,EAAI,WAAa,GAAI,CAEvB,MAAMh1B,EAAQ,IAAI,UAChB,sDACD,EACD,MAAAA,EAAM,KAAO,4BACPA,CACP,CAED,MAAMi1B,EAAWD,EAAI,SACrB,IAAI14B,EAAQ,GAEZ,KAAO,EAAEA,EAAQ24B,EAAS,QACxB,GACEA,EAAS,YAAY34B,CAAK,IAAM,IAChC24B,EAAS,YAAY34B,EAAQ,CAAC,IAAM,GACpC,CACA,MAAM44B,EAAQD,EAAS,YAAY34B,EAAQ,CAAC,EAC5C,GAAI44B,IAAU,IAAgBA,IAAU,IAAe,CAErD,MAAMl1B,EAAQ,IAAI,UAChB,qDACD,EACD,MAAAA,EAAM,KAAO,4BACPA,CACP,CACF,CAGH,OAAO,mBAAmBi1B,CAAQ,CACpC,CCvDA,MAAME,GAA8B,CAClC,UACA,OACA,WACA,OACA,UACA,SACF,EAEO,MAAMC,EAAM,CAuBjB,YAAYt6B,EAAO,CAEjB,IAAIV,EAECU,EAEM85B,GAAM95B,CAAK,EACpBV,EAAU,CAAC,KAAMU,CAAK,EACb,OAAOA,GAAU,UAAYu6B,GAAav6B,CAAK,EACxDV,EAAU,CAAC,MAAAU,CAAK,EAEhBV,EAAUU,EANVV,EAAU,CAAE,EAkBd,KAAK,IAAM,QAASA,EAAU,GAAKs6B,GAAQ,IAAK,EAUhD,KAAK,KAAO,CAAE,EASd,KAAK,QAAU,CAAE,EAOjB,KAAK,SAAW,CAAE,EAOlB,KAAK,MAYL,KAAK,IAUL,KAAK,OASL,KAAK,OAIL,IAAIp4B,EAAQ,GAEZ,KAAO,EAAEA,EAAQ64B,GAAM,QAAQ,CAC7B,MAAMxW,EAAQwW,GAAM74B,CAAK,EAKvBqiB,KAASvkB,GACTA,EAAQukB,CAAK,IAAM,QACnBvkB,EAAQukB,CAAK,IAAM,OAGnB,KAAKA,CAAK,EAAIA,IAAU,UAAY,CAAC,GAAGvkB,EAAQukB,CAAK,CAAC,EAAIvkB,EAAQukB,CAAK,EAE1E,CAGD,IAAIA,EAGJ,IAAKA,KAASvkB,EAEP+6B,GAAM,SAASxW,CAAK,IAEvB,KAAKA,CAAK,EAAIvkB,EAAQukB,CAAK,EAGhC,CAQD,IAAI,UAAW,CACb,OAAO,OAAO,KAAK,MAAS,SACxBwU,GAAQ,SAAS,KAAK,IAAI,EAC1B,MACL,CAcD,IAAI,SAASC,EAAU,CACrBkC,GAAelC,EAAU,UAAU,EACnCmC,GAAWnC,EAAU,UAAU,EAC/B,KAAK,KAAOD,GAAQ,KAAK,KAAK,SAAW,GAAIC,CAAQ,CACtD,CAQD,IAAI,SAAU,CACZ,OAAO,OAAO,KAAK,MAAS,SACxBD,GAAQ,QAAQ,KAAK,IAAI,EACzB,MACL,CAYD,IAAI,QAAQE,EAAS,CACnBI,GAAW,KAAK,SAAU,SAAS,EACnC,KAAK,KAAON,GAAQ,KAAKE,GAAW,GAAI,KAAK,QAAQ,CACtD,CAQD,IAAI,SAAU,CACZ,OAAO,OAAO,KAAK,MAAS,SACxBF,GAAQ,QAAQ,KAAK,IAAI,EACzB,MACL,CAcD,IAAI,QAAQG,EAAS,CAInB,GAHAiC,GAAWjC,EAAS,SAAS,EAC7BG,GAAW,KAAK,QAAS,SAAS,EAE9BH,EAAS,CACX,GAAIA,EAAQ,YAAY,CAAC,IAAM,GAC7B,MAAM,IAAI,MAAM,+BAA+B,EAGjD,GAAIA,EAAQ,SAAS,IAAK,CAAC,EACzB,MAAM,IAAI,MAAM,wCAAwC,CAE3D,CAED,KAAK,KAAOH,GAAQ,KAAK,KAAK,QAAS,KAAK,MAAQG,GAAW,GAAG,CACnE,CAQD,IAAI,MAAO,CACT,OAAO,KAAK,QAAQ,KAAK,QAAQ,OAAS,CAAC,CAC5C,CAcD,IAAI,KAAKE,EAAM,CACToB,GAAMpB,CAAI,IACZA,EAAOsB,GAAUtB,CAAI,GAGvB8B,GAAe9B,EAAM,MAAM,EAEvB,KAAK,OAASA,GAChB,KAAK,QAAQ,KAAKA,CAAI,CAEzB,CAQD,IAAI,MAAO,CACT,OAAO,OAAO,KAAK,MAAS,SACxBL,GAAQ,SAAS,KAAK,KAAM,KAAK,OAAO,EACxC,MACL,CAcD,IAAI,KAAKqC,EAAM,CACbF,GAAeE,EAAM,MAAM,EAC3BD,GAAWC,EAAM,MAAM,EACvB,KAAK,KAAOrC,GAAQ,KAAK,KAAK,SAAW,GAAIqC,GAAQ,KAAK,SAAW,GAAG,CACzE,CA+DD,KAAKpyB,EAAeC,EAAwBC,EAAQ,CAElD,MAAMoD,EAAU,KAAK,QAAQtD,EAAeC,EAAwBC,CAAM,EAE1E,MAAAoD,EAAQ,MAAQ,GAEVA,CACP,CA4DD,KAAKtD,EAAeC,EAAwBC,EAAQ,CAElD,MAAMoD,EAAU,KAAK,QAAQtD,EAAeC,EAAwBC,CAAM,EAE1E,OAAAoD,EAAQ,MAAQ,OAETA,CACR,CA4DD,QAAQtD,EAAeC,EAAwBC,EAAQ,CACrD,MAAMoD,EAAU,IAAIvD,EAElBC,EACAC,EACAC,CACD,EAED,OAAI,KAAK,OACPoD,EAAQ,KAAO,KAAK,KAAO,IAAMA,EAAQ,KACzCA,EAAQ,KAAO,KAAK,MAGtBA,EAAQ,MAAQ,GAEhB,KAAK,SAAS,KAAKA,CAAO,EAEnBA,CACR,CAeD,SAAS0c,EAAU,CACjB,OAAI,KAAK,QAAU,OACV,GAGL,OAAO,KAAK,OAAU,SACjB,KAAK,MAGE,IAAI,YAAYA,GAAY,MAAS,EACtC,OAAO,KAAK,KAAK,CACjC,CACH,CAYA,SAASmS,GAAWE,EAAMh7B,EAAM,CAC9B,GAAIg7B,GAAQA,EAAK,SAAStC,GAAQ,GAAG,EACnC,MAAM,IAAI,MACR,IAAM14B,EAAO,uCAAyC04B,GAAQ,IAAM,GACrE,CAEL,CAYA,SAASmC,GAAeG,EAAMh7B,EAAM,CAClC,GAAI,CAACg7B,EACH,MAAM,IAAI,MAAM,IAAMh7B,EAAO,mBAAmB,CAEpD,CAYA,SAASg5B,GAAWD,EAAM/4B,EAAM,CAC9B,GAAI,CAAC+4B,EACH,MAAM,IAAI,MAAM,YAAc/4B,EAAO,iCAAiC,CAE1E,CAUA,SAAS46B,GAAav6B,EAAO,CAC3B,MAAO,GACLA,GACE,OAAOA,GAAU,UACjB,eAAgBA,GAChB,eAAgBA,EAEtB,CCloBO,MAAM46B,GAYP,SAAU16B,EAAU,CAGlB,MAAM26B,EAFO,KACO,YAIX,UAEH76B,EAAQ66B,EAAM36B,CAAQ,EAEtB46B,EAAQ,UAAY,CACxB,OAAO96B,EAAM,MAAM86B,EAAO,SAAS,CACpC,EAED,cAAO,eAAeA,EAAOD,CAAK,EAc3BC,CACR,ECiUDlyB,GAAM,CAAE,EAAC,eAeR,MAAMmyB,WAAkBH,EAAiB,CAI9C,aAAc,CAEZ,MAAM,MAAM,EAeZ,KAAK,SAAW,OAYhB,KAAK,OAAS,OAad,KAAK,UAAY,CAAE,EAanB,KAAK,SAAW,OAShB,KAAK,YAAc,GASnB,KAAK,OAAS,OASd,KAAK,UAAY,CAAE,EAUnB,KAAK,OAAS,OASd,KAAK,aAAepD,GAAQ,CAC7B,CAaD,MAAO,CAEL,MAAMvB,EAEF,IAAI8E,GAER,IAAIv5B,EAAQ,GAEZ,KAAO,EAAEA,EAAQ,KAAK,UAAU,QAAQ,CACtC,MAAMw5B,EAAW,KAAK,UAAUx5B,CAAK,EACrCy0B,EAAY,IAAI,GAAG+E,CAAQ,CAC5B,CAED,OAAA/E,EAAY,KAAKgB,GAAO,GAAM,CAAA,EAAI,KAAK,SAAS,CAAC,EAE1ChB,CACR,CA6DD,KAAKt0B,EAAK3B,EAAO,CACf,OAAI,OAAO2B,GAAQ,SAEb,UAAU,SAAW,GACvBs5B,GAAe,OAAQ,KAAK,MAAM,EAClC,KAAK,UAAUt5B,CAAG,EAAI3B,EACf,MAID4I,GAAI,KAAK,KAAK,UAAWjH,CAAG,GAAK,KAAK,UAAUA,CAAG,GAAM,OAI/DA,GACFs5B,GAAe,OAAQ,KAAK,MAAM,EAClC,KAAK,UAAYt5B,EACV,MAIF,KAAK,SACb,CAmBD,QAAS,CACP,GAAI,KAAK,OACP,OAAO,KAMT,MAAM8O,EAAyD,KAE/D,KAAO,EAAE,KAAK,YAAc,KAAK,UAAU,QAAQ,CACjD,KAAM,CAACuqB,EAAU,GAAG17B,CAAO,EAAI,KAAK,UAAU,KAAK,WAAW,EAE9D,GAAIA,EAAQ,CAAC,IAAM,GACjB,SAGEA,EAAQ,CAAC,IAAM,KACjBA,EAAQ,CAAC,EAAI,QAGf,MAAM47B,EAAcF,EAAS,KAAKvqB,EAAM,GAAGnR,CAAO,EAE9C,OAAO47B,GAAgB,YACzB,KAAK,aAAa,IAAIA,CAAW,CAEpC,CAED,YAAK,OAAS,GACd,KAAK,YAAc,OAAO,kBAEnB,IACR,CAgBD,MAAMhF,EAAM,CACV,KAAK,OAAQ,EACb,MAAMiF,EAAWC,GAAMlF,CAAI,EACrBrR,EAAS,KAAK,QAAU,KAAK,OACnC,OAAAwW,GAAa,QAASxW,CAAM,EACrBA,EAAO,OAAOsW,CAAQ,EAAGA,CAAQ,CACzC,CA4CD,QAAQjF,EAAMgC,EAAM,CAClB,MAAMznB,EAAO,KAEb,YAAK,OAAQ,EACb4qB,GAAa,UAAW,KAAK,QAAU,KAAK,MAAM,EAClDC,GAAe,UAAW,KAAK,UAAY,KAAK,QAAQ,EAEjDpD,EAAOqD,EAAS,OAAWrD,CAAI,EAAI,IAAI,QAAQqD,CAAQ,EAQ9D,SAASA,EAAShpB,EAASipB,EAAQ,CACjC,MAAML,EAAWC,GAAMlF,CAAI,EAGrBuF,EAEsBhrB,EAAK,MAAM0qB,CAAQ,EAG/C1qB,EAAK,IAAIgrB,EAAWN,EAAU,SAAUj2B,EAAOgE,EAAMgtB,EAAM,CACzD,GAAIhxB,GAAS,CAACgE,GAAQ,CAACgtB,EACrB,OAAOwF,EAASx2B,CAAK,EAKvB,MAAMy2B,EAEsBzyB,EAGtB0yB,EAAgBnrB,EAAK,UAAUkrB,EAAazF,CAAI,EAElD2F,GAAgBD,CAAa,EAC/B1F,EAAK,MAAQ0F,EAEb1F,EAAK,OAAS0F,EAGhBF,EAASx2B,EAAsDgxB,CAAM,CAC7E,CAAO,EAOD,SAASwF,EAASx2B,EAAOgxB,EAAM,CACzBhxB,GAAS,CAACgxB,EACZsF,EAAOt2B,CAAK,EACHqN,EACTA,EAAQ2jB,CAAI,EAGZgC,EAAK,OAAWhC,CAAI,CAEvB,CACF,CACF,CAiCD,YAAYA,EAAM,CAEhB,IAAI4F,EAAW,GAEXvyB,EAEJ,YAAK,OAAQ,EACb8xB,GAAa,cAAe,KAAK,QAAU,KAAK,MAAM,EACtDC,GAAe,cAAe,KAAK,UAAY,KAAK,QAAQ,EAE5D,KAAK,QAAQpF,EAAMwF,CAAQ,EAC3BK,GAAW,cAAe,UAAWD,CAAQ,EAGtCvyB,EAKP,SAASmyB,EAASx2B,EAAOgxB,EAAM,CAC7B4F,EAAW,GACX1F,GAAKlxB,CAAK,EACVqE,EAAS2sB,CACV,CACF,CAwCD,IAAIhtB,EAAMgtB,EAAMgC,EAAM,CACpB8D,GAAW9yB,CAAI,EACf,KAAK,OAAQ,EAEb,MAAM+yB,EAAe,KAAK,aAE1B,MAAI,CAAC/D,GAAQ,OAAOhC,GAAS,aAC3BgC,EAAOhC,EACPA,EAAO,QAGFgC,EAAOqD,EAAS,OAAWrD,CAAI,EAAI,IAAI,QAAQqD,CAAQ,EAW9D,SAASA,EAAShpB,EAASipB,EAAQ,CAKjC,MAAML,EAAWC,GAAMlF,CAAI,EAC3B+F,EAAa,IAAI/yB,EAAMiyB,EAAUO,CAAQ,EAQzC,SAASA,EAASx2B,EAAOg3B,EAAYhG,EAAM,CACzC,MAAMiG,EAEFD,GAAchzB,EAGdhE,EACFs2B,EAAOt2B,CAAK,EACHqN,EACTA,EAAQ4pB,CAAa,EAGrBjE,EAAK,OAAWiE,EAAejG,CAAI,CAEtC,CACF,CACF,CAmBD,QAAQhtB,EAAMgtB,EAAM,CAElB,IAAI4F,EAAW,GAEXvyB,EAEJ,YAAK,IAAIL,EAAMgtB,EAAMwF,CAAQ,EAE7BK,GAAW,UAAW,MAAOD,CAAQ,EAE9BvyB,EAKP,SAASmyB,EAASx2B,EAAOgE,EAAM,CAC7BktB,GAAKlxB,CAAK,EACVqE,EAASL,EACT4yB,EAAW,EACZ,CACF,CA+BD,UAAU5yB,EAAMgtB,EAAM,CACpB,KAAK,OAAQ,EACb,MAAMiF,EAAWC,GAAMlF,CAAI,EACrBnN,EAAW,KAAK,UAAY,KAAK,SACvC,OAAAuS,GAAe,YAAavS,CAAQ,EACpCiT,GAAW9yB,CAAI,EAER6f,EAAS7f,EAAMiyB,CAAQ,CAC/B,CA2DD,IAAIn7B,KAAUmN,EAAY,CACxB,MAAMivB,EAAY,KAAK,UACjBC,EAAY,KAAK,UAIvB,GAFApB,GAAe,MAAO,KAAK,MAAM,EAE7Bj7B,GAAU,KAEP,GAAI,OAAOA,GAAU,WAC1Bs8B,EAAUt8B,EAAOmN,CAAU,UAClB,OAAOnN,GAAU,SACtB,MAAM,QAAQA,CAAK,EACrBu8B,EAAQv8B,CAAK,EAEbw8B,EAAUx8B,CAAK,MAGjB,OAAM,IAAI,UAAU,+BAAiCA,EAAQ,GAAG,EAGlE,OAAO,KAMP,SAASy8B,EAAIz8B,EAAO,CAClB,GAAI,OAAOA,GAAU,WACnBs8B,EAAUt8B,EAAO,EAAE,UACV,OAAOA,GAAU,SAC1B,GAAI,MAAM,QAAQA,CAAK,EAAG,CACxB,KAAM,CAAC08B,EAAQ,GAAGvvB,CAAU,EACkBnN,EAC9Cs8B,EAAUI,EAAQvvB,CAAU,CACtC,MACUqvB,EAAUx8B,CAAK,MAGjB,OAAM,IAAI,UAAU,+BAAiCA,EAAQ,GAAG,CAEnE,CAMD,SAASw8B,EAAUjzB,EAAQ,CACzB,GAAI,EAAE,YAAaA,IAAW,EAAE,aAAcA,GAC5C,MAAM,IAAI,MACR,4KACD,EAGHgzB,EAAQhzB,EAAO,OAAO,EAElBA,EAAO,WACT8yB,EAAU,SAAWpF,GAAO,GAAMoF,EAAU,SAAU9yB,EAAO,QAAQ,EAExE,CAMD,SAASgzB,EAAQI,EAAS,CACxB,IAAIn7B,EAAQ,GAEZ,GAAIm7B,GAAY,KAET,GAAI,MAAM,QAAQA,CAAO,EAC9B,KAAO,EAAEn7B,EAAQm7B,EAAQ,QAAQ,CAC/B,MAAM78B,EAAQ68B,EAAQn7B,CAAK,EAC3Bi7B,EAAI38B,CAAK,CACV,KAED,OAAM,IAAI,UAAU,oCAAsC68B,EAAU,GAAG,CAE1E,CAOD,SAASL,EAAUI,EAAQvvB,EAAY,CACrC,IAAI3L,EAAQ,GACRo7B,EAAa,GAEjB,KAAO,EAAEp7B,EAAQ46B,EAAU,QACzB,GAAIA,EAAU56B,CAAK,EAAE,CAAC,IAAMk7B,EAAQ,CAClCE,EAAap7B,EACb,KACD,CAGH,GAAIo7B,IAAe,GACjBR,EAAU,KAAK,CAACM,EAAQ,GAAGvvB,CAAU,CAAC,UAI/BA,EAAW,OAAS,EAAG,CAC9B,GAAI,CAAC0vB,EAAS,GAAG55B,CAAI,EAAIkK,EACzB,MAAM2vB,EAAiBV,EAAUQ,CAAU,EAAE,CAAC,EAC1CG,GAAWD,CAAc,GAAKC,GAAWF,CAAO,IAClDA,EAAU5F,GAAO,GAAM6F,EAAgBD,CAAO,GAGhDT,EAAUQ,CAAU,EAAI,CAACF,EAAQG,EAAS,GAAG55B,CAAI,CAClD,CACF,CACF,CACH,CA8BO,MAAM+5B,GAAU,IAAIjC,GAAW,EAAC,OAAQ,EAS/C,SAASM,GAAa17B,EAAMK,EAAO,CACjC,GAAI,OAAOA,GAAU,WACnB,MAAM,IAAI,UAAU,WAAaL,EAAO,oBAAoB,CAEhE,CASA,SAAS27B,GAAe37B,EAAMK,EAAO,CACnC,GAAI,OAAOA,GAAU,WACnB,MAAM,IAAI,UAAU,WAAaL,EAAO,sBAAsB,CAElE,CASA,SAASs7B,GAAet7B,EAAMs9B,EAAQ,CACpC,GAAIA,EACF,MAAM,IAAI,MACR,gBACEt9B,EACA,kHACH,CAEL,CAQA,SAASq8B,GAAWh3B,EAAM,CAGxB,GAAI,CAAC+3B,GAAW/3B,CAAI,GAAK,OAAOA,EAAK,MAAS,SAC5C,MAAM,IAAI,UAAU,uBAAyBA,EAAO,GAAG,CAG3D,CAUA,SAAS+2B,GAAWp8B,EAAMu9B,EAAWpB,EAAU,CAC7C,GAAI,CAACA,EACH,MAAM,IAAI,MACR,IAAMn8B,EAAO,0BAA4Bu9B,EAAY,WACtD,CAEL,CAMA,SAAS9B,GAAMp7B,EAAO,CACpB,OAAOm9B,GAAgBn9B,CAAK,EAAIA,EAAQ,IAAIs6B,GAAMt6B,CAAK,CACzD,CAMA,SAASm9B,GAAgBn9B,EAAO,CAC9B,MAAO,GACLA,GACE,OAAOA,GAAU,UACjB,YAAaA,GACb,aAAcA,EAEpB,CAMA,SAAS67B,GAAgB77B,EAAO,CAC9B,OAAO,OAAOA,GAAU,UAAYu6B,GAAav6B,CAAK,CACxD,CAUA,SAASu6B,GAAav6B,EAAO,CAC3B,MAAO,GACLA,GACE,OAAOA,GAAU,UACjB,eAAgBA,GAChB,eAAgBA,EAEtB,CCtrCA,MAAMo9B,GACJ,oEAGIC,GAAe,CAAE,EAEjBC,GAA2B,CAAC,mBAAoB,EAAI,EACpDC,GAAe,gCAIfC,GAAe,CACnB,CAAC,KAAM,aAAc,GAAI,sCAAsC,EAC/D,CAAC,KAAM,qBAAsB,GAAI,sCAAsC,EACvE,CACE,KAAM,YACN,GAAI,qDACJ,GAAI,cACL,EACD,CACE,KAAM,eACN,GAAI,qDACJ,GAAI,iBACL,EACD,CAAC,KAAM,YAAa,GAAI,kBAAkB,EAC1C,CACE,KAAM,kBACN,GAAI,qDACJ,GAAI,oBACL,EACD,CAAC,KAAM,aAAc,GAAI,sCAAsC,EAC/D,CAAC,KAAM,sBAAuB,GAAI,6BAA6B,EAC/D,CACE,KAAM,mBACN,GAAI,gDACL,EACD,CAAC,KAAM,aAAc,GAAI,mBAAmB,EAC5C,CAAC,KAAM,UAAW,GAAI,kCAAmC,GAAI,eAAe,EAC5E,CAAC,KAAM,eAAgB,GAAI,sBAAsB,EACjD,CAAC,KAAM,YAAa,GAAI,iCAAkC,GAAI,YAAY,EAC1E,CAAC,KAAM,SAAU,GAAI,4BAA6B,GAAI,UAAU,EAChE,CAAC,KAAM,YAAa,GAAI,mBAAmB,EAC3C,CAAC,KAAM,oBAAqB,GAAI,oBAAqB,GAAI,cAAc,EACvE,CAAC,KAAM,mBAAoB,GAAI,oBAAqB,GAAI,cAAc,CACxE,EAcO,SAASC,GAASn+B,EAAS,CAChC,MAAMo+B,EAAYC,GAAgBr+B,CAAO,EACnC42B,EAAO0H,GAAWt+B,CAAO,EAC/B,OAAOu+B,GAAKH,EAAU,QAAQA,EAAU,MAAMxH,CAAI,EAAGA,CAAI,EAAG52B,CAAO,CACrE,CAeO,eAAew+B,GAAcx+B,EAAS,CAC3C,MAAMo+B,EAAYC,GAAgBr+B,CAAO,EACnC42B,EAAO0H,GAAWt+B,CAAO,EACzB4J,EAAO,MAAMw0B,EAAU,IAAIA,EAAU,MAAMxH,CAAI,EAAGA,CAAI,EAC5D,OAAO2H,GAAK30B,EAAM5J,CAAO,CAC3B,CAeO,SAASy+B,GAAcz+B,EAAS,CACrC,MAAMo+B,EAAYC,GAAgBr+B,CAAO,EACnC,CAAC4F,EAAO84B,CAAQ,EAAIC,GAAQ,SACE,MACnC,EACK,CAAC/0B,EAAMg1B,CAAO,EAAID,GAAAA,SAA0C,MAAW,EA8B7E,GA5BAE,GAAS,UACP,UAAY,CACV,IAAIC,EAAY,GAChB,MAAMlI,EAAO0H,GAAWt+B,CAAO,EAE/B,OAAAo+B,EAAU,IAAIA,EAAU,MAAMxH,CAAI,EAAGA,EAAM,SAAUhxB,EAAOgE,EAAM,CAC3Dk1B,IACHJ,EAAS94B,CAAK,EACdg5B,EAAQh1B,CAAI,EAEtB,CAAO,EAMM,UAAY,CACjBk1B,EAAY,EACb,CACF,EACD,CACE9+B,EAAQ,SACRA,EAAQ,cACRA,EAAQ,cACRA,EAAQ,mBACT,CACF,EAEG4F,EAAO,MAAMA,EAEjB,OAAOgE,EAAO20B,GAAK30B,EAAM5J,CAAO,EAAIA,EAAQ,QAC9C,CAUA,SAASq+B,GAAgBr+B,EAAS,CAChC,MAAM++B,EAAgB/+B,EAAQ,eAAiB+9B,GACzCiB,EAAgBh/B,EAAQ,eAAiB+9B,GACzCkB,EAAsBj/B,EAAQ,oBAChC,CAAC,GAAGA,EAAQ,oBAAqB,GAAGg+B,EAAwB,EAC5DA,GAQJ,OANkBN,GAAS,EACxB,IAAI5P,EAAW,EACf,IAAIkR,CAAa,EACjB,IAAItI,GAAcuI,CAAmB,EACrC,IAAIF,CAAa,CAGtB,CAUA,SAAST,GAAWt+B,EAAS,CAC3B,MAAM6K,EAAW7K,EAAQ,UAAY,GAC/B42B,EAAO,IAAIoE,GAEjB,OAAI,OAAOnwB,GAAa,WACtB+rB,EAAK,MAAQ/rB,GASR+rB,CACT,CAYA,SAAS2H,GAAK30B,EAAM5J,EAAS,CAC3B,MAAMk/B,EAAkBl/B,EAAQ,gBAC1Bm/B,EAAen/B,EAAQ,aACvBo/B,EAAap/B,EAAQ,WACrBq/B,EAAqBr/B,EAAQ,mBAC7Bs/B,EAAWt/B,EAAQ,SACnBu/B,EAAmBv/B,EAAQ,iBAC3Bw/B,EAAex/B,EAAQ,cAAgBy/B,GAE7C,UAAWC,KAAexB,GACpB,OAAO,OAAOl+B,EAAS0/B,EAAY,IAAI,IAEvC,GACEA,EAAY,MAEXA,EAAY,GACT,QAAUA,EAAY,GAAK,YAC3B,aAEJ5B,GAEA4B,EAAY,GAVhB,QAsBJ,OAAA3K,GAAMnrB,EAAM+1B,CAAS,EAEdh2B,GAAaC,EAAM,CAC5B,SAAIg2B,GAAQ,SACR,WAAAR,EACA,mBAAoB,GACxB,IAAI9zB,GAAG,IACP,KAAIC,GAAI,KACJ,SAAU,GACV,SAAU,EACd,CAAG,EAGD,SAASo0B,EAAUj6B,EAAMxD,EAAOmH,EAAQ,CACtC,GAAI3D,EAAK,OAAS,OAAS2D,GAAU,OAAOnH,GAAU,SACpD,OAAIo9B,EACFj2B,EAAO,SAAS,OAAOnH,EAAO,CAAC,EAE/BmH,EAAO,SAASnH,CAAK,EAAI,CAAC,KAAM,OAAQ,MAAOwD,EAAK,KAAK,EAGpDxD,EAGT,GAAIwD,EAAK,OAAS,UAAW,CAE3B,IAAIrD,EAEJ,IAAKA,KAAO4K,GACV,GACE,OAAO,OAAOA,GAAe5K,CAAG,GAChC,OAAO,OAAOqD,EAAK,WAAYrD,CAAG,EAClC,CACA,MAAM3B,EAAQgF,EAAK,WAAWrD,CAAG,EAC3BiT,EAAOrI,GAAc5K,CAAG,GAC1BiT,IAAS,MAAQA,EAAK,SAAS5P,EAAK,OAAO,KAC7CA,EAAK,WAAWrD,CAAG,EAAIm9B,EAAa,OAAO9+B,GAAS,EAAE,EAAG2B,EAAKqD,CAAI,EAErE,CAEJ,CAED,GAAIA,EAAK,OAAS,UAAW,CAC3B,IAAIgI,EAASwxB,EACT,CAACA,EAAgB,SAASx5B,EAAK,OAAO,EACtC25B,EACEA,EAAmB,SAAS35B,EAAK,OAAO,EACxC,GAMN,GAJI,CAACgI,GAAUyxB,GAAgB,OAAOj9B,GAAU,WAC9CwL,EAAS,CAACyxB,EAAaz5B,EAAMxD,EAAOmH,CAAM,GAGxCqE,GAAUrE,GAAU,OAAOnH,GAAU,SACvC,OAAIq9B,GAAoB75B,EAAK,SAC3B2D,EAAO,SAAS,OAAOnH,EAAO,EAAG,GAAGwD,EAAK,QAAQ,EAEjD2D,EAAO,SAAS,OAAOnH,EAAO,CAAC,EAG1BA,CAEV,CACF,CACH,CAWO,SAASu9B,GAAoB/+B,EAAO,CAIzC,MAAMm/B,EAAQn/B,EAAM,QAAQ,GAAG,EACzBo/B,EAAep/B,EAAM,QAAQ,GAAG,EAChCq/B,EAAar/B,EAAM,QAAQ,GAAG,EAC9B6c,EAAQ7c,EAAM,QAAQ,GAAG,EAE/B,OAEEm/B,IAAU,IAETtiB,IAAU,IAAMsiB,EAAQtiB,GACxBuiB,IAAiB,IAAMD,EAAQC,GAC/BC,IAAe,IAAMF,EAAQE,GAE9B9B,GAAa,KAAKv9B,EAAM,MAAM,EAAGm/B,CAAK,CAAC,EAEhCn/B,EAGF,EACT,yKCjbO,SAASs/B,GAAOt/B,EAAOsH,EAAW,CACvC,MAAMkoB,EAAS,OAAOxvB,CAAK,EAE3B,GAAI,OAAOsH,GAAc,SACvB,MAAM,IAAI,UAAU,oBAAoB,EAG1C,IAAI+D,EAAQ,EACR7J,EAAQguB,EAAO,QAAQloB,CAAS,EAEpC,KAAO9F,IAAU,IACf6J,IACA7J,EAAQguB,EAAO,QAAQloB,EAAW9F,EAAQ8F,EAAU,MAAM,EAG5D,OAAO+D,CACT,CC1Be,SAASk0B,GAAmB5b,EAAQ,CAClD,GAAI,OAAOA,GAAW,SACrB,MAAM,IAAI,UAAU,mBAAmB,EAKxC,OAAOA,EACL,QAAQ,sBAAuB,MAAM,EACrC,QAAQ,KAAM,OAAO,CACxB,CCmEO,SAAS6b,GAAet2B,EAAM6D,EAAMzN,EAAS,CAElD,MAAMmgC,EAAUxM,IADC3zB,GAAW,CAAE,GACG,QAAU,CAAA,CAAE,EACvCogC,EAAQC,GAAQ5yB,CAAI,EAC1B,IAAI6yB,EAAY,GAEhB,KAAO,EAAEA,EAAYF,EAAM,QACzB5L,GAAa5qB,EAAM,OAAQ6qB,CAAO,EAIpC,SAASA,EAAQ/uB,EAAMovB,EAAS,CAC9B,IAAI5yB,EAAQ,GAERq+B,EAEJ,KAAO,EAAEr+B,EAAQ4yB,EAAQ,QAAQ,CAC/B,MAAMzrB,EAASyrB,EAAQ5yB,CAAK,EAEtBurB,EAAW8S,EAAcA,EAAY,SAAW,OAEtD,GACEJ,EACE92B,EACAokB,EAAWA,EAAS,QAAQpkB,CAAM,EAAI,OACtCk3B,CACD,EAED,OAGFA,EAAcl3B,CACf,CAED,GAAIk3B,EACF,OAAO3T,EAAQlnB,EAAMovB,CAAO,CAE/B,CAYD,SAASlI,EAAQlnB,EAAMovB,EAAS,CAC9B,MAAMzrB,EAASyrB,EAAQA,EAAQ,OAAS,CAAC,EACnCtxB,EAAO48B,EAAME,CAAS,EAAE,CAAC,EACzBxwB,EAAUswB,EAAME,CAAS,EAAE,CAAC,EAClC,IAAI76B,EAAQ,EAGZ,MAAMvD,EADWmH,EAAO,SACD,QAAQ3D,CAAI,EACnC,IAAI86B,EAAS,GAETrK,EAAQ,CAAE,EAEd3yB,EAAK,UAAY,EAEjB,IAAIuC,EAAQvC,EAAK,KAAKkC,EAAK,KAAK,EAEhC,KAAOK,GAAO,CACZ,MAAMP,EAAWO,EAAM,MAEjB06B,EAAc,CAClB,MAAO16B,EAAM,MACb,MAAOA,EAAM,MACb,MAAO,CAAC,GAAG+uB,EAASpvB,CAAI,CACzB,EACD,IAAIhF,EAAQoP,EAAQ,GAAG/J,EAAO06B,CAAW,EA8BzC,GA5BI,OAAO//B,GAAU,WACnBA,EAAQA,EAAM,OAAS,EAAI,CAAC,KAAM,OAAQ,MAAAA,CAAK,EAAI,QAIjDA,IAAU,GAIZ8C,EAAK,UAAYgC,EAAW,GAExBC,IAAUD,GACZ2wB,EAAM,KAAK,CACT,KAAM,OACN,MAAOzwB,EAAK,MAAM,MAAMD,EAAOD,CAAQ,CACnD,CAAW,EAGC,MAAM,QAAQ9E,CAAK,EACrBy1B,EAAM,KAAK,GAAGz1B,CAAK,EACVA,GACTy1B,EAAM,KAAKz1B,CAAK,EAGlB+E,EAAQD,EAAWO,EAAM,CAAC,EAAE,OAC5By6B,EAAS,IAGP,CAACh9B,EAAK,OACR,MAGFuC,EAAQvC,EAAK,KAAKkC,EAAK,KAAK,CAC7B,CAED,OAAI86B,GACE/6B,EAAQC,EAAK,MAAM,QACrBywB,EAAM,KAAK,CAAC,KAAM,OAAQ,MAAOzwB,EAAK,MAAM,MAAMD,CAAK,CAAC,CAAC,EAG3D4D,EAAO,SAAS,OAAOnH,EAAO,EAAG,GAAGi0B,CAAK,GAEzCA,EAAQ,CAACzwB,CAAI,EAGRxD,EAAQi0B,EAAM,MACtB,CACH,CAUA,SAASkK,GAAQK,EAAa,CAE5B,MAAMz2B,EAAS,CAAE,EAEjB,GAAI,CAAC,MAAM,QAAQy2B,CAAW,EAC5B,MAAM,IAAI,UAAU,mDAAmD,EAKzE,MAAMjzB,EACJ,CAACizB,EAAY,CAAC,GAAK,MAAM,QAAQA,EAAY,CAAC,CAAC,EAC3CA,EACA,CAACA,CAAW,EAElB,IAAIx+B,EAAQ,GAEZ,KAAO,EAAEA,EAAQuL,EAAK,QAAQ,CAC5B,MAAMkzB,EAAQlzB,EAAKvL,CAAK,EACxB+H,EAAO,KAAK,CAAC22B,GAAaD,EAAM,CAAC,CAAC,EAAGE,GAAWF,EAAM,CAAC,CAAC,CAAC,CAAC,CAC3D,CAED,OAAO12B,CACT,CAUA,SAAS22B,GAAap9B,EAAM,CAC1B,OAAO,OAAOA,GAAS,SAAW,IAAI,OAAOwX,GAAOxX,CAAI,EAAG,GAAG,EAAIA,CACpE,CAUA,SAASq9B,GAAW/wB,EAAS,CAC3B,OAAO,OAAOA,GAAY,WACtBA,EACA,UAAY,CACV,OAAOA,CACR,CACP,CCvPA,MAAMgxB,GAAc,WAEdC,GAAiB,CAAC,WAAY,OAAQ,QAAS,OAAO,EASrD,SAASC,IAAiC,CAC/C,MAAO,CACL,WAAY,CAACC,EAA4B,EACzC,MAAO,CACL,gBAAiBC,GACjB,qBAAsBC,GACtB,oBAAqBA,GACrB,mBAAoBA,EACrB,EACD,KAAM,CACJ,gBAAiBC,GACjB,qBAAsBC,GACtB,oBAAqBC,GACrB,mBAAoBC,EACrB,CACF,CACH,CASO,SAASC,IAA+B,CAC7C,MAAO,CACL,OAAQ,CACN,CACE,UAAW,IACX,OAAQ,aACR,MAAO,YACP,YAAAV,GACA,eAAAC,EACD,EACD,CACE,UAAW,IACX,OAAQ,OACR,MAAO,YACP,YAAAD,GACA,eAAAC,EACD,EACD,CACE,UAAW,IACX,OAAQ,OACR,MAAO,MACP,YAAAD,GACA,eAAAC,EACD,CACF,CACF,CACH,CAMA,SAASG,GAAqBrwB,EAAO,CACnC,KAAK,MAAM,CAAC,KAAM,OAAQ,MAAO,KAAM,IAAK,GAAI,SAAU,CAAE,CAAA,EAAGA,CAAK,CACtE,CAMA,SAASswB,GAA0BtwB,EAAO,CACxC,KAAK,OAAO,MAAM,iBAAiB,KAAK,KAAMA,CAAK,CACrD,CAMA,SAASywB,GAAwBzwB,EAAO,CACtC,KAAK,OAAO,KAAK,iBAAiB,KAAK,KAAMA,CAAK,CACpD,CAMA,SAAS0wB,GAAuB1wB,EAAO,CACrC,KAAK,OAAO,KAAK,KAAK,KAAK,KAAMA,CAAK,EACtC,MAAMnL,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EACtCA,EAAK,KACZA,EAAK,IAAM,UAAY,KAAK,eAAemL,CAAK,CAClD,CAMA,SAASwwB,GAAyBxwB,EAAO,CACvC,KAAK,OAAO,KAAK,cAAc,KAAK,KAAMA,CAAK,CACjD,CAMA,SAASuwB,GAAoBvwB,EAAO,CAClC,KAAK,KAAKA,CAAK,CACjB,CAGA,SAASowB,GAA6Br3B,EAAM,CAC1Cs2B,GACEt2B,EACA,CACE,CAAC,kDAAmD63B,EAAO,EAC3D,CAAC,WAAA,+DAAA,IAAyD,EAAEC,EAAS,CACtE,EACD,CAAC,OAAQ,CAAC,OAAQ,eAAe,CAAC,CACnC,CACH,CAYA,SAASD,GAAQ9+B,EAAGg/B,EAAUC,EAAQxI,EAAMrzB,EAAO,CACjD,IAAImC,EAAS,GAcb,GAXI,CAACyI,GAAS5K,CAAK,IAKf,MAAM,KAAK47B,CAAQ,IACrBC,EAASD,EAAWC,EACpBD,EAAW,GACXz5B,EAAS,WAGP,CAAC25B,GAAgBD,CAAM,GACzB,MAAO,GAGT,MAAME,EAAQC,GAASH,EAASxI,CAAI,EAEpC,GAAI,CAAC0I,EAAM,CAAC,EAAG,MAAO,GAGtB,MAAM73B,EAAS,CACb,KAAM,OACN,MAAO,KACP,IAAK/B,EAASy5B,EAAWG,EAAM,CAAC,EAChC,SAAU,CAAC,CAAC,KAAM,OAAQ,MAAOH,EAAWG,EAAM,CAAC,CAAC,CAAC,CACtD,EAED,OAAIA,EAAM,CAAC,EACF,CAAC73B,EAAQ,CAAC,KAAM,OAAQ,MAAO63B,EAAM,CAAC,CAAC,CAAC,EAG1C73B,CACT,CAUA,SAASy3B,GAAU/+B,EAAGq/B,EAAOjhB,EAAOhb,EAAO,CACzC,MAEE,CAAC4K,GAAS5K,EAAO,EAAI,GAErB,UAAU,KAAKgb,CAAK,EAEb,GAGF,CACL,KAAM,OACN,MAAO,KACP,IAAK,UAAYihB,EAAQ,IAAMjhB,EAC/B,SAAU,CAAC,CAAC,KAAM,OAAQ,MAAOihB,EAAQ,IAAMjhB,CAAK,CAAC,CACtD,CACH,CAMA,SAAS8gB,GAAgBD,EAAQ,CAC/B,MAAME,EAAQF,EAAO,MAAM,GAAG,EAE9B,MACE,EAAAE,EAAM,OAAS,GACdA,EAAMA,EAAM,OAAS,CAAC,IACpB,IAAI,KAAKA,EAAMA,EAAM,OAAS,CAAC,CAAC,GAC/B,CAAC,aAAa,KAAKA,EAAMA,EAAM,OAAS,CAAC,CAAC,IAC7CA,EAAMA,EAAM,OAAS,CAAC,IACpB,IAAI,KAAKA,EAAMA,EAAM,OAAS,CAAC,CAAC,GAC/B,CAAC,aAAa,KAAKA,EAAMA,EAAM,OAAS,CAAC,CAAC,GAMlD,CAMA,SAASC,GAASnH,EAAK,CACrB,MAAMqH,EAAY,sBAAsB,KAAKrH,CAAG,EAEhD,GAAI,CAACqH,EACH,MAAO,CAACrH,EAAK,MAAS,EAGxBA,EAAMA,EAAI,MAAM,EAAGqH,EAAU,KAAK,EAElC,IAAIC,EAAQD,EAAU,CAAC,EACnBE,EAAoBD,EAAM,QAAQ,GAAG,EACzC,MAAME,EAAgBpC,GAAOpF,EAAK,GAAG,EACrC,IAAIyH,EAAgBrC,GAAOpF,EAAK,GAAG,EAEnC,KAAOuH,IAAsB,IAAMC,EAAgBC,GACjDzH,GAAOsH,EAAM,MAAM,EAAGC,EAAoB,CAAC,EAC3CD,EAAQA,EAAM,MAAMC,EAAoB,CAAC,EACzCA,EAAoBD,EAAM,QAAQ,GAAG,EACrCG,IAGF,MAAO,CAACzH,EAAKsH,CAAK,CACpB,CAOA,SAASvxB,GAAS5K,EAAOu8B,EAAO,CAC9B,MAAM/zB,EAAOxI,EAAM,MAAM,WAAWA,EAAM,MAAQ,CAAC,EAEnD,OACGA,EAAM,QAAU,GACf2J,GAAkBnB,CAAI,GACtBkB,GAAmBlB,CAAI,KAExB,CAAC+zB,GAAS/zB,IAAS,GAExB,CCrQA2f,GAAkB,KAAOqU,GAMzB,SAASC,IAA0B,CACjC,KAAK,OAAQ,CACf,CAMA,SAASC,GAAkB5xB,EAAO,CAChC,KAAK,MAAM,CAAC,KAAM,oBAAqB,WAAY,GAAI,MAAO,EAAE,EAAGA,CAAK,CAC1E,CAMA,SAAS6xB,IAAqC,CAC5C,KAAK,OAAQ,CACf,CAMA,SAASC,GAAwB9xB,EAAO,CACtC,KAAK,MACH,CAAC,KAAM,qBAAsB,WAAY,GAAI,MAAO,GAAI,SAAU,EAAE,EACpEA,CACD,CACH,CAMA,SAAS+xB,GAAuB/xB,EAAO,CACrC,MAAMkQ,EAAQ,KAAK,OAAQ,EACrBrb,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EACtCA,EAAK,KACZA,EAAK,WAAamJ,GAChB,KAAK,eAAegC,CAAK,CAC1B,EAAC,YAAa,EACfnL,EAAK,MAAQqb,CACf,CAMA,SAAS8hB,GAAiBhyB,EAAO,CAC/B,KAAK,KAAKA,CAAK,CACjB,CAMA,SAASiyB,GAAkCjyB,EAAO,CAChD,MAAMkQ,EAAQ,KAAK,OAAQ,EACrBrb,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EACtCA,EAAK,KACZA,EAAK,WAAamJ,GAChB,KAAK,eAAegC,CAAK,CAC1B,EAAC,YAAa,EACfnL,EAAK,MAAQqb,CACf,CAMA,SAASgiB,GAAuBlyB,EAAO,CACrC,KAAK,KAAKA,CAAK,CACjB,CAGA,SAAS0xB,IAAwB,CAC/B,MAAO,GACT,CAMA,SAASrU,GAAkBxoB,EAAM/C,EAAGqH,EAAOvH,EAAM,CAC/C,MAAMugC,EAAUh5B,EAAM,cAAcvH,CAAI,EACxC,IAAI/B,EAAQsiC,EAAQ,KAAK,IAAI,EAC7B,MAAMjuB,EAAO/K,EAAM,MAAM,mBAAmB,EACtCi5B,EAAUj5B,EAAM,MAAM,WAAW,EACvC,OAAAtJ,GAASsiC,EAAQ,KACfh5B,EAAM,KAAKA,EAAM,cAActE,CAAI,EAAG,CAAC,MAAO,IAAK,OAAQhF,CAAK,CAAC,CAClE,EACDuiC,EAAS,EACTluB,EAAM,EACNrU,GAASsiC,EAAQ,KAAK,GAAG,EAClBtiC,CACT,CASO,SAASwiC,IAA0B,CACxC,MAAO,CACL,MAAO,CACL,sBAAuBV,GACvB,gBAAiBC,GACjB,iCAAkCC,GAClC,sBAAuBC,EACxB,EACD,KAAM,CACJ,sBAAuBC,GACvB,gBAAiBC,GACjB,iCAAkCC,GAClC,sBAAuBC,EACxB,CACF,CACH,CAWO,SAASI,GAAsBnjC,EAAS,CAE7C,IAAIojC,EAAiB,GAErB,OAAIpjC,GAAWA,EAAQ,iBACrBojC,EAAiB,IAGZ,CACL,SAAU,CAAC,mBAAAC,EAAoB,kBAAAnV,EAAiB,EAEhD,OAAQ,CAAC,CAAC,UAAW,IAAK,YAAa,CAAC,QAAS,WAAY,WAAW,CAAC,CAAC,CAC3E,EAMD,SAASmV,EAAmB39B,EAAM/C,EAAGqH,EAAOvH,EAAM,CAChD,MAAMugC,EAAUh5B,EAAM,cAAcvH,CAAI,EACxC,IAAI/B,EAAQsiC,EAAQ,KAAK,IAAI,EAC7B,MAAMjuB,EAAO/K,EAAM,MAAM,oBAAoB,EACvCi5B,EAAUj5B,EAAM,MAAM,OAAO,EACnC,OAAAtJ,GAASsiC,EAAQ,KACfh5B,EAAM,KAAKA,EAAM,cAActE,CAAI,EAAG,CAAC,OAAQhF,EAAO,MAAO,GAAG,CAAC,CAClE,EACDuiC,EAAS,EAETviC,GAASsiC,EAAQ,KAAK,IAAI,EAEtBt9B,EAAK,UAAYA,EAAK,SAAS,OAAS,IAC1Cs9B,EAAQ,MAAM,CAAC,EAEftiC,GAASsiC,EAAQ,MACdI,EAAiB;AAAA,EAAO,KACvBp5B,EAAM,YACJA,EAAM,cAActE,EAAMs9B,EAAQ,QAAO,CAAE,EAC3CI,EAAiBE,GAASC,EAC3B,CACJ,GAGHxuB,EAAM,EAECrU,CACR,CACH,CAGA,SAAS6iC,GAAe5c,EAAMzkB,EAAOshC,EAAO,CAC1C,OAAOthC,IAAU,EAAIykB,EAAO2c,GAAO3c,EAAMzkB,EAAOshC,CAAK,CACvD,CAGA,SAASF,GAAO3c,EAAMzkB,EAAOshC,EAAO,CAClC,OAAQA,EAAQ,GAAK,QAAU7c,CACjC,CC7LA,MAAM8c,GAAiC,CACrC,WACA,qBACA,iBACA,YACA,aACA,iBACF,EAEAC,GAAa,KAAOC,GASb,SAASC,IAA+B,CAC7C,MAAO,CACL,eAAgB,CAAC,QAAQ,EACzB,MAAO,CAAC,cAAeC,EAAkB,EACzC,KAAM,CAAC,cAAeC,EAAiB,CACxC,CACH,CASO,SAASC,IAA6B,CAC3C,MAAO,CACL,OAAQ,CACN,CACE,UAAW,IACX,YAAa,WACb,eAAgBN,EACjB,CACF,EACD,SAAU,CAAC,OAAQC,EAAY,CAChC,CACH,CAMA,SAASG,GAAmBhzB,EAAO,CACjC,KAAK,MAAM,CAAC,KAAM,SAAU,SAAU,CAAA,CAAE,EAAGA,CAAK,CAClD,CAMA,SAASizB,GAAkBjzB,EAAO,CAChC,KAAK,KAAKA,CAAK,CACjB,CAMA,SAAS6yB,GAAah+B,EAAM/C,EAAGqH,EAAOvH,EAAM,CAC1C,MAAMugC,EAAUh5B,EAAM,cAAcvH,CAAI,EAClCsS,EAAO/K,EAAM,MAAM,eAAe,EACxC,IAAItJ,EAAQsiC,EAAQ,KAAK,IAAI,EAC7B,OAAAtiC,GAASsJ,EAAM,kBAAkBtE,EAAM,CACrC,GAAGs9B,EAAQ,QAAS,EACpB,OAAQtiC,EACR,MAAO,GACX,CAAG,EACDA,GAASsiC,EAAQ,KAAK,IAAI,EAC1BjuB,EAAM,EACCrU,CACT,CAGA,SAASijC,IAAa,CACpB,MAAO,GACT,CCgDA,SAASK,GAAoBtjC,EAAO,CAClC,OAAOA,EAAM,MACf,CAcO,SAASujC,GAAc5U,EAAOrvB,EAAS,CAC5C,MAAMC,EAAWD,GAAW,CAAE,EAExB2vB,GAAS1vB,EAAS,OAAS,CAAA,GAAI,OAAQ,EACvCikC,EAAejkC,EAAS,cAAgB+jC,GAExCG,EAAa,CAAE,EAEfC,EAAa,CAAE,EAEfC,EAAa,CAAE,EAEfC,EAAsB,CAAE,EAC9B,IAAIC,EAAkB,EAClBC,EAAW,GAIf,KAAO,EAAEA,EAAWnV,EAAM,QAAQ,CAEhC,MAAMoV,EAAM,CAAE,EAERC,EAAQ,CAAE,EAChB,IAAIC,EAAc,GAMlB,IAJItV,EAAMmV,CAAQ,EAAE,OAASD,IAC3BA,EAAkBlV,EAAMmV,CAAQ,EAAE,QAG7B,EAAEG,EAActV,EAAMmV,CAAQ,EAAE,QAAQ,CAC7C,MAAM1U,EAAO0C,GAAUnD,EAAMmV,CAAQ,EAAEG,CAAW,CAAC,EAEnD,GAAI1kC,EAAS,kBAAoB,GAAO,CACtC,MAAMoQ,EAAO6zB,EAAapU,CAAI,EAC9B4U,EAAMC,CAAW,EAAIt0B,GAGnBi0B,EAAoBK,CAAW,IAAM,QACrCt0B,EAAOi0B,EAAoBK,CAAW,KAEtCL,EAAoBK,CAAW,EAAIt0B,EAEtC,CAEDo0B,EAAI,KAAK3U,CAAI,CACd,CAEDsU,EAAWI,CAAQ,EAAIC,EACvBJ,EAAWG,CAAQ,EAAIE,CACxB,CAGD,IAAIC,EAAc,GAElB,GAAI,OAAOhV,GAAU,UAAY,WAAYA,EAC3C,KAAO,EAAEgV,EAAcJ,GACrBJ,EAAWQ,CAAW,EAAIC,GAAYjV,EAAMgV,CAAW,CAAC,MAErD,CACL,MAAMp2B,EAAOq2B,GAAYjV,CAAK,EAE9B,KAAO,EAAEgV,EAAcJ,GACrBJ,EAAWQ,CAAW,EAAIp2B,CAE7B,CAGDo2B,EAAc,GAEd,MAAMF,EAAM,CAAE,EAERC,EAAQ,CAAE,EAEhB,KAAO,EAAEC,EAAcJ,GAAiB,CACtC,MAAMh2B,EAAO41B,EAAWQ,CAAW,EACnC,IAAIj2B,EAAS,GACTsF,EAAQ,GAERzF,IAAS,IACXG,EAAS,IACTsF,EAAQ,KACCzF,IAAS,IAClBG,EAAS,IACAH,IAAS,MAClByF,EAAQ,KAIV,IAAI3D,EACFpQ,EAAS,kBAAoB,GACzB,EACA,KAAK,IACH,EACAqkC,EAAoBK,CAAW,EAAIj2B,EAAO,OAASsF,EAAM,MAC1D,EAEP,MAAM8b,EAAOphB,EAAS,IAAI,OAAO2B,CAAI,EAAI2D,EAErC/T,EAAS,kBAAoB,KAC/BoQ,EAAO3B,EAAO,OAAS2B,EAAO2D,EAAM,OAEhC3D,EAAOi0B,EAAoBK,CAAW,IACxCL,EAAoBK,CAAW,EAAIt0B,GAGrCq0B,EAAMC,CAAW,EAAIt0B,GAGvBo0B,EAAIE,CAAW,EAAI7U,CACpB,CAGDsU,EAAW,OAAO,EAAG,EAAGK,CAAG,EAC3BJ,EAAW,OAAO,EAAG,EAAGK,CAAK,EAE7BF,EAAW,GAEX,MAAMl/B,EAAQ,CAAE,EAEhB,KAAO,EAAEk/B,EAAWJ,EAAW,QAAQ,CACrC,MAAMK,EAAML,EAAWI,CAAQ,EACzBE,EAAQL,EAAWG,CAAQ,EACjCG,EAAc,GAEd,MAAMhe,EAAO,CAAE,EAEf,KAAO,EAAEge,EAAcJ,GAAiB,CACtC,MAAMzU,EAAO2U,EAAIE,CAAW,GAAK,GACjC,IAAIj2B,EAAS,GACTsF,EAAQ,GAEZ,GAAI/T,EAAS,kBAAoB,GAAO,CACtC,MAAMoQ,EACJi0B,EAAoBK,CAAW,GAAKD,EAAMC,CAAW,GAAK,GACtDp2B,EAAO41B,EAAWQ,CAAW,EAE/Bp2B,IAAS,IACXG,EAAS,IAAI,OAAO2B,CAAI,EACf9B,IAAS,GACd8B,EAAO,GACT3B,EAAS,IAAI,OAAO2B,EAAO,EAAI,EAAG,EAClC2D,EAAQ,IAAI,OAAO3D,EAAO,EAAI,EAAG,IAEjC3B,EAAS,IAAI,OAAO2B,EAAO,CAAC,EAC5B2D,EAAQtF,GAGVsF,EAAQ,IAAI,OAAO3D,CAAI,CAE1B,CAEGpQ,EAAS,iBAAmB,IAAS,CAAC0kC,GACxChe,EAAK,KAAK,GAAG,EAIb1mB,EAAS,UAAY,IAGrB,EAAEA,EAAS,kBAAoB,IAAS6vB,IAAS,MAChD7vB,EAAS,iBAAmB,IAAS0kC,IAEtChe,EAAK,KAAK,GAAG,EAGX1mB,EAAS,kBAAoB,IAC/B0mB,EAAK,KAAKjY,CAAM,EAGlBiY,EAAK,KAAKmJ,CAAI,EAEV7vB,EAAS,kBAAoB,IAC/B0mB,EAAK,KAAK3S,CAAK,EAGb/T,EAAS,UAAY,IACvB0mB,EAAK,KAAK,GAAG,GAIb1mB,EAAS,eAAiB,IAC1B0kC,IAAgBJ,EAAkB,IAElC5d,EAAK,KAAK,GAAG,CAEhB,CAEDrhB,EAAM,KACJrF,EAAS,eAAiB,GACtB0mB,EAAK,KAAK,EAAE,EAAE,QAAQ,MAAO,EAAE,EAC/BA,EAAK,KAAK,EAAE,CACjB,CACF,CAED,OAAOrhB,EAAM,KAAK;AAAA,CAAI,CACxB,CAQA,SAASktB,GAAU9xB,EAAO,CACxB,OAAOA,GAAU,KAA8B,GAAK,OAAOA,CAAK,CAClE,CAQA,SAASkkC,GAAYlkC,EAAO,CAC1B,MAAM6N,EAAO,OAAO7N,GAAU,SAAWA,EAAM,YAAY,CAAC,EAAI,EAEhE,OAAO6N,IAAS,IAAgBA,IAAS,GACrC,GACAA,IAAS,IAAgBA,IAAS,IAChC,IACAA,IAAS,IAAgBA,IAAS,IAChC,IACA,CACV,CC5XO,SAASyf,GAAWtoB,EAAM/C,EAAGqH,EAAOvH,EAAM,CAC/C,MAAMsS,EAAO/K,EAAM,MAAM,YAAY,EAC/Bg5B,EAAUh5B,EAAM,cAAcvH,CAAI,EACxCugC,EAAQ,KAAK,IAAI,EACjBA,EAAQ,MAAM,CAAC,EACf,MAAMtiC,EAAQsJ,EAAM,YAClBA,EAAM,cAActE,EAAMs9B,EAAQ,QAAO,CAAE,EAC3Cxb,EACD,EACD,OAAAzS,EAAM,EACCrU,CACT,CAGA,SAAS8mB,GAAIb,EAAMhkB,EAAG6gC,EAAO,CAC3B,MAAO,KAAOA,EAAQ,GAAK,KAAO7c,CACpC,CCnBO,SAASke,GAAezzB,EAAO0zB,EAAS,CAC7C,OACEC,GAAY3zB,EAAO0zB,EAAQ,YAAa,EAAI,GAC5C,CAACC,GAAY3zB,EAAO0zB,EAAQ,eAAgB,EAAK,CAErD,CAQA,SAASC,GAAY3zB,EAAO3D,EAAMu3B,EAAM,CAKtC,GAJI,OAAOv3B,GAAS,WAClBA,EAAO,CAACA,CAAI,GAGV,CAACA,GAAQA,EAAK,SAAW,EAC3B,OAAOu3B,EAGT,IAAI9iC,EAAQ,GAEZ,KAAO,EAAEA,EAAQuL,EAAK,QACpB,GAAI2D,EAAM,SAAS3D,EAAKvL,CAAK,CAAC,EAC5B,MAAO,GAIX,MAAO,EACT,CC1BO,SAAS8nB,GAAUrnB,EAAGsiC,EAAIj7B,EAAOvH,EAAM,CAC5C,IAAIP,EAAQ,GAEZ,KAAO,EAAEA,EAAQ8H,EAAM,OAAO,QAG5B,GACEA,EAAM,OAAO9H,CAAK,EAAE,YAAc;AAAA,GAClC2iC,GAAe76B,EAAM,MAAOA,EAAM,OAAO9H,CAAK,CAAC,EAE/C,MAAO,QAAQ,KAAKO,EAAK,MAAM,EAAI,GAAK,IAI5C,MAAO;AAAA,CACT,CCnBO,SAASyiC,GAAcxkC,EAAOykC,EAAW,CAC9C,MAAMjV,EAAS,OAAOxvB,CAAK,EAC3B,IAAIwB,EAAQguB,EAAO,QAAQiV,CAAS,EAChCC,EAAWljC,EACX6J,EAAQ,EACRoE,EAAM,EAEV,GAAI,OAAOg1B,GAAc,SACvB,MAAM,IAAI,UAAU,oBAAoB,EAG1C,KAAOjjC,IAAU,IACXA,IAAUkjC,EACR,EAAEr5B,EAAQoE,IACZA,EAAMpE,GAGRA,EAAQ,EAGVq5B,EAAWljC,EAAQijC,EAAU,OAC7BjjC,EAAQguB,EAAO,QAAQiV,EAAWC,CAAQ,EAG5C,OAAOj1B,CACT,CCzBO,SAASk1B,GAAqB3/B,EAAMsE,EAAO,CAChD,MAAO,GACLA,EAAM,QAAQ,SAAW,IACvBtE,EAAK,OAEL,CAACA,EAAK,MAEN,WAAW,KAAKA,EAAK,KAAK,GAE1B,CAAC,0CAA0C,KAAKA,EAAK,KAAK,EAEhE,CCbO,SAAS4/B,GAAWt7B,EAAO,CAChC,MAAM8J,EAAS9J,EAAM,QAAQ,OAAS,IAEtC,GAAI8J,IAAW,KAAOA,IAAW,IAC/B,MAAM,IAAI,MACR,+BACEA,EACA,gDACH,EAGH,OAAOA,CACT,CCJO,SAASvF,GAAK7I,EAAM/C,EAAGqH,EAAOvH,EAAM,CACzC,MAAMqR,EAASwxB,GAAWt7B,CAAK,EACzBsQ,EAAM5U,EAAK,OAAS,GACpBipB,EAAS7a,IAAW,IAAM,cAAgB,QAEhD,GAAIuxB,GAAqB3/B,EAAMsE,CAAK,EAAG,CACrC,MAAM+K,EAAO/K,EAAM,MAAM,cAAc,EACjCtJ,EAAQsJ,EAAM,YAAYsQ,EAAKkN,EAAG,EACxC,OAAAzS,EAAM,EACCrU,CACR,CAED,MAAMsiC,EAAUh5B,EAAM,cAAcvH,CAAI,EAClCigB,EAAW5O,EAAO,OAAO,KAAK,IAAIoxB,GAAc5qB,EAAKxG,CAAM,EAAI,EAAG,CAAC,CAAC,EACpEiB,EAAO/K,EAAM,MAAM,YAAY,EACrC,IAAItJ,EAAQsiC,EAAQ,KAAKtgB,CAAQ,EAEjC,GAAIhd,EAAK,KAAM,CACb,MAAMu9B,EAAUj5B,EAAM,MAAM,iBAAiB2kB,CAAM,EAAE,EACrDjuB,GAASsiC,EAAQ,KACfh5B,EAAM,KAAKtE,EAAK,KAAM,CACpB,OAAQhF,EACR,MAAO,IACP,OAAQ,CAAC,GAAG,EACZ,GAAGsiC,EAAQ,QAAS,CAC5B,CAAO,CACF,EACDC,EAAS,CACV,CAED,GAAIv9B,EAAK,MAAQA,EAAK,KAAM,CAC1B,MAAMu9B,EAAUj5B,EAAM,MAAM,iBAAiB2kB,CAAM,EAAE,EACrDjuB,GAASsiC,EAAQ,KAAK,GAAG,EACzBtiC,GAASsiC,EAAQ,KACfh5B,EAAM,KAAKtE,EAAK,KAAM,CACpB,OAAQhF,EACR,MAAO;AAAA,EACP,OAAQ,CAAC,GAAG,EACZ,GAAGsiC,EAAQ,QAAS,CAC5B,CAAO,CACF,EACDC,EAAS,CACV,CAED,OAAAviC,GAASsiC,EAAQ,KAAK;AAAA,CAAI,EAEtB1oB,IACF5Z,GAASsiC,EAAQ,KAAK1oB,EAAM;AAAA,CAAI,GAGlC5Z,GAASsiC,EAAQ,KAAKtgB,CAAQ,EAC9B3N,EAAM,EACCrU,CACT,CAGA,SAAS8mB,GAAIb,EAAMhkB,EAAG6gC,EAAO,CAC3B,OAAQA,EAAQ,GAAK,QAAU7c,CACjC,CClEO,SAAS4e,GAAWv7B,EAAO,CAChC,MAAM8J,EAAS9J,EAAM,QAAQ,OAAS,IAEtC,GAAI8J,IAAW,KAAOA,IAAW,IAC/B,MAAM,IAAI,MACR,gCACEA,EACA,8CACH,EAGH,OAAOA,CACT,CCNO,SAAS7S,GAAWyE,EAAM/C,EAAGqH,EAAOvH,EAAM,CAC/C,MAAM+iC,EAAQD,GAAWv7B,CAAK,EACxB2kB,EAAS6W,IAAU,IAAM,QAAU,aACnCzwB,EAAO/K,EAAM,MAAM,YAAY,EACrC,IAAIi5B,EAAUj5B,EAAM,MAAM,OAAO,EACjC,MAAMg5B,EAAUh5B,EAAM,cAAcvH,CAAI,EACxC,IAAI/B,EAAQsiC,EAAQ,KAAK,GAAG,EAC5B,OAAAtiC,GAASsiC,EAAQ,KACfh5B,EAAM,KAAKA,EAAM,cAActE,CAAI,EAAG,CACpC,OAAQhF,EACR,MAAO,IACP,GAAGsiC,EAAQ,QAAS,CAC1B,CAAK,CACF,EACDtiC,GAASsiC,EAAQ,KAAK,KAAK,EAE3BC,EAAS,EAIP,CAACv9B,EAAK,KAEN,eAAe,KAAKA,EAAK,GAAG,GAE5Bu9B,EAAUj5B,EAAM,MAAM,oBAAoB,EAC1CtJ,GAASsiC,EAAQ,KAAK,GAAG,EACzBtiC,GAASsiC,EAAQ,KACfh5B,EAAM,KAAKtE,EAAK,IAAK,CAAC,OAAQhF,EAAO,MAAO,IAAK,GAAGsiC,EAAQ,QAAS,CAAA,CAAC,CACvE,EACDtiC,GAASsiC,EAAQ,KAAK,GAAG,IAGzBC,EAAUj5B,EAAM,MAAM,gBAAgB,EACtCtJ,GAASsiC,EAAQ,KACfh5B,EAAM,KAAKtE,EAAK,IAAK,CACnB,OAAQhF,EACR,MAAOgF,EAAK,MAAQ,IAAM;AAAA,EAC1B,GAAGs9B,EAAQ,QAAS,CAC5B,CAAO,CACF,GAGHC,EAAS,EAELv9B,EAAK,QACPu9B,EAAUj5B,EAAM,MAAM,QAAQ2kB,CAAM,EAAE,EACtCjuB,GAASsiC,EAAQ,KAAK,IAAMwC,CAAK,EACjC9kC,GAASsiC,EAAQ,KACfh5B,EAAM,KAAKtE,EAAK,MAAO,CACrB,OAAQhF,EACR,MAAO8kC,EACP,GAAGxC,EAAQ,QAAS,CAC5B,CAAO,CACF,EACDtiC,GAASsiC,EAAQ,KAAKwC,CAAK,EAC3BvC,EAAS,GAGXluB,EAAM,EAECrU,CACT,CCnEO,SAAS+kC,GAAcz7B,EAAO,CACnC,MAAM8J,EAAS9J,EAAM,QAAQ,UAAY,IAEzC,GAAI8J,IAAW,KAAOA,IAAW,IAC/B,MAAM,IAAI,MACR,mCACEA,EACA,gDACH,EAGH,OAAOA,CACT,CCZO,SAAS4xB,GAAyBn3B,EAAM,CAC7C,MAAO,MAAQA,EAAK,SAAS,EAAE,EAAE,YAAW,EAAK,GACnD,CC8BO,SAASo3B,GAAWC,EAAS7xB,EAAQD,EAAQ,CAClD,MAAM+xB,EAAcjzB,GAAkBgzB,CAAO,EACvCE,EAAalzB,GAAkBmB,CAAM,EAG3C,OAAI8xB,IAAgB,OACXC,IAAe,OAIlBhyB,IAAW,IACT,CAAC,OAAQ,GAAM,QAAS,EAAI,EAC5B,CAAC,OAAQ,GAAO,QAAS,EAAK,EAChCgyB,IAAe,EAEb,CAAC,OAAQ,GAAM,QAAS,EAAI,EAE5B,CAAC,OAAQ,GAAO,QAAS,EAAI,EAIjCD,IAAgB,EACXC,IAAe,OAElB,CAAC,OAAQ,GAAO,QAAS,EAAK,EAC9BA,IAAe,EAEb,CAAC,OAAQ,GAAM,QAAS,EAAI,EAE5B,CAAC,OAAQ,GAAO,QAAS,EAAK,EAI/BA,IAAe,OAElB,CAAC,OAAQ,GAAO,QAAS,EAAK,EAC9BA,IAAe,EAEb,CAAC,OAAQ,GAAM,QAAS,EAAK,EAE7B,CAAC,OAAQ,GAAO,QAAS,EAAK,CACtC,CCxEA/b,GAAS,KAAOgc,GAST,SAAShc,GAASrkB,EAAM/C,EAAGqH,EAAOvH,EAAM,CAC7C,MAAMqR,EAAS2xB,GAAcz7B,CAAK,EAC5B+K,EAAO/K,EAAM,MAAM,UAAU,EAC7Bg5B,EAAUh5B,EAAM,cAAcvH,CAAI,EAClCiM,EAASs0B,EAAQ,KAAKlvB,CAAM,EAElC,IAAI4D,EAAUsrB,EAAQ,KACpBh5B,EAAM,kBAAkBtE,EAAM,CAC5B,MAAOoO,EACP,OAAApF,EACA,GAAGs0B,EAAQ,QAAS,CAC1B,CAAK,CACF,EACD,MAAMgD,EAActuB,EAAQ,WAAW,CAAC,EAClCrE,EAAOsyB,GACXljC,EAAK,OAAO,WAAWA,EAAK,OAAO,OAAS,CAAC,EAC7CujC,EACAlyB,CACD,EAEGT,EAAK,SACPqE,EAAUguB,GAAyBM,CAAW,EAAItuB,EAAQ,MAAM,CAAC,GAGnE,MAAMuuB,EAAcvuB,EAAQ,WAAWA,EAAQ,OAAS,CAAC,EACnDzD,EAAQ0xB,GAAWljC,EAAK,MAAM,WAAW,CAAC,EAAGwjC,EAAanyB,CAAM,EAElEG,EAAM,SACRyD,EAAUA,EAAQ,MAAM,EAAG,EAAE,EAAIguB,GAAyBO,CAAW,GAGvE,MAAMjyB,EAAQgvB,EAAQ,KAAKlvB,CAAM,EAEjC,OAAAiB,EAAM,EAEN/K,EAAM,+BAAiC,CACrC,MAAOiK,EAAM,QACb,OAAQZ,EAAK,OACd,EACM3E,EAASgJ,EAAU1D,CAC5B,CAQA,SAAS+xB,GAAapjC,EAAGsiC,EAAIj7B,EAAO,CAClC,OAAOA,EAAM,QAAQ,UAAY,GACnC,CCvDO,SAASk8B,GAAsBxgC,EAAMsE,EAAO,CACjD,IAAIm8B,EAAmB,GAIvB,OAAApR,GAAMrvB,EAAM,SAAUA,EAAM,CAC1B,GACG,UAAWA,GAAQ,WAAW,KAAKA,EAAK,KAAK,GAC9CA,EAAK,OAAS,QAEd,OAAAygC,EAAmB,GACZ7R,EAEb,CAAG,EAEM,IACJ,CAAC5uB,EAAK,OAASA,EAAK,MAAQ,IAC3BwH,GAASxH,CAAI,IACZsE,EAAM,QAAQ,QAAUm8B,GAE/B,CClBO,SAAStiB,GAAQne,EAAM/C,EAAGqH,EAAOvH,EAAM,CAC5C,MAAM2jC,EAAO,KAAK,IAAI,KAAK,IAAI,EAAG1gC,EAAK,OAAS,CAAC,EAAG,CAAC,EAC/Cs9B,EAAUh5B,EAAM,cAAcvH,CAAI,EAExC,GAAIyjC,GAAsBxgC,EAAMsE,CAAK,EAAG,CACtC,MAAM+K,EAAO/K,EAAM,MAAM,eAAe,EAClCi5B,EAAUj5B,EAAM,MAAM,UAAU,EAChCtJ,EAAQsJ,EAAM,kBAAkBtE,EAAM,CAC1C,GAAGs9B,EAAQ,QAAS,EACpB,OAAQ;AAAA,EACR,MAAO;AAAA,CACb,CAAK,EACD,OAAAC,EAAS,EACTluB,EAAM,EAGJrU,EACA;AAAA,GACC0lC,IAAS,EAAI,IAAM,KAAK,OAEvB1lC,EAAM,QAGH,KAAK,IAAIA,EAAM,YAAY,IAAI,EAAGA,EAAM,YAAY;AAAA,CAAI,CAAC,EAAI,EACjE,CAEJ,CAED,MAAMgiB,EAAW,IAAI,OAAO0jB,CAAI,EAC1BrxB,EAAO/K,EAAM,MAAM,YAAY,EAC/Bi5B,EAAUj5B,EAAM,MAAM,UAAU,EAMtCg5B,EAAQ,KAAKtgB,EAAW,GAAG,EAE3B,IAAIhiB,EAAQsJ,EAAM,kBAAkBtE,EAAM,CACxC,OAAQ,KACR,MAAO;AAAA,EACP,GAAGs9B,EAAQ,QAAS,CACxB,CAAG,EAED,MAAI,SAAS,KAAKtiC,CAAK,IAErBA,EAAQglC,GAAyBhlC,EAAM,WAAW,CAAC,CAAC,EAAIA,EAAM,MAAM,CAAC,GAGvEA,EAAQA,EAAQgiB,EAAW,IAAMhiB,EAAQgiB,EAErC1Y,EAAM,QAAQ,WAChBtJ,GAAS,IAAMgiB,GAGjBugB,EAAS,EACTluB,EAAM,EAECrU,CACT,CCtEAqC,GAAK,KAAOsjC,GAML,SAAStjC,GAAK2C,EAAM,CACzB,OAAOA,EAAK,OAAS,EACvB,CAKA,SAAS2gC,IAAW,CAClB,MAAO,GACT,CCZApc,GAAM,KAAOqc,GASN,SAASrc,GAAMvkB,EAAM/C,EAAGqH,EAAOvH,EAAM,CAC1C,MAAM+iC,EAAQD,GAAWv7B,CAAK,EACxB2kB,EAAS6W,IAAU,IAAM,QAAU,aACnCzwB,EAAO/K,EAAM,MAAM,OAAO,EAChC,IAAIi5B,EAAUj5B,EAAM,MAAM,OAAO,EACjC,MAAMg5B,EAAUh5B,EAAM,cAAcvH,CAAI,EACxC,IAAI/B,EAAQsiC,EAAQ,KAAK,IAAI,EAC7B,OAAAtiC,GAASsiC,EAAQ,KACfh5B,EAAM,KAAKtE,EAAK,IAAK,CAAC,OAAQhF,EAAO,MAAO,IAAK,GAAGsiC,EAAQ,QAAS,CAAA,CAAC,CACvE,EACDtiC,GAASsiC,EAAQ,KAAK,IAAI,EAE1BC,EAAS,EAIN,CAACv9B,EAAK,KAAOA,EAAK,OAEnB,eAAe,KAAKA,EAAK,GAAG,GAE5Bu9B,EAAUj5B,EAAM,MAAM,oBAAoB,EAC1CtJ,GAASsiC,EAAQ,KAAK,GAAG,EACzBtiC,GAASsiC,EAAQ,KACfh5B,EAAM,KAAKtE,EAAK,IAAK,CAAC,OAAQhF,EAAO,MAAO,IAAK,GAAGsiC,EAAQ,QAAS,CAAA,CAAC,CACvE,EACDtiC,GAASsiC,EAAQ,KAAK,GAAG,IAGzBC,EAAUj5B,EAAM,MAAM,gBAAgB,EACtCtJ,GAASsiC,EAAQ,KACfh5B,EAAM,KAAKtE,EAAK,IAAK,CACnB,OAAQhF,EACR,MAAOgF,EAAK,MAAQ,IAAM,IAC1B,GAAGs9B,EAAQ,QAAS,CAC5B,CAAO,CACF,GAGHC,EAAS,EAELv9B,EAAK,QACPu9B,EAAUj5B,EAAM,MAAM,QAAQ2kB,CAAM,EAAE,EACtCjuB,GAASsiC,EAAQ,KAAK,IAAMwC,CAAK,EACjC9kC,GAASsiC,EAAQ,KACfh5B,EAAM,KAAKtE,EAAK,MAAO,CACrB,OAAQhF,EACR,MAAO8kC,EACP,GAAGxC,EAAQ,QAAS,CAC5B,CAAO,CACF,EACDtiC,GAASsiC,EAAQ,KAAKwC,CAAK,EAC3BvC,EAAS,GAGXviC,GAASsiC,EAAQ,KAAK,GAAG,EACzBjuB,EAAM,EAECrU,CACT,CAKA,SAAS4lC,IAAY,CACnB,MAAO,GACT,CC5EAzX,GAAe,KAAO0X,GASf,SAAS1X,GAAenpB,EAAM/C,EAAGqH,EAAOvH,EAAM,CACnD,MAAMmG,EAAOlD,EAAK,cACZqP,EAAO/K,EAAM,MAAM,gBAAgB,EACzC,IAAIi5B,EAAUj5B,EAAM,MAAM,OAAO,EACjC,MAAMg5B,EAAUh5B,EAAM,cAAcvH,CAAI,EACxC,IAAI/B,EAAQsiC,EAAQ,KAAK,IAAI,EAC7B,MAAMwD,EAAMx8B,EAAM,KAAKtE,EAAK,IAAK,CAC/B,OAAQhF,EACR,MAAO,IACP,GAAGsiC,EAAQ,QAAS,CACxB,CAAG,EACDtiC,GAASsiC,EAAQ,KAAKwD,EAAM,IAAI,EAEhCvD,EAAS,EAET,MAAM7xB,EAAQpH,EAAM,MACpBA,EAAM,MAAQ,CAAE,EAChBi5B,EAAUj5B,EAAM,MAAM,WAAW,EAKjC,MAAMy8B,EAAYz8B,EAAM,KAAKA,EAAM,cAActE,CAAI,EAAG,CACtD,OAAQhF,EACR,MAAO,IACP,GAAGsiC,EAAQ,QAAS,CACxB,CAAG,EACD,OAAAC,EAAS,EACTj5B,EAAM,MAAQoH,EACd2D,EAAM,EAEFnM,IAAS,QAAU,CAAC49B,GAAOA,IAAQC,EACrC/lC,GAASsiC,EAAQ,KAAKyD,EAAY,GAAG,EAC5B79B,IAAS,WAElBlI,EAAQA,EAAM,MAAM,EAAG,EAAE,EAEzBA,GAASsiC,EAAQ,KAAK,GAAG,EAGpBtiC,CACT,CAKA,SAAS6lC,IAAqB,CAC5B,MAAO,GACT,CCzDAzX,GAAW,KAAO4X,GAQX,SAAS5X,GAAWppB,EAAM/C,EAAGqH,EAAO,CACzC,IAAItJ,EAAQgF,EAAK,OAAS,GACtBgd,EAAW,IACXxgB,EAAQ,GAKZ,KAAO,IAAI,OAAO,WAAawgB,EAAW,UAAU,EAAE,KAAKhiB,CAAK,GAC9DgiB,GAAY,IAmBd,IAbE,WAAW,KAAKhiB,CAAK,IACnB,WAAW,KAAKA,CAAK,GAAK,WAAW,KAAKA,CAAK,GAAM,QAAQ,KAAKA,CAAK,KAEzEA,EAAQ,IAAMA,EAAQ,KAUjB,EAAEwB,EAAQ8H,EAAM,OAAO,QAAQ,CACpC,MAAM86B,EAAU96B,EAAM,OAAO9H,CAAK,EAC5BgJ,EAAalB,EAAM,eAAe86B,CAAO,EAE/C,IAAI/+B,EAKJ,GAAK++B,EAAQ,QAEb,KAAQ/+B,EAAQmF,EAAW,KAAKxK,CAAK,GAAI,CACvC,IAAI8E,EAAWO,EAAM,MAInBrF,EAAM,WAAW8E,CAAQ,IAAM,IAC/B9E,EAAM,WAAW8E,EAAW,CAAC,IAAM,IAEnCA,IAGF9E,EAAQA,EAAM,MAAM,EAAG8E,CAAQ,EAAI,IAAM9E,EAAM,MAAMqF,EAAM,MAAQ,CAAC,CACrE,CACF,CAED,OAAO2c,EAAWhiB,EAAQgiB,CAC5B,CAKA,SAASgkB,IAAiB,CACxB,MAAO,GACT,CC/DO,SAASC,GAAqBjhC,EAAMsE,EAAO,CAChD,MAAMsQ,EAAMpN,GAASxH,CAAI,EAEzB,MAAO,GACL,CAACsE,EAAM,QAAQ,cAEbtE,EAAK,KAEL,CAACA,EAAK,OAENA,EAAK,UACLA,EAAK,SAAS,SAAW,GACzBA,EAAK,SAAS,CAAC,EAAE,OAAS,SAEzB4U,IAAQ5U,EAAK,KAAO,UAAY4U,IAAQ5U,EAAK,MAE9C,oBAAoB,KAAKA,EAAK,GAAG,GAGjC,CAAC,iBAAiB,KAAKA,EAAK,GAAG,EAErC,CCxBAkkB,GAAK,KAAOgd,GASL,SAAShd,GAAKlkB,EAAM/C,EAAGqH,EAAOvH,EAAM,CACzC,MAAM+iC,EAAQD,GAAWv7B,CAAK,EACxB2kB,EAAS6W,IAAU,IAAM,QAAU,aACnCxC,EAAUh5B,EAAM,cAAcvH,CAAI,EAExC,IAAIsS,EAEAkuB,EAEJ,GAAI0D,GAAqBjhC,EAAMsE,CAAK,EAAG,CAErC,MAAMoH,EAAQpH,EAAM,MACpBA,EAAM,MAAQ,CAAE,EAChB+K,EAAO/K,EAAM,MAAM,UAAU,EAC7B,IAAItJ,EAAQsiC,EAAQ,KAAK,GAAG,EAC5B,OAAAtiC,GAASsiC,EAAQ,KACfh5B,EAAM,kBAAkBtE,EAAM,CAC5B,OAAQhF,EACR,MAAO,IACP,GAAGsiC,EAAQ,QAAS,CAC5B,CAAO,CACF,EACDtiC,GAASsiC,EAAQ,KAAK,GAAG,EACzBjuB,EAAM,EACN/K,EAAM,MAAQoH,EACP1Q,CACR,CAEDqU,EAAO/K,EAAM,MAAM,MAAM,EACzBi5B,EAAUj5B,EAAM,MAAM,OAAO,EAC7B,IAAItJ,EAAQsiC,EAAQ,KAAK,GAAG,EAC5B,OAAAtiC,GAASsiC,EAAQ,KACfh5B,EAAM,kBAAkBtE,EAAM,CAC5B,OAAQhF,EACR,MAAO,KACP,GAAGsiC,EAAQ,QAAS,CAC1B,CAAK,CACF,EACDtiC,GAASsiC,EAAQ,KAAK,IAAI,EAC1BC,EAAS,EAIN,CAACv9B,EAAK,KAAOA,EAAK,OAEnB,eAAe,KAAKA,EAAK,GAAG,GAE5Bu9B,EAAUj5B,EAAM,MAAM,oBAAoB,EAC1CtJ,GAASsiC,EAAQ,KAAK,GAAG,EACzBtiC,GAASsiC,EAAQ,KACfh5B,EAAM,KAAKtE,EAAK,IAAK,CAAC,OAAQhF,EAAO,MAAO,IAAK,GAAGsiC,EAAQ,QAAS,CAAA,CAAC,CACvE,EACDtiC,GAASsiC,EAAQ,KAAK,GAAG,IAGzBC,EAAUj5B,EAAM,MAAM,gBAAgB,EACtCtJ,GAASsiC,EAAQ,KACfh5B,EAAM,KAAKtE,EAAK,IAAK,CACnB,OAAQhF,EACR,MAAOgF,EAAK,MAAQ,IAAM,IAC1B,GAAGs9B,EAAQ,QAAS,CAC5B,CAAO,CACF,GAGHC,EAAS,EAELv9B,EAAK,QACPu9B,EAAUj5B,EAAM,MAAM,QAAQ2kB,CAAM,EAAE,EACtCjuB,GAASsiC,EAAQ,KAAK,IAAMwC,CAAK,EACjC9kC,GAASsiC,EAAQ,KACfh5B,EAAM,KAAKtE,EAAK,MAAO,CACrB,OAAQhF,EACR,MAAO8kC,EACP,GAAGxC,EAAQ,QAAS,CAC5B,CAAO,CACF,EACDtiC,GAASsiC,EAAQ,KAAKwC,CAAK,EAC3BvC,EAAS,GAGXviC,GAASsiC,EAAQ,KAAK,GAAG,EAEzBjuB,EAAM,EACCrU,CACT,CAQA,SAASkmC,GAASlhC,EAAM/C,EAAGqH,EAAO,CAChC,OAAO28B,GAAqBjhC,EAAMsE,CAAK,EAAI,IAAM,GACnD,CC5GA+kB,GAAc,KAAO8X,GASd,SAAS9X,GAAcrpB,EAAM/C,EAAGqH,EAAOvH,EAAM,CAClD,MAAMmG,EAAOlD,EAAK,cACZqP,EAAO/K,EAAM,MAAM,eAAe,EACxC,IAAIi5B,EAAUj5B,EAAM,MAAM,OAAO,EACjC,MAAMg5B,EAAUh5B,EAAM,cAAcvH,CAAI,EACxC,IAAI/B,EAAQsiC,EAAQ,KAAK,GAAG,EAC5B,MAAMx4B,EAAOR,EAAM,kBAAkBtE,EAAM,CACzC,OAAQhF,EACR,MAAO,IACP,GAAGsiC,EAAQ,QAAS,CACxB,CAAG,EACDtiC,GAASsiC,EAAQ,KAAKx4B,EAAO,IAAI,EAEjCy4B,EAAS,EAET,MAAM7xB,EAAQpH,EAAM,MACpBA,EAAM,MAAQ,CAAE,EAChBi5B,EAAUj5B,EAAM,MAAM,WAAW,EAKjC,MAAMy8B,EAAYz8B,EAAM,KAAKA,EAAM,cAActE,CAAI,EAAG,CACtD,OAAQhF,EACR,MAAO,IACP,GAAGsiC,EAAQ,QAAS,CACxB,CAAG,EACD,OAAAC,EAAS,EACTj5B,EAAM,MAAQoH,EACd2D,EAAM,EAEFnM,IAAS,QAAU,CAAC4B,GAAQA,IAASi8B,EACvC/lC,GAASsiC,EAAQ,KAAKyD,EAAY,GAAG,EAC5B79B,IAAS,WAElBlI,EAAQA,EAAM,MAAM,EAAG,EAAE,EAEzBA,GAASsiC,EAAQ,KAAK,GAAG,EAGpBtiC,CACT,CAKA,SAASmmC,IAAoB,CAC3B,MAAO,GACT,CCtDO,SAASC,GAAY98B,EAAO,CACjC,MAAM8J,EAAS9J,EAAM,QAAQ,QAAU,IAEvC,GAAI8J,IAAW,KAAOA,IAAW,KAAOA,IAAW,IACjD,MAAM,IAAI,MACR,gCACEA,EACA,mDACH,EAGH,OAAOA,CACT,CCVO,SAASizB,GAAiB/8B,EAAO,CACtC,MAAMg9B,EAASF,GAAY98B,CAAK,EAC1Bi9B,EAAcj9B,EAAM,QAAQ,YAElC,GAAI,CAACi9B,EACH,OAAOD,IAAW,IAAM,IAAM,IAGhC,GAAIC,IAAgB,KAAOA,IAAgB,KAAOA,IAAgB,IAChE,MAAM,IAAI,MACR,gCACEA,EACA,wDACH,EAGH,GAAIA,IAAgBD,EAClB,MAAM,IAAI,MACR,uBACEA,EACA,0BACAC,EACA,oBACH,EAGH,OAAOA,CACT,CC7BO,SAASC,GAAmBl9B,EAAO,CACxC,MAAM8J,EAAS9J,EAAM,QAAQ,eAAiB,IAE9C,GAAI8J,IAAW,KAAOA,IAAW,IAC/B,MAAM,IAAI,MACR,gCACEA,EACA,oDACH,EAGH,OAAOA,CACT,CCZO,SAASqzB,GAAUn9B,EAAO,CAC/B,MAAM8J,EAAS9J,EAAM,QAAQ,MAAQ,IAErC,GAAI8J,IAAW,KAAOA,IAAW,KAAOA,IAAW,IACjD,MAAM,IAAI,MACR,gCACEA,EACA,iDACH,EAGH,OAAOA,CACT,CCHO,SAASrG,GAAK/H,EAAM2D,EAAQW,EAAOvH,EAAM,CAC9C,MAAMsS,EAAO/K,EAAM,MAAM,MAAM,EACzBo9B,EAAgBp9B,EAAM,cAE5B,IAAIg9B,EAASthC,EAAK,QAAUwhC,GAAmBl9B,CAAK,EAAI88B,GAAY98B,CAAK,EAEzE,MAAMi9B,EAAcvhC,EAAK,QACrBshC,IAAW,IACT,IACA,IACFD,GAAiB/8B,CAAK,EAC1B,IAAIq9B,EACFh+B,GAAUW,EAAM,eAAiBg9B,IAAWh9B,EAAM,eAAiB,GAErE,GAAI,CAACtE,EAAK,QAAS,CACjB,MAAM4hC,EAAgB5hC,EAAK,SAAWA,EAAK,SAAS,CAAC,EAAI,OAqCzD,IAzBGshC,IAAW,KAAOA,IAAW,MAE9BM,IACC,CAACA,EAAc,UAAY,CAACA,EAAc,SAAS,CAAC,IAErDt9B,EAAM,MAAMA,EAAM,MAAM,OAAS,CAAC,IAAM,QACxCA,EAAM,MAAMA,EAAM,MAAM,OAAS,CAAC,IAAM,YACxCA,EAAM,MAAMA,EAAM,MAAM,OAAS,CAAC,IAAM,QACxCA,EAAM,MAAMA,EAAM,MAAM,OAAS,CAAC,IAAM,YAExCA,EAAM,WAAWA,EAAM,WAAW,OAAS,CAAC,IAAM,GAClDA,EAAM,WAAWA,EAAM,WAAW,OAAS,CAAC,IAAM,GAClDA,EAAM,WAAWA,EAAM,WAAW,OAAS,CAAC,IAAM,IAElDq9B,EAAqB,IAWnBF,GAAUn9B,CAAK,IAAMg9B,GAAUM,EAAe,CAChD,IAAIplC,EAAQ,GAEZ,KAAO,EAAEA,EAAQwD,EAAK,SAAS,QAAQ,CACrC,MAAM+L,EAAO/L,EAAK,SAASxD,CAAK,EAEhC,GACEuP,GACAA,EAAK,OAAS,YACdA,EAAK,UACLA,EAAK,SAAS,CAAC,GACfA,EAAK,SAAS,CAAC,EAAE,OAAS,gBAC1B,CACA41B,EAAqB,GACrB,KACD,CACF,CACF,CACF,CAEGA,IACFL,EAASC,GAGXj9B,EAAM,cAAgBg9B,EACtB,MAAMtmC,EAAQsJ,EAAM,cAActE,EAAMjD,CAAI,EAC5C,OAAAuH,EAAM,eAAiBg9B,EACvBh9B,EAAM,cAAgBo9B,EACtBryB,EAAM,EACCrU,CACT,CC3FO,SAAS6mC,GAAoBv9B,EAAO,CACzC,MAAM/E,EAAQ+E,EAAM,QAAQ,gBAAkB,MAE9C,GAAI/E,IAAU,OAASA,IAAU,OAASA,IAAU,QAClD,MAAM,IAAI,MACR,gCACEA,EACA,mEACH,EAGH,OAAOA,CACT,CCLO,SAASilB,GAASxkB,EAAM2D,EAAQW,EAAOvH,EAAM,CAClD,MAAM+kC,EAAiBD,GAAoBv9B,CAAK,EAChD,IAAIg9B,EAASh9B,EAAM,eAAiB88B,GAAY98B,CAAK,EAGjDX,GAAUA,EAAO,OAAS,QAAUA,EAAO,UAC7C29B,GACG,OAAO39B,EAAO,OAAU,UAAYA,EAAO,MAAQ,GAChDA,EAAO,MACP,IACHW,EAAM,QAAQ,sBAAwB,GACnC,EACAX,EAAO,SAAS,QAAQ3D,CAAI,GAChCshC,GAGJ,IAAI32B,EAAO22B,EAAO,OAAS,GAGzBQ,IAAmB,OAClBA,IAAmB,UAChBn+B,GAAUA,EAAO,OAAS,QAAUA,EAAO,QAAW3D,EAAK,WAE/D2K,EAAO,KAAK,KAAKA,EAAO,CAAC,EAAI,GAG/B,MAAM2yB,EAAUh5B,EAAM,cAAcvH,CAAI,EACxCugC,EAAQ,KAAKgE,EAAS,IAAI,OAAO32B,EAAO22B,EAAO,MAAM,CAAC,EACtDhE,EAAQ,MAAM3yB,CAAI,EAClB,MAAM0E,EAAO/K,EAAM,MAAM,UAAU,EAC7BtJ,EAAQsJ,EAAM,YAClBA,EAAM,cAActE,EAAMs9B,EAAQ,QAAO,CAAE,EAC3Cxb,CACD,EACD,OAAAzS,EAAM,EAECrU,EAGP,SAAS8mB,EAAIb,EAAMzkB,EAAOshC,EAAO,CAC/B,OAAIthC,GACMshC,EAAQ,GAAK,IAAI,OAAOnzB,CAAI,GAAKsW,GAGnC6c,EAAQwD,EAASA,EAAS,IAAI,OAAO32B,EAAO22B,EAAO,MAAM,GAAKrgB,CACvE,CACH,CCjDO,SAAS7C,GAAUpe,EAAM/C,EAAGqH,EAAOvH,EAAM,CAC9C,MAAMsS,EAAO/K,EAAM,MAAM,WAAW,EAC9Bi5B,EAAUj5B,EAAM,MAAM,UAAU,EAChCtJ,EAAQsJ,EAAM,kBAAkBtE,EAAMjD,CAAI,EAChD,OAAAwgC,EAAS,EACTluB,EAAM,EACCrU,CACT,CCDO,MAAM+mC,GAGT9T,GAAQ,CACN,QACA,SACA,WAEA,WACA,oBACA,QACA,iBACA,aAEA,aACA,OACA,gBAEA,oBAEA,oBACA,SACA,OAEA,eACN,CAAK,EC7BE,SAASppB,GAAK7E,EAAM/C,EAAGqH,EAAOvH,EAAM,CAOzC,OALoBiD,EAAK,SAAS,KAAK,SAAUkoB,EAAG,CAClD,OAAO6Z,GAAS7Z,CAAC,CACrB,CAAG,EAE+B5jB,EAAM,kBAAoBA,EAAM,eAC/C,KAAKA,EAAOtE,EAAMjD,CAAI,CACzC,CCdO,SAASilC,GAAY19B,EAAO,CACjC,MAAM8J,EAAS9J,EAAM,QAAQ,QAAU,IAEvC,GAAI8J,IAAW,KAAOA,IAAW,IAC/B,MAAM,IAAI,MACR,iCACEA,EACA,8CACH,EAGH,OAAOA,CACT,CCXAwW,GAAO,KAAOqd,GASP,SAASrd,GAAO5kB,EAAM/C,EAAGqH,EAAOvH,EAAM,CAC3C,MAAMqR,EAAS4zB,GAAY19B,CAAK,EAC1B+K,EAAO/K,EAAM,MAAM,QAAQ,EAC3Bg5B,EAAUh5B,EAAM,cAAcvH,CAAI,EAClCiM,EAASs0B,EAAQ,KAAKlvB,EAASA,CAAM,EAE3C,IAAI4D,EAAUsrB,EAAQ,KACpBh5B,EAAM,kBAAkBtE,EAAM,CAC5B,MAAOoO,EACP,OAAApF,EACA,GAAGs0B,EAAQ,QAAS,CAC1B,CAAK,CACF,EACD,MAAMgD,EAActuB,EAAQ,WAAW,CAAC,EAClCrE,EAAOsyB,GACXljC,EAAK,OAAO,WAAWA,EAAK,OAAO,OAAS,CAAC,EAC7CujC,EACAlyB,CACD,EAEGT,EAAK,SACPqE,EAAUguB,GAAyBM,CAAW,EAAItuB,EAAQ,MAAM,CAAC,GAGnE,MAAMuuB,EAAcvuB,EAAQ,WAAWA,EAAQ,OAAS,CAAC,EACnDzD,EAAQ0xB,GAAWljC,EAAK,MAAM,WAAW,CAAC,EAAGwjC,EAAanyB,CAAM,EAElEG,EAAM,SACRyD,EAAUA,EAAQ,MAAM,EAAG,EAAE,EAAIguB,GAAyBO,CAAW,GAGvE,MAAMjyB,EAAQgvB,EAAQ,KAAKlvB,EAASA,CAAM,EAE1C,OAAAiB,EAAM,EAEN/K,EAAM,+BAAiC,CACrC,MAAOiK,EAAM,QACb,OAAQZ,EAAK,OACd,EACM3E,EAASgJ,EAAU1D,CAC5B,CAQA,SAAS2zB,GAAWhlC,EAAGsiC,EAAIj7B,EAAO,CAChC,OAAOA,EAAM,QAAQ,QAAU,GACjC,CCxDO,SAASQ,GAAK9E,EAAM/C,EAAGqH,EAAOvH,EAAM,CACzC,OAAOuH,EAAM,KAAKtE,EAAK,MAAOjD,CAAI,CACpC,CCNO,SAASmlC,GAAoB59B,EAAO,CACzC,MAAM69B,EAAa79B,EAAM,QAAQ,gBAAkB,EAEnD,GAAI69B,EAAa,EACf,MAAM,IAAI,MACR,2CACEA,EACA,sDACH,EAGH,OAAOA,CACT,CCNO,SAASrlB,GAAc7f,EAAGsiC,EAAIj7B,EAAO,CAC1C,MAAMtJ,GACJymC,GAAUn9B,CAAK,GAAKA,EAAM,QAAQ,WAAa,IAAM,KACrD,OAAO49B,GAAoB59B,CAAK,CAAC,EAEnC,OAAOA,EAAM,QAAQ,WAAatJ,EAAM,MAAM,EAAG,EAAE,EAAIA,CACzD,CCGO,MAAMs1B,GAAS,CACpB,WAAAhI,GACA,MAAOhE,GACT,KAAEzb,GACA,WAAAtN,GACA,SAAA8oB,GACA,UAAAC,GACA,QAAAnG,GACA,KAAA9gB,GACA,MAAAknB,GACA,eAAA4E,GACA,WAAAC,GACA,KAAAlF,GACA,cAAAmF,GACA,KAAAthB,GACA,SAAAyc,GACA,UAAApG,GACA,KAAAvZ,GACA,OAAA+f,GACF,KAAE9f,GACA,cAAAgY,EACF,ECFO,SAASslB,IAAuB,CACrC,MAAO,CACL,MAAO,CACL,MAAOC,GACP,UAAWC,GACX,YAAaA,GACb,SAAUC,EACX,EACD,KAAM,CACJ,SAAUC,GACV,MAAOC,GACP,UAAWpzB,GACX,YAAaA,GACb,SAAUA,EACX,CACF,CACH,CAMA,SAASgzB,GAAWl3B,EAAO,CACzB,MAAM8e,EAAQ9e,EAAM,OAEpB,KAAK,MACH,CACE,KAAM,QACN,MAAO8e,EAAM,IAAI,SAAU/B,EAAG,CAC5B,OAAOA,IAAM,OAAS,KAAOA,CACrC,CAAO,EACD,SAAU,CAAE,CACb,EACD/c,CACD,EACD,KAAK,KAAK,QAAU,EACtB,CAMA,SAASs3B,GAAUt3B,EAAO,CACxB,KAAK,KAAKA,CAAK,EACf,KAAK,KAAK,QAAU,MACtB,CAMA,SAASo3B,GAASp3B,EAAO,CACvB,KAAK,MAAM,CAAC,KAAM,WAAY,SAAU,CAAA,CAAE,EAAGA,CAAK,CACpD,CAMA,SAASkE,GAAKlE,EAAO,CACnB,KAAK,KAAKA,CAAK,CACjB,CAMA,SAASm3B,GAAUn3B,EAAO,CACxB,KAAK,MAAM,CAAC,KAAM,YAAa,SAAU,CAAA,CAAE,EAAGA,CAAK,CACrD,CAQA,SAASq3B,GAAar3B,EAAO,CAC3B,IAAInQ,EAAQ,KAAK,OAAQ,EAErB,KAAK,KAAK,UACZA,EAAQA,EAAM,QAAQ,aAAcoP,EAAO,GAG7C,MAAMpK,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EACtCA,EAAK,KACZA,EAAK,MAAQhF,EACb,KAAK,KAAKmQ,CAAK,CACjB,CAOA,SAASf,GAAQ/L,EAAIslB,EAAI,CAEvB,OAAOA,IAAO,IAAMA,EAAKtlB,CAC3B,CAWO,SAASqkC,GAAmBpoC,EAAS,CAC1C,MAAMC,EAAWD,GAAW,CAAE,EACxBqoC,EAAUpoC,EAAS,iBACnBqoC,EAAkBroC,EAAS,eAC3BikC,EAAejkC,EAAS,aACxBsoC,EAASF,EAAU,IAAM,IAE/B,MAAO,CACL,OAAQ,CACN,CAAC,UAAW,KAAM,YAAa,WAAW,EAC1C,CAAC,UAAW;AAAA,EAAM,YAAa,WAAW,EAG1C,CAAC,QAAS,GAAM,UAAW,IAAK,MAAO,QAAS,EAEhD,CAAC,UAAW,IAAK,YAAa,WAAW,EAGzC,CAAC,QAAS,GAAM,UAAW,IAAK,MAAO,GAAG,EAM1C,CAAC,QAAS,GAAM,UAAW,IAAK,MAAO,OAAO,CAC/C,EACD,SAAU,CACR,WAAYG,EACZ,MAAOC,EACP,UAAWC,EACX,SAAUC,CACX,CACF,EAMD,SAASF,EAAY/iC,EAAM/C,EAAGqH,EAAOvH,EAAM,CACzC,OAAOmmC,EAAcC,EAAkBnjC,EAAMsE,EAAOvH,CAAI,EAAGiD,EAAK,KAAK,CACtE,CAUD,SAASijC,EAAejjC,EAAM/C,EAAGqH,EAAOvH,EAAM,CAC5C,MAAMgiC,EAAMqE,EAAqBpjC,EAAMsE,EAAOvH,CAAI,EAC5C/B,EAAQkoC,EAAc,CAACnE,CAAG,CAAC,EAEjC,OAAO/jC,EAAM,MAAM,EAAGA,EAAM,QAAQ;AAAA,CAAI,CAAC,CAC1C,CAMD,SAASgoC,EAAgBhjC,EAAM/C,EAAGqH,EAAOvH,EAAM,CAC7C,MAAMsS,EAAO/K,EAAM,MAAM,WAAW,EAC9Bi5B,EAAUj5B,EAAM,MAAM,UAAU,EAChCtJ,EAAQsJ,EAAM,kBAAkBtE,EAAM,CAC1C,GAAGjD,EACH,OAAQ8lC,EACR,MAAOA,CACb,CAAK,EACD,OAAAtF,EAAS,EACTluB,EAAM,EACCrU,CACR,CAMD,SAASkoC,EAAcG,EAAQpZ,EAAO,CACpC,OAAOsU,GAAc8E,EAAQ,CAC3B,MAAApZ,EAEA,gBAAA2Y,EAEA,QAAAD,EAEA,aAAAnE,CACN,CAAK,CACF,CAOD,SAAS2E,EAAkBnjC,EAAMsE,EAAOvH,EAAM,CAC5C,MAAMoI,EAAWnF,EAAK,SACtB,IAAIxD,EAAQ,GAEZ,MAAM+H,EAAS,CAAE,EACXg5B,EAAUj5B,EAAM,MAAM,OAAO,EAEnC,KAAO,EAAE9H,EAAQ2I,EAAS,QACxBZ,EAAO/H,CAAK,EAAI4mC,EAAqBj+B,EAAS3I,CAAK,EAAG8H,EAAOvH,CAAI,EAGnE,OAAAwgC,EAAS,EAEFh5B,CACR,CAOD,SAAS6+B,EAAqBpjC,EAAMsE,EAAOvH,EAAM,CAC/C,MAAMoI,EAAWnF,EAAK,SACtB,IAAIxD,EAAQ,GAEZ,MAAM+H,EAAS,CAAE,EACXg5B,EAAUj5B,EAAM,MAAM,UAAU,EAEtC,KAAO,EAAE9H,EAAQ2I,EAAS,QAIxBZ,EAAO/H,CAAK,EAAIwmC,EAAgB79B,EAAS3I,CAAK,EAAGwD,EAAMsE,EAAOvH,CAAI,EAGpE,OAAAwgC,EAAS,EAEFh5B,CACR,CAMD,SAASu+B,EAAoB9iC,EAAM2D,EAAQW,EAAO,CAChD,IAAItJ,EAAQk1B,GAAgB,WAAWlwB,EAAM2D,EAAQW,CAAK,EAE1D,OAAIA,EAAM,MAAM,SAAS,WAAW,IAClCtJ,EAAQA,EAAM,QAAQ,MAAO,MAAM,GAG9BA,CACR,CACH,CCvRO,SAASsoC,IAA8B,CAC5C,MAAO,CACL,KAAM,CACJ,0BAA2BC,GAC3B,4BAA6BA,GAC7B,UAAWC,EACZ,CACF,CACH,CASO,SAASC,IAA4B,CAC1C,MAAO,CACL,OAAQ,CAAC,CAAC,QAAS,GAAM,UAAW,IAAK,MAAO,OAAO,CAAC,EACxD,SAAU,CAAC,SAAUC,EAAwB,CAC9C,CACH,CAMA,SAASH,GAAUp4B,EAAO,CAExB,MAAMnL,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EACtCA,EAAK,KACZA,EAAK,QAAUmL,EAAM,OAAS,2BAChC,CAMA,SAASq4B,GAA8Br4B,EAAO,CAC5C,MAAMxH,EAAS,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAE/C,GACEA,GACAA,EAAO,OAAS,YAChB,OAAOA,EAAO,SAAY,UAC1B,CACA,MAAM3D,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EACtCA,EAAK,KACZ,MAAM4iB,EAAO5iB,EAAK,SAAS,CAAC,EAE5B,GAAI4iB,GAAQA,EAAK,OAAS,OAAQ,CAChC,MAAMmF,EAAWpkB,EAAO,SACxB,IAAInH,EAAQ,GAERmnC,EAEJ,KAAO,EAAEnnC,EAAQurB,EAAS,QAAQ,CAChC,MAAM6b,EAAU7b,EAASvrB,CAAK,EAC9B,GAAIonC,EAAQ,OAAS,YAAa,CAChCD,EAAkBC,EAClB,KACD,CACF,CAEGD,IAAoB3jC,IAEtB4iB,EAAK,MAAQA,EAAK,MAAM,MAAM,CAAC,EAE3BA,EAAK,MAAM,SAAW,EACxB5iB,EAAK,SAAS,MAAO,EAErBA,EAAK,UACL4iB,EAAK,UACL,OAAOA,EAAK,SAAS,MAAM,QAAW,WAEtCA,EAAK,SAAS,MAAM,SACpBA,EAAK,SAAS,MAAM,SACpB5iB,EAAK,SAAS,MAAQ,OAAO,OAAO,GAAI4iB,EAAK,SAAS,KAAK,GAGhE,CACF,CAED,KAAK,KAAKzX,CAAK,CACjB,CAMA,SAASu4B,GAAyB1jC,EAAM2D,EAAQW,EAAOvH,EAAM,CAC3D,MAAM6lB,EAAO5iB,EAAK,SAAS,CAAC,EACtB6jC,EACJ,OAAO7jC,EAAK,SAAY,WAAa4iB,GAAQA,EAAK,OAAS,YACvDkhB,EAAW,KAAO9jC,EAAK,QAAU,IAAM,KAAO,KAC9Cs9B,EAAUh5B,EAAM,cAAcvH,CAAI,EAEpC8mC,GACFvG,EAAQ,KAAKwG,CAAQ,EAGvB,IAAI9oC,EAAQk1B,GAAgB,SAASlwB,EAAM2D,EAAQW,EAAO,CACxD,GAAGvH,EACH,GAAGugC,EAAQ,QAAS,CACxB,CAAG,EAED,OAAIuG,IACF7oC,EAAQA,EAAM,QAAQ,kCAAmC0B,CAAK,GAGzD1B,EAMP,SAAS0B,EAAM2B,EAAI,CACjB,OAAOA,EAAKylC,CACb,CACH,CC5GO,SAASC,IAAkB,CAChC,MAAO,CACLzI,GAAgC,EAChCkC,GAAyB,EACzBU,GAA8B,EAC9BkE,GAAsB,EACtBkB,GAA6B,CAC9B,CACH,CAYO,SAASU,GAAc1pC,EAAS,CACrC,MAAO,CACL,WAAY,CACVwhC,GAA8B,EAC9B2B,GAAsBnjC,CAAO,EAC7B+jC,GAA4B,EAC5BqE,GAAmBpoC,CAAO,EAC1BmpC,GAA2B,CAC5B,CACF,CACH,CCzDA,MAAMQ,GAAY,CAChB,SAAUC,GACV,QAAS,EACX,EACMhI,GAAS,CACb,SAAUiI,GACV,QAAS,EACX,EACMzQ,GAAO,CACX,SAAU0Q,GACV,QAAS,EACX,EACM5H,GAAQ,CACZ,SAAU6H,GACV,QAAS,EACX,EACMC,GAAsB,CAC1B,SAAUC,GACV,QAAS,EACX,EACMC,GAAc,CAClB,KAAM,cACN,SAAUC,GACV,SAAUC,EACZ,EACMC,GAAmB,CACvB,KAAM,mBACN,SAAUC,GACV,SAAUC,EACZ,EACMC,GAAgB,CACpB,KAAM,gBACN,SAAUC,GACV,SAAUC,EACZ,EAGMlgC,GAAO,CAAA,EAUN,SAASmgC,IAAqB,CACnC,MAAO,CACL,KAAAngC,EACJ,CACA,CAGA,IAAI+D,GAAO,GAGX,KAAOA,GAAO,KACZ/D,GAAK+D,EAAI,EAAIi8B,GACbj8B,KACIA,KAAS,GAAIA,GAAO,GAAYA,KAAS,KAAIA,GAAO,IAE1D/D,GAAK,EAAE,EAAIggC,GACXhgC,GAAK,EAAE,EAAIggC,GACXhgC,GAAK,EAAE,EAAIggC,GACXhgC,GAAK,EAAE,EAAIggC,GACXhgC,GAAK,EAAE,EAAI,CAACggC,GAAeH,EAAgB,EAC3C7/B,GAAK,GAAG,EAAI,CAACggC,GAAeH,EAAgB,EAC5C7/B,GAAK,EAAE,EAAI,CAACggC,GAAeN,EAAW,EACtC1/B,GAAK,GAAG,EAAI,CAACggC,GAAeN,EAAW,EAmBvC,SAASO,GAAsBx6B,EAASC,EAAIyC,EAAK,CAC/C,MAAMxB,EAAO,KAEb,IAAIy5B,EAEA95B,EACJ,OAAOrL,EAYP,SAASA,EAAM8I,EAAM,CACnB,MAAI,CAACs8B,GAASt8B,CAAI,GAAK,CAACm8B,GAAc,KAAKv5B,EAAMA,EAAK,QAAQ,GAAK25B,GAAmB35B,EAAK,MAAM,EACxFwB,EAAIpE,CAAI,GAEjB0B,EAAQ,MAAM,iBAAiB,EAC/BA,EAAQ,MAAM,sBAAsB,EAC7B+xB,EAAMzzB,CAAI,EAClB,CAYD,SAASyzB,EAAMzzB,EAAM,CACnB,OAAIs8B,GAASt8B,CAAI,GACf0B,EAAQ,QAAQ1B,CAAI,EACbyzB,GAELzzB,IAAS,IACX0B,EAAQ,QAAQ1B,CAAI,EACbw8B,GAEFp4B,EAAIpE,CAAI,CAChB,CAgBD,SAASw8B,EAAYx8B,EAAM,CAEzB,OAAIA,IAAS,GACJ0B,EAAQ,MAAM+5B,GAAqBgB,EAAkBC,CAAc,EAAE18B,CAAI,EAI9EA,IAAS,IAAMA,IAAS,IAAMS,EAAkBT,CAAI,GACtDuC,EAAO,GACPb,EAAQ,QAAQ1B,CAAI,EACbw8B,GASFC,EAAiBz8B,CAAI,CAC7B,CAYD,SAAS08B,EAAe18B,EAAM,CAC5B,OAAA0B,EAAQ,QAAQ1B,CAAI,EACpBq8B,EAAM,GACCG,CACR,CAYD,SAASC,EAAiBz8B,EAAM,CAG9B,OAAIuC,GAAQ85B,GAAO97B,EAAWqC,EAAK,QAAQ,GACzClB,EAAQ,KAAK,sBAAsB,EACnCA,EAAQ,KAAK,iBAAiB,EACvBC,EAAG3B,CAAI,GAEToE,EAAIpE,CAAI,CAChB,CACH,CAaA,SAAS47B,GAAoBl6B,EAASC,EAAIyC,EAAK,CAC7C,MAAMxB,EAAO,KACb,OAAO+5B,EAYP,SAASA,EAAS38B,EAAM,CACtB,OAAIA,IAAS,IAAMA,IAAS,KAAO,CAAC67B,GAAY,KAAKj5B,EAAMA,EAAK,QAAQ,GAAK25B,GAAmB35B,EAAK,MAAM,EAClGwB,EAAIpE,CAAI,GAEjB0B,EAAQ,MAAM,iBAAiB,EAC/BA,EAAQ,MAAM,oBAAoB,EAG3BA,EAAQ,MAAM05B,GAAW15B,EAAQ,QAAQ2xB,GAAQ3xB,EAAQ,QAAQmpB,GAAM+R,CAAQ,EAAGx4B,CAAG,EAAGA,CAAG,EAAEpE,CAAI,EACzG,CAYD,SAAS48B,EAAS58B,EAAM,CACtB,OAAA0B,EAAQ,KAAK,oBAAoB,EACjCA,EAAQ,KAAK,iBAAiB,EACvBC,EAAG3B,CAAI,CACf,CACH,CAaA,SAAS+7B,GAAyBr6B,EAASC,EAAIyC,EAAK,CAClD,MAAMxB,EAAO,KACb,IAAI2L,EAAS,GACTrK,EAAO,GACX,OAAO24B,EAYP,SAASA,EAAc78B,EAAM,CAC3B,OAAKA,IAAS,IAAMA,IAAS,MAAQg8B,GAAiB,KAAKp5B,EAAMA,EAAK,QAAQ,GAAK,CAAC25B,GAAmB35B,EAAK,MAAM,GAChHlB,EAAQ,MAAM,iBAAiB,EAC/BA,EAAQ,MAAM,qBAAqB,EACnC6M,GAAU,OAAO,cAAcvO,CAAI,EACnC0B,EAAQ,QAAQ1B,CAAI,EACb88B,GAEF14B,EAAIpE,CAAI,CAChB,CAYD,SAAS88B,EAAqB98B,EAAM,CAElC,GAAIO,EAAWP,CAAI,GAAKuO,EAAO,OAAS,EAEtC,OAAAA,GAAU,OAAO,cAAcvO,CAAI,EACnC0B,EAAQ,QAAQ1B,CAAI,EACb88B,EAET,GAAI98B,IAAS,GAAI,CACf,MAAMozB,EAAW7kB,EAAO,cACxB,GAAI6kB,IAAa,QAAUA,IAAa,QACtC,OAAA1xB,EAAQ,QAAQ1B,CAAI,EACb+8B,CAEV,CACD,OAAO34B,EAAIpE,CAAI,CAChB,CAYD,SAAS+8B,EAAsB/8B,EAAM,CACnC,OAAIA,IAAS,IACX0B,EAAQ,QAAQ1B,CAAI,EAChBkE,EACK84B,GAET94B,EAAO,GACA64B,IAEF34B,EAAIpE,CAAI,CAChB,CAYD,SAASg9B,EAAch9B,EAAM,CAG3B,OAAOA,IAAS,MAAQW,GAAaX,CAAI,GAAKgB,EAA0BhB,CAAI,GAAKmB,GAAkBnB,CAAI,GAAKkB,GAAmBlB,CAAI,EAAIoE,EAAIpE,CAAI,EAAI0B,EAAQ,QAAQ2xB,GAAQ3xB,EAAQ,QAAQmpB,GAAMoS,CAAa,EAAG74B,CAAG,EAAEpE,CAAI,CAC3N,CAYD,SAASi9B,EAAcj9B,EAAM,CAC3B,OAAA0B,EAAQ,KAAK,qBAAqB,EAClCA,EAAQ,KAAK,iBAAiB,EACvBC,EAAG3B,CAAI,CACf,CACH,CAaA,SAASq7B,GAAkB35B,EAASC,EAAIyC,EAAK,CAC3C,IAAItC,EAAO,EACX,OAAOo7B,EAYP,SAASA,EAAgBl9B,EAAM,CAC7B,OAAKA,IAAS,IAAMA,IAAS,MAAQ8B,EAAO,GAC1CA,IACAJ,EAAQ,QAAQ1B,CAAI,EACbk9B,GAELl9B,IAAS,IAAM8B,IAAS,GAC1BJ,EAAQ,QAAQ1B,CAAI,EACbm9B,GAEF/4B,EAAIpE,CAAI,CAChB,CAYD,SAASm9B,EAAen9B,EAAM,CAE5B,OAAOA,IAAS,KAAOoE,EAAIpE,CAAI,EAAI2B,EAAG3B,CAAI,CAC3C,CACH,CAaA,SAASs7B,GAAe55B,EAASC,EAAIyC,EAAK,CAExC,IAAIg5B,EAEAC,EAEAn5B,EACJ,OAAOo5B,EAYP,SAASA,EAAat9B,EAAM,CAI1B,OAAIA,IAAS,IAAMA,IAAS,GACnB0B,EAAQ,MAAMiyB,GAAO4J,EAAaC,CAAmB,EAAEx9B,CAAI,EAShEA,IAAS,MAAQgB,EAA0BhB,CAAI,GAAKmB,GAAkBnB,CAAI,GAAKA,IAAS,IAAMkB,GAAmBlB,CAAI,EAChHu9B,EAAYv9B,CAAI,GAEzBkE,EAAO,GACPxC,EAAQ,QAAQ1B,CAAI,EACbs9B,EACR,CAYD,SAASE,EAAoBx9B,EAAM,CAEjC,OAAIA,IAAS,GACXo9B,EAA0B,IAK1BC,EAA8BD,EAC9BA,EAA0B,QAE5B17B,EAAQ,QAAQ1B,CAAI,EACbs9B,CACR,CAWD,SAASC,EAAYv9B,EAAM,CAGzB,OAAIq9B,GAA+BD,GAA2B,CAACl5B,EACtDE,EAAIpE,CAAI,EAEV2B,EAAG3B,CAAI,CACf,CACH,CAaA,SAASu7B,GAAa75B,EAASC,EAAI,CACjC,IAAI6F,EAAW,EACXi2B,EAAY,EAChB,OAAOC,EAYP,SAASA,EAAW19B,EAAM,CACxB,OAAIA,IAAS,IACXwH,IACA9F,EAAQ,QAAQ1B,CAAI,EACb09B,GAML19B,IAAS,IAAMy9B,EAAYj2B,EACtBm2B,EAAkB39B,CAAI,EAM3BA,IAAS,IAAMA,IAAS,IAAMA,IAAS,IAAMA,IAAS,IAAMA,IAAS,IAAMA,IAAS,IAAMA,IAAS,IAAMA,IAAS,IAAMA,IAAS,IAAMA,IAAS,IAAMA,IAAS,IAAMA,IAAS,IAAMA,IAAS,IAAMA,IAAS,IAAMA,IAAS,IACtN0B,EAAQ,MAAMiyB,GAAOhyB,EAAIg8B,CAAiB,EAAE39B,CAAI,EAErDA,IAAS,MAAQgB,EAA0BhB,CAAI,GAAKmB,GAAkBnB,CAAI,EACrE2B,EAAG3B,CAAI,GAEhB0B,EAAQ,QAAQ1B,CAAI,EACb09B,EACR,CAYD,SAASC,EAAkB39B,EAAM,CAE/B,OAAIA,IAAS,IACXy9B,IAEF/7B,EAAQ,QAAQ1B,CAAI,EACb09B,CACR,CACH,CAiBA,SAASlC,GAAc95B,EAASC,EAAIyC,EAAK,CACvC,OAAOuvB,EAYP,SAASA,EAAM3zB,EAAM,CAEnB,OAAIA,IAAS,IAAMA,IAAS,IAAMA,IAAS,IAAMA,IAAS,IAAMA,IAAS,IAAMA,IAAS,IAAMA,IAAS,IAAMA,IAAS,IAAMA,IAAS,IAAMA,IAAS,IAAMA,IAAS,IAAMA,IAAS,KAChL0B,EAAQ,QAAQ1B,CAAI,EACb2zB,GAML3zB,IAAS,IACX0B,EAAQ,QAAQ1B,CAAI,EACb49B,GAML59B,IAAS,IACX0B,EAAQ,QAAQ1B,CAAI,EACb69B,GAIT79B,IAAS,IAETA,IAAS,MAAQgB,EAA0BhB,CAAI,GAAKmB,GAAkBnB,CAAI,EACjE2B,EAAG3B,CAAI,EAEToE,EAAIpE,CAAI,CAChB,CAeD,SAAS69B,EAAkB79B,EAAM,CAG/B,OAAIA,IAAS,MAAQA,IAAS,IAAMA,IAAS,IAAMgB,EAA0BhB,CAAI,GAAKmB,GAAkBnB,CAAI,EACnG2B,EAAG3B,CAAI,EAET2zB,EAAM3zB,CAAI,CAClB,CAYD,SAAS49B,EAA6B59B,EAAM,CAE1C,OAAOO,EAAWP,CAAI,EAAI89B,EAA8B99B,CAAI,EAAIoE,EAAIpE,CAAI,CACzE,CAYD,SAAS89B,EAA8B99B,EAAM,CAE3C,OAAIA,IAAS,IACX0B,EAAQ,QAAQ1B,CAAI,EACb2zB,GAELpzB,EAAWP,CAAI,GACjB0B,EAAQ,QAAQ1B,CAAI,EACb89B,GAIF15B,EAAIpE,CAAI,CAChB,CACH,CAiBA,SAAS07B,GAA4Bh6B,EAASC,EAAIyC,EAAK,CACrD,OAAOlN,EAYP,SAASA,EAAM8I,EAAM,CAEnB,OAAA0B,EAAQ,QAAQ1B,CAAI,EACbyF,CACR,CAYD,SAASA,EAAMzF,EAAM,CAEnB,OAAOS,EAAkBT,CAAI,EAAIoE,EAAIpE,CAAI,EAAI2B,EAAG3B,CAAI,CACrD,CACH,CAQA,SAAS67B,GAAY77B,EAAM,CACzB,OAAOA,IAAS,MAAQA,IAAS,IAAMA,IAAS,IAAMA,IAAS,IAAMA,IAAS,IAAMA,IAAS,IAAMA,IAAS,KAAOgB,EAA0BhB,CAAI,CACnJ,CAQA,SAASg8B,GAAiBh8B,EAAM,CAC9B,MAAO,CAACO,EAAWP,CAAI,CACzB,CAMA,SAASm8B,GAAcn8B,EAAM,CAK3B,MAAO,EAAEA,IAAS,IAAMs8B,GAASt8B,CAAI,EACvC,CAMA,SAASs8B,GAASt8B,EAAM,CACtB,OAAOA,IAAS,IAAMA,IAAS,IAAMA,IAAS,IAAMA,IAAS,IAAMS,EAAkBT,CAAI,CAC3F,CAMA,SAASu8B,GAAmBh4B,EAAQ,CAClC,IAAI5Q,EAAQ4Q,EAAO,OACf7I,EAAS,GACb,KAAO/H,KAAS,CACd,MAAM2O,EAAQiC,EAAO5Q,CAAK,EAAE,CAAC,EAC7B,IAAK2O,EAAM,OAAS,aAAeA,EAAM,OAAS,eAAiB,CAACA,EAAM,UAAW,CACnF5G,EAAS,GACT,KACD,CAID,GAAI4G,EAAM,8BAA+B,CACvC5G,EAAS,GACT,KACD,CACF,CACD,OAAI6I,EAAO,OAAS,GAAK,CAAC7I,IAGxB6I,EAAOA,EAAO,OAAS,CAAC,EAAE,CAAC,EAAE,8BAAgC,IAExD7I,CACT,CC70BA,MAAMqiC,GAAS,CACb,SAAUrpB,GACV,QAAS,EACX,EAeO,SAASspB,IAAc,CAE5B,MAAO,CACL,SAAU,CACP,GAAK,CACJ,KAAM,wBACN,SAAUC,GACV,aAAc,CACZ,SAAUC,EACX,EACD,KAAMC,EACP,CACF,EACD,KAAM,CACH,GAAK,CACJ,KAAM,kBACN,SAAUC,EACX,EACA,GAAK,CACJ,KAAM,2BACN,IAAK,QACL,SAAUC,GACV,UAAWC,EACZ,CACF,CACL,CACA,CAOA,SAASD,GAAiC38B,EAASC,EAAIyC,EAAK,CAC1D,MAAMxB,EAAO,KACb,IAAIjP,EAAQiP,EAAK,OAAO,OACxB,MAAM8P,EAAU9P,EAAK,OAAO,eAAiBA,EAAK,OAAO,aAAe,CAAA,GAExE,IAAI6P,EAGJ,KAAO9e,KAAS,CACd,MAAM2O,EAAQM,EAAK,OAAOjP,CAAK,EAAE,CAAC,EAClC,GAAI2O,EAAM,OAAS,aAAc,CAC/BmQ,EAAanQ,EACb,KACD,CAGD,GAAIA,EAAM,OAAS,mBAAqBA,EAAM,OAAS,aAAeA,EAAM,OAAS,SAAWA,EAAM,OAAS,SAAWA,EAAM,OAAS,OACvI,KAEH,CACD,OAAOpL,EAKP,SAASA,EAAM8I,EAAM,CACnB,GAAI,CAACyS,GAAc,CAACA,EAAW,UAC7B,OAAOrO,EAAIpE,CAAI,EAEjB,MAAM6f,EAAKvf,GAAoBsC,EAAK,eAAe,CACjD,MAAO6P,EAAW,IAClB,IAAK7P,EAAK,IAAK,CAChB,CAAA,CAAC,EACF,OAAIid,EAAG,YAAY,CAAC,IAAM,IAAM,CAACnN,EAAQ,SAASmN,EAAG,MAAM,CAAC,CAAC,EACpDzb,EAAIpE,CAAI,GAEjB0B,EAAQ,MAAM,4BAA4B,EAC1CA,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAK,4BAA4B,EAClCC,EAAG3B,CAAI,EACf,CACH,CAIA,SAASs+B,GAAkC/5B,EAAQC,EAAS,CAC1D,IAAI7Q,EAAQ4Q,EAAO,OAKnB,KAAO5Q,KACL,GAAI4Q,EAAO5Q,CAAK,EAAE,CAAC,EAAE,OAAS,cAAgB4Q,EAAO5Q,CAAK,EAAE,CAAC,IAAM,QAAS,CAC7D4Q,EAAO5Q,CAAK,EAAE,CAAC,EAC5B,KACD,CAGH4Q,EAAO5Q,EAAQ,CAAC,EAAE,CAAC,EAAE,KAAO,OAC5B4Q,EAAO5Q,EAAQ,CAAC,EAAE,CAAC,EAAE,KAAO,6BAI5B,MAAM4qC,EAAO,CACX,KAAM,kBACN,MAAO,OAAO,OAAO,GAAIh6B,EAAO5Q,EAAQ,CAAC,EAAE,CAAC,EAAE,KAAK,EACnD,IAAK,OAAO,OAAO,CAAA,EAAI4Q,EAAOA,EAAO,OAAS,CAAC,EAAE,CAAC,EAAE,GAAG,CAC3D,EAGQgB,EAAS,CACb,KAAM,wBACN,MAAO,OAAO,OAAO,GAAIhB,EAAO5Q,EAAQ,CAAC,EAAE,CAAC,EAAE,GAAG,EACjD,IAAK,OAAO,OAAO,GAAI4Q,EAAO5Q,EAAQ,CAAC,EAAE,CAAC,EAAE,GAAG,CACnD,EAEE4R,EAAO,IAAI,SACXA,EAAO,IAAI,SACXA,EAAO,IAAI,eAEX,MAAMuQ,EAAS,CACb,KAAM,wBACN,MAAO,OAAO,OAAO,CAAA,EAAIvQ,EAAO,GAAG,EACnC,IAAK,OAAO,OAAO,CAAA,EAAIhB,EAAOA,EAAO,OAAS,CAAC,EAAE,CAAC,EAAE,KAAK,CAC7D,EAEQkS,EAAQ,CACZ,KAAM,cACN,YAAa,SACb,MAAO,OAAO,OAAO,CAAA,EAAIX,EAAO,KAAK,EACrC,IAAK,OAAO,OAAO,CAAA,EAAIA,EAAO,GAAG,CACrC,EAGQ0oB,EAAc,CAEpBj6B,EAAO5Q,EAAQ,CAAC,EAAG4Q,EAAO5Q,EAAQ,CAAC,EAAG,CAAC,QAAS4qC,EAAM/5B,CAAO,EAE7DD,EAAO5Q,EAAQ,CAAC,EAAG4Q,EAAO5Q,EAAQ,CAAC,EAEnC,CAAC,QAAS4R,EAAQf,CAAO,EAAG,CAAC,OAAQe,EAAQf,CAAO,EAEpD,CAAC,QAASsR,EAAQtR,CAAO,EAAG,CAAC,QAASiS,EAAOjS,CAAO,EAAG,CAAC,OAAQiS,EAAOjS,CAAO,EAAG,CAAC,OAAQsR,EAAQtR,CAAO,EAEzGD,EAAOA,EAAO,OAAS,CAAC,EAAGA,EAAOA,EAAO,OAAS,CAAC,EAAG,CAAC,OAAQg6B,EAAM/5B,CAAO,CAAC,EAC7E,OAAAD,EAAO,OAAO5Q,EAAO4Q,EAAO,OAAS5Q,EAAQ,EAAG,GAAG6qC,CAAW,EACvDj6B,CACT,CAMA,SAAS65B,GAAwB18B,EAASC,EAAIyC,EAAK,CACjD,MAAMxB,EAAO,KACP8P,EAAU9P,EAAK,OAAO,eAAiBA,EAAK,OAAO,aAAe,CAAA,GACxE,IAAId,EAAO,EAEPS,EAOJ,OAAOrL,EAYP,SAASA,EAAM8I,EAAM,CACnB,OAAA0B,EAAQ,MAAM,iBAAiB,EAC/BA,EAAQ,MAAM,4BAA4B,EAC1CA,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAK,4BAA4B,EAClC+8B,CACR,CAYD,SAASA,EAAUz+B,EAAM,CACvB,OAAIA,IAAS,GAAWoE,EAAIpE,CAAI,GAChC0B,EAAQ,MAAM,uBAAuB,EACrCA,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAK,uBAAuB,EACpCA,EAAQ,MAAM,uBAAuB,EACrCA,EAAQ,MAAM,aAAa,EAAE,YAAc,SACpCg9B,EACR,CAYD,SAASA,EAAS1+B,EAAM,CACtB,GAEA8B,EAAO,KAEP9B,IAAS,IAAM,CAACuC,GAGhBvC,IAAS,MAAQA,IAAS,IAAMgB,EAA0BhB,CAAI,EAC5D,OAAOoE,EAAIpE,CAAI,EAEjB,GAAIA,IAAS,GAAI,CACf0B,EAAQ,KAAK,aAAa,EAC1B,MAAMY,EAAQZ,EAAQ,KAAK,uBAAuB,EAClD,OAAKgR,EAAQ,SAASpS,GAAoBsC,EAAK,eAAeN,CAAK,CAAC,CAAC,GAGrEZ,EAAQ,MAAM,4BAA4B,EAC1CA,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAK,4BAA4B,EACzCA,EAAQ,KAAK,iBAAiB,EACvBC,GANEyC,EAAIpE,CAAI,CAOlB,CACD,OAAKgB,EAA0BhB,CAAI,IACjCuC,EAAO,IAETT,IACAJ,EAAQ,QAAQ1B,CAAI,EACbA,IAAS,GAAK2+B,EAAaD,CACnC,CAYD,SAASC,EAAW3+B,EAAM,CACxB,OAAIA,IAAS,IAAMA,IAAS,IAAMA,IAAS,IACzC0B,EAAQ,QAAQ1B,CAAI,EACpB8B,IACO48B,GAEFA,EAAS1+B,CAAI,CACrB,CACH,CAMA,SAASi+B,GAAwBv8B,EAASC,EAAIyC,EAAK,CACjD,MAAMxB,EAAO,KACP8P,EAAU9P,EAAK,OAAO,eAAiBA,EAAK,OAAO,aAAe,CAAA,GAExE,IAAIkK,EACAhL,EAAO,EAEPS,EACJ,OAAOrL,EAYP,SAASA,EAAM8I,EAAM,CACnB,OAAA0B,EAAQ,MAAM,uBAAuB,EAAE,WAAa,GACpDA,EAAQ,MAAM,4BAA4B,EAC1CA,EAAQ,MAAM,kCAAkC,EAChDA,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAK,kCAAkC,EACxCk9B,CACR,CAYD,SAASA,EAAc5+B,EAAM,CAC3B,OAAIA,IAAS,IACX0B,EAAQ,MAAM,6BAA6B,EAC3CA,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAK,6BAA6B,EAC1CA,EAAQ,MAAM,kCAAkC,EAChDA,EAAQ,MAAM,aAAa,EAAE,YAAc,SACpC2K,GAEFjI,EAAIpE,CAAI,CAChB,CAeD,SAASqM,EAAYrM,EAAM,CACzB,GAEA8B,EAAO,KAEP9B,IAAS,IAAM,CAACuC,GAGhBvC,IAAS,MAAQA,IAAS,IAAMgB,EAA0BhB,CAAI,EAC5D,OAAOoE,EAAIpE,CAAI,EAEjB,GAAIA,IAAS,GAAI,CACf0B,EAAQ,KAAK,aAAa,EAC1B,MAAMY,EAAQZ,EAAQ,KAAK,kCAAkC,EAC7D,OAAAoL,EAAaxM,GAAoBsC,EAAK,eAAeN,CAAK,CAAC,EAC3DZ,EAAQ,MAAM,kCAAkC,EAChDA,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAK,kCAAkC,EAC/CA,EAAQ,KAAK,4BAA4B,EAClCqL,CACR,CACD,OAAK/L,EAA0BhB,CAAI,IACjCuC,EAAO,IAETT,IACAJ,EAAQ,QAAQ1B,CAAI,EACbA,IAAS,GAAKsM,EAAcD,CACpC,CAeD,SAASC,EAAYtM,EAAM,CACzB,OAAIA,IAAS,IAAMA,IAAS,IAAMA,IAAS,IACzC0B,EAAQ,QAAQ1B,CAAI,EACpB8B,IACOuK,GAEFA,EAAYrM,CAAI,CACxB,CAYD,SAAS+M,EAAW/M,EAAM,CACxB,OAAIA,IAAS,IACX0B,EAAQ,MAAM,kBAAkB,EAChCA,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAK,kBAAkB,EAC1BgR,EAAQ,SAAS5F,CAAU,GAC9B4F,EAAQ,KAAK5F,CAAU,EAMlBrL,EAAaC,EAASm9B,EAAiB,iCAAiC,GAE1Ez6B,EAAIpE,CAAI,CAChB,CAYD,SAAS6+B,EAAgB7+B,EAAM,CAE7B,OAAO2B,EAAG3B,CAAI,CACf,CACH,CAMA,SAASk+B,GAA+Bx8B,EAASC,EAAIyC,EAAK,CAUxD,OAAO1C,EAAQ,MAAM0E,GAAWzE,EAAID,EAAQ,QAAQq8B,GAAQp8B,EAAIyC,CAAG,CAAC,CACtE,CAGA,SAAS+5B,GAAyBz8B,EAAS,CACzCA,EAAQ,KAAK,uBAAuB,CACtC,CAMA,SAASgT,GAAehT,EAASC,EAAIyC,EAAK,CACxC,MAAMxB,EAAO,KACb,OAAOnB,EAAaC,EAASiH,EAAa,8BAA+B,CAAK,EAK9E,SAASA,EAAY3I,EAAM,CACzB,MAAM0H,EAAO9E,EAAK,OAAOA,EAAK,OAAO,OAAS,CAAC,EAC/C,OAAO8E,GAAQA,EAAK,CAAC,EAAE,OAAS,+BAAiCA,EAAK,CAAC,EAAE,eAAeA,EAAK,CAAC,EAAG,EAAI,EAAE,SAAW,EAAI/F,EAAG3B,CAAI,EAAIoE,EAAIpE,CAAI,CAC1I,CACH,CCndO,SAAS8+B,GAAiBrtC,EAAS,CAExC,IAAIstC,GADattC,GAAW,IACN,YACtB,MAAM+Y,EAAY,CAChB,KAAM,gBACN,SAAUw0B,EACV,WAAYC,CAChB,EACE,OAAIF,GAAW,OACbA,EAAS,IAEJ,CACL,KAAM,CACH,IAAMv0B,CACR,EACD,WAAY,CACV,KAAM,CAACA,CAAS,CACjB,EACD,iBAAkB,CAChB,KAAM,CAAC,GAAG,CACX,CACL,EAOE,SAASy0B,EAAwB16B,EAAQC,EAAS,CAChD,IAAI7Q,EAAQ,GAGZ,KAAO,EAAEA,EAAQ4Q,EAAO,QAEtB,GAAIA,EAAO5Q,CAAK,EAAE,CAAC,IAAM,SAAW4Q,EAAO5Q,CAAK,EAAE,CAAC,EAAE,OAAS,kCAAoC4Q,EAAO5Q,CAAK,EAAE,CAAC,EAAE,OAAQ,CACzH,IAAImR,EAAOnR,EAGX,KAAOmR,KAEL,GAAIP,EAAOO,CAAI,EAAE,CAAC,IAAM,QAAUP,EAAOO,CAAI,EAAE,CAAC,EAAE,OAAS,kCAAoCP,EAAOO,CAAI,EAAE,CAAC,EAAE,OAE/GP,EAAO5Q,CAAK,EAAE,CAAC,EAAE,IAAI,OAAS4Q,EAAO5Q,CAAK,EAAE,CAAC,EAAE,MAAM,SAAW4Q,EAAOO,CAAI,EAAE,CAAC,EAAE,IAAI,OAASP,EAAOO,CAAI,EAAE,CAAC,EAAE,MAAM,OAAQ,CACzHP,EAAO5Q,CAAK,EAAE,CAAC,EAAE,KAAO,wBACxB4Q,EAAOO,CAAI,EAAE,CAAC,EAAE,KAAO,wBAGvB,MAAM4a,EAAgB,CACpB,KAAM,gBACN,MAAO,OAAO,OAAO,CAAE,EAAEnb,EAAOO,CAAI,EAAE,CAAC,EAAE,KAAK,EAC9C,IAAK,OAAO,OAAO,CAAE,EAAEP,EAAO5Q,CAAK,EAAE,CAAC,EAAE,GAAG,CACzD,EAGkBsI,EAAO,CACX,KAAM,oBACN,MAAO,OAAO,OAAO,CAAE,EAAEsI,EAAOO,CAAI,EAAE,CAAC,EAAE,GAAG,EAC5C,IAAK,OAAO,OAAO,CAAE,EAAEP,EAAO5Q,CAAK,EAAE,CAAC,EAAE,KAAK,CAC3D,EAIkBwR,EAAa,CAAC,CAAC,QAASua,EAAelb,CAAO,EAAG,CAAC,QAASD,EAAOO,CAAI,EAAE,CAAC,EAAGN,CAAO,EAAG,CAAC,OAAQD,EAAOO,CAAI,EAAE,CAAC,EAAGN,CAAO,EAAG,CAAC,QAASvI,EAAMuI,CAAO,CAAC,EAClJoS,EAAapS,EAAQ,OAAO,WAAW,WAAW,KACpDoS,GAEF3X,GAAOkG,EAAYA,EAAW,OAAQ,EAAGb,GAAWsS,EAAYrS,EAAO,MAAMO,EAAO,EAAGnR,CAAK,EAAG6Q,CAAO,CAAC,EAIzGvF,GAAOkG,EAAYA,EAAW,OAAQ,EAAG,CAAC,CAAC,OAAQlJ,EAAMuI,CAAO,EAAG,CAAC,QAASD,EAAO5Q,CAAK,EAAE,CAAC,EAAG6Q,CAAO,EAAG,CAAC,OAAQD,EAAO5Q,CAAK,EAAE,CAAC,EAAG6Q,CAAO,EAAG,CAAC,OAAQkb,EAAelb,CAAO,CAAC,CAAC,EAC/KvF,GAAOsF,EAAQO,EAAO,EAAGnR,EAAQmR,EAAO,EAAGK,CAAU,EACrDxR,EAAQmR,EAAOK,EAAW,OAAS,EACnC,KACD,CAEJ,CAGH,IADAxR,EAAQ,GACD,EAAEA,EAAQ4Q,EAAO,QAClBA,EAAO5Q,CAAK,EAAE,CAAC,EAAE,OAAS,mCAC5B4Q,EAAO5Q,CAAK,EAAE,CAAC,EAAE,KAAO,QAG5B,OAAO4Q,CACR,CAMD,SAASy6B,EAAsBt9B,EAASC,EAAIyC,EAAK,CAC/C,MAAMhC,EAAW,KAAK,SAChBmC,EAAS,KAAK,OACpB,IAAIzC,EAAO,EACX,OAAO5K,EAGP,SAASA,EAAM8I,EAAM,CACnB,OAAIoC,IAAa,KAAOmC,EAAOA,EAAO,OAAS,CAAC,EAAE,CAAC,EAAE,OAAS,kBACrDH,EAAIpE,CAAI,GAEjB0B,EAAQ,MAAM,gCAAgC,EACvCyI,EAAKnK,CAAI,EACjB,CAGD,SAASmK,EAAKnK,EAAM,CAClB,MAAMG,EAASkE,GAAkBjC,CAAQ,EACzC,GAAIpC,IAAS,IAEX,OAAI8B,EAAO,EAAUsC,EAAIpE,CAAI,GAC7B0B,EAAQ,QAAQ1B,CAAI,EACpB8B,IACOqI,GAET,GAAIrI,EAAO,GAAK,CAACi9B,EAAQ,OAAO36B,EAAIpE,CAAI,EACxC,MAAMsC,EAAQZ,EAAQ,KAAK,gCAAgC,EACrD+D,EAAQpB,GAAkBrE,CAAI,EACpC,OAAAsC,EAAM,MAAQ,CAACmD,GAASA,IAAU,GAAK,EAAQtF,EAC/CmC,EAAM,OAAS,CAACnC,GAAUA,IAAW,GAAK,EAAQsF,EAC3C9D,EAAG3B,CAAI,CACf,CACF,CACH,CCpHO,MAAMk/B,EAAQ,CAInB,aAAc,CAMZ,KAAK,IAAM,EACZ,CAUD,IAAIvrC,EAAOwL,EAAQyvB,EAAK,CACtBuQ,GAAkB,KAAMxrC,EAAOwL,EAAQyvB,CAAG,CAC3C,CAqBD,QAAQrqB,EAAQ,CAMd,GALA,KAAK,IAAI,KAAK,SAAU66B,EAAGC,EAAG,CAC5B,OAAOD,EAAE,CAAC,EAAIC,EAAE,CAAC,CACvB,CAAK,EAGG,KAAK,IAAI,SAAW,EACtB,OAqBF,IAAI1rC,EAAQ,KAAK,IAAI,OAErB,MAAM2rC,EAAO,CAAA,EACb,KAAO3rC,EAAQ,GACbA,GAAS,EACT2rC,EAAK,KAAK/6B,EAAO,MAAM,KAAK,IAAI5Q,CAAK,EAAE,CAAC,EAAI,KAAK,IAAIA,CAAK,EAAE,CAAC,CAAC,EAAG,KAAK,IAAIA,CAAK,EAAE,CAAC,CAAC,EAGnF4Q,EAAO,OAAS,KAAK,IAAI5Q,CAAK,EAAE,CAAC,EAEnC2rC,EAAK,KAAK/6B,EAAO,MAAO,CAAA,EACxBA,EAAO,OAAS,EAChB,IAAIuG,EAAQw0B,EAAK,MACjB,KAAOx0B,GAAO,CACZ,UAAWlP,KAAWkP,EACpBvG,EAAO,KAAK3I,CAAO,EAErBkP,EAAQw0B,EAAK,KACd,CAGD,KAAK,IAAI,OAAS,CACnB,CACH,CAWA,SAASH,GAAkBI,EAASC,EAAIrgC,EAAQyvB,EAAK,CACnD,IAAIj7B,EAAQ,EAGZ,GAAI,EAAAwL,IAAW,GAAKyvB,EAAI,SAAW,GAGnC,MAAOj7B,EAAQ4rC,EAAQ,IAAI,QAAQ,CACjC,GAAIA,EAAQ,IAAI5rC,CAAK,EAAE,CAAC,IAAM6rC,EAAI,CAChCD,EAAQ,IAAI5rC,CAAK,EAAE,CAAC,GAAKwL,EAOzBogC,EAAQ,IAAI5rC,CAAK,EAAE,CAAC,EAAE,KAAK,GAAGi7B,CAAG,EAGjC,MACD,CACDj7B,GAAS,CACV,CACD4rC,EAAQ,IAAI,KAAK,CAACC,EAAIrgC,EAAQyvB,CAAG,CAAC,EACpC,CCzIO,SAAS6Q,GAAcl7B,EAAQ5Q,EAAO,CAC3C,IAAI+rC,EAAiB,GAErB,MAAMte,EAAQ,CAAA,EACd,KAAOztB,EAAQ4Q,EAAO,QAAQ,CAC5B,MAAMuF,EAAQvF,EAAO5Q,CAAK,EAC1B,GAAI+rC,GACF,GAAI51B,EAAM,CAAC,IAAM,QAGXA,EAAM,CAAC,EAAE,OAAS,gBACpBsX,EAAM,KAAK7c,EAAO5Q,EAAQ,CAAC,EAAE,CAAC,EAAE,OAAS,uBAAyB,OAAS,MAAM,UAM5EmW,EAAM,CAAC,EAAE,OAAS,gBACzB,GAAIvF,EAAO5Q,EAAQ,CAAC,EAAE,CAAC,EAAE,OAAS,uBAAwB,CACxD,MAAMgsC,EAAave,EAAM,OAAS,EAClCA,EAAMue,CAAU,EAAIve,EAAMue,CAAU,IAAM,OAAS,SAAW,OAC/D,UAGM71B,EAAM,CAAC,EAAE,OAAS,oBACzB,WAEOA,EAAM,CAAC,IAAM,SAAWA,EAAM,CAAC,EAAE,OAAS,sBACnD41B,EAAiB,IAEnB/rC,GAAS,CACV,CACD,OAAOytB,CACT,CC3BO,SAASwe,IAAW,CACzB,MAAO,CACL,KAAM,CACJ,KAAM,CACJ,KAAM,QACN,SAAUC,GACV,WAAYC,EACb,CACF,CACL,CACA,CAMA,SAASD,GAAcn+B,EAASC,EAAIyC,EAAK,CACvC,MAAMxB,EAAO,KACb,IAAId,EAAO,EACPi+B,EAAQ,EAER77B,EACJ,OAAOhN,EAkBP,SAASA,EAAM8I,EAAM,CACnB,IAAIrM,EAAQiP,EAAK,OAAO,OAAS,EACjC,KAAOjP,EAAQ,IAAI,CACjB,MAAM0G,EAAOuI,EAAK,OAAOjP,CAAK,EAAE,CAAC,EAAE,KACnC,GAAI0G,IAAS,cAEbA,IAAS,aAAc1G,QAAa,MACrC,CACD,MAAM+T,EAAO/T,EAAQ,GAAKiP,EAAK,OAAOjP,CAAK,EAAE,CAAC,EAAE,KAAO,KACjD6N,EAAOkG,IAAS,aAAeA,IAAS,WAAas4B,EAAeC,EAG1E,OAAIz+B,IAASw+B,GAAgBp9B,EAAK,OAAO,KAAKA,EAAK,MAAM,IAAI,EACpDwB,EAAIpE,CAAI,EAEVwB,EAAKxB,CAAI,CACjB,CAcD,SAASigC,EAAcjgC,EAAM,CAC3B,OAAA0B,EAAQ,MAAM,WAAW,EACzBA,EAAQ,MAAM,UAAU,EACjBw+B,EAAalgC,CAAI,CACzB,CAcD,SAASkgC,EAAalgC,EAAM,CAC1B,OAAIA,IAAS,MAcbkE,EAAO,GAEP67B,GAAS,GACFI,EAAangC,CAAI,CACzB,CAgBD,SAASmgC,EAAangC,EAAM,CAC1B,OAAIA,IAAS,KAEJoE,EAAIpE,CAAI,EAEbe,EAAmBf,CAAI,EAErB+/B,EAAQ,GACVA,EAAQ,EAGRn9B,EAAK,UAAY,GACjBlB,EAAQ,KAAK,UAAU,EACvBA,EAAQ,MAAM,YAAY,EAC1BA,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAK,YAAY,EAClB0+B,GAIFh8B,EAAIpE,CAAI,EAEbiB,EAAcjB,CAAI,EAIbyB,EAAaC,EAASy+B,EAAc,YAAY,EAAEngC,CAAI,GAE/D+/B,GAAS,EACL77B,IACFA,EAAO,GAEPpC,GAAQ,GAEN9B,IAAS,KACX0B,EAAQ,MAAM,kBAAkB,EAChCA,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAK,kBAAkB,EAE/BwC,EAAO,GACAi8B,IAITz+B,EAAQ,MAAM,MAAM,EACb2+B,EAAYrgC,CAAI,GACxB,CAcD,SAASqgC,EAAYrgC,EAAM,CACzB,OAAIA,IAAS,MAAQA,IAAS,KAAOgB,EAA0BhB,CAAI,GACjE0B,EAAQ,KAAK,MAAM,EACZy+B,EAAangC,CAAI,IAE1B0B,EAAQ,QAAQ1B,CAAI,EACbA,IAAS,GAAKsgC,EAAgBD,EACtC,CAcD,SAASC,EAActgC,EAAM,CAC3B,OAAIA,IAAS,IAAMA,IAAS,KAC1B0B,EAAQ,QAAQ1B,CAAI,EACbqgC,GAEFA,EAAYrgC,CAAI,CACxB,CAcD,SAASogC,EAAmBpgC,EAAM,CAKhC,OAHA4C,EAAK,UAAY,GAGbA,EAAK,OAAO,KAAKA,EAAK,IAAG,EAAG,IAAI,EAC3BwB,EAAIpE,CAAI,GAEjB0B,EAAQ,MAAM,mBAAmB,EAEjCwC,EAAO,GACHjD,EAAcjB,CAAI,EACbyB,EAAaC,EAAS6+B,EAAqB,aAAc39B,EAAK,OAAO,WAAW,QAAQ,KAAK,SAAS,cAAc,EAAI,OAAY,CAAC,EAAE5C,CAAI,EAE7IugC,EAAoBvgC,CAAI,EAChC,CAgBD,SAASugC,EAAoBvgC,EAAM,CACjC,OAAIA,IAAS,IAAMA,IAAS,GACnBwgC,EAAyBxgC,CAAI,EAElCA,IAAS,KACXkE,EAAO,GAEPxC,EAAQ,MAAM,kBAAkB,EAChCA,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAK,kBAAkB,EACxB++B,GAIFC,EAAiB1gC,CAAI,CAC7B,CAaD,SAASygC,EAAwBzgC,EAAM,CACrC,OAAIiB,EAAcjB,CAAI,EACbyB,EAAaC,EAAS8+B,EAA0B,YAAY,EAAExgC,CAAI,EAEpEwgC,EAAyBxgC,CAAI,CACrC,CAaD,SAASwgC,EAAyBxgC,EAAM,CAEtC,OAAIA,IAAS,IACX+/B,GAAS,EACT77B,EAAO,GACPxC,EAAQ,MAAM,sBAAsB,EACpCA,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAK,sBAAsB,EAC5Bi/B,GAIL3gC,IAAS,IACX+/B,GAAS,EAEFY,EAAgC3gC,CAAI,GAEzCA,IAAS,MAAQe,EAAmBf,CAAI,EACnC4gC,EAAuB5gC,CAAI,EAE7B0gC,EAAiB1gC,CAAI,CAC7B,CAaD,SAAS2gC,EAAgC3gC,EAAM,CAC7C,OAAIA,IAAS,IACX0B,EAAQ,MAAM,sBAAsB,EAC7Bm/B,EAAoB7gC,CAAI,GAI1B0gC,EAAiB1gC,CAAI,CAC7B,CAaD,SAAS6gC,EAAoB7gC,EAAM,CACjC,OAAIA,IAAS,IACX0B,EAAQ,QAAQ1B,CAAI,EACb6gC,GAIL7gC,IAAS,IACXkE,EAAO,GACPxC,EAAQ,KAAK,sBAAsB,EACnCA,EAAQ,MAAM,sBAAsB,EACpCA,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAK,sBAAsB,EAC5Bo/B,IAETp/B,EAAQ,KAAK,sBAAsB,EAC5Bo/B,EAAiC9gC,CAAI,EAC7C,CAaD,SAAS8gC,EAAiC9gC,EAAM,CAC9C,OAAIiB,EAAcjB,CAAI,EACbyB,EAAaC,EAASk/B,EAAwB,YAAY,EAAE5gC,CAAI,EAElE4gC,EAAuB5gC,CAAI,CACnC,CAaD,SAAS4gC,EAAuB5gC,EAAM,CACpC,OAAIA,IAAS,IACJugC,EAAoBvgC,CAAI,EAE7BA,IAAS,MAAQe,EAAmBf,CAAI,EAKtC,CAACkE,GAAQpC,IAASi+B,EACbW,EAAiB1gC,CAAI,GAI9B0B,EAAQ,KAAK,mBAAmB,EAChCA,EAAQ,KAAK,WAAW,EAGjBC,EAAG3B,CAAI,GAET0gC,EAAiB1gC,CAAI,CAC7B,CAaD,SAAS0gC,EAAiB1gC,EAAM,CAE9B,OAAOoE,EAAIpE,CAAI,CAChB,CAcD,SAASggC,EAAahgC,EAAM,CAI1B,OAAA0B,EAAQ,MAAM,UAAU,EACjBq/B,EAAa/gC,CAAI,CACzB,CAgBD,SAAS+gC,EAAa/gC,EAAM,CAC1B,OAAIA,IAAS,KACX0B,EAAQ,MAAM,kBAAkB,EAChCA,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAK,kBAAkB,EACxBq/B,GAEL/gC,IAAS,MAAQe,EAAmBf,CAAI,GAC1C0B,EAAQ,KAAK,UAAU,EAChBC,EAAG3B,CAAI,GAEZiB,EAAcjB,CAAI,EACbyB,EAAaC,EAASq/B,EAAc,YAAY,EAAE/gC,CAAI,GAI/D0B,EAAQ,MAAM,MAAM,EACbs/B,EAAYhhC,CAAI,EACxB,CAcD,SAASghC,EAAYhhC,EAAM,CACzB,OAAIA,IAAS,MAAQA,IAAS,KAAOgB,EAA0BhB,CAAI,GACjE0B,EAAQ,KAAK,MAAM,EACZq/B,EAAa/gC,CAAI,IAE1B0B,EAAQ,QAAQ1B,CAAI,EACbA,IAAS,GAAKihC,EAAgBD,EACtC,CAcD,SAASC,EAAcjhC,EAAM,CAC3B,OAAIA,IAAS,IAAMA,IAAS,KAC1B0B,EAAQ,QAAQ1B,CAAI,EACbghC,GAEFA,EAAYhhC,CAAI,CACxB,CACH,CAIA,SAAS8/B,GAAav7B,EAAQC,EAAS,CACrC,IAAI7Q,EAAQ,GACRutC,EAA0B,GAE1BC,EAAU,EAEVC,EAAW,CAAC,EAAG,EAAG,EAAG,CAAC,EAEtB7f,EAAO,CAAC,EAAG,EAAG,EAAG,CAAC,EAClB8f,EAAgC,GAChCC,EAAe,EAEfC,EAEAC,EAEAC,EACJ,MAAMxoB,EAAM,IAAIimB,GAChB,KAAO,EAAEvrC,EAAQ4Q,EAAO,QAAQ,CAC9B,MAAMuF,EAAQvF,EAAO5Q,CAAK,EACpB2O,EAAQwH,EAAM,CAAC,EACjBA,EAAM,CAAC,IAAM,QAEXxH,EAAM,OAAS,aACjB++B,EAAgC,GAG5BC,IAAiB,IACnBI,GAAczoB,EAAKzU,EAAS88B,EAAcC,EAAcC,CAAW,EACnEA,EAAc,OACdF,EAAe,GAIjBC,EAAe,CACb,KAAM,QACN,MAAO,OAAO,OAAO,CAAA,EAAIj/B,EAAM,KAAK,EAEpC,IAAK,OAAO,OAAO,CAAA,EAAIA,EAAM,GAAG,CAC1C,EACQ2W,EAAI,IAAItlB,EAAO,EAAG,CAAC,CAAC,QAAS4tC,EAAc/8B,CAAO,CAAC,CAAC,GAC3ClC,EAAM,OAAS,YAAcA,EAAM,OAAS,qBACrD4+B,EAA0B,GAC1BO,EAAc,OACdL,EAAW,CAAC,EAAG,EAAG,EAAG,CAAC,EACtB7f,EAAO,CAAC,EAAG5tB,EAAQ,EAAG,EAAG,CAAC,EAGtB0tC,IACFA,EAAgC,GAChCG,EAAc,CACZ,KAAM,YACN,MAAO,OAAO,OAAO,CAAA,EAAIl/B,EAAM,KAAK,EAEpC,IAAK,OAAO,OAAO,CAAA,EAAIA,EAAM,GAAG,CAC5C,EACU2W,EAAI,IAAItlB,EAAO,EAAG,CAAC,CAAC,QAAS6tC,EAAah9B,CAAO,CAAC,CAAC,GAErD28B,EAAU7+B,EAAM,OAAS,oBAAsB,EAAIk/B,EAAc,EAAI,GAG9DL,IAAY7+B,EAAM,OAAS,QAAUA,EAAM,OAAS,wBAA0BA,EAAM,OAAS,yBACpG4+B,EAA0B,GAGtB3f,EAAK,CAAC,IAAM,IACV6f,EAAS,CAAC,IAAM,IAClB7f,EAAK,CAAC,EAAIA,EAAK,CAAC,EAChBkgB,EAAcE,GAAU1oB,EAAKzU,EAAS48B,EAAUD,EAAS,OAAWM,CAAW,EAC/EL,EAAW,CAAC,EAAG,EAAG,EAAG,CAAC,GAExB7f,EAAK,CAAC,EAAI5tB,IAEH2O,EAAM,OAAS,qBACpB4+B,EACFA,EAA0B,IAEtBE,EAAS,CAAC,IAAM,IAClB7f,EAAK,CAAC,EAAIA,EAAK,CAAC,EAChBkgB,EAAcE,GAAU1oB,EAAKzU,EAAS48B,EAAUD,EAAS,OAAWM,CAAW,GAEjFL,EAAW7f,EACXA,EAAO,CAAC6f,EAAS,CAAC,EAAGztC,EAAO,EAAG,CAAC,IAK7B2O,EAAM,OAAS,aACtB++B,EAAgC,GAChCC,EAAe3tC,GACN2O,EAAM,OAAS,YAAcA,EAAM,OAAS,qBACrDg/B,EAAe3tC,EACXytC,EAAS,CAAC,IAAM,GAClB7f,EAAK,CAAC,EAAIA,EAAK,CAAC,EAChBkgB,EAAcE,GAAU1oB,EAAKzU,EAAS48B,EAAUD,EAASxtC,EAAO8tC,CAAW,GAClElgB,EAAK,CAAC,IAAM,IACrBkgB,EAAcE,GAAU1oB,EAAKzU,EAAS+c,EAAM4f,EAASxtC,EAAO8tC,CAAW,GAEzEN,EAAU,GACDA,IAAY7+B,EAAM,OAAS,QAAUA,EAAM,OAAS,wBAA0BA,EAAM,OAAS,0BACtGif,EAAK,CAAC,EAAI5tB,EAEb,CAUD,IATI2tC,IAAiB,GACnBI,GAAczoB,EAAKzU,EAAS88B,EAAcC,EAAcC,CAAW,EAErEvoB,EAAI,QAAQzU,EAAQ,MAAM,EAK1B7Q,EAAQ,GACD,EAAEA,EAAQ6Q,EAAQ,OAAO,QAAQ,CACtC,MAAMsF,EAAQtF,EAAQ,OAAO7Q,CAAK,EAC9BmW,EAAM,CAAC,IAAM,SAAWA,EAAM,CAAC,EAAE,OAAS,UAC5CA,EAAM,CAAC,EAAE,OAAS21B,GAAcj7B,EAAQ,OAAQ7Q,CAAK,EAExD,CACD,OAAO4Q,CACT,CAcA,SAASo9B,GAAU1oB,EAAKzU,EAASo9B,EAAOT,EAASU,EAAQC,EAAc,CAGrE,MAAMC,EAAYZ,IAAY,EAAI,cAAgBA,IAAY,EAAI,iBAAmB,YAG/Ea,EAAY,eASdJ,EAAM,CAAC,IAAM,IACfE,EAAa,IAAM,OAAO,OAAO,CAAA,EAAIG,GAASz9B,EAAQ,OAAQo9B,EAAM,CAAC,CAAC,CAAC,EACvE3oB,EAAI,IAAI2oB,EAAM,CAAC,EAAG,EAAG,CAAC,CAAC,OAAQE,EAAct9B,CAAO,CAAC,CAAC,GAUxD,MAAMiT,EAAMwqB,GAASz9B,EAAQ,OAAQo9B,EAAM,CAAC,CAAC,EAkB7C,GAjBAE,EAAe,CACb,KAAMC,EACN,MAAO,OAAO,OAAO,CAAA,EAAItqB,CAAG,EAE5B,IAAK,OAAO,OAAO,CAAA,EAAIA,CAAG,CAC9B,EACEwB,EAAI,IAAI2oB,EAAM,CAAC,EAAG,EAAG,CAAC,CAAC,QAASE,EAAct9B,CAAO,CAAC,CAAC,EAWnDo9B,EAAM,CAAC,IAAM,EAAG,CAClB,MAAMM,EAAeD,GAASz9B,EAAQ,OAAQo9B,EAAM,CAAC,CAAC,EAChDO,EAAaF,GAASz9B,EAAQ,OAAQo9B,EAAM,CAAC,CAAC,EAE9CQ,EAAa,CACjB,KAAMJ,EACN,MAAO,OAAO,OAAO,CAAA,EAAIE,CAAY,EACrC,IAAK,OAAO,OAAO,CAAA,EAAIC,CAAU,CACvC,EAEI,GADAlpB,EAAI,IAAI2oB,EAAM,CAAC,EAAG,EAAG,CAAC,CAAC,QAASQ,EAAY59B,CAAO,CAAC,CAAC,EACjD28B,IAAY,EAAG,CAEjB,MAAMjqC,EAAQsN,EAAQ,OAAOo9B,EAAM,CAAC,CAAC,EAC/BtnC,EAAMkK,EAAQ,OAAOo9B,EAAM,CAAC,CAAC,EAMnC,GALA1qC,EAAM,CAAC,EAAE,IAAM,OAAO,OAAO,CAAE,EAAEoD,EAAI,CAAC,EAAE,GAAG,EAC3CpD,EAAM,CAAC,EAAE,KAAO,YAChBA,EAAM,CAAC,EAAE,YAAc,OAGnB0qC,EAAM,CAAC,EAAIA,EAAM,CAAC,EAAI,EAAG,CAC3B,MAAMxC,EAAIwC,EAAM,CAAC,EAAI,EACfvC,EAAIuC,EAAM,CAAC,EAAIA,EAAM,CAAC,EAAI,EAChC3oB,EAAI,IAAImmB,EAAGC,EAAG,CAAE,CAAA,CACjB,CACF,CACDpmB,EAAI,IAAI2oB,EAAM,CAAC,EAAI,EAAG,EAAG,CAAC,CAAC,OAAQQ,EAAY59B,CAAO,CAAC,CAAC,CACzD,CASD,OAAIq9B,IAAW,SACbC,EAAa,IAAM,OAAO,OAAO,CAAA,EAAIG,GAASz9B,EAAQ,OAAQq9B,CAAM,CAAC,EACrE5oB,EAAI,IAAI4oB,EAAQ,EAAG,CAAC,CAAC,OAAQC,EAAct9B,CAAO,CAAC,CAAC,EACpDs9B,EAAe,QAEVA,CACT,CAYA,SAASJ,GAAczoB,EAAKzU,EAAS7Q,EAAOmtB,EAAOuhB,EAAW,CAE5D,MAAMC,EAAQ,CAAA,EACRC,EAAUN,GAASz9B,EAAQ,OAAQ7Q,CAAK,EAC1C0uC,IACFA,EAAU,IAAM,OAAO,OAAO,CAAE,EAAEE,CAAO,EACzCD,EAAM,KAAK,CAAC,OAAQD,EAAW79B,CAAO,CAAC,GAEzCsc,EAAM,IAAM,OAAO,OAAO,CAAE,EAAEyhB,CAAO,EACrCD,EAAM,KAAK,CAAC,OAAQxhB,EAAOtc,CAAO,CAAC,EACnCyU,EAAI,IAAItlB,EAAQ,EAAG,EAAG2uC,CAAK,CAC7B,CAOA,SAASL,GAAS19B,EAAQ5Q,EAAO,CAC/B,MAAMmW,EAAQvF,EAAO5Q,CAAK,EACpB6uC,EAAO14B,EAAM,CAAC,IAAM,QAAU,QAAU,MAC9C,OAAOA,EAAM,CAAC,EAAE04B,CAAI,CACtB,CC5yBA,MAAMC,GAAgB,CACpB,KAAM,gBACN,SAAUC,EACZ,EAUO,SAASC,IAAkB,CAChC,MAAO,CACL,KAAM,CACH,GAAKF,EACP,CACL,CACA,CAMA,SAASC,GAAsBhhC,EAASC,EAAIyC,EAAK,CAC/C,MAAMxB,EAAO,KACb,OAAOkC,EAYP,SAASA,EAAK9E,EAAM,CAClB,OAEA4C,EAAK,WAAa,MAGlB,CAACA,EAAK,mCACGwB,EAAIpE,CAAI,GAEjB0B,EAAQ,MAAM,eAAe,EAC7BA,EAAQ,MAAM,qBAAqB,EACnCA,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAK,qBAAqB,EAC3B8D,EACR,CAYD,SAASA,EAAOxF,EAAM,CAIpB,OAAIgB,EAA0BhB,CAAI,GAChC0B,EAAQ,MAAM,6BAA6B,EAC3CA,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAK,6BAA6B,EACnCgE,GAEL1F,IAAS,IAAMA,IAAS,KAC1B0B,EAAQ,MAAM,2BAA2B,EACzCA,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAK,2BAA2B,EACjCgE,GAEFtB,EAAIpE,CAAI,CAChB,CAYD,SAAS0F,EAAM1F,EAAM,CACnB,OAAIA,IAAS,IACX0B,EAAQ,MAAM,qBAAqB,EACnCA,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAK,qBAAqB,EAClCA,EAAQ,KAAK,eAAe,EACrB+D,GAEFrB,EAAIpE,CAAI,CAChB,CAKD,SAASyF,EAAMzF,EAAM,CAEnB,OAAIe,EAAmBf,CAAI,EAClB2B,EAAG3B,CAAI,EAKZiB,EAAcjB,CAAI,EACb0B,EAAQ,MAAM,CACnB,SAAUkhC,EACX,EAAEjhC,EAAIyC,CAAG,EAAEpE,CAAI,EAIXoE,EAAIpE,CAAI,CAChB,CACH,CAMA,SAAS4iC,GAAkBlhC,EAASC,EAAIyC,EAAK,CAC3C,OAAO3C,EAAaC,EAAS+D,EAAO,YAAY,EAYhD,SAASA,EAAMzF,EAAM,CAKnB,OAAOA,IAAS,KAAOoE,EAAIpE,CAAI,EAAI2B,EAAG3B,CAAI,CAC3C,CACH,CCvHO,SAAS6iC,GAAIpxC,EAAS,CAC3B,OAAOgO,GAAkB,CACvB28B,GAAoB,EACpB4B,GAAa,EACbc,GAAiBrtC,CAAO,EACxBmuC,GAAU,EACV+C,GAAiB,CACrB,CAAG,CACH,CClCA,MAAM9wC,GAAe,CAAE,EAWR,SAASixC,GAAUrxC,EAAS,CAGzC,MAAMmR,EAAuC,KACvClR,EAAWD,GAAWI,GACtB0Q,EAAOK,EAAK,KAAM,EAElBmgC,EACJxgC,EAAK,sBAAwBA,EAAK,oBAAsB,CAAA,GACpDygC,EACJzgC,EAAK,yBAA2BA,EAAK,uBAAyB,CAAA,GAC1D0gC,EACJ1gC,EAAK,uBAAyBA,EAAK,qBAAuB,CAAA,GAE5DwgC,EAAoB,KAAKF,GAAInxC,CAAQ,CAAC,EACtCsxC,EAAuB,KAAK9H,IAAiB,EAC7C+H,EAAqB,KAAK9H,GAAczpC,CAAQ,CAAC,CACnD","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188]}