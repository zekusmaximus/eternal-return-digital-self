{"version":3,"mappings":"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","names":["ErrorBoundary","Component","props","error","errorInfo","SimpleTransformationContainer","children","transformations","nodeId","prevTransformationCount","setPrevTransformationCount","useState","isNewlyTransformed","setIsNewlyTransformed","useEffect","timer","getTransformationDescription","typeCount","t","descriptions","jsxs","jsx","processTextTransformations","content","processedContent","sortedTransformations","a","b","priorityMap","aPriority","transformation","type","selector","replacement","emphasis","replacementHtml","emphasisClass","emphasisHtml","expandHtml","fragmentHtml","commentHtml","SimpleTextRenderer","memo","onRenderComplete","onVisibilityChange","node","originalTransformedContent","appliedTransformations","useNodeState","setProcessedContent","isVisible","setIsVisible","isLoading","setIsLoading","contentRef","useRef","observerRef","renderCount","setRenderCount","useSelector","state","processed","prev","entries","entry","isNowVisible","_a","hasMemory","performance","ReactMarkdown","lazy","__vitePreload","module","MiniConstellation","MarginaliaSidebar","NarramorphRendererPromise","NarramorphRenderer","remarkGfmPromise","FORCE_SIMPLE_RENDERING","ContentLoading","SideComponentLoading","NodeView","dispatch","useAppDispatch","selectedNodeId","selectSelectedNodeId","viewMode","selectViewMode","selectNodeById","uniqueViewKey","useMemo","viewManager","useNarramorph","setUseNarramorph","useWebGLFallback","setUseWebGLFallback","forceSimpleRenderer","setForceSimpleRenderer","webGLAvailable","setWebGLAvailable","contentContainerRef","contentDebug","setContentDebug","webGLSupport","webGLContextManager","viewTransitionState","setViewTransitionState","memoryStats","setMemoryStats","now","memory","loadNodeContent","visitNode","componentLoaded","preBoundingRect","err","visibilityTimer","boundingRect","computedStyle","handleWebGLContextLoss","event","handleReturnToConstellation","returnToConstellation","characterClass","getTemporalClass","renderNodeContent","Suspense"],"ignoreList":[],"sources":["../../src/components/common/ErrorBoundary.tsx","../../src/components/NodeView/SimpleTransformationContainer.tsx","../../src/components/NodeView/SimpleTextRenderer.tsx","../../src/components/NodeView/NodeView.tsx"],"sourcesContent":["import { Component, ErrorInfo, ReactNode } from 'react';\r\n\r\ninterface Props {\r\n  children: ReactNode;\r\n  fallback: ReactNode;\r\n}\r\n\r\ninterface State {\r\n  hasError: boolean;\r\n  error: Error | null;\r\n}\r\n\r\n/**\r\n * ErrorBoundary component to catch and handle errors in its child components.\r\n * Provides a fallback UI when an error occurs.\r\n */\r\nclass ErrorBoundary extends Component<Props, State> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.state = { \r\n      hasError: false,\r\n      error: null\r\n    };\r\n  }\r\n\r\n  static getDerivedStateFromError(error: Error): State {\r\n    // Update state so the next render will show the fallback UI\r\n    return { \r\n      hasError: true,\r\n      error: error\r\n    };\r\n  }\r\n\r\n  componentDidCatch(error: Error, errorInfo: ErrorInfo): void {\r\n    // Log the error to console\r\n    console.error('ErrorBoundary caught an error:', error);\r\n    console.error('Component stack:', errorInfo.componentStack);\r\n  }\r\n\r\n  render(): ReactNode {\r\n    if (this.state.hasError) {\r\n      // Render fallback UI\r\n      return this.props.fallback;\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;","/**\r\n * SimpleTransformationContainer Component\r\n * \r\n * A lightweight, reliable container for text transformations.\r\n * This is a simplified version of TransformationAnimationContainer\r\n * that prioritizes stability and content visibility over complex effects.\r\n */\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { TextTransformation } from '../../types';\r\n\r\ninterface SimpleTransformationContainerProps {\r\n  children: React.ReactNode;\r\n  transformations: TextTransformation[];\r\n  nodeId: string;\r\n}\r\n\r\nconst SimpleTransformationContainer: React.FC<SimpleTransformationContainerProps> = ({\r\n  children,\r\n  transformations,\r\n  nodeId\r\n}) => {\r\n  // Track previous transformation count to detect changes\r\n  const [prevTransformationCount, setPrevTransformationCount] = useState(0);\r\n  const [isNewlyTransformed, setIsNewlyTransformed] = useState(false);\r\n  \r\n  // When transformations change, update state to show indicators\r\n  useEffect(() => {\r\n    if (transformations.length !== prevTransformationCount) {\r\n      // Detect if new transformations were added\r\n      if (transformations.length > prevTransformationCount) {\r\n        setIsNewlyTransformed(true);\r\n        \r\n        // Reset the newly transformed flag after animations would complete\r\n        const timer = setTimeout(() => {\r\n          setIsNewlyTransformed(false);\r\n        }, 2000);\r\n        \r\n        return () => clearTimeout(timer);\r\n      }\r\n      \r\n      // Update previous count\r\n      setPrevTransformationCount(transformations.length);\r\n    }\r\n  }, [transformations.length, prevTransformationCount]);\r\n  \r\n  // Get a description of transformation activity for tooltip\r\n  const getTransformationDescription = () => {\r\n    if (transformations.length === 0) return '';\r\n    \r\n    const typeCount: Record<string, number> = {};\r\n    transformations.forEach(t => {\r\n      typeCount[t.type] = (typeCount[t.type] || 0) + 1;\r\n    });\r\n    \r\n    // Generate a description based on the types of transformations\r\n    const descriptions = [];\r\n    \r\n    if (typeCount['replace']) {\r\n      descriptions.push(`${typeCount['replace']} replacements`);\r\n    }\r\n    \r\n    if (typeCount['emphasize']) {\r\n      descriptions.push(`${typeCount['emphasize']} emphasis`);\r\n    }\r\n    \r\n    if (typeCount['expand']) {\r\n      descriptions.push(`${typeCount['expand']} expansions`);\r\n    }\r\n    \r\n    if (typeCount['fragment']) {\r\n      descriptions.push(`${typeCount['fragment']} fragmentations`);\r\n    }\r\n    \r\n    if (typeCount['metaComment']) {\r\n      descriptions.push(`${typeCount['metaComment']} comments`);\r\n    }\r\n    \r\n    return descriptions.join(', ');\r\n  };\r\n  \r\n  return (\r\n    <div \r\n      className={`simple-transformation-container ${isNewlyTransformed ? 'newly-transformed' : ''}`}\r\n      data-transformation-count={transformations.length}\r\n      data-node-id={nodeId}\r\n    >\r\n      {/* Visual indicator for active transformations - much simpler than the complex version */}\r\n      {transformations.length > 0 && (\r\n        <div \r\n          className={`transformation-indicator ${isNewlyTransformed ? 'active' : ''}`}\r\n          title={getTransformationDescription()}\r\n        >\r\n          <span className=\"transformation-count\">{transformations.length}</span>\r\n          {isNewlyTransformed && transformations.length > prevTransformationCount && (\r\n            <span className=\"transformation-change\">\r\n              +{transformations.length - prevTransformationCount}\r\n            </span>\r\n          )}\r\n        </div>\r\n      )}\r\n      \r\n      {/* Main content */}\r\n      <div className=\"simple-transformation-content\">\r\n        {children}\r\n      </div>\r\n      \r\n      {/* Optional overlay for transition effects */}\r\n      {isNewlyTransformed && (\r\n        <div \r\n          className=\"transformation-overlay\"\r\n          aria-hidden=\"true\"\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SimpleTransformationContainer;","/**\r\n * SimpleTextRenderer Component\r\n * \r\n * A lightweight, reliable alternative to the NarramorphRenderer\r\n * that prioritizes stability and content visibility over visual effects.\r\n * \r\n * This component:\r\n * 1. Renders node content with minimal dependencies\r\n * 2. Uses pure React/DOM rendering without WebGL\r\n * 3. Maintains proper text display even when resources are constrained\r\n * 4. Provides graceful fallbacks and simplified transformations\r\n */\r\n\r\nimport React, { useEffect, useState, useRef, memo } from 'react';\r\nimport { useNodeState } from '../../hooks/useNodeState';\r\nimport { TextTransformation } from '../../types';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState } from '../../store/types';\r\nimport '../../styles/NarramorphTransformations.css';\r\nimport '../../styles/SimpleTextRenderer.css';\r\nimport SimpleTransformationContainer from './SimpleTransformationContainer';\r\n\r\ninterface SimpleTextRendererProps {\r\n  nodeId?: string;\r\n  onRenderComplete?: () => void;\r\n  onVisibilityChange?: (isVisible: boolean) => void;\r\n}\r\n\r\n// Text processor without WebGL dependencies\r\nconst processTextTransformations = (\r\n  content: string,\r\n  transformations: TextTransformation[]\r\n): string => {\r\n  if (!content || !transformations.length) return content;\r\n  \r\n  let processedContent = content;\r\n  \r\n  // Sort transformations by priority to apply highest priority first\r\n  const sortedTransformations = [...transformations].sort((a, b) => {\r\n    const priorityMap: Record<string, number> = {\r\n      'high': 3,\r\n      'medium': 2,\r\n      'low': 1\r\n    };\r\n    \r\n    const aPriority = priorityMap[a.priority || 'medium'] || 2;\r\n    const bPriority = priorityMap[b.priority || 'medium'] || 2;\r\n    \r\n    return bPriority - aPriority;\r\n  });\r\n  \r\n  // Apply transformations using HTML and CSS instead of WebGL effects\r\n  for (const transformation of sortedTransformations) {\r\n    const { type, selector, replacement, emphasis } = transformation;\r\n    \r\n    if (!selector) continue;\r\n    \r\n    try {\r\n      switch (type) {\r\n        case 'replace': {\r\n          if (replacement) {\r\n            // Simple text replacement with span markers\r\n            const spanClass = `text-transformation text-replaced`;\r\n            const replacementHtml = `<span class=\"${spanClass}\" data-transform-type=\"replace\">${replacement}</span>`;\r\n            processedContent = processedContent.replace(\r\n              new RegExp(selector, 'g'),\r\n              replacementHtml\r\n            );\r\n          }\r\n          break;\r\n        }\r\n          \r\n        case 'emphasize': {\r\n          // Add emphasis with appropriate class\r\n          const emphasisClass = emphasis || 'color';\r\n          const emphasisHtml = `<span class=\"text-transformation text-emphasis text-emphasis-${emphasisClass}\" data-transform-type=\"emphasize\" data-emphasis=\"${emphasisClass}\">${selector}</span>`;\r\n          processedContent = processedContent.replace(\r\n            new RegExp(selector, 'g'),\r\n            emphasisHtml\r\n          );\r\n          break;\r\n        }\r\n          \r\n        case 'expand': {\r\n          // Add expansion with appropriate class\r\n          const expandHtml = `<span class=\"text-transformation text-expanded\" data-transform-type=\"expand\">${selector}</span>`;\r\n          processedContent = processedContent.replace(\r\n            new RegExp(selector, 'g'),\r\n            expandHtml\r\n          );\r\n          break;\r\n        }\r\n          \r\n        case 'fragment': {\r\n          // Add fragmentation with appropriate class\r\n          const fragmentHtml = `<span class=\"text-transformation text-fragmented\" data-transform-type=\"fragment\">${selector}</span>`;\r\n          processedContent = processedContent.replace(\r\n            new RegExp(selector, 'g'),\r\n            fragmentHtml\r\n          );\r\n          break;\r\n        }\r\n          \r\n        case 'metaComment': {\r\n          // Add meta comment with appropriate class\r\n          const commentHtml = `<span class=\"text-transformation text-commented\" data-transform-type=\"metaComment\">${selector}</span>`;\r\n          processedContent = processedContent.replace(\r\n            new RegExp(selector, 'g'),\r\n            commentHtml\r\n          );\r\n          break;\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error(`[SimpleTextRenderer] Error applying transformation ${type}:`, error);\r\n    }\r\n  }\r\n  \r\n  return processedContent;\r\n};\r\n\r\n// Main renderer component\r\nconst SimpleTextRenderer: React.FC<SimpleTextRendererProps> = memo(({\r\n  nodeId,\r\n  onRenderComplete,\r\n  onVisibilityChange\r\n}) => {\r\n  const {\r\n    node,\r\n    transformedContent: originalTransformedContent,\r\n    appliedTransformations\r\n  } = useNodeState(nodeId);\r\n  \r\n  const [processedContent, setProcessedContent] = useState<string>('');\r\n  const [isVisible, setIsVisible] = useState(true);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const contentRef = useRef<HTMLDivElement>(null);\r\n  const observerRef = useRef<IntersectionObserver | null>(null);\r\n  \r\n  // Track rendering metrics\r\n  const [renderCount, setRenderCount] = useState(0);\r\n  \r\n  // Get reading path from reader state\r\n  const readingPath = useSelector((state: RootState) => state.reader.path);\r\n  \r\n  // Process transformations in a simpler way\r\n  useEffect(() => {\r\n    if (node?.currentContent) {\r\n      console.log(`[SimpleTextRenderer] Processing content for node: ${node.id}, length: ${node.currentContent.length}`);\r\n      setIsLoading(true);\r\n      \r\n      // Either use the transformed content from useNodeState or process it ourselves\r\n      const content = originalTransformedContent || node.currentContent;\r\n      \r\n      // Use requestAnimationFrame to ensure we're in a render cycle\r\n      requestAnimationFrame(() => {\r\n        // Apply transformations using simple DOM manipulations instead of WebGL\r\n        const processed = processTextTransformations(content, appliedTransformations);\r\n        setProcessedContent(processed);\r\n        \r\n        // Increment render count for monitoring\r\n        setRenderCount(prev => prev + 1);\r\n        \r\n        setIsLoading(false);\r\n        \r\n        // Signal render completion if callback provided\r\n        if (onRenderComplete) {\r\n          console.log(`[SimpleTextRenderer] Render complete for node: ${node.id}`);\r\n          // Small delay to ensure DOM is updated\r\n          setTimeout(onRenderComplete, 50);\r\n        }\r\n        \r\n        // Ensure parent knows content is visible\r\n        if (onVisibilityChange) {\r\n          onVisibilityChange(true);\r\n        }\r\n      });\r\n    }\r\n  }, [node?.currentContent, node?.id, originalTransformedContent, appliedTransformations, onRenderComplete, onVisibilityChange]);\r\n  \r\n  // Set up visibility observer with simplified reliable detection\r\n  useEffect(() => {\r\n    if (!contentRef.current) return;\r\n    \r\n    // Clean up previous observer\r\n    if (observerRef.current) {\r\n      observerRef.current.disconnect();\r\n    }\r\n    \r\n    // Create new observer with simplified reliable settings\r\n    observerRef.current = new IntersectionObserver(\r\n      (entries) => {\r\n        const entry = entries[0];\r\n        if (!entry) return;\r\n        \r\n        const isNowVisible = entry.isIntersecting;\r\n        \r\n        // Only update if visibility changed\r\n        if (isVisible !== isNowVisible) {\r\n          setIsVisible(isNowVisible);\r\n          \r\n          // Notify parent component if callback provided\r\n          if (onVisibilityChange) {\r\n            onVisibilityChange(isNowVisible);\r\n          }\r\n        }\r\n      },\r\n      {\r\n        root: null, // Use viewport\r\n        rootMargin: '0px', // No margin needed for reliability\r\n        threshold: 0.1 // 10% visibility is enough to consider it visible\r\n      }\r\n    );\r\n    \r\n    // Start observing\r\n    observerRef.current.observe(contentRef.current);\r\n    \r\n    return () => {\r\n      observerRef.current?.disconnect();\r\n    };\r\n  }, [isVisible, onVisibilityChange]);\r\n  \r\n  // Render empty state if no content\r\n  if (!node || !node.currentContent) {\r\n    return <div className=\"simple-renderer-loading\">Loading narrative content...</div>;\r\n  }\r\n  \r\n  // Render with simpler container\r\n  return (\r\n    <div\r\n      className={`simple-renderer-container ${isVisible ? 'is-visible' : ''}`}\r\n      data-node-id={node.id}\r\n      data-render-count={renderCount}\r\n      style={{\r\n        display: 'block',\r\n        visibility: 'visible',\r\n        position: 'relative',\r\n        minHeight: '200px'\r\n      }}\r\n    >\r\n      <SimpleTransformationContainer\r\n        transformations={appliedTransformations}\r\n        nodeId={node.id}\r\n      >\r\n        {isLoading && (\r\n          <div className=\"simple-renderer-loading\" style={{ padding: '20px 0' }}>\r\n            <div className=\"loading-spinner\"></div>\r\n            <p>Preparing narrative content...</p>\r\n          </div>\r\n        )}\r\n        \r\n        <div\r\n          ref={contentRef}\r\n          className=\"simple-renderer-content\"\r\n          data-transformations-count={appliedTransformations.length}\r\n          style={{\r\n            display: 'block',\r\n            visibility: 'visible',\r\n            opacity: 1\r\n          }}\r\n        >\r\n          <div\r\n            dangerouslySetInnerHTML={{ __html: processedContent }}\r\n            className=\"content-inner\"\r\n          />\r\n        </div>\r\n      </SimpleTransformationContainer>\r\n      \r\n      {/* Debug information */}\r\n      {process.env.NODE_ENV === 'development' && (\r\n        <div className=\"simple-renderer-debug\">\r\n          <div className=\"debug-info\">\r\n            <span>Node: {node.id}</span>\r\n            <span>Transformations: {appliedTransformations.length}</span>\r\n            <span>Renders: {renderCount}</span>\r\n            <span>Path Length: {readingPath.sequence.length}</span>\r\n            <span>Visibility: {isVisible ? 'Visible' : 'Hidden'}</span>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default SimpleTextRenderer;","// src/components/NodeView/NodeView.tsx\r\n\r\nimport { useEffect, useState, lazy, Suspense, useRef, useMemo } from 'react';\r\nimport ErrorBoundary from '../common/ErrorBoundary';\r\nimport SimpleTextRenderer from './SimpleTextRenderer';\r\nimport { viewManager } from '../../services/ViewManager';\r\nimport { webGLContextManager } from '../../services/WebGLContextManager';\r\nimport { useSelector } from 'react-redux';\r\nimport {\r\n  selectSelectedNodeId,\r\n  returnToConstellation,\r\n  selectViewMode,\r\n} from '../../store/slices/interfaceSlice';\r\nimport { loadNodeContent, selectNodeById, visitNode } from '../../store/slices/nodesSlice';\r\nimport { useAppDispatch } from '../../store/hooks';\r\nimport './NodeView.css';\r\nimport '../common/ErrorStyles.css'; // Import error and debug styles\r\nimport { RootState } from '../../store';\r\n\r\n// Define interface for the non-standard performance.memory API\r\ninterface MemoryInfo {\r\n  jsHeapSizeLimit: number;\r\n  totalJSHeapSize: number;\r\n  usedJSHeapSize: number;\r\n}\r\n\r\n// Extend Performance interface\r\ninterface ExtendedPerformance extends Performance {\r\n  memory?: MemoryInfo;\r\n}\r\n\r\n// Type guard for memory property\r\nfunction hasMemory(performance: Performance): performance is ExtendedPerformance {\r\n  return 'memory' in performance;\r\n}\r\n\r\n// Dynamically import heavy components with loading tracking\r\nconst ReactMarkdown = lazy(() => {\r\n  console.log('[NodeView] Loading ReactMarkdown component');\r\n  return import('react-markdown').then(module => {\r\n    console.log('[NodeView] ReactMarkdown component loaded');\r\n    return module;\r\n  });\r\n});\r\n\r\nconst MiniConstellation = lazy(() => import('./MiniConstellation'));\r\nconst MarginaliaSidebar = lazy(() => import('./MarginaliaSidebar'));\r\n\r\n// Pre-load NarramorphRenderer to avoid race conditions with content loading\r\nconst NarramorphRendererPromise = import('./NarramorphRenderer');\r\nconst NarramorphRenderer = lazy(() => {\r\n  console.log('[NodeView] Loading NarramorphRenderer component');\r\n  return NarramorphRendererPromise.then(module => {\r\n    console.log('[NodeView] NarramorphRenderer component loaded');\r\n    return module;\r\n  });\r\n});\r\n\r\n// Dynamically import remark plugin with loading tracking\r\nconst remarkGfmPromise = import('remark-gfm').then(module => {\r\n  console.log('[NodeView] remark-gfm plugin loaded');\r\n  return module.default;\r\n});\r\n\r\n// Force simple rendering flag - set to false to allow automatic decision based on system capabilities\r\n// Set to true to always use the simplified direct renderer\r\nconst FORCE_SIMPLE_RENDERING = false;\r\n\r\n// Loading components\r\nconst ContentLoading = () => (\r\n  <div className=\"content-loading\">\r\n    <div className=\"loading-spinner\"></div>\r\n    <p>Loading content...</p>\r\n  </div>\r\n);\r\n\r\nconst SideComponentLoading = () => <div className=\"side-component-loading\"></div>;\r\n\r\nconst NodeView = () => {\r\n  const dispatch = useAppDispatch();\r\n  const selectedNodeId = useSelector(selectSelectedNodeId);\r\n  const viewMode = useSelector(selectViewMode);\r\n  const node = useSelector((state: RootState) => selectedNodeId ? selectNodeById(state, selectedNodeId) : null);\r\n  \r\n  // Get unique view key from ViewManager to force proper unmount/remount\r\n  const uniqueViewKey = useMemo(() => viewManager.getUniqueViewKey(), []);\r\n  \r\n  // State to control transition between ReactMarkdown and NarramorphRenderer\r\n  // Moved to top level before any conditional returns\r\n  const [useNarramorph, setUseNarramorph] = useState(false);\r\n  \r\n  // Add fallback state for handling WebGL context loss\r\n  const [useWebGLFallback, setUseWebGLFallback] = useState(false);\r\n  \r\n  // Track if simple renderer has been forced\r\n  const [forceSimpleRenderer, setForceSimpleRenderer] = useState(FORCE_SIMPLE_RENDERING);\r\n  \r\n  // Track if WebGL is available for this view (determined by context manager)\r\n  const [webGLAvailable, setWebGLAvailable] = useState(true);\r\n  \r\n  // Reference to content container for visibility debugging\r\n  const contentContainerRef = useRef<HTMLDivElement>(null);\r\n  \r\n  // Debug state to track content status\r\n  const [contentDebug, setContentDebug] = useState({\r\n    loadStarted: false,\r\n    contentLoaded: false,\r\n    renderStarted: false,\r\n    narramorphActivated: false,\r\n    visibilityIssue: false,\r\n    errorOccurred: false\r\n  });\r\n  \r\n  // Register with ViewManager\r\n  useEffect(() => {\r\n    if (viewMode === 'reading') {\r\n      viewManager.registerViewMount('reading', true);\r\n      \r\n      // Check WebGL availability for this view\r\n      const webGLSupport = webGLContextManager.checkWebGLSupport();\r\n      setWebGLAvailable(!webGLSupport.isLowEndDevice);\r\n      \r\n      console.log(`[NodeView] Mounted reading view, WebGL available: ${webGLAvailable}`);\r\n    }\r\n    \r\n    return () => {\r\n      if (viewMode === 'reading') {\r\n        viewManager.registerViewMount('reading', false);\r\n        console.log('[NodeView] Unmounted reading view');\r\n      }\r\n    };\r\n  }, [viewMode, webGLAvailable]);\r\n\r\n  // Set up timing markers to debug when content disappears\r\n  useEffect(() => {\r\n    if (selectedNodeId) {\r\n      console.time(`node-${selectedNodeId}-visibility`);\r\n    }\r\n    return () => {\r\n      if (selectedNodeId) {\r\n        console.timeEnd(`node-${selectedNodeId}-visibility`);\r\n      }\r\n    };\r\n  }, [selectedNodeId]);\r\n  \r\n  // Create a state to track view transitions\r\n  const [viewTransitionState, setViewTransitionState] = useState({\r\n    transitionTime: 0,\r\n    lastViewMode: viewMode,\r\n    transitionCount: 0,\r\n    renderCount: 0\r\n  });\r\n  \r\n  // Track memory usage\r\n  const [memoryStats, setMemoryStats] = useState({\r\n    jsHeapSizeLimit: 0,\r\n    totalJSHeapSize: 0,\r\n    usedJSHeapSize: 0,\r\n    timestamp: 0\r\n  });\r\n  \r\n  // Effect to track view transitions\r\n  useEffect(() => {\r\n    if (viewTransitionState.lastViewMode !== viewMode) {\r\n      const now = Date.now();\r\n      console.log(`[NodeView] View transition: ${viewTransitionState.lastViewMode} -> ${viewMode} at ${now}`);\r\n      \r\n      setViewTransitionState(prev => ({\r\n        ...prev,\r\n        lastViewMode: viewMode,\r\n        transitionTime: now,\r\n        transitionCount: prev.transitionCount + 1\r\n      }));\r\n      \r\n      // Reset content debug state on transition\r\n      setContentDebug(prev => ({\r\n        ...prev,\r\n        loadStarted: false,\r\n        contentLoaded: false,\r\n        renderStarted: false,\r\n        narramorphActivated: false,\r\n        visibilityIssue: false,\r\n        errorOccurred: false\r\n      }));\r\n      \r\n      // Collect memory stats on transition\r\n      if (hasMemory(performance) && performance.memory) {\r\n        const memory = performance.memory;\r\n        setMemoryStats({\r\n          jsHeapSizeLimit: memory.jsHeapSizeLimit,\r\n          totalJSHeapSize: memory.totalJSHeapSize,\r\n          usedJSHeapSize: memory.usedJSHeapSize,\r\n          timestamp: now\r\n        });\r\n        \r\n        console.log(`[NodeView] Memory usage at transition:`, {\r\n          usedHeap: Math.round(memory.usedJSHeapSize / (1024 * 1024)) + 'MB',\r\n          totalHeap: Math.round(memory.totalJSHeapSize / (1024 * 1024)) + 'MB',\r\n          limit: Math.round(memory.jsHeapSizeLimit / (1024 * 1024)) + 'MB'\r\n        });\r\n      }\r\n    }\r\n    \r\n    // Increment render count on each render\r\n    setViewTransitionState(prev => ({\r\n      ...prev,\r\n      renderCount: prev.renderCount + 1\r\n    }));\r\n  }, [viewMode, viewTransitionState.lastViewMode]);\r\n  \r\n  // Effect to load content if needed\r\n  useEffect(() => {\r\n    if (selectedNodeId && (!node?.content || !node?.currentContent)) {\r\n      console.log(`[NodeView] Loading content for node: ${selectedNodeId}`, {\r\n        viewMode,\r\n        transitionCount: viewTransitionState.transitionCount,\r\n        timeElapsed: Date.now() - viewTransitionState.transitionTime + 'ms'\r\n      });\r\n      setContentDebug(prev => ({ ...prev, loadStarted: true }));\r\n      dispatch(loadNodeContent(selectedNodeId));\r\n    }\r\n    \r\n    // Debug when content is loaded\r\n    if (node?.currentContent) {\r\n      console.log(`[NodeView] Content loaded for node: ${selectedNodeId}`, {\r\n        contentLength: node.currentContent.length,\r\n        visitCount: node.visitCount,\r\n        timeElapsed: Date.now() - viewTransitionState.transitionTime + 'ms'\r\n      });\r\n      setContentDebug(prev => ({ ...prev, contentLoaded: true }));\r\n      \r\n      // Check for content corruption\r\n      if (node.currentContent.includes('[object Object]') ||\r\n          node.currentContent.includes('undefined') ||\r\n          node.currentContent.length < 10) {\r\n        console.error(`[NodeView] Possible content corruption detected:`, {\r\n          contentStart: node.currentContent.substring(0, 100),\r\n          contentLength: node.currentContent.length\r\n        });\r\n      }\r\n    }\r\n  }, [selectedNodeId, node, dispatch, viewMode, viewTransitionState.transitionCount, viewTransitionState.transitionTime]);\r\n  \r\n  // Separate effect to track node visits - only runs when selectedNodeId changes\r\n  useEffect(() => {\r\n    if (selectedNodeId) {\r\n      dispatch(visitNode(selectedNodeId));\r\n    }\r\n  }, [selectedNodeId, dispatch]); // Removed node dependency to prevent infinite loop\r\n  \r\n  // Preload components and enable Narramorph transformations after content is loaded\r\n  useEffect(() => {\r\n    if (node?.currentContent) {\r\n      console.log(`[NodeView] Preparing to activate Narramorph for node: ${node.id}`, {\r\n        viewMode,\r\n        timeElapsed: Date.now() - viewTransitionState.transitionTime + 'ms',\r\n        contentLength: node.currentContent.length\r\n      });\r\n      setContentDebug(prev => ({ ...prev, renderStarted: true }));\r\n      \r\n      // First ensure NarramorphRenderer is loaded before enabling it\r\n      // This prevents the race condition between component loading and state changes\r\n      let componentLoaded = false;\r\n      \r\n      // Start preloading the component immediately\r\n      console.log('[NodeView] Preloading NarramorphRenderer component');\r\n      NarramorphRendererPromise.then(() => {\r\n        componentLoaded = true;\r\n        console.log('[NodeView] NarramorphRenderer preload complete');\r\n        \r\n        // Only proceed if we still have the same node content (prevent stale closure issues)\r\n        if (node?.id) {\r\n          console.log(`[NodeView] Activating Narramorph renderer for node: ${node.id} after preload`);\r\n          \r\n          // Now it's safe to enable the component\r\n          setUseNarramorph(true);\r\n          setContentDebug(prev => ({ ...prev, narramorphActivated: true }));\r\n          \r\n          // Check DOM state after enabling\r\n          if (contentContainerRef.current) {\r\n            const preBoundingRect = contentContainerRef.current.getBoundingClientRect();\r\n            console.log('[NodeView] Post-preload container dimensions:', {\r\n              width: preBoundingRect.width,\r\n              height: preBoundingRect.height,\r\n              display: window.getComputedStyle(contentContainerRef.current).display,\r\n              visibility: window.getComputedStyle(contentContainerRef.current).visibility\r\n            });\r\n          }\r\n        }\r\n      }).catch(err => {\r\n        console.error('[NodeView] Error preloading NarramorphRenderer:', err);\r\n        // Force simple renderer on error\r\n        setForceSimpleRenderer(true);\r\n      });\r\n      \r\n      // Set up visibility check that runs after components should be loaded and rendered\r\n      const visibilityTimer = setTimeout(() => {\r\n        if (contentContainerRef.current) {\r\n          console.log('[NodeView] Force checking content visibility');\r\n          const isVisible = contentContainerRef.current.offsetParent !== null;\r\n          const boundingRect = contentContainerRef.current.getBoundingClientRect();\r\n          const computedStyle = window.getComputedStyle(contentContainerRef.current);\r\n          \r\n          console.log('[NodeView] Content visibility check:', {\r\n            isVisible,\r\n            width: boundingRect.width,\r\n            height: boundingRect.height,\r\n            display: computedStyle.display,\r\n            visibility: computedStyle.visibility,\r\n            zIndex: computedStyle.zIndex,\r\n            position: computedStyle.position,\r\n            opacity: computedStyle.opacity,\r\n            componentLoaded\r\n          });\r\n          \r\n          // If content isn't visible or has zero dimensions\r\n          if (!isVisible || boundingRect.width === 0 || boundingRect.height === 0) {\r\n            console.warn('[NodeView] Content invisible after rendering - forcing simple renderer');\r\n            setForceSimpleRenderer(true);\r\n            setContentDebug(prev => ({ ...prev, visibilityIssue: true }));\r\n          }\r\n        }\r\n      }, 1500); // Increased timeout to allow more time for loading\r\n      \r\n      return () => clearTimeout(visibilityTimer);\r\n    }\r\n    return undefined; // Explicit return for when condition is false\r\n  }, [node?.currentContent, node?.id, viewMode, viewTransitionState.transitionTime]);\r\n  \r\n  // Handle WebGL context loss errors\r\n  useEffect(() => {\r\n    const handleWebGLContextLoss = (event: ErrorEvent) => {\r\n      // Check if this is a WebGL context loss error\r\n      if (event.message &&\r\n         (event.message.includes('WebGL context lost') ||\r\n          event.message.includes('THREE.WebGLRenderer'))) {\r\n        console.error('[NodeView] WebGL context loss detected!', {\r\n          message: event.message,\r\n          stack: event.error?.stack || 'No stack trace',\r\n          viewMode,\r\n          timeElapsed: Date.now() - viewTransitionState.transitionTime + 'ms',\r\n          renderCount: viewTransitionState.renderCount\r\n        });\r\n        \r\n        // Set fallback mode to use ReactMarkdown instead\r\n        setUseWebGLFallback(true);\r\n        setUseNarramorph(false);\r\n        setContentDebug(prev => ({ ...prev, errorOccurred: true }));\r\n        \r\n        // Collect memory stats on error\r\n        if (hasMemory(performance) && performance.memory) {\r\n          const memory = performance.memory;\r\n          setMemoryStats({\r\n            jsHeapSizeLimit: memory.jsHeapSizeLimit,\r\n            totalJSHeapSize: memory.totalJSHeapSize,\r\n            usedJSHeapSize: memory.usedJSHeapSize,\r\n            timestamp: Date.now()\r\n          });\r\n          \r\n          console.log(`[NodeView] Memory usage at WebGL error:`, {\r\n            usedHeap: Math.round(memory.usedJSHeapSize / (1024 * 1024)) + 'MB',\r\n            totalHeap: Math.round(memory.totalJSHeapSize / (1024 * 1024)) + 'MB',\r\n            limit: Math.round(memory.jsHeapSizeLimit / (1024 * 1024)) + 'MB'\r\n          });\r\n        }\r\n      }\r\n    };\r\n    \r\n    // Listen for error events that might indicate WebGL issues\r\n    window.addEventListener('error', handleWebGLContextLoss);\r\n    \r\n    return () => {\r\n      window.removeEventListener('error', handleWebGLContextLoss);\r\n    };\r\n  }, [viewMode, viewTransitionState.renderCount, viewTransitionState.transitionTime]);\r\n  \r\n  // Handle return to constellation view\r\n  const handleReturnToConstellation = () => {\r\n    dispatch(returnToConstellation());\r\n  };\r\n\r\n  if (viewMode !== 'reading' || !node) {\r\n    return null;\r\n  }\r\n\r\n  const characterClass = `${node.character.toLowerCase()}-theme`;\r\n\r\n  const getTemporalClass = () => {\r\n    if (node.temporalValue <= 3) return 'past-indicator';\r\n    if (node.temporalValue <= 6) return 'present-indicator';\r\n    return 'future-indicator';\r\n  };\r\n\r\n  const renderNodeContent = () => {\r\n    if (!node.currentContent) {\r\n      return (\r\n        <div className=\"node-loading\">\r\n          <span>Loading narrative fragment...</span>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    // Add a wrapper with debug information\r\n    return (\r\n      <div\r\n        ref={contentContainerRef}\r\n        className={`content-container ${node.currentState}`}\r\n        data-content-loaded=\"true\"\r\n        data-node-id={node.id}\r\n        data-visit-count={node.visitCount}\r\n        style={{ position: 'relative', visibility: 'visible', display: 'block' }}\r\n      >\r\n        {/* Determine the appropriate renderer to use based on conditions */}\r\n        {forceSimpleRenderer || !webGLAvailable ? (\r\n          // Use SimpleTextRenderer when either forced or WebGL isn't available\r\n          <SimpleTextRenderer\r\n            key={`simple-${node.id}-${node.visitCount}`}\r\n            nodeId={node.id}\r\n            onRenderComplete={() => {\r\n              console.log('[NodeView] SimpleTextRenderer completed rendering');\r\n              setContentDebug(prev => ({ ...prev, visibilityIssue: false }));\r\n            }}\r\n            onVisibilityChange={(isVisible: boolean) => {\r\n              console.log(`[NodeView] Content visibility changed to: ${isVisible ? 'visible' : 'hidden'}`);\r\n              setContentDebug(prev => ({ ...prev, visibilityIssue: !isVisible }));\r\n            }}\r\n          />\r\n        ) : (\r\n          // Try advanced rendering if conditions allow\r\n          <Suspense fallback={<ContentLoading />}>\r\n            {useNarramorph && !useWebGLFallback ? (\r\n              // Try to use Narramorph, but with error boundary and fallback\r\n              <ErrorBoundary\r\n                fallback={\r\n                  <div className=\"fallback-content\" style={{ visibility: 'visible', display: 'block' }}>\r\n                    <p className=\"error-notice\">Advanced rendering unavailable - showing basic content</p>\r\n                    <ReactMarkdown remarkPlugins={[() => remarkGfmPromise]}>{node.currentContent}</ReactMarkdown>\r\n                  </div>\r\n                }\r\n              >\r\n                {/* Render placeholder div to reserve space during loading */}\r\n                <div\r\n                  style={{\r\n                    minHeight: '200px',\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center'\r\n                  }}\r\n                >\r\n                  <NarramorphRenderer\r\n                    key={`narramorph-${node.id}-${node.visitCount}`}\r\n                    nodeId={node.id}\r\n                    onVisibilityChange={(isVisible: boolean) => {\r\n                      console.log(`[NodeView] Content visibility changed to: ${isVisible ? 'visible' : 'hidden'}`);\r\n                      setContentDebug(prev => ({ ...prev, visibilityIssue: !isVisible }));\r\n                      \r\n                      // Force fallback if content becomes invisible unexpectedly\r\n                      if (!isVisible && contentDebug.narramorphActivated) {\r\n                        console.warn('[NodeView] Content disappeared - switching to simple renderer');\r\n                        setForceSimpleRenderer(true);\r\n                      }\r\n                    }}\r\n                  />\r\n                </div>\r\n              </ErrorBoundary>\r\n            ) : (\r\n              // Fallback to basic rendering with ReactMarkdown\r\n              <div style={{ visibility: 'visible', display: 'block', position: 'relative', minHeight: '100px' }}>\r\n                <div className=\"content-loading\" style={{ marginBottom: '10px' }}>\r\n                  <div className=\"loading-spinner\"></div>\r\n                  <p>Preparing content...</p>\r\n                </div>\r\n                <ReactMarkdown\r\n                  key={`markdown-${node.id}-${node.visitCount}`}\r\n                  remarkPlugins={[() => remarkGfmPromise]}\r\n                >\r\n                  {node.currentContent}\r\n                </ReactMarkdown>\r\n              </div>\r\n            )}\r\n          </Suspense>\r\n        )}\r\n        \r\n        {/* Enhanced debug indicator with transition tracking */}\r\n        {(\r\n          <div className=\"debug-indicator\">\r\n            <div className={`status-dot ${contentDebug.contentLoaded ? 'status-green' : 'status-red'}`} title=\"Content loaded\"></div>\r\n            <div className={`status-dot ${contentDebug.narramorphActivated ? 'status-green' : 'status-yellow'}`} title=\"Narramorph active\"></div>\r\n            <div className={`status-dot ${contentDebug.errorOccurred ? 'status-red' : 'status-green'}`} title=\"No errors\"></div>\r\n            <div className={`status-dot ${contentDebug.visibilityIssue ? 'status-red' : 'status-green'}`} title=\"Content visible\"></div>\r\n            <div className={`status-dot ${forceSimpleRenderer ? 'status-blue' : 'status-yellow'}`} title=\"Simple renderer\"></div>\r\n            <div className={`status-dot ${webGLAvailable ? 'status-green' : 'status-red'}`} title=\"WebGL available\"></div>\r\n            <div className=\"debug-metrics\">\r\n              <span title=\"View transition count\">T:{viewTransitionState.transitionCount}</span>\r\n              <span title=\"Render count\">R:{viewTransitionState.renderCount}</span>\r\n              {memoryStats.usedJSHeapSize > 0 && (\r\n                <span title=\"Memory usage\">\r\n                  M:{Math.round(memoryStats.usedJSHeapSize / (1024 * 1024))}MB\r\n                </span>\r\n              )}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  return (\r\n    <div \r\n      key={uniqueViewKey}\r\n      className={`node-view-container ${characterClass}`}\r\n    >\r\n      <div className={`temporal-indicator ${getTemporalClass()}`}></div>\r\n\r\n      <div className=\"node-header\">\r\n        <h1>{node.title}</h1>\r\n        <div className=\"node-metadata\">\r\n          <span className=\"node-character\">{node.character}</span>\r\n          <span className=\"node-state\">{node.currentState}</span>\r\n          <span className=\"node-visits\">Visits: {node.visitCount}</span>\r\n        </div>\r\n      </div>\r\n      \r\n      <div\r\n        className=\"node-content force-visible\"\r\n        style={{\r\n          position: 'relative'\r\n        }}\r\n      >\r\n        {renderNodeContent()}\r\n      </div>\r\n      \r\n      <div className=\"node-navigation\">\r\n        <button onClick={handleReturnToConstellation} className=\"navigation-button\">\r\n          Return to Constellation\r\n        </button>\r\n      </div>\r\n      \r\n      {/* Mini constellation for context */}\r\n      <div className=\"mini-constellation\">\r\n        <Suspense fallback={<SideComponentLoading />}>\r\n          <MiniConstellation\r\n            currentNodeId={node.id}\r\n          />\r\n        </Suspense>\r\n      </div>\r\n      \r\n      {/* Sidebar with marginalia */}\r\n      <Suspense fallback={<SideComponentLoading />}>\r\n        <MarginaliaSidebar\r\n          nodeId={node.id}\r\n          strangeAttractors={node.strangeAttractors}\r\n        />\r\n      </Suspense>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NodeView;"],"file":"assets/NodeView-DAT5rllo.js"}