{"version":3,"mappings":";yzBAEA,MAAMA,EAAwB,IAAM,CAClC,KAAM,CAACC,EAASC,CAAU,EAAIC,WAAS,EAAK,EAG5CC,mBAAU,KACRF,EAAW,EAAI,EAGN,cAAK,UAAU,IAAI,gBAAgB,EAGrC,IAAM,CACF,cAAK,UAAU,OAAO,gBAAgB,CACjD,GACC,EAAE,EAGFG,EAAA,YAAI,UAAU,eAAe,MAAO,CACnC,MAAO,OACP,OAAQ,QACR,QAAS,OACT,cAAe,SACf,eAAgB,SAChB,WAAY,SACZ,gBAAiB,UACjB,SAAU,QACV,IAAK,EACL,KAAM,EACN,OAAQ,KACR,SAAU,QAEV,YAACA,OAAA,OAAI,UAAU,kBAAkB,MAAO,CACtC,SAAU,WACV,IAAK,EACL,KAAM,EACN,MAAO,OACP,OAAQ,OACR,SAAU,QAEV,YAACC,MAAA,OAAI,UAAU,OAAQ,GACvBA,MAAC,MAAI,WAAU,QAAS,GACxBA,MAAC,MAAI,WAAU,QAAS,IAC1B,EAECD,OAAA,OAAI,UAAU,kBAAkB,MAAO,CACtC,UAAW,SACX,OAAQ,GACR,QAAS,OACT,gBAAiB,qBACjB,aAAc,OACd,eAAgB,WAEhB,YAAAC,MAAC,MAAG,MAAO,CACT,aAAc,SACd,SAAU,OACV,MAAO,WACN,SAAsC,2CAExCA,MAAA,OAAI,UAAU,kBAAkB,MAAO,CACtC,MAAO,OACP,OAAQ,OACR,OAAQ,qCACR,aAAc,MACd,UAAW,oBACX,UAAW,0BACX,OAAQ,aACP,EAEHA,MAAC,KAAE,MAAO,CACR,MAAO,2BACP,UAAW,OACX,QAASL,EAAU,EAAI,EACvB,WAAY,wBACX,SAAqB,0BAC1B,IACF,CAEJ,EC1EMM,EAAMC,OAAK,IAAMC,EAAA,WAAO,mBAAO,OAAAC,KAAA,gCAAC,EAMhCC,EAAqB,SAAY,CAO/B,IAGF,QAAQ,IAAI,iCAAiC,QACtCC,EAAO,CACN,cAAM,sCAAuCA,CAAK,EAGhE,EAGAD,EAAmB,EAGnBE,EAAS,WAAW,SAAS,eAAe,MAAM,CAAgB,EAAE,OACjEP,EAAA,IAAAQ,EAAM,WAAN,CACC,SAACR,EAAA,IAAAS,EAAA,UAAS,SAAWT,EAAA,IAAAN,EAAY,IAC/B,SAACM,EAAA,IAAAC,EAAA,EAAI,EACP,CACF,EACF","names":["RootLoading","mounted","setMounted","useState","useEffect","jsxs","jsx","App","lazy","__vitePreload","n","initializeServices","error","ReactDOM","React","Suspense"],"ignoreList":[],"sources":["../../src/components/Loading/RootLoading.tsx","../../src/main.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nconst RootLoading: React.FC = () => {\r\n  const [mounted, setMounted] = useState(false);\r\n  \r\n  // Ensure the component is properly mounted before showing content\r\n  useEffect(() => {\r\n    setMounted(true);\r\n    \r\n    // Apply a body class during loading to prevent conflicts\r\n    document.body.classList.add('loading-active');\r\n    \r\n    // Clean up when component unmounts\r\n    return () => {\r\n      document.body.classList.remove('loading-active');\r\n    };\r\n  }, []);\r\n  \r\n  return (\r\n    <div className=\"root-loading\" style={{\r\n      width: '100%',\r\n      height: '100vh',\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      justifyContent: 'center',\r\n      alignItems: 'center',\r\n      backgroundColor: '#010409',\r\n      position: 'fixed',\r\n      top: 0,\r\n      left: 0,\r\n      zIndex: 9999,\r\n      overflow: 'hidden'\r\n    }}>\r\n      <div className=\"stars-container\" style={{\r\n        position: 'absolute',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        overflow: 'hidden'\r\n      }}>\r\n        <div className=\"stars\"></div>\r\n        <div className=\"stars2\"></div>\r\n        <div className=\"stars3\"></div>\r\n      </div>\r\n      \r\n      <div className=\"loading-message\" style={{\r\n        textAlign: 'center',\r\n        zIndex: 10,\r\n        padding: '2rem',\r\n        backgroundColor: 'rgba(0, 0, 0, 0.5)',\r\n        borderRadius: '10px',\r\n        backdropFilter: 'blur(5px)'\r\n      }}>\r\n        <h1 style={{\r\n          marginBottom: '1.5rem',\r\n          fontSize: '2rem',\r\n          color: '#ffffff'\r\n        }}>The Eternal Return of the Digital Self</h1>\r\n        \r\n        <div className=\"loading-spinner\" style={{\r\n          width: '40px',\r\n          height: '40px',\r\n          border: '4px solid rgba(255, 255, 255, 0.1)',\r\n          borderRadius: '50%',\r\n          borderTop: '4px solid #ffffff',\r\n          animation: 'spin 1s linear infinite',\r\n          margin: '20px auto'\r\n        }}></div>\r\n        \r\n        <p style={{\r\n          color: 'rgba(255, 255, 255, 0.7)',\r\n          marginTop: '1rem',\r\n          opacity: mounted ? 1 : 0,\r\n          transition: 'opacity 0.5s ease-in'\r\n        }}>Loading experience...</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RootLoading;","import React, { lazy, Suspense } from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\n\r\n// Lazy load the main App component\r\nconst App = lazy(() => import('./app'));\r\n\r\n// Import loading component from separate file for better Fast Refresh\r\nimport RootLoading from './components/Loading/RootLoading';\r\n\r\n// Initialize analytics or other non-critical services\r\nconst initializeServices = async () => {\r\n  // This would be the place to load any non-critical services\r\n  // that shouldn't block the initial render\r\n  \r\n  // Example: analytics, monitoring, etc.\r\n  if (process.env.NODE_ENV === 'production') {\r\n    // Dynamically import analytics only in production\r\n    try {\r\n      // const analytics = await import('./services/analytics');\r\n      // analytics.initialize();\r\n      console.log('Production services initialized');\r\n    } catch (error) {\r\n      console.error('Failed to load production services:', error);\r\n    }\r\n  }\r\n};\r\n\r\n// Start initializing services in the background\r\ninitializeServices();\r\n\r\n// Render the application\r\nReactDOM.createRoot(document.getElementById('root') as HTMLElement).render(\r\n  <React.StrictMode>\r\n    <Suspense fallback={<RootLoading />}>\r\n      <App />\r\n    </Suspense>\r\n  </React.StrictMode>\r\n);"],"file":"assets/index-DANqzVqa.js"}