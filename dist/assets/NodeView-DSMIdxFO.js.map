{"version":3,"mappings":"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","names":["ErrorBoundary","Component","props","error","errorInfo","SimpleTransformationContainer","children","transformations","nodeId","prevTransformationCount","setPrevTransformationCount","useState","isNewlyTransformed","setIsNewlyTransformed","transformationSignature","setTransformationSignature","useEffect","currentSignature","t","timer","getTransformationDescription","typeCount","descriptions","jsxs","jsx","processTextTransformations","content","processedContent","sortedTransformations","a","b","priorityMap","aPriority","transformation","type","selector","replacement","emphasis","replacementHtml","emphasisClass","emphasisHtml","expandHtml","fragmentHtml","commentHtml","SimpleTextRenderer","memo","onRenderComplete","onVisibilityChange","node","originalTransformedContent","appliedTransformations","useNodeState","setProcessedContent","isVisible","setIsVisible","isLoading","setIsLoading","contentRef","useRef","observerRef","mutationObserverRef","renderCount","setRenderCount","useSelector","state","callbacksCalledRef","processed","prev","currentContentRef","currentObserver","mutationTimeout","mutations","mutation","target","computedStyle","_a","hasMemory","performance","ReactMarkdown","lazy","__vitePreload","module","MiniConstellation","MarginaliaSidebar","NarramorphRendererPromise","NarramorphRenderer","remarkGfmPromise","ContentLoading","SideComponentLoading","NodeView","dispatch","useAppDispatch","selectedNodeId","selectSelectedNodeId","viewMode","selectViewMode","selectNodeById","uniqueViewKey","useMemo","viewManager","useNarramorph","setUseNarramorph","useWebGLFallback","setUseWebGLFallback","forceSimpleRenderer","setForceSimpleRenderer","contentContainerRef","renderCompleteCalledRef","processedNodeRef","narramorphActivatedRef","viewTransitionState","setViewTransitionState","memoryStats","setMemoryStats","useCallback","setContentDebug","contentDebug","isStillVisible","now","memory","loadNodeContent","contentLength","contentCorrupted","contentPreview","hasCurrentContent","componentLoaded","preBoundingRect","err","visibilityTimer","boundingRect","visitNode","handleWebGLContextLoss","event","handleReturnToConstellation","returnToConstellation","characterClass","getTemporalClass","renderNodeContent","Suspense"],"ignoreList":[],"sources":["../../src/components/common/ErrorBoundary.tsx","../../src/components/NodeView/SimpleTransformationContainer.tsx","../../src/components/NodeView/SimpleTextRenderer.tsx","../../src/components/NodeView/NodeView.tsx"],"sourcesContent":["import { Component, ErrorInfo, ReactNode } from 'react';\r\n\r\ninterface Props {\r\n  children: ReactNode;\r\n  fallback: ReactNode;\r\n}\r\n\r\ninterface State {\r\n  hasError: boolean;\r\n  error: Error | null;\r\n}\r\n\r\n/**\r\n * ErrorBoundary component to catch and handle errors in its child components.\r\n * Provides a fallback UI when an error occurs.\r\n */\r\nclass ErrorBoundary extends Component<Props, State> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.state = { \r\n      hasError: false,\r\n      error: null\r\n    };\r\n  }\r\n\r\n  static getDerivedStateFromError(error: Error): State {\r\n    // Update state so the next render will show the fallback UI\r\n    return { \r\n      hasError: true,\r\n      error: error\r\n    };\r\n  }\r\n\r\n  componentDidCatch(error: Error, errorInfo: ErrorInfo): void {\r\n    // Log the error to console\r\n    console.error('ErrorBoundary caught an error:', error);\r\n    console.error('Component stack:', errorInfo.componentStack);\r\n  }\r\n\r\n  render(): ReactNode {\r\n    if (this.state.hasError) {\r\n      // Render fallback UI\r\n      return this.props.fallback;\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;","/**\r\n * SimpleTransformationContainer Component\r\n * \r\n * A lightweight, reliable container for text transformations.\r\n * This is a simplified version of TransformationAnimationContainer\r\n * that prioritizes stability and content visibility over complex effects.\r\n */\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { TextTransformation } from '../../types';\r\n\r\ninterface SimpleTransformationContainerProps {\r\n  children: React.ReactNode;\r\n  transformations: TextTransformation[];\r\n  nodeId: string;\r\n}\r\n\r\nconst SimpleTransformationContainer: React.FC<SimpleTransformationContainerProps> = ({\r\n  children,\r\n  transformations,\r\n  nodeId\r\n}) => {  // Track previous transformation count to detect changes\r\n  const [prevTransformationCount, setPrevTransformationCount] = useState(0);\r\n  const [isNewlyTransformed, setIsNewlyTransformed] = useState(false);\r\n  const [transformationSignature, setTransformationSignature] = useState('');\r\n  \r\n  // When transformations change, update state to show indicators\r\n  useEffect(() => {\r\n    // Create a signature to detect actual transformation changes, not just count changes\r\n    const currentSignature = transformations\r\n      .map(t => `${t.type}-${t.selector || 'no-selector'}-${JSON.stringify(t)}`)\r\n      .sort()\r\n      .join('|');\r\n    \r\n    if (currentSignature !== transformationSignature) {\r\n      // Detect if new transformations were added\r\n      if (transformations.length > prevTransformationCount) {\r\n        setIsNewlyTransformed(true);\r\n        \r\n        // Reset the newly transformed flag after animations would complete\r\n        const timer = setTimeout(() => {\r\n          setIsNewlyTransformed(false);\r\n        }, 2000);\r\n        \r\n        // Update state\r\n        setPrevTransformationCount(transformations.length);\r\n        setTransformationSignature(currentSignature);\r\n        \r\n        return () => clearTimeout(timer);\r\n      } else {\r\n        // Just update tracking without animation if count didn't increase\r\n        setPrevTransformationCount(transformations.length);\r\n        setTransformationSignature(currentSignature);\r\n      }\r\n    }\r\n  }, [transformations, transformationSignature, prevTransformationCount]);\r\n  \r\n  // Get a description of transformation activity for tooltip\r\n  const getTransformationDescription = () => {\r\n    if (transformations.length === 0) return '';\r\n    \r\n    const typeCount: Record<string, number> = {};\r\n    transformations.forEach(t => {\r\n      typeCount[t.type] = (typeCount[t.type] || 0) + 1;\r\n    });\r\n    \r\n    // Generate a description based on the types of transformations\r\n    const descriptions = [];\r\n    \r\n    if (typeCount['replace']) {\r\n      descriptions.push(`${typeCount['replace']} replacements`);\r\n    }\r\n    \r\n    if (typeCount['emphasize']) {\r\n      descriptions.push(`${typeCount['emphasize']} emphasis`);\r\n    }\r\n    \r\n    if (typeCount['expand']) {\r\n      descriptions.push(`${typeCount['expand']} expansions`);\r\n    }\r\n    \r\n    if (typeCount['fragment']) {\r\n      descriptions.push(`${typeCount['fragment']} fragmentations`);\r\n    }\r\n    \r\n    if (typeCount['metaComment']) {\r\n      descriptions.push(`${typeCount['metaComment']} comments`);\r\n    }\r\n    \r\n    return descriptions.join(', ');\r\n  };\r\n  \r\n  return (\r\n    <div \r\n      className={`simple-transformation-container ${isNewlyTransformed ? 'newly-transformed' : ''}`}\r\n      data-transformation-count={transformations.length}\r\n      data-node-id={nodeId}\r\n    >\r\n      {/* Visual indicator for active transformations - much simpler than the complex version */}\r\n      {transformations.length > 0 && (\r\n        <div \r\n          className={`transformation-indicator ${isNewlyTransformed ? 'active' : ''}`}\r\n          title={getTransformationDescription()}\r\n        >\r\n          <span className=\"transformation-count\">{transformations.length}</span>\r\n          {isNewlyTransformed && transformations.length > prevTransformationCount && (\r\n            <span className=\"transformation-change\">\r\n              +{transformations.length - prevTransformationCount}\r\n            </span>\r\n          )}\r\n        </div>\r\n      )}\r\n      \r\n      {/* Main content */}\r\n      <div className=\"simple-transformation-content\">\r\n        {children}\r\n      </div>\r\n      \r\n      {/* Optional overlay for transition effects */}\r\n      {isNewlyTransformed && (\r\n        <div \r\n          className=\"transformation-overlay\"\r\n          aria-hidden=\"true\"\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SimpleTransformationContainer;","/**\r\n * SimpleTextRenderer Component\r\n * \r\n * A lightweight, reliable alternative to the NarramorphRenderer\r\n * that prioritizes stability and content visibility over visual effects.\r\n * \r\n * This component:\r\n * 1. Renders node content with minimal dependencies\r\n * 2. Uses pure React/DOM rendering without WebGL\r\n * 3. Maintains proper text display even when resources are constrained\r\n * 4. Provides graceful fallbacks and simplified transformations\r\n */\r\n\r\nimport React, { useEffect, useState, useRef, memo } from 'react';\r\nimport { useNodeState } from '../../hooks/useNodeState';\r\nimport { TextTransformation } from '../../types';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState } from '../../store/types';\r\nimport '../../styles/NarramorphTransformations.css';\r\nimport '../../styles/SimpleTextRenderer.css';\r\nimport SimpleTransformationContainer from './SimpleTransformationContainer';\r\n\r\ninterface SimpleTextRendererProps {\r\n  nodeId?: string;\r\n  onRenderComplete?: () => void;\r\n  onVisibilityChange?: (isVisible: boolean) => void;\r\n}\r\n\r\n// Text processor without WebGL dependencies\r\nconst processTextTransformations = (\r\n  content: string,\r\n  transformations: TextTransformation[]\r\n): string => {\r\n  if (!content || !transformations.length) return content;\r\n  \r\n  let processedContent = content;\r\n  \r\n  // Sort transformations by priority to apply highest priority first\r\n  const sortedTransformations = [...transformations].sort((a, b) => {\r\n    const priorityMap: Record<string, number> = {\r\n      'high': 3,\r\n      'medium': 2,\r\n      'low': 1\r\n    };\r\n    \r\n    const aPriority = priorityMap[a.priority || 'medium'] || 2;\r\n    const bPriority = priorityMap[b.priority || 'medium'] || 2;\r\n    \r\n    return bPriority - aPriority;\r\n  });\r\n  \r\n  // Apply transformations using HTML and CSS instead of WebGL effects\r\n  for (const transformation of sortedTransformations) {\r\n    const { type, selector, replacement, emphasis } = transformation;\r\n    \r\n    if (!selector) continue;\r\n    \r\n    try {\r\n      switch (type) {\r\n        case 'replace': {\r\n          if (replacement) {\r\n            // Simple text replacement with span markers\r\n            const spanClass = `text-transformation text-replaced`;\r\n            const replacementHtml = `<span class=\"${spanClass}\" data-transform-type=\"replace\">${replacement}</span>`;\r\n            processedContent = processedContent.replace(\r\n              new RegExp(selector, 'g'),\r\n              replacementHtml\r\n            );\r\n          }\r\n          break;\r\n        }\r\n          \r\n        case 'emphasize': {\r\n          // Add emphasis with appropriate class\r\n          const emphasisClass = emphasis || 'color';\r\n          const emphasisHtml = `<span class=\"text-transformation text-emphasis text-emphasis-${emphasisClass}\" data-transform-type=\"emphasize\" data-emphasis=\"${emphasisClass}\">${selector}</span>`;\r\n          processedContent = processedContent.replace(\r\n            new RegExp(selector, 'g'),\r\n            emphasisHtml\r\n          );\r\n          break;\r\n        }\r\n          \r\n        case 'expand': {\r\n          // Add expansion with appropriate class\r\n          const expandHtml = `<span class=\"text-transformation text-expanded\" data-transform-type=\"expand\">${selector}</span>`;\r\n          processedContent = processedContent.replace(\r\n            new RegExp(selector, 'g'),\r\n            expandHtml\r\n          );\r\n          break;\r\n        }\r\n          \r\n        case 'fragment': {\r\n          // Add fragmentation with appropriate class\r\n          const fragmentHtml = `<span class=\"text-transformation text-fragmented\" data-transform-type=\"fragment\">${selector}</span>`;\r\n          processedContent = processedContent.replace(\r\n            new RegExp(selector, 'g'),\r\n            fragmentHtml\r\n          );\r\n          break;\r\n        }\r\n          \r\n        case 'metaComment': {\r\n          // Add meta comment with appropriate class\r\n          const commentHtml = `<span class=\"text-transformation text-commented\" data-transform-type=\"metaComment\">${selector}</span>`;\r\n          processedContent = processedContent.replace(\r\n            new RegExp(selector, 'g'),\r\n            commentHtml\r\n          );\r\n          break;\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error(`[SimpleTextRenderer] Error applying transformation ${type}:`, error);\r\n    }\r\n  }\r\n  \r\n  return processedContent;\r\n};\r\n\r\n// Main renderer component\r\nconst SimpleTextRenderer: React.FC<SimpleTextRendererProps> = memo(({\r\n  nodeId,\r\n  onRenderComplete,\r\n  onVisibilityChange\r\n}) => {\r\n  const {\r\n    node,\r\n    transformedContent: originalTransformedContent,\r\n    appliedTransformations\r\n  } = useNodeState(nodeId);\r\n  \r\n  const [processedContent, setProcessedContent] = useState<string>('');\r\n  const [isVisible, setIsVisible] = useState(true);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const contentRef = useRef<HTMLDivElement>(null);\r\n  const observerRef = useRef<IntersectionObserver | null>(null);\r\n  const mutationObserverRef = useRef<MutationObserver | null>(null);\r\n  \r\n  // Track rendering metrics\r\n  const [renderCount, setRenderCount] = useState(0);\r\n  \r\n  // Get reading path from reader state\r\n  const readingPath = useSelector((state: RootState) => state.reader.path);\r\n    // Track if callbacks have been called to prevent infinite loops\r\n  const callbacksCalledRef = useRef(false);\r\n  \r\n  // Process transformations in a simpler way\r\n  useEffect(() => {\r\n    if (node?.currentContent) {\r\n      console.log(`[SimpleTextRenderer] Processing content for node: ${node.id}, length: ${node.currentContent.length}`);\r\n      setIsLoading(true);\r\n      \r\n      // Either use the transformed content from useNodeState or process it ourselves\r\n      const content = originalTransformedContent || node.currentContent;\r\n      \r\n      // BUGFIX: Process content immediately without animation frame\r\n      try {\r\n        console.log(`[SimpleTextRenderer] Starting content processing synchronously`);\r\n        // Apply transformations using simple DOM manipulations instead of WebGL\r\n        const processed = processTextTransformations(content, appliedTransformations);\r\n        setProcessedContent(processed);\r\n        \r\n        // Increment render count for monitoring\r\n        setRenderCount(prev => prev + 1);\r\n        \r\n        // Immediately mark as not loading and visible\r\n        setIsLoading(false);\r\n        setIsVisible(true);\r\n        \r\n        // Only call callbacks once per content change to prevent infinite loops\r\n        if (!callbacksCalledRef.current) {\r\n          callbacksCalledRef.current = true;\r\n          \r\n          // Signal render completion if callback provided\r\n          if (onRenderComplete) {\r\n            console.log(`[SimpleTextRenderer] Render complete for node: ${node.id}`);\r\n            // Reduced delay to minimize possibility of content flickering\r\n            setTimeout(onRenderComplete, 10);\r\n          }\r\n          \r\n          // Ensure parent knows content is visible\r\n          if (onVisibilityChange) {\r\n            console.log(`[SimpleTextRenderer] Explicitly marking content as visible`);\r\n            onVisibilityChange(true);\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error(`[SimpleTextRenderer] Error processing content:`, error);\r\n        // Still mark as not loading in case of error\r\n        setIsLoading(false);\r\n      }\r\n    }  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [node?.currentContent, node?.id, originalTransformedContent]); // Removed appliedTransformations and callbacks to prevent infinite loops\r\n\r\n  // Reset callback flag when node changes\r\n  useEffect(() => {\r\n    callbacksCalledRef.current = false;\r\n  }, [node?.id]);\r\n  // Set up visibility observer with simplified reliable detection\r\n  useEffect(() => {\r\n    const currentContentRef = contentRef.current;\r\n    const currentObserver = observerRef.current;\r\n    if (!currentContentRef) return;\r\n    \r\n    console.log(`[DEBUG] Setting up IntersectionObserver for node: ${node?.id}, current visibility: ${isVisible}`);\r\n    \r\n    // Clean up previous observer\r\n    if (currentObserver) {\r\n      currentObserver.disconnect();\r\n    }\r\n    \r\n    // Force visibility to true initially - BUGFIX\r\n    if (!isVisible) {\r\n      console.log(`[DEBUG] Forcing initial visibility to true for node: ${node?.id}`);\r\n      setIsVisible(true);\r\n      \r\n      // Only notify parent component if callback provided and callbacks haven't been called\r\n      if (onVisibilityChange && !callbacksCalledRef.current) {\r\n        onVisibilityChange(true);\r\n      }\r\n    }\r\n    \r\n    // DISABLE INTERSECTION OBSERVER TO PREVENT INFINITE LOOPS\r\n    // The intersection observer was causing render loops, so we'll just assume content is always visible\r\n    console.log(`[DEBUG] Skipping IntersectionObserver setup to prevent infinite loops for node: ${node?.id}`);\r\n    \r\n    // Cleanup function\r\n    return () => {\r\n      console.log(`[DEBUG] Cleaning up IntersectionObserver for node: ${node?.id}`);\r\n      if (currentObserver) {\r\n        currentObserver.disconnect();\r\n      }    };\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [node?.id, isVisible]); // Removed onVisibilityChange to prevent infinite loops\r\n  // Set up MutationObserver to prevent style changes that would hide content\r\n  useEffect(() => {\r\n    const currentContentRef = contentRef.current;\r\n    if (!currentContentRef) return;\r\n    \r\n    console.log(`[DEBUG] Setting up MutationObserver for node: ${node?.id}`);\r\n    \r\n    // Clean up previous observer\r\n    if (mutationObserverRef.current) {\r\n      mutationObserverRef.current.disconnect();\r\n    }\r\n    \r\n    // Create mutation observer with reduced frequency to prevent infinite loops\r\n    let mutationTimeout: number | null = null;\r\n    \r\n    mutationObserverRef.current = new MutationObserver((mutations) => {\r\n      // Debounce mutations to prevent excessive calls\r\n      if (mutationTimeout) {\r\n        clearTimeout(mutationTimeout);\r\n      }\r\n      \r\n      mutationTimeout = window.setTimeout(() => {\r\n        mutations.forEach((mutation) => {\r\n          if (mutation.type === 'attributes' &&\r\n              (mutation.attributeName === 'style' ||\r\n               mutation.attributeName === 'class' ||\r\n               mutation.attributeName === 'display' ||\r\n               mutation.attributeName === 'visibility' ||\r\n               mutation.attributeName === 'opacity')) {\r\n            \r\n            const target = mutation.target as HTMLElement;\r\n            const computedStyle = window.getComputedStyle(target);\r\n            \r\n            console.log(`[DEBUG] Style mutation detected on ${target.tagName}#${target.id}.${target.className}:`, {\r\n              display: computedStyle.display,\r\n              visibility: computedStyle.visibility,\r\n              opacity: computedStyle.opacity\r\n            });\r\n            \r\n            // If any change would hide the content, force it back to visible\r\n            if (computedStyle.display === 'none' ||\r\n                computedStyle.visibility === 'hidden' ||\r\n                parseFloat(computedStyle.opacity) === 0) {\r\n              \r\n              console.warn(`[DEBUG] Preventing content from being hidden by style mutation`);\r\n              \r\n              // Force visibility\r\n              target.style.display = target.style.display === 'none' ? 'block' : target.style.display;\r\n              target.style.visibility = target.style.visibility === 'hidden' ? 'visible' : target.style.visibility;\r\n              target.style.opacity = parseFloat(target.style.opacity) === 0 ? '1' : target.style.opacity;\r\n              \r\n              // Only notify parent if this is the main content element and callbacks haven't been called\r\n              if (target === currentContentRef && onVisibilityChange && !callbacksCalledRef.current) {\r\n                console.log(`[DEBUG] Notifying parent that content is still visible after mutation`);\r\n                onVisibilityChange(true);\r\n              }\r\n            }\r\n          }\r\n        });\r\n      }, 100); // Debounce mutations by 100ms\r\n    });\r\n    \r\n    // Observe the content element and its children with reduced scope\r\n    mutationObserverRef.current.observe(currentContentRef, {\r\n      attributes: true,\r\n      attributeFilter: ['style', 'class'],\r\n      childList: false, // Reduce scope to prevent excessive mutations\r\n      subtree: false,   // Don't observe subtree to reduce noise\r\n    });\r\n      // Cleanup function\r\n    return () => {\r\n      console.log(`[DEBUG] Cleaning up MutationObserver for node: ${node?.id}`);\r\n      if (mutationTimeout) {\r\n        clearTimeout(mutationTimeout);\r\n      }\r\n      mutationObserverRef.current?.disconnect();    };\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [node?.id]); // Removed onVisibilityChange to prevent infinite loops\r\n  \r\n  // Render empty state if no content\r\n  if (!node || !node.currentContent) {\r\n    return <div className=\"simple-renderer-loading\">Loading narrative content...</div>;\r\n  }\r\n  \r\n  // Render with simpler container\r\n  return (\r\n    <div\r\n      className={`simple-renderer-container ${isVisible ? 'is-visible' : ''}`}\r\n      data-node-id={node.id}\r\n      data-render-count={renderCount}\r\n      style={{\r\n        display: 'block',\r\n        visibility: 'visible',\r\n        position: 'relative',\r\n        minHeight: '200px'\r\n      }}\r\n    >\r\n      <SimpleTransformationContainer\r\n        transformations={appliedTransformations}\r\n        nodeId={node.id}\r\n      >\r\n        {isLoading && (\r\n          <div className=\"simple-renderer-loading\" style={{ padding: '20px 0' }}>\r\n            <div className=\"loading-spinner\"></div>\r\n            <p>Preparing narrative content...</p>\r\n          </div>\r\n        )}\r\n        \r\n        <div\r\n          ref={contentRef}\r\n          className=\"simple-renderer-content\"\r\n          data-transformations-count={appliedTransformations.length}\r\n          style={{\r\n            display: 'block',\r\n            visibility: 'visible',\r\n            opacity: 1\r\n          }}\r\n        >\r\n          <div\r\n            dangerouslySetInnerHTML={{ __html: processedContent }}\r\n            className=\"content-inner\"\r\n          />\r\n        </div>\r\n      </SimpleTransformationContainer>\r\n        {/* Debug information */}\r\n      {process.env.NODE_ENV === 'development' && (\r\n        <div className=\"simple-renderer-debug\">\r\n          <div className=\"debug-info\">\r\n            <span>Node: {node.id}</span>\r\n            <span>Transformations: {appliedTransformations.length}</span>\r\n            <span>Renders: {renderCount}</span>\r\n            <span>Path Length: {readingPath.sequence.length}</span>\r\n            <span>Visibility: {isVisible ? 'Visible' : 'Hidden'}</span>\r\n            <span>Journey Context: {node.journeyContext ? 'Active' : 'None'}</span>\r\n            {node.journeyContext && (\r\n              <>\r\n                <span>Last Character: {node.journeyContext.lastVisitedCharacter || 'None'}</span>\r\n                <span>Character Bleed: {\r\n                  appliedTransformations.some(t => \r\n                    t.type === 'fragment' || t.type === 'emphasize' && t.intensity && t.intensity > 3\r\n                  ) ? 'Yes' : 'No'\r\n                }</span>\r\n              </>\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default SimpleTextRenderer;\r\n","// src/components/NodeView/NodeView.tsx\r\n\r\nimport { useEffect, useState, lazy, Suspense, useRef, useMemo, useCallback } from 'react';\r\nimport ErrorBoundary from '../common/ErrorBoundary';\r\nimport SimpleTextRenderer from './SimpleTextRenderer';\r\nimport { viewManager } from '../../services/ViewManager';\r\nimport { useSelector } from 'react-redux';\r\nimport {\r\n  selectSelectedNodeId,\r\n  returnToConstellation,\r\n  selectViewMode,\r\n} from '../../store/slices/interfaceSlice';\r\nimport { loadNodeContent, selectNodeById, visitNode } from '../../store/slices/nodesSlice';\r\nimport { useAppDispatch } from '../../store/hooks';\r\nimport './NodeView.css';\r\nimport '../common/ErrorStyles.css'; // Import error and debug styles\r\nimport { RootState } from '../../store';\r\n\r\n// Define interface for the non-standard performance.memory API\r\ninterface MemoryInfo {\r\n  jsHeapSizeLimit: number;\r\n  totalJSHeapSize: number;\r\n  usedJSHeapSize: number;\r\n}\r\n\r\n// Extend Performance interface\r\ninterface ExtendedPerformance extends Performance {\r\n  memory?: MemoryInfo;\r\n}\r\n\r\n// Type guard for memory property\r\nfunction hasMemory(performance: Performance): performance is ExtendedPerformance {\r\n  return 'memory' in performance;\r\n}\r\n\r\n// Dynamically import heavy components with loading tracking\r\nconst ReactMarkdown = lazy(() => {\r\n  console.log('[NodeView] Loading ReactMarkdown component');\r\n  return import('react-markdown').then(module => {\r\n    console.log('[NodeView] ReactMarkdown component loaded');\r\n    return module;\r\n  });\r\n});\r\n\r\nconst MiniConstellation = lazy(() => import('./MiniConstellation'));\r\nconst MarginaliaSidebar = lazy(() => import('./MarginaliaSidebar'));\r\n\r\n// Pre-load NarramorphRenderer to avoid race conditions with content loading\r\nconst NarramorphRendererPromise = import('./NarramorphRenderer');\r\nconst NarramorphRenderer = lazy(() => {\r\n  console.log('[NodeView] Loading NarramorphRenderer component');\r\n  return NarramorphRendererPromise.then(module => {\r\n    console.log('[NodeView] NarramorphRenderer component loaded');\r\n    return module;\r\n  });\r\n});\r\n\r\n// Dynamically import remark plugin with loading tracking\r\nconst remarkGfmPromise = import('remark-gfm').then(module => {\r\n  console.log('[NodeView] remark-gfm plugin loaded');\r\n  return module.default;\r\n});\r\n\r\n// Loading components\r\nconst ContentLoading = () => (\r\n  <div className=\"content-loading\">\r\n    <div className=\"loading-spinner\"></div>\r\n    <p>Loading content...</p>\r\n  </div>\r\n);\r\n\r\nconst SideComponentLoading = () => <div className=\"side-component-loading\"></div>;\r\n\r\nconst NodeView = () => {\r\n  const dispatch = useAppDispatch();\r\n  const selectedNodeId = useSelector(selectSelectedNodeId);\r\n  const viewMode = useSelector(selectViewMode);\r\n  const node = useSelector((state: RootState) => selectedNodeId ? selectNodeById(state, selectedNodeId) : null);\r\n\r\n  // Get unique view key from ViewManager to force proper unmount/remount\r\n  const uniqueViewKey = useMemo(() => viewManager.getUniqueViewKey(), []);\r\n\r\n  // State to control transition between ReactMarkdown and NarramorphRenderer\r\n  const [useNarramorph, setUseNarramorph] = useState(false);\r\n  \r\n  // Add fallback state for handling WebGL context loss\r\n  const [useWebGLFallback, setUseWebGLFallback] = useState(false);\r\n  \r\n  // Track if simple renderer has been forced\r\n  const [forceSimpleRenderer, setForceSimpleRenderer] = useState(true); // FORCE SIMPLE RENDERER TO STOP INFINITE LOOPS\r\n  \r\n  // Track if WebGL is available for this view (determined by context manager)\r\n  const webGLAvailable = true;\r\n  \r\n  // Reference to content container for visibility debugging\r\n  const contentContainerRef = useRef<HTMLDivElement>(null);\r\n  const renderCompleteCalledRef = useRef(false);\r\n  const processedNodeRef = useRef<string | null>(null);\r\n  const narramorphActivatedRef = useRef(false);\r\n\r\n  // Create a state to track view transitions\r\n  const [viewTransitionState, setViewTransitionState] = useState({\r\n    transitionTime: Date.now(),\r\n    lastViewMode: viewMode,\r\n    transitionCount: 0,\r\n    renderCount: 0\r\n  });\r\n  \r\n  // Track memory usage\r\n  const [memoryStats, setMemoryStats] = useState({\r\n    jsHeapSizeLimit: 0,\r\n    totalJSHeapSize: 0,\r\n    usedJSHeapSize: 0,\r\n    timestamp: 0\r\n  });\r\n\r\n  // Define onVisibilityChange using useCallback\r\n  const onVisibilityChange = useCallback((isVisible: boolean) => {\r\n    console.log(`[NodeView] Content visibility changed to: ${isVisible ? 'visible' : 'hidden'}`);\r\n\r\n    // BUGFIX: If visibility changes to hidden, force it back to visible\r\n    if (!isVisible && contentContainerRef.current) {\r\n      console.warn('[NodeView] Forcing content visibility after hidden state detected');\r\n      contentContainerRef.current.style.display = 'block';\r\n      contentContainerRef.current.style.visibility = 'visible';\r\n      contentContainerRef.current.style.opacity = '1';\r\n\r\n      // Don't update debug state to indicate an issue\r\n      return;\r\n    }\r\n\r\n    // Only update debug state once to prevent render loops\r\n    if (!renderCompleteCalledRef.current) {\r\n      setContentDebug(prev => ({ ...prev, visibilityIssue: !isVisible }));\r\n    }\r\n  }, []);\r\n  \r\n  // Debug state to track content status\r\n  const [contentDebug, setContentDebug] = useState({\r\n    loadStarted: false,\r\n    contentLoaded: false,\r\n    renderStarted: false,\r\n    narramorphActivated: false,\r\n    visibilityIssue: false,\r\n    errorOccurred: false\r\n  });\r\n\r\n  // Define onRenderComplete using useCallback to memoize it\r\n  const onRenderComplete = useCallback(() => {\r\n    // Prevent multiple calls to this function\r\n    if (renderCompleteCalledRef.current) {\r\n      console.log('[NodeView] Skipping duplicate onRenderComplete call');\r\n      return;\r\n    }\r\n    \r\n    renderCompleteCalledRef.current = true;\r\n    console.log('[NodeView] SimpleTextRenderer completed rendering');\r\n\r\n    // BUGFIX: Ensure content remains visible after render\r\n    if (contentContainerRef.current) {\r\n      console.log('[NodeView] Forcing container visibility after render complete');\r\n      contentContainerRef.current.style.display = 'block';\r\n      contentContainerRef.current.style.visibility = 'visible';\r\n      contentContainerRef.current.style.opacity = '1';\r\n    }\r\n\r\n    setContentDebug(prev => ({ ...prev, visibilityIssue: false }));\r\n\r\n    // BUGFIX: Set a verification check after render\r\n    setTimeout(() => {\r\n      if (contentContainerRef.current) {\r\n        const isStillVisible =\r\n          contentContainerRef.current.offsetParent !== null &&\r\n          window.getComputedStyle(contentContainerRef.current).display !== 'none' &&\r\n          window.getComputedStyle(contentContainerRef.current).visibility !== 'hidden';\r\n\r\n        console.log(`[NodeView] Post-render visibility check: ${isStillVisible ? 'visible' : 'not visible'}`);\r\n\r\n        if (!isStillVisible) {\r\n          console.warn('[NodeView] Content became invisible after render - forcing visibility');\r\n          contentContainerRef.current.style.display = 'block';\r\n          contentContainerRef.current.style.visibility = 'visible';\r\n          contentContainerRef.current.style.opacity = '1';\r\n        }\r\n      }\r\n    }, 500);\r\n  }, []);\r\n\r\n  // Reset callback flags when node changes\r\n  useEffect(() => {\r\n    if (selectedNodeId !== processedNodeRef.current) {\r\n      renderCompleteCalledRef.current = false;\r\n      processedNodeRef.current = selectedNodeId;\r\n      narramorphActivatedRef.current = false;\r\n    }\r\n  }, [selectedNodeId]);\r\n\r\n  // Effect to track view transitions and manage render count\r\n  useEffect(() => {\r\n    if (viewTransitionState.lastViewMode !== viewMode) {\r\n      const now = Date.now();\r\n      console.log(`[NodeView] View transition: ${viewTransitionState.lastViewMode} -> ${viewMode} at ${now}`);\r\n      \r\n      setViewTransitionState(prev => ({\r\n        ...prev,\r\n        lastViewMode: viewMode,\r\n        transitionTime: now,\r\n        transitionCount: prev.transitionCount + 1,\r\n        renderCount: prev.renderCount + 1\r\n      }));\r\n      \r\n      // Reset content debug state on transition\r\n      setContentDebug(prev => ({\r\n        ...prev,\r\n        loadStarted: false,\r\n        contentLoaded: false,\r\n        renderStarted: false,\r\n        narramorphActivated: false,\r\n        visibilityIssue: false,\r\n        errorOccurred: false\r\n      }));\r\n      \r\n      // Collect memory stats on transition\r\n      if (hasMemory(performance) && performance.memory) {\r\n        const memory = performance.memory;\r\n        setMemoryStats({\r\n          jsHeapSizeLimit: memory.jsHeapSizeLimit,\r\n          totalJSHeapSize: memory.totalJSHeapSize,\r\n          usedJSHeapSize: memory.usedJSHeapSize,\r\n          timestamp: now\r\n        });\r\n      }\r\n    } else {\r\n      // Increment render count on each render without transition\r\n      setViewTransitionState(prev => ({\r\n        ...prev,\r\n        renderCount: prev.renderCount + 1\r\n      }));\r\n    }\r\n  }, [viewMode, viewTransitionState.lastViewMode]);\r\n  \r\n  // Effect to load content if needed - CRITICAL FIX to prevent infinite loops\r\n  useEffect(() => {\r\n    // Only check if we need to load content, don't depend on the content itself\r\n    const needsContent = selectedNodeId && !node?.content;\r\n    if (needsContent) {\r\n      console.log(`[NodeView] Loading content for node: ${selectedNodeId}`, {\r\n        viewMode\r\n      });\r\n      setContentDebug(prev => ({ ...prev, loadStarted: true }));\r\n      dispatch(loadNodeContent(selectedNodeId));\r\n    }\r\n  }, [selectedNodeId, dispatch, viewMode, node?.content]);\r\n\r\n  // Create stable values for dependencies to prevent hook warnings\r\n  const contentLength = node?.currentContent?.length || 0;\r\n  \r\n  // Create stable derived values to avoid dependency on full content string\r\n  const contentCorrupted = useMemo(() => {\r\n    if (!node?.currentContent) return false;\r\n    return (\r\n      node.currentContent.includes('[object Object]') ||\r\n      node.currentContent.includes('undefined') ||\r\n      node.currentContent.length < 10\r\n    );\r\n  }, [node?.currentContent]);\r\n  \r\n  const contentPreview = useMemo(() => {\r\n    return node?.currentContent?.substring(0, 50) || 'NO CONTENT';\r\n  }, [node?.currentContent]);\r\n\r\n  // Separate effect for content loaded debugging - SIMPLIFIED to prevent loops\r\n  useEffect(() => {\r\n    if (node?.id && processedNodeRef.current === selectedNodeId) {\r\n      const hasCurrentContent = contentLength > 0; // Use contentLength instead of !!node.currentContent\r\n      \r\n      console.log(`[NodeView] Content processed for node: ${selectedNodeId}`, {\r\n        hasContent: hasCurrentContent,\r\n        visitCount: node.visitCount,\r\n        contentLength,\r\n        contentPreview, // Use the stable derived value\r\n        enhancedContentExists: !!node.enhancedContent,\r\n        contentExists: !!node.content\r\n      });\r\n      \r\n      setContentDebug(prev => ({ ...prev, contentLoaded: hasCurrentContent }));\r\n      \r\n      // Use the stable derived value for corruption check\r\n      if (hasCurrentContent && contentCorrupted) {\r\n        console.error(`[NodeView] Possible content corruption detected:`, {\r\n          contentStart: contentPreview,\r\n          contentLength\r\n        });\r\n      }\r\n    }\r\n  }, [\r\n    selectedNodeId, \r\n    node?.id, \r\n    node?.visitCount, \r\n    node?.content,\r\n    node?.enhancedContent,\r\n    contentLength, \r\n    contentPreview,\r\n    contentCorrupted\r\n  ]);\r\n\r\n  // Preload components and enable Narramorph transformations after content is loaded\r\n  useEffect(() => {\r\n    // Only check if node has content, don't depend on content value to prevent loops\r\n    if (node?.id && contentLength > 0 && !narramorphActivatedRef.current) {\r\n      console.log(`[NodeView] Preparing to activate Narramorph for node: ${node.id}`, {\r\n        viewMode,\r\n        hasContent: contentLength > 0\r\n      });\r\n      setContentDebug(prev => ({ ...prev, renderStarted: true }));\r\n      \r\n      // Mark as activated to prevent repeated calls\r\n      narramorphActivatedRef.current = true;\r\n      \r\n      // First ensure NarramorphRenderer is loaded before enabling it\r\n      // This prevents the race condition between component loading and state changes\r\n      let componentLoaded = false;\r\n      \r\n      // Start preloading the component immediately\r\n      console.log('[NodeView] Preloading NarramorphRenderer component');\r\n      NarramorphRendererPromise.then(() => {\r\n        componentLoaded = true;\r\n        console.log('[NodeView] NarramorphRenderer preload complete');\r\n        \r\n        // Only proceed if we still have the same node content (prevent stale closure issues)\r\n        if (node?.id) {\r\n          console.log(`[NodeView] Activating Narramorph renderer for node: ${node.id} after preload`);\r\n          \r\n          // Now it's safe to enable the component\r\n          setUseNarramorph(true);\r\n          setContentDebug(prev => ({ ...prev, narramorphActivated: true }));\r\n          \r\n          // Check DOM state after enabling\r\n          if (contentContainerRef.current) {\r\n            const preBoundingRect = contentContainerRef.current.getBoundingClientRect();\r\n            console.log('[NodeView] Post-preload container dimensions:', {\r\n              width: preBoundingRect.width,\r\n              height: preBoundingRect.height,\r\n              display: window.getComputedStyle(contentContainerRef.current).display,\r\n              visibility: window.getComputedStyle(contentContainerRef.current).visibility\r\n            });\r\n          }\r\n        }\r\n      }).catch(err => {\r\n        console.error('[NodeView] Error preloading NarramorphRenderer:', err);\r\n        // Force simple renderer on error\r\n        setForceSimpleRenderer(true);\r\n      });\r\n      \r\n      // Set up visibility check that runs after components should be loaded and rendered\r\n      const visibilityTimer = setTimeout(() => {\r\n        if (contentContainerRef.current) {\r\n          console.log('[NodeView] Force checking content visibility');\r\n          const isVisible = contentContainerRef.current.offsetParent !== null;\r\n          const boundingRect = contentContainerRef.current.getBoundingClientRect();\r\n          const computedStyle = window.getComputedStyle(contentContainerRef.current);\r\n          \r\n          console.log('[NodeView] Content visibility check:', {\r\n            isVisible,\r\n            width: boundingRect.width,\r\n            height: boundingRect.height,\r\n            display: computedStyle.display,\r\n            visibility: computedStyle.visibility,\r\n            zIndex: computedStyle.zIndex,\r\n            position: computedStyle.position,\r\n            opacity: computedStyle.opacity,\r\n            componentLoaded\r\n          });\r\n          \r\n          // If content isn't visible or has zero dimensions\r\n          if (!isVisible || boundingRect.width === 0 || boundingRect.height === 0) {\r\n            console.warn('[NodeView] Content invisible after rendering - forcing simple renderer');\r\n            setForceSimpleRenderer(true);\r\n            setContentDebug(prev => ({ ...prev, visibilityIssue: true }));\r\n          }\r\n        }\r\n      }, 1500); // Increased timeout to allow more time for loading\r\n      \r\n      return () => clearTimeout(visibilityTimer);\r\n    }\r\n    return undefined; // Explicit return for when condition is false\r\n  }, [contentLength, node?.id, viewMode]);\r\n  \r\n  // Separate effect to track node visits - only runs when selectedNodeId changes\r\n  useEffect(() => {\r\n    if (selectedNodeId) {\r\n      dispatch(visitNode(selectedNodeId));\r\n    }\r\n  }, [selectedNodeId, dispatch]);\r\n  \r\n  // Handle WebGL context loss errors\r\n  useEffect(() => {\r\n    const handleWebGLContextLoss = (event: ErrorEvent) => {\r\n      // Check if this is a WebGL context loss error\r\n      if (event.message &&\r\n         (event.message.includes('WebGL context lost') ||\r\n          event.message.includes('THREE.WebGLRenderer'))) {\r\n        console.error('[NodeView] WebGL context loss detected!', {\r\n          message: event.message,\r\n          stack: event.error?.stack || 'No stack trace',\r\n          viewMode,\r\n          timeElapsed: Date.now() - viewTransitionState.transitionTime + 'ms',\r\n          renderCount: viewTransitionState.renderCount\r\n        });\r\n        \r\n        // Set fallback mode to use ReactMarkdown instead\r\n        setUseWebGLFallback(true);\r\n        setUseNarramorph(false);\r\n        setContentDebug(prev => ({ ...prev, errorOccurred: true }));\r\n        \r\n        // Collect memory stats on error\r\n        if (hasMemory(performance) && performance.memory) {\r\n          const memory = performance.memory;\r\n          setMemoryStats({\r\n            jsHeapSizeLimit: memory.jsHeapSizeLimit,\r\n            totalJSHeapSize: memory.totalJSHeapSize,\r\n            usedJSHeapSize: memory.usedJSHeapSize,\r\n            timestamp: Date.now()\r\n          });\r\n          \r\n          console.log(`[NodeView] Memory usage at WebGL error:`, {\r\n            usedHeap: Math.round(memory.usedJSHeapSize / (1024 * 1024)) + 'MB',\r\n            totalHeap: Math.round(memory.totalJSHeapSize / (1024 * 1024)) + 'MB',\r\n            limit: Math.round(memory.jsHeapSizeLimit / (1024 * 1024)) + 'MB'\r\n          });\r\n        }\r\n      }\r\n    };\r\n    \r\n    // Listen for error events that might indicate WebGL issues\r\n    window.addEventListener('error', handleWebGLContextLoss);\r\n    \r\n    return () => {\r\n      window.removeEventListener('error', handleWebGLContextLoss);\r\n    };\r\n  }, [viewMode, viewTransitionState.renderCount, viewTransitionState.transitionTime]);\r\n  \r\n  // Handle return to constellation view\r\n  const handleReturnToConstellation = () => {\r\n    dispatch(returnToConstellation());\r\n  };\r\n\r\n  if (viewMode !== 'reading' || !node) {\r\n    return null;\r\n  }\r\n\r\n  const characterClass = `${node.character.toLowerCase()}-theme`;\r\n\r\n  const getTemporalClass = () => {\r\n    if (node.temporalValue <= 3) return 'past-indicator';\r\n    if (node.temporalValue <= 6) return 'present-indicator';\r\n    return 'future-indicator';\r\n  };\r\n\r\n  const renderNodeContent = () => {\r\n    if (!node.currentContent) {\r\n      return (\r\n        <div className=\"node-loading\">\r\n          <span>Loading narrative fragment...</span>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    // Add a wrapper with debug information\r\n    return (\r\n      <div\r\n        ref={contentContainerRef}\r\n        className={`content-container ${node.currentState}`}\r\n        data-content-loaded=\"true\"\r\n        data-node-id={node.id}\r\n        data-visit-count={node.visitCount}\r\n        style={{ position: 'relative', visibility: 'visible', display: 'block' }}\r\n      >\r\n        {/* Determine the appropriate renderer to use based on conditions */}\r\n        {forceSimpleRenderer || !webGLAvailable ? (\r\n          // Use SimpleTextRenderer when either forced or WebGL isn't available\r\n          <div\r\n            className=\"simple-renderer-wrapper\"\r\n            style={{\r\n              display: 'block',\r\n              visibility: 'visible',\r\n              position: 'relative',\r\n              minHeight: '200px',\r\n              opacity: 1,\r\n              zIndex: 5\r\n            }}\r\n          >\r\n            <SimpleTextRenderer\r\n              key={`simple-${node.id}-${node.visitCount}`}\r\n              nodeId={node.id}\r\n              onRenderComplete={onRenderComplete}\r\n              onVisibilityChange={onVisibilityChange}\r\n            />\r\n          </div>\r\n        ) : (\r\n          // Try advanced rendering if conditions allow\r\n          <Suspense fallback={<ContentLoading />}>\r\n            {useNarramorph && !useWebGLFallback ? (\r\n              // Try to use Narramorph, but with error boundary and fallback\r\n              <ErrorBoundary\r\n                fallback={\r\n                  <div className=\"fallback-content\" style={{ visibility: 'visible', display: 'block' }}>\r\n                    <p className=\"error-notice\">Advanced rendering unavailable - showing basic content</p>\r\n                    <ReactMarkdown remarkPlugins={[() => remarkGfmPromise]}>{node.currentContent}</ReactMarkdown>\r\n                  </div>\r\n                }\r\n              >\r\n                {/* Render placeholder div to reserve space during loading */}\r\n                <div\r\n                  style={{\r\n                    minHeight: '200px',\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center'\r\n                  }}\r\n                >\r\n                  <NarramorphRenderer\r\n                    key={`narramorph-${node.id}-${node.visitCount}`}\r\n                    nodeId={node.id}\r\n                    onVisibilityChange={(isVisible: boolean) => {\r\n                      console.log(`[NodeView] Content visibility changed to: ${isVisible ? 'visible' : 'hidden'}`);\r\n                      \r\n                      // Use a ref to track visibility changes over time\r\n                      const visibilityTimer = setTimeout(() => {\r\n                        // Only update state if component is still mounted\r\n                        if (contentContainerRef.current) {\r\n                          setContentDebug(prev => ({ ...prev, visibilityIssue: !isVisible }));\r\n                          \r\n                          // Only force simple renderer if content remains invisible\r\n                          if (!isVisible) {\r\n                            setForceSimpleRenderer(true);\r\n                          }\r\n                        }\r\n                      }, 1000); // Wait 1 second before applying changes\r\n                      \r\n                      return () => clearTimeout(visibilityTimer);\r\n                    }}\r\n                  />\r\n                </div>\r\n              </ErrorBoundary>\r\n            ) : (\r\n              // Fallback to basic rendering with ReactMarkdown\r\n              <div style={{ visibility: 'visible', display: 'block', position: 'relative', minHeight: '100px' }}>\r\n                <div className=\"content-loading\" style={{ marginBottom: '10px' }}>\r\n                  <div className=\"loading-spinner\"></div>\r\n                  <p>Preparing content...</p>\r\n                </div>\r\n                <ReactMarkdown\r\n                  key={`markdown-${node.id}-${node.visitCount}`}\r\n                  remarkPlugins={[() => remarkGfmPromise]}\r\n                >\r\n                  {node.currentContent}\r\n                </ReactMarkdown>\r\n              </div>\r\n            )}\r\n          </Suspense>\r\n        )}\r\n        \r\n        {/* Enhanced debug indicator with transition tracking */}\r\n        <div className=\"debug-indicator\">\r\n          <div className={`status-dot ${contentDebug.contentLoaded ? 'status-green' : 'status-red'}`} title=\"Content loaded\"></div>\r\n          <div className={`status-dot ${contentDebug.narramorphActivated ? 'status-green' : 'status-yellow'}`} title=\"Narramorph active\"></div>\r\n          <div className={`status-dot ${contentDebug.errorOccurred ? 'status-red' : 'status-green'}`} title=\"No errors\"></div>\r\n          <div className={`status-dot ${contentDebug.visibilityIssue ? 'status-red' : 'status-green'}`} title=\"Content visible\"></div>\r\n          <div className={`status-dot ${forceSimpleRenderer ? 'status-blue' : 'status-yellow'}`} title=\"Simple renderer\"></div>\r\n          <div className={`status-dot ${webGLAvailable ? 'status-green' : 'status-red'}`} title=\"WebGL available\"></div>\r\n          <div className=\"debug-metrics\">\r\n            <span title=\"View transition count\">T:{viewTransitionState.transitionCount}</span>\r\n            <span title=\"Render count\">R:{viewTransitionState.renderCount}</span>\r\n            {memoryStats.usedJSHeapSize > 0 && (\r\n              <span title=\"Memory usage\">\r\n                M:{Math.round(memoryStats.usedJSHeapSize / (1024 * 1024))}MB\r\n              </span>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  return (\r\n    <div \r\n      key={uniqueViewKey}\r\n      className={`node-view-container ${characterClass}`}\r\n    >\r\n      <div className={`temporal-indicator ${getTemporalClass()}`}></div>\r\n\r\n      <div className=\"node-header\">\r\n        <h1>{node.title}</h1>\r\n        <div className=\"node-metadata\">\r\n          <span className=\"node-character\">{node.character}</span>\r\n          <span className=\"node-state\">{node.currentState}</span>\r\n          <span className=\"node-visits\">Visits: {node.visitCount}</span>\r\n        </div>\r\n      </div>\r\n      \r\n      <div\r\n        className=\"node-content force-visible\"\r\n        style={{\r\n          position: 'relative'\r\n        }}\r\n      >\r\n        {renderNodeContent()}\r\n      </div>\r\n      \r\n      <div className=\"node-navigation\">\r\n        <button onClick={handleReturnToConstellation} className=\"navigation-button\">\r\n          Return to Constellation\r\n        </button>\r\n      </div>\r\n      \r\n      {/* Mini constellation for context - fixed in bottom right corner */}\r\n      <div style={{\r\n        position: 'absolute',\r\n        bottom: '20px',\r\n        right: '20px',\r\n        width: '300px',\r\n        height: '300px',\r\n        pointerEvents: 'auto'\r\n      }}>\r\n        <Suspense fallback={<SideComponentLoading />}>\r\n          <MiniConstellation />\r\n        </Suspense>\r\n      </div>\r\n      \r\n      {/* Sidebar with marginalia */}\r\n      <Suspense fallback={<SideComponentLoading />}>\r\n        <MarginaliaSidebar\r\n          nodeId={node.id}\r\n          strangeAttractors={node.strangeAttractors}\r\n        />\r\n      </Suspense>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NodeView;"],"file":"assets/NodeView-DSMIdxFO.js"}