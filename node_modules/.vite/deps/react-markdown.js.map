{
  "version": 3,
  "sources": ["../../inline-style-parser/index.js", "../../style-to-object/src/index.ts", "../../style-to-js/src/utilities.ts", "../../style-to-js/src/index.ts", "../../ms/index.js", "../../debug/src/common.js", "../../debug/src/browser.js", "../../extend/index.js", "../../comma-separated-tokens/index.js", "../../estree-util-is-identifier-name/lib/index.js", "../../hast-util-whitespace/lib/index.js", "../../property-information/lib/util/schema.js", "../../property-information/lib/util/merge.js", "../../property-information/lib/normalize.js", "../../property-information/lib/util/info.js", "../../property-information/lib/util/types.js", "../../property-information/lib/util/defined-info.js", "../../property-information/lib/util/create.js", "../../property-information/lib/aria.js", "../../property-information/lib/util/case-sensitive-transform.js", "../../property-information/lib/util/case-insensitive-transform.js", "../../property-information/lib/html.js", "../../property-information/lib/svg.js", "../../property-information/lib/xlink.js", "../../property-information/lib/xmlns.js", "../../property-information/lib/xml.js", "../../property-information/lib/hast-to-react.js", "../../property-information/lib/find.js", "../../property-information/index.js", "../../space-separated-tokens/index.js", "../../hast-util-to-jsx-runtime/lib/index.js", "../../unist-util-position/lib/index.js", "../../unist-util-stringify-position/lib/index.js", "../../vfile-message/lib/index.js", "../../html-url-attributes/lib/index.js", "../../react-markdown/lib/index.js", "../../micromark/dev/lib/compile.js", "../../micromark/dev/lib/initialize/content.js", "../../micromark/dev/lib/initialize/document.js", "../../micromark/dev/lib/initialize/flow.js", "../../micromark/dev/lib/initialize/text.js", "../../micromark/dev/lib/constructs.js", "../../micromark/dev/lib/create-tokenizer.js", "../../micromark/dev/lib/parse.js", "../../micromark/dev/lib/postprocess.js", "../../micromark/dev/lib/preprocess.js", "../../mdast-util-from-markdown/dev/lib/index.js", "../../remark-parse/lib/index.js", "../../mdast-util-to-hast/lib/handlers/blockquote.js", "../../mdast-util-to-hast/lib/handlers/break.js", "../../mdast-util-to-hast/lib/handlers/code.js", "../../mdast-util-to-hast/lib/handlers/delete.js", "../../mdast-util-to-hast/lib/handlers/emphasis.js", "../../mdast-util-to-hast/lib/handlers/footnote-reference.js", "../../mdast-util-to-hast/lib/handlers/heading.js", "../../mdast-util-to-hast/lib/handlers/html.js", "../../mdast-util-to-hast/lib/revert.js", "../../mdast-util-to-hast/lib/handlers/image-reference.js", "../../mdast-util-to-hast/lib/handlers/image.js", "../../mdast-util-to-hast/lib/handlers/inline-code.js", "../../mdast-util-to-hast/lib/handlers/link-reference.js", "../../mdast-util-to-hast/lib/handlers/link.js", "../../mdast-util-to-hast/lib/handlers/list-item.js", "../../mdast-util-to-hast/lib/handlers/list.js", "../../mdast-util-to-hast/lib/handlers/paragraph.js", "../../mdast-util-to-hast/lib/handlers/root.js", "../../mdast-util-to-hast/lib/handlers/strong.js", "../../mdast-util-to-hast/lib/handlers/table.js", "../../mdast-util-to-hast/lib/handlers/table-row.js", "../../mdast-util-to-hast/lib/handlers/table-cell.js", "../../trim-lines/index.js", "../../mdast-util-to-hast/lib/handlers/text.js", "../../mdast-util-to-hast/lib/handlers/thematic-break.js", "../../mdast-util-to-hast/lib/handlers/index.js", "../../@ungap/structured-clone/esm/types.js", "../../@ungap/structured-clone/esm/deserialize.js", "../../@ungap/structured-clone/esm/serialize.js", "../../@ungap/structured-clone/esm/index.js", "../../mdast-util-to-hast/lib/footer.js", "../../mdast-util-to-hast/lib/state.js", "../../mdast-util-to-hast/lib/index.js", "../../remark-rehype/lib/index.js", "../../bail/index.js", "../../unified/lib/index.js", "../../is-plain-obj/index.js", "../../trough/lib/index.js", "../../vfile/lib/minpath.browser.js", "../../vfile/lib/minproc.browser.js", "../../vfile/lib/minurl.shared.js", "../../vfile/lib/minurl.browser.js", "../../vfile/lib/index.js", "../../unified/lib/callable-instance.js"],
  "sourcesContent": ["// http://www.w3.org/TR/CSS21/grammar.html\r\n// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027\r\nvar COMMENT_REGEX = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\r\n\r\nvar NEWLINE_REGEX = /\\n/g;\r\nvar WHITESPACE_REGEX = /^\\s*/;\r\n\r\n// declaration\r\nvar PROPERTY_REGEX = /^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/;\r\nvar COLON_REGEX = /^:\\s*/;\r\nvar VALUE_REGEX = /^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};])+)/;\r\nvar SEMICOLON_REGEX = /^[;\\s]*/;\r\n\r\n// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\r\nvar TRIM_REGEX = /^\\s+|\\s+$/g;\r\n\r\n// strings\r\nvar NEWLINE = '\\n';\r\nvar FORWARD_SLASH = '/';\r\nvar ASTERISK = '*';\r\nvar EMPTY_STRING = '';\r\n\r\n// types\r\nvar TYPE_COMMENT = 'comment';\r\nvar TYPE_DECLARATION = 'declaration';\r\n\r\n/**\r\n * @param {String} style\r\n * @param {Object} [options]\r\n * @return {Object[]}\r\n * @throws {TypeError}\r\n * @throws {Error}\r\n */\r\nmodule.exports = function (style, options) {\r\n  if (typeof style !== 'string') {\r\n    throw new TypeError('First argument must be a string');\r\n  }\r\n\r\n  if (!style) return [];\r\n\r\n  options = options || {};\r\n\r\n  /**\r\n   * Positional.\r\n   */\r\n  var lineno = 1;\r\n  var column = 1;\r\n\r\n  /**\r\n   * Update lineno and column based on `str`.\r\n   *\r\n   * @param {String} str\r\n   */\r\n  function updatePosition(str) {\r\n    var lines = str.match(NEWLINE_REGEX);\r\n    if (lines) lineno += lines.length;\r\n    var i = str.lastIndexOf(NEWLINE);\r\n    column = ~i ? str.length - i : column + str.length;\r\n  }\r\n\r\n  /**\r\n   * Mark position and patch `node.position`.\r\n   *\r\n   * @return {Function}\r\n   */\r\n  function position() {\r\n    var start = { line: lineno, column: column };\r\n    return function (node) {\r\n      node.position = new Position(start);\r\n      whitespace();\r\n      return node;\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Store position information for a node.\r\n   *\r\n   * @constructor\r\n   * @property {Object} start\r\n   * @property {Object} end\r\n   * @property {undefined|String} source\r\n   */\r\n  function Position(start) {\r\n    this.start = start;\r\n    this.end = { line: lineno, column: column };\r\n    this.source = options.source;\r\n  }\r\n\r\n  /**\r\n   * Non-enumerable source string.\r\n   */\r\n  Position.prototype.content = style;\r\n\r\n  var errorsList = [];\r\n\r\n  /**\r\n   * Error `msg`.\r\n   *\r\n   * @param {String} msg\r\n   * @throws {Error}\r\n   */\r\n  function error(msg) {\r\n    var err = new Error(\r\n      options.source + ':' + lineno + ':' + column + ': ' + msg\r\n    );\r\n    err.reason = msg;\r\n    err.filename = options.source;\r\n    err.line = lineno;\r\n    err.column = column;\r\n    err.source = style;\r\n\r\n    if (options.silent) {\r\n      errorsList.push(err);\r\n    } else {\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Match `re` and return captures.\r\n   *\r\n   * @param {RegExp} re\r\n   * @return {undefined|Array}\r\n   */\r\n  function match(re) {\r\n    var m = re.exec(style);\r\n    if (!m) return;\r\n    var str = m[0];\r\n    updatePosition(str);\r\n    style = style.slice(str.length);\r\n    return m;\r\n  }\r\n\r\n  /**\r\n   * Parse whitespace.\r\n   */\r\n  function whitespace() {\r\n    match(WHITESPACE_REGEX);\r\n  }\r\n\r\n  /**\r\n   * Parse comments.\r\n   *\r\n   * @param {Object[]} [rules]\r\n   * @return {Object[]}\r\n   */\r\n  function comments(rules) {\r\n    var c;\r\n    rules = rules || [];\r\n    while ((c = comment())) {\r\n      if (c !== false) {\r\n        rules.push(c);\r\n      }\r\n    }\r\n    return rules;\r\n  }\r\n\r\n  /**\r\n   * Parse comment.\r\n   *\r\n   * @return {Object}\r\n   * @throws {Error}\r\n   */\r\n  function comment() {\r\n    var pos = position();\r\n    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;\r\n\r\n    var i = 2;\r\n    while (\r\n      EMPTY_STRING != style.charAt(i) &&\r\n      (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))\r\n    ) {\r\n      ++i;\r\n    }\r\n    i += 2;\r\n\r\n    if (EMPTY_STRING === style.charAt(i - 1)) {\r\n      return error('End of comment missing');\r\n    }\r\n\r\n    var str = style.slice(2, i - 2);\r\n    column += 2;\r\n    updatePosition(str);\r\n    style = style.slice(i);\r\n    column += 2;\r\n\r\n    return pos({\r\n      type: TYPE_COMMENT,\r\n      comment: str\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Parse declaration.\r\n   *\r\n   * @return {Object}\r\n   * @throws {Error}\r\n   */\r\n  function declaration() {\r\n    var pos = position();\r\n\r\n    // prop\r\n    var prop = match(PROPERTY_REGEX);\r\n    if (!prop) return;\r\n    comment();\r\n\r\n    // :\r\n    if (!match(COLON_REGEX)) return error(\"property missing ':'\");\r\n\r\n    // val\r\n    var val = match(VALUE_REGEX);\r\n\r\n    var ret = pos({\r\n      type: TYPE_DECLARATION,\r\n      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),\r\n      value: val\r\n        ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING))\r\n        : EMPTY_STRING\r\n    });\r\n\r\n    // ;\r\n    match(SEMICOLON_REGEX);\r\n\r\n    return ret;\r\n  }\r\n\r\n  /**\r\n   * Parse declarations.\r\n   *\r\n   * @return {Object[]}\r\n   */\r\n  function declarations() {\r\n    var decls = [];\r\n\r\n    comments(decls);\r\n\r\n    // declarations\r\n    var decl;\r\n    while ((decl = declaration())) {\r\n      if (decl !== false) {\r\n        decls.push(decl);\r\n        comments(decls);\r\n      }\r\n    }\r\n\r\n    return decls;\r\n  }\r\n\r\n  whitespace();\r\n  return declarations();\r\n};\r\n\r\n/**\r\n * Trim `str`.\r\n *\r\n * @param {String} str\r\n * @return {String}\r\n */\r\nfunction trim(str) {\r\n  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;\r\n}\r\n", "import type { Declaration } from 'inline-style-parser';\r\nimport parse from 'inline-style-parser';\r\n\r\nexport { Declaration };\r\n\r\ninterface StyleObject {\r\n  [name: string]: string;\r\n}\r\n\r\ntype Iterator = (\r\n  property: string,\r\n  value: string,\r\n  declaration: Declaration,\r\n) => void;\r\n\r\n/**\r\n * Parses inline style to object.\r\n *\r\n * @param style - Inline style.\r\n * @param iterator - Iterator.\r\n * @returns - Style object or null.\r\n *\r\n * @example Parsing inline style to object:\r\n *\r\n * ```js\r\n * import parse from 'style-to-object';\r\n * parse('line-height: 42;'); // { 'line-height': '42' }\r\n * ```\r\n */\r\nexport default function StyleToObject(\r\n  style: string,\r\n  iterator?: Iterator,\r\n): StyleObject | null {\r\n  let styleObject: StyleObject | null = null;\r\n\r\n  if (!style || typeof style !== 'string') {\r\n    return styleObject;\r\n  }\r\n\r\n  const declarations = parse(style);\r\n  const hasIterator = typeof iterator === 'function';\r\n\r\n  declarations.forEach((declaration) => {\r\n    if (declaration.type !== 'declaration') {\r\n      return;\r\n    }\r\n\r\n    const { property, value } = declaration;\r\n\r\n    if (hasIterator) {\r\n      iterator(property, value, declaration);\r\n    } else if (value) {\r\n      styleObject = styleObject || {};\r\n      styleObject[property] = value;\r\n    }\r\n  });\r\n\r\n  return styleObject;\r\n}\r\n", "const CUSTOM_PROPERTY_REGEX = /^--[a-zA-Z0-9_-]+$/;\r\nconst HYPHEN_REGEX = /-([a-z])/g;\r\nconst NO_HYPHEN_REGEX = /^[^-]+$/;\r\nconst VENDOR_PREFIX_REGEX = /^-(webkit|moz|ms|o|khtml)-/;\r\nconst MS_VENDOR_PREFIX_REGEX = /^-(ms)-/;\r\n\r\n/**\r\n * Checks whether to skip camelCase.\r\n */\r\nconst skipCamelCase = (property: string) =>\r\n  !property ||\r\n  NO_HYPHEN_REGEX.test(property) ||\r\n  CUSTOM_PROPERTY_REGEX.test(property);\r\n\r\n/**\r\n * Replacer that capitalizes first character.\r\n */\r\nconst capitalize = (match: string, character: string) =>\r\n  character.toUpperCase();\r\n\r\n/**\r\n * Replacer that removes beginning hyphen of vendor prefix property.\r\n */\r\nconst trimHyphen = (match: string, prefix: string) => `${prefix}-`;\r\n\r\n/**\r\n * CamelCase options.\r\n */\r\nexport interface CamelCaseOptions {\r\n  reactCompat?: boolean;\r\n}\r\n\r\n/**\r\n * CamelCases a CSS property.\r\n */\r\nexport const camelCase = (property: string, options: CamelCaseOptions = {}) => {\r\n  if (skipCamelCase(property)) {\r\n    return property;\r\n  }\r\n\r\n  property = property.toLowerCase();\r\n\r\n  if (options.reactCompat) {\r\n    // `-ms` vendor prefix should not be capitalized\r\n    property = property.replace(MS_VENDOR_PREFIX_REGEX, trimHyphen);\r\n  } else {\r\n    // for non-React, remove first hyphen so vendor prefix is not capitalized\r\n    property = property.replace(VENDOR_PREFIX_REGEX, trimHyphen);\r\n  }\r\n\r\n  return property.replace(HYPHEN_REGEX, capitalize);\r\n};\r\n", "import StyleToObject from 'style-to-object';\r\n\r\nimport { camelCase, CamelCaseOptions } from './utilities';\r\n\r\ntype StyleObject = Record<string, string>;\r\n\r\ninterface StyleToJSOptions extends CamelCaseOptions {}\r\n\r\n/**\r\n * Parses CSS inline style to JavaScript object (camelCased).\r\n */\r\nfunction StyleToJS(style: string, options?: StyleToJSOptions): StyleObject {\r\n  const output: StyleObject = {};\r\n\r\n  if (!style || typeof style !== 'string') {\r\n    return output;\r\n  }\r\n\r\n  StyleToObject(style, (property, value) => {\r\n    // skip CSS comment\r\n    if (property && value) {\r\n      output[camelCase(property, options)] = value;\r\n    }\r\n  });\r\n\r\n  return output;\r\n}\r\n\r\nStyleToJS.default = StyleToJS;\r\n\r\nexport = StyleToJS;\r\n", "/**\r\n * Helpers.\r\n */\r\n\r\nvar s = 1000;\r\nvar m = s * 60;\r\nvar h = m * 60;\r\nvar d = h * 24;\r\nvar w = d * 7;\r\nvar y = d * 365.25;\r\n\r\n/**\r\n * Parse or format the given `val`.\r\n *\r\n * Options:\r\n *\r\n *  - `long` verbose formatting [false]\r\n *\r\n * @param {String|Number} val\r\n * @param {Object} [options]\r\n * @throws {Error} throw an error if val is not a non-empty string or a number\r\n * @return {String|Number}\r\n * @api public\r\n */\r\n\r\nmodule.exports = function (val, options) {\r\n  options = options || {};\r\n  var type = typeof val;\r\n  if (type === 'string' && val.length > 0) {\r\n    return parse(val);\r\n  } else if (type === 'number' && isFinite(val)) {\r\n    return options.long ? fmtLong(val) : fmtShort(val);\r\n  }\r\n  throw new Error(\r\n    'val is not a non-empty string or a valid number. val=' +\r\n      JSON.stringify(val)\r\n  );\r\n};\r\n\r\n/**\r\n * Parse the given `str` and return milliseconds.\r\n *\r\n * @param {String} str\r\n * @return {Number}\r\n * @api private\r\n */\r\n\r\nfunction parse(str) {\r\n  str = String(str);\r\n  if (str.length > 100) {\r\n    return;\r\n  }\r\n  var match = /^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(\r\n    str\r\n  );\r\n  if (!match) {\r\n    return;\r\n  }\r\n  var n = parseFloat(match[1]);\r\n  var type = (match[2] || 'ms').toLowerCase();\r\n  switch (type) {\r\n    case 'years':\r\n    case 'year':\r\n    case 'yrs':\r\n    case 'yr':\r\n    case 'y':\r\n      return n * y;\r\n    case 'weeks':\r\n    case 'week':\r\n    case 'w':\r\n      return n * w;\r\n    case 'days':\r\n    case 'day':\r\n    case 'd':\r\n      return n * d;\r\n    case 'hours':\r\n    case 'hour':\r\n    case 'hrs':\r\n    case 'hr':\r\n    case 'h':\r\n      return n * h;\r\n    case 'minutes':\r\n    case 'minute':\r\n    case 'mins':\r\n    case 'min':\r\n    case 'm':\r\n      return n * m;\r\n    case 'seconds':\r\n    case 'second':\r\n    case 'secs':\r\n    case 'sec':\r\n    case 's':\r\n      return n * s;\r\n    case 'milliseconds':\r\n    case 'millisecond':\r\n    case 'msecs':\r\n    case 'msec':\r\n    case 'ms':\r\n      return n;\r\n    default:\r\n      return undefined;\r\n  }\r\n}\r\n\r\n/**\r\n * Short format for `ms`.\r\n *\r\n * @param {Number} ms\r\n * @return {String}\r\n * @api private\r\n */\r\n\r\nfunction fmtShort(ms) {\r\n  var msAbs = Math.abs(ms);\r\n  if (msAbs >= d) {\r\n    return Math.round(ms / d) + 'd';\r\n  }\r\n  if (msAbs >= h) {\r\n    return Math.round(ms / h) + 'h';\r\n  }\r\n  if (msAbs >= m) {\r\n    return Math.round(ms / m) + 'm';\r\n  }\r\n  if (msAbs >= s) {\r\n    return Math.round(ms / s) + 's';\r\n  }\r\n  return ms + 'ms';\r\n}\r\n\r\n/**\r\n * Long format for `ms`.\r\n *\r\n * @param {Number} ms\r\n * @return {String}\r\n * @api private\r\n */\r\n\r\nfunction fmtLong(ms) {\r\n  var msAbs = Math.abs(ms);\r\n  if (msAbs >= d) {\r\n    return plural(ms, msAbs, d, 'day');\r\n  }\r\n  if (msAbs >= h) {\r\n    return plural(ms, msAbs, h, 'hour');\r\n  }\r\n  if (msAbs >= m) {\r\n    return plural(ms, msAbs, m, 'minute');\r\n  }\r\n  if (msAbs >= s) {\r\n    return plural(ms, msAbs, s, 'second');\r\n  }\r\n  return ms + ' ms';\r\n}\r\n\r\n/**\r\n * Pluralization helper.\r\n */\r\n\r\nfunction plural(ms, msAbs, n, name) {\r\n  var isPlural = msAbs >= n * 1.5;\r\n  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');\r\n}\r\n", "\r\n/**\r\n * This is the common logic for both the Node.js and web browser\r\n * implementations of `debug()`.\r\n */\r\n\r\nfunction setup(env) {\r\n\tcreateDebug.debug = createDebug;\r\n\tcreateDebug.default = createDebug;\r\n\tcreateDebug.coerce = coerce;\r\n\tcreateDebug.disable = disable;\r\n\tcreateDebug.enable = enable;\r\n\tcreateDebug.enabled = enabled;\r\n\tcreateDebug.humanize = require('ms');\r\n\tcreateDebug.destroy = destroy;\r\n\r\n\tObject.keys(env).forEach(key => {\r\n\t\tcreateDebug[key] = env[key];\r\n\t});\r\n\r\n\t/**\r\n\t* The currently active debug mode names, and names to skip.\r\n\t*/\r\n\r\n\tcreateDebug.names = [];\r\n\tcreateDebug.skips = [];\r\n\r\n\t/**\r\n\t* Map of special \"%n\" handling functions, for the debug \"format\" argument.\r\n\t*\r\n\t* Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\r\n\t*/\r\n\tcreateDebug.formatters = {};\r\n\r\n\t/**\r\n\t* Selects a color for a debug namespace\r\n\t* @param {String} namespace The namespace string for the debug instance to be colored\r\n\t* @return {Number|String} An ANSI color code for the given namespace\r\n\t* @api private\r\n\t*/\r\n\tfunction selectColor(namespace) {\r\n\t\tlet hash = 0;\r\n\r\n\t\tfor (let i = 0; i < namespace.length; i++) {\r\n\t\t\thash = ((hash << 5) - hash) + namespace.charCodeAt(i);\r\n\t\t\thash |= 0; // Convert to 32bit integer\r\n\t\t}\r\n\r\n\t\treturn createDebug.colors[Math.abs(hash) % createDebug.colors.length];\r\n\t}\r\n\tcreateDebug.selectColor = selectColor;\r\n\r\n\t/**\r\n\t* Create a debugger with the given `namespace`.\r\n\t*\r\n\t* @param {String} namespace\r\n\t* @return {Function}\r\n\t* @api public\r\n\t*/\r\n\tfunction createDebug(namespace) {\r\n\t\tlet prevTime;\r\n\t\tlet enableOverride = null;\r\n\t\tlet namespacesCache;\r\n\t\tlet enabledCache;\r\n\r\n\t\tfunction debug(...args) {\r\n\t\t\t// Disabled?\r\n\t\t\tif (!debug.enabled) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tconst self = debug;\r\n\r\n\t\t\t// Set `diff` timestamp\r\n\t\t\tconst curr = Number(new Date());\r\n\t\t\tconst ms = curr - (prevTime || curr);\r\n\t\t\tself.diff = ms;\r\n\t\t\tself.prev = prevTime;\r\n\t\t\tself.curr = curr;\r\n\t\t\tprevTime = curr;\r\n\r\n\t\t\targs[0] = createDebug.coerce(args[0]);\r\n\r\n\t\t\tif (typeof args[0] !== 'string') {\r\n\t\t\t\t// Anything else let's inspect with %O\r\n\t\t\t\targs.unshift('%O');\r\n\t\t\t}\r\n\r\n\t\t\t// Apply any `formatters` transformations\r\n\t\t\tlet index = 0;\r\n\t\t\targs[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {\r\n\t\t\t\t// If we encounter an escaped % then don't increase the array index\r\n\t\t\t\tif (match === '%%') {\r\n\t\t\t\t\treturn '%';\r\n\t\t\t\t}\r\n\t\t\t\tindex++;\r\n\t\t\t\tconst formatter = createDebug.formatters[format];\r\n\t\t\t\tif (typeof formatter === 'function') {\r\n\t\t\t\t\tconst val = args[index];\r\n\t\t\t\t\tmatch = formatter.call(self, val);\r\n\r\n\t\t\t\t\t// Now we need to remove `args[index]` since it's inlined in the `format`\r\n\t\t\t\t\targs.splice(index, 1);\r\n\t\t\t\t\tindex--;\r\n\t\t\t\t}\r\n\t\t\t\treturn match;\r\n\t\t\t});\r\n\r\n\t\t\t// Apply env-specific formatting (colors, etc.)\r\n\t\t\tcreateDebug.formatArgs.call(self, args);\r\n\r\n\t\t\tconst logFn = self.log || createDebug.log;\r\n\t\t\tlogFn.apply(self, args);\r\n\t\t}\r\n\r\n\t\tdebug.namespace = namespace;\r\n\t\tdebug.useColors = createDebug.useColors();\r\n\t\tdebug.color = createDebug.selectColor(namespace);\r\n\t\tdebug.extend = extend;\r\n\t\tdebug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.\r\n\r\n\t\tObject.defineProperty(debug, 'enabled', {\r\n\t\t\tenumerable: true,\r\n\t\t\tconfigurable: false,\r\n\t\t\tget: () => {\r\n\t\t\t\tif (enableOverride !== null) {\r\n\t\t\t\t\treturn enableOverride;\r\n\t\t\t\t}\r\n\t\t\t\tif (namespacesCache !== createDebug.namespaces) {\r\n\t\t\t\t\tnamespacesCache = createDebug.namespaces;\r\n\t\t\t\t\tenabledCache = createDebug.enabled(namespace);\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn enabledCache;\r\n\t\t\t},\r\n\t\t\tset: v => {\r\n\t\t\t\tenableOverride = v;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t// Env-specific initialization logic for debug instances\r\n\t\tif (typeof createDebug.init === 'function') {\r\n\t\t\tcreateDebug.init(debug);\r\n\t\t}\r\n\r\n\t\treturn debug;\r\n\t}\r\n\r\n\tfunction extend(namespace, delimiter) {\r\n\t\tconst newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);\r\n\t\tnewDebug.log = this.log;\r\n\t\treturn newDebug;\r\n\t}\r\n\r\n\t/**\r\n\t* Enables a debug mode by namespaces. This can include modes\r\n\t* separated by a colon and wildcards.\r\n\t*\r\n\t* @param {String} namespaces\r\n\t* @api public\r\n\t*/\r\n\tfunction enable(namespaces) {\r\n\t\tcreateDebug.save(namespaces);\r\n\t\tcreateDebug.namespaces = namespaces;\r\n\r\n\t\tcreateDebug.names = [];\r\n\t\tcreateDebug.skips = [];\r\n\r\n\t\tconst split = (typeof namespaces === 'string' ? namespaces : '')\r\n\t\t\t.trim()\r\n\t\t\t.replace(' ', ',')\r\n\t\t\t.split(',')\r\n\t\t\t.filter(Boolean);\r\n\r\n\t\tfor (const ns of split) {\r\n\t\t\tif (ns[0] === '-') {\r\n\t\t\t\tcreateDebug.skips.push(ns.slice(1));\r\n\t\t\t} else {\r\n\t\t\t\tcreateDebug.names.push(ns);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if the given string matches a namespace template, honoring\r\n\t * asterisks as wildcards.\r\n\t *\r\n\t * @param {String} search\r\n\t * @param {String} template\r\n\t * @return {Boolean}\r\n\t */\r\n\tfunction matchesTemplate(search, template) {\r\n\t\tlet searchIndex = 0;\r\n\t\tlet templateIndex = 0;\r\n\t\tlet starIndex = -1;\r\n\t\tlet matchIndex = 0;\r\n\r\n\t\twhile (searchIndex < search.length) {\r\n\t\t\tif (templateIndex < template.length && (template[templateIndex] === search[searchIndex] || template[templateIndex] === '*')) {\r\n\t\t\t\t// Match character or proceed with wildcard\r\n\t\t\t\tif (template[templateIndex] === '*') {\r\n\t\t\t\t\tstarIndex = templateIndex;\r\n\t\t\t\t\tmatchIndex = searchIndex;\r\n\t\t\t\t\ttemplateIndex++; // Skip the '*'\r\n\t\t\t\t} else {\r\n\t\t\t\t\tsearchIndex++;\r\n\t\t\t\t\ttemplateIndex++;\r\n\t\t\t\t}\r\n\t\t\t} else if (starIndex !== -1) { // eslint-disable-line no-negated-condition\r\n\t\t\t\t// Backtrack to the last '*' and try to match more characters\r\n\t\t\t\ttemplateIndex = starIndex + 1;\r\n\t\t\t\tmatchIndex++;\r\n\t\t\t\tsearchIndex = matchIndex;\r\n\t\t\t} else {\r\n\t\t\t\treturn false; // No match\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Handle trailing '*' in template\r\n\t\twhile (templateIndex < template.length && template[templateIndex] === '*') {\r\n\t\t\ttemplateIndex++;\r\n\t\t}\r\n\r\n\t\treturn templateIndex === template.length;\r\n\t}\r\n\r\n\t/**\r\n\t* Disable debug output.\r\n\t*\r\n\t* @return {String} namespaces\r\n\t* @api public\r\n\t*/\r\n\tfunction disable() {\r\n\t\tconst namespaces = [\r\n\t\t\t...createDebug.names,\r\n\t\t\t...createDebug.skips.map(namespace => '-' + namespace)\r\n\t\t].join(',');\r\n\t\tcreateDebug.enable('');\r\n\t\treturn namespaces;\r\n\t}\r\n\r\n\t/**\r\n\t* Returns true if the given mode name is enabled, false otherwise.\r\n\t*\r\n\t* @param {String} name\r\n\t* @return {Boolean}\r\n\t* @api public\r\n\t*/\r\n\tfunction enabled(name) {\r\n\t\tfor (const skip of createDebug.skips) {\r\n\t\t\tif (matchesTemplate(name, skip)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor (const ns of createDebug.names) {\r\n\t\t\tif (matchesTemplate(name, ns)) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t* Coerce `val`.\r\n\t*\r\n\t* @param {Mixed} val\r\n\t* @return {Mixed}\r\n\t* @api private\r\n\t*/\r\n\tfunction coerce(val) {\r\n\t\tif (val instanceof Error) {\r\n\t\t\treturn val.stack || val.message;\r\n\t\t}\r\n\t\treturn val;\r\n\t}\r\n\r\n\t/**\r\n\t* XXX DO NOT USE. This is a temporary stub function.\r\n\t* XXX It WILL be removed in the next major release.\r\n\t*/\r\n\tfunction destroy() {\r\n\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\r\n\t}\r\n\r\n\tcreateDebug.enable(createDebug.load());\r\n\r\n\treturn createDebug;\r\n}\r\n\r\nmodule.exports = setup;\r\n", "/* eslint-env browser */\r\n\r\n/**\r\n * This is the web browser implementation of `debug()`.\r\n */\r\n\r\nexports.formatArgs = formatArgs;\r\nexports.save = save;\r\nexports.load = load;\r\nexports.useColors = useColors;\r\nexports.storage = localstorage();\r\nexports.destroy = (() => {\r\n\tlet warned = false;\r\n\r\n\treturn () => {\r\n\t\tif (!warned) {\r\n\t\t\twarned = true;\r\n\t\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\r\n\t\t}\r\n\t};\r\n})();\r\n\r\n/**\r\n * Colors.\r\n */\r\n\r\nexports.colors = [\r\n\t'#0000CC',\r\n\t'#0000FF',\r\n\t'#0033CC',\r\n\t'#0033FF',\r\n\t'#0066CC',\r\n\t'#0066FF',\r\n\t'#0099CC',\r\n\t'#0099FF',\r\n\t'#00CC00',\r\n\t'#00CC33',\r\n\t'#00CC66',\r\n\t'#00CC99',\r\n\t'#00CCCC',\r\n\t'#00CCFF',\r\n\t'#3300CC',\r\n\t'#3300FF',\r\n\t'#3333CC',\r\n\t'#3333FF',\r\n\t'#3366CC',\r\n\t'#3366FF',\r\n\t'#3399CC',\r\n\t'#3399FF',\r\n\t'#33CC00',\r\n\t'#33CC33',\r\n\t'#33CC66',\r\n\t'#33CC99',\r\n\t'#33CCCC',\r\n\t'#33CCFF',\r\n\t'#6600CC',\r\n\t'#6600FF',\r\n\t'#6633CC',\r\n\t'#6633FF',\r\n\t'#66CC00',\r\n\t'#66CC33',\r\n\t'#9900CC',\r\n\t'#9900FF',\r\n\t'#9933CC',\r\n\t'#9933FF',\r\n\t'#99CC00',\r\n\t'#99CC33',\r\n\t'#CC0000',\r\n\t'#CC0033',\r\n\t'#CC0066',\r\n\t'#CC0099',\r\n\t'#CC00CC',\r\n\t'#CC00FF',\r\n\t'#CC3300',\r\n\t'#CC3333',\r\n\t'#CC3366',\r\n\t'#CC3399',\r\n\t'#CC33CC',\r\n\t'#CC33FF',\r\n\t'#CC6600',\r\n\t'#CC6633',\r\n\t'#CC9900',\r\n\t'#CC9933',\r\n\t'#CCCC00',\r\n\t'#CCCC33',\r\n\t'#FF0000',\r\n\t'#FF0033',\r\n\t'#FF0066',\r\n\t'#FF0099',\r\n\t'#FF00CC',\r\n\t'#FF00FF',\r\n\t'#FF3300',\r\n\t'#FF3333',\r\n\t'#FF3366',\r\n\t'#FF3399',\r\n\t'#FF33CC',\r\n\t'#FF33FF',\r\n\t'#FF6600',\r\n\t'#FF6633',\r\n\t'#FF9900',\r\n\t'#FF9933',\r\n\t'#FFCC00',\r\n\t'#FFCC33'\r\n];\r\n\r\n/**\r\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\r\n * and the Firebug extension (any Firefox version) are known\r\n * to support \"%c\" CSS customizations.\r\n *\r\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\r\n */\r\n\r\n// eslint-disable-next-line complexity\r\nfunction useColors() {\r\n\t// NB: In an Electron preload script, document will be defined but not fully\r\n\t// initialized. Since we know we're in Chrome, we'll just detect this case\r\n\t// explicitly\r\n\tif (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t// Internet Explorer and Edge do not support colors.\r\n\tif (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tlet m;\r\n\r\n\t// Is webkit? http://stackoverflow.com/a/16459606/376773\r\n\t// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\r\n\t// eslint-disable-next-line no-return-assign\r\n\treturn (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\r\n\t\t// Is firebug? http://stackoverflow.com/a/398120/376773\r\n\t\t(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\r\n\t\t// Is firefox >= v31?\r\n\t\t// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\r\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && (m = navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/)) && parseInt(m[1], 10) >= 31) ||\r\n\t\t// Double check webkit in userAgent just in case we are in a worker\r\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\r\n}\r\n\r\n/**\r\n * Colorize log arguments if enabled.\r\n *\r\n * @api public\r\n */\r\n\r\nfunction formatArgs(args) {\r\n\targs[0] = (this.useColors ? '%c' : '') +\r\n\t\tthis.namespace +\r\n\t\t(this.useColors ? ' %c' : ' ') +\r\n\t\targs[0] +\r\n\t\t(this.useColors ? '%c ' : ' ') +\r\n\t\t'+' + module.exports.humanize(this.diff);\r\n\r\n\tif (!this.useColors) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tconst c = 'color: ' + this.color;\r\n\targs.splice(1, 0, c, 'color: inherit');\r\n\r\n\t// The final \"%c\" is somewhat tricky, because there could be other\r\n\t// arguments passed either before or after the %c, so we need to\r\n\t// figure out the correct index to insert the CSS into\r\n\tlet index = 0;\r\n\tlet lastC = 0;\r\n\targs[0].replace(/%[a-zA-Z%]/g, match => {\r\n\t\tif (match === '%%') {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tindex++;\r\n\t\tif (match === '%c') {\r\n\t\t\t// We only are interested in the *last* %c\r\n\t\t\t// (the user may have provided their own)\r\n\t\t\tlastC = index;\r\n\t\t}\r\n\t});\r\n\r\n\targs.splice(lastC, 0, c);\r\n}\r\n\r\n/**\r\n * Invokes `console.debug()` when available.\r\n * No-op when `console.debug` is not a \"function\".\r\n * If `console.debug` is not available, falls back\r\n * to `console.log`.\r\n *\r\n * @api public\r\n */\r\nexports.log = console.debug || console.log || (() => {});\r\n\r\n/**\r\n * Save `namespaces`.\r\n *\r\n * @param {String} namespaces\r\n * @api private\r\n */\r\nfunction save(namespaces) {\r\n\ttry {\r\n\t\tif (namespaces) {\r\n\t\t\texports.storage.setItem('debug', namespaces);\r\n\t\t} else {\r\n\t\t\texports.storage.removeItem('debug');\r\n\t\t}\r\n\t} catch (error) {\r\n\t\t// Swallow\r\n\t\t// XXX (@Qix-) should we be logging these?\r\n\t}\r\n}\r\n\r\n/**\r\n * Load `namespaces`.\r\n *\r\n * @return {String} returns the previously persisted debug modes\r\n * @api private\r\n */\r\nfunction load() {\r\n\tlet r;\r\n\ttry {\r\n\t\tr = exports.storage.getItem('debug');\r\n\t} catch (error) {\r\n\t\t// Swallow\r\n\t\t// XXX (@Qix-) should we be logging these?\r\n\t}\r\n\r\n\t// If debug isn't set in LS, and we're in Electron, try to load $DEBUG\r\n\tif (!r && typeof process !== 'undefined' && 'env' in process) {\r\n\t\tr = process.env.DEBUG;\r\n\t}\r\n\r\n\treturn r;\r\n}\r\n\r\n/**\r\n * Localstorage attempts to return the localstorage.\r\n *\r\n * This is necessary because safari throws\r\n * when a user disables cookies/localstorage\r\n * and you attempt to access it.\r\n *\r\n * @return {LocalStorage}\r\n * @api private\r\n */\r\n\r\nfunction localstorage() {\r\n\ttry {\r\n\t\t// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context\r\n\t\t// The Browser also has localStorage in the global context.\r\n\t\treturn localStorage;\r\n\t} catch (error) {\r\n\t\t// Swallow\r\n\t\t// XXX (@Qix-) should we be logging these?\r\n\t}\r\n}\r\n\r\nmodule.exports = require('./common')(exports);\r\n\r\nconst {formatters} = module.exports;\r\n\r\n/**\r\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\r\n */\r\n\r\nformatters.j = function (v) {\r\n\ttry {\r\n\t\treturn JSON.stringify(v);\r\n\t} catch (error) {\r\n\t\treturn '[UnexpectedJSONParseError]: ' + error.message;\r\n\t}\r\n};\r\n", "'use strict';\r\n\r\nvar hasOwn = Object.prototype.hasOwnProperty;\r\nvar toStr = Object.prototype.toString;\r\nvar defineProperty = Object.defineProperty;\r\nvar gOPD = Object.getOwnPropertyDescriptor;\r\n\r\nvar isArray = function isArray(arr) {\r\n\tif (typeof Array.isArray === 'function') {\r\n\t\treturn Array.isArray(arr);\r\n\t}\r\n\r\n\treturn toStr.call(arr) === '[object Array]';\r\n};\r\n\r\nvar isPlainObject = function isPlainObject(obj) {\r\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\r\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\r\n\t// Not own constructor property must be Object\r\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\t// Own properties are enumerated firstly, so to speed up,\r\n\t// if last one is own, then all properties are own.\r\n\tvar key;\r\n\tfor (key in obj) { /**/ }\r\n\r\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\r\n};\r\n\r\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\r\nvar setProperty = function setProperty(target, options) {\r\n\tif (defineProperty && options.name === '__proto__') {\r\n\t\tdefineProperty(target, options.name, {\r\n\t\t\tenumerable: true,\r\n\t\t\tconfigurable: true,\r\n\t\t\tvalue: options.newValue,\r\n\t\t\twritable: true\r\n\t\t});\r\n\t} else {\r\n\t\ttarget[options.name] = options.newValue;\r\n\t}\r\n};\r\n\r\n// Return undefined instead of __proto__ if '__proto__' is not an own property\r\nvar getProperty = function getProperty(obj, name) {\r\n\tif (name === '__proto__') {\r\n\t\tif (!hasOwn.call(obj, name)) {\r\n\t\t\treturn void 0;\r\n\t\t} else if (gOPD) {\r\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\r\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\r\n\t\t\treturn gOPD(obj, name).value;\r\n\t\t}\r\n\t}\r\n\r\n\treturn obj[name];\r\n};\r\n\r\nmodule.exports = function extend() {\r\n\tvar options, name, src, copy, copyIsArray, clone;\r\n\tvar target = arguments[0];\r\n\tvar i = 1;\r\n\tvar length = arguments.length;\r\n\tvar deep = false;\r\n\r\n\t// Handle a deep copy situation\r\n\tif (typeof target === 'boolean') {\r\n\t\tdeep = target;\r\n\t\ttarget = arguments[1] || {};\r\n\t\t// skip the boolean and the target\r\n\t\ti = 2;\r\n\t}\r\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\r\n\t\ttarget = {};\r\n\t}\r\n\r\n\tfor (; i < length; ++i) {\r\n\t\toptions = arguments[i];\r\n\t\t// Only deal with non-null/undefined values\r\n\t\tif (options != null) {\r\n\t\t\t// Extend the base object\r\n\t\t\tfor (name in options) {\r\n\t\t\t\tsrc = getProperty(target, name);\r\n\t\t\t\tcopy = getProperty(options, name);\r\n\r\n\t\t\t\t// Prevent never-ending loop\r\n\t\t\t\tif (target !== copy) {\r\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\r\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\r\n\t\t\t\t\t\tif (copyIsArray) {\r\n\t\t\t\t\t\t\tcopyIsArray = false;\r\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Never move original objects, clone them\r\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\r\n\r\n\t\t\t\t\t// Don't bring in undefined values\r\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\r\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Return the modified object\r\n\treturn target;\r\n};\r\n", "/**\r\n * @typedef Options\r\n *   Configuration for `stringify`.\r\n * @property {boolean} [padLeft=true]\r\n *   Whether to pad a space before a token.\r\n * @property {boolean} [padRight=false]\r\n *   Whether to pad a space after a token.\r\n */\r\n\r\n/**\r\n * @typedef {Options} StringifyOptions\r\n *   Please use `StringifyOptions` instead.\r\n */\r\n\r\n/**\r\n * Parse comma-separated tokens to an array.\r\n *\r\n * @param {string} value\r\n *   Comma-separated tokens.\r\n * @returns {Array<string>}\r\n *   List of tokens.\r\n */\r\nexport function parse(value) {\r\n  /** @type {Array<string>} */\r\n  const tokens = []\r\n  const input = String(value || '')\r\n  let index = input.indexOf(',')\r\n  let start = 0\r\n  /** @type {boolean} */\r\n  let end = false\r\n\r\n  while (!end) {\r\n    if (index === -1) {\r\n      index = input.length\r\n      end = true\r\n    }\r\n\r\n    const token = input.slice(start, index).trim()\r\n\r\n    if (token || !end) {\r\n      tokens.push(token)\r\n    }\r\n\r\n    start = index + 1\r\n    index = input.indexOf(',', start)\r\n  }\r\n\r\n  return tokens\r\n}\r\n\r\n/**\r\n * Serialize an array of strings or numbers to comma-separated tokens.\r\n *\r\n * @param {Array<string|number>} values\r\n *   List of tokens.\r\n * @param {Options} [options]\r\n *   Configuration for `stringify` (optional).\r\n * @returns {string}\r\n *   Comma-separated tokens.\r\n */\r\nexport function stringify(values, options) {\r\n  const settings = options || {}\r\n\r\n  // Ensure the last empty entry is seen.\r\n  const input = values[values.length - 1] === '' ? [...values, ''] : values\r\n\r\n  return input\r\n    .join(\r\n      (settings.padRight ? ' ' : '') +\r\n        ',' +\r\n        (settings.padLeft === false ? '' : ' ')\r\n    )\r\n    .trim()\r\n}\r\n", "/**\r\n * @typedef Options\r\n *   Configuration.\r\n * @property {boolean | null | undefined} [jsx=false]\r\n *   Support JSX identifiers (default: `false`).\r\n */\r\n\r\nconst startRe = /[$_\\p{ID_Start}]/u\r\nconst contRe = /[$_\\u{200C}\\u{200D}\\p{ID_Continue}]/u\r\nconst contReJsx = /[-$_\\u{200C}\\u{200D}\\p{ID_Continue}]/u\r\nconst nameRe = /^[$_\\p{ID_Start}][$_\\u{200C}\\u{200D}\\p{ID_Continue}]*$/u\r\nconst nameReJsx = /^[$_\\p{ID_Start}][-$_\\u{200C}\\u{200D}\\p{ID_Continue}]*$/u\r\n\r\n/** @type {Options} */\r\nconst emptyOptions = {}\r\n\r\n/**\r\n * Checks if the given code point can start an identifier.\r\n *\r\n * @param {number | undefined} code\r\n *   Code point to check.\r\n * @returns {boolean}\r\n *   Whether `code` can start an identifier.\r\n */\r\n// Note: `undefined` is supported so you can pass the result from `''.codePointAt`.\r\nexport function start(code) {\r\n  return code ? startRe.test(String.fromCodePoint(code)) : false\r\n}\r\n\r\n/**\r\n * Checks if the given code point can continue an identifier.\r\n *\r\n * @param {number | undefined} code\r\n *   Code point to check.\r\n * @param {Options | null | undefined} [options]\r\n *   Configuration (optional).\r\n * @returns {boolean}\r\n *   Whether `code` can continue an identifier.\r\n */\r\n// Note: `undefined` is supported so you can pass the result from `''.codePointAt`.\r\nexport function cont(code, options) {\r\n  const settings = options || emptyOptions\r\n  const re = settings.jsx ? contReJsx : contRe\r\n  return code ? re.test(String.fromCodePoint(code)) : false\r\n}\r\n\r\n/**\r\n * Checks if the given value is a valid identifier name.\r\n *\r\n * @param {string} name\r\n *   Identifier to check.\r\n * @param {Options | null | undefined} [options]\r\n *   Configuration (optional).\r\n * @returns {boolean}\r\n *   Whether `name` can be an identifier.\r\n */\r\nexport function name(name, options) {\r\n  const settings = options || emptyOptions\r\n  const re = settings.jsx ? nameReJsx : nameRe\r\n  return re.test(name)\r\n}\r\n", "/**\r\n * @typedef {import('hast').Nodes} Nodes\r\n */\r\n\r\n// HTML whitespace expression.\r\n// See <https://infra.spec.whatwg.org/#ascii-whitespace>.\r\nconst re = /[ \\t\\n\\f\\r]/g\r\n\r\n/**\r\n * Check if the given value is *inter-element whitespace*.\r\n *\r\n * @param {Nodes | string} thing\r\n *   Thing to check (`Node` or `string`).\r\n * @returns {boolean}\r\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\r\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\r\n *   (`\\r`), or form feed (`\\f`); if a node is passed it must be a `Text` node,\r\n *   whose `value` field is checked.\r\n */\r\nexport function whitespace(thing) {\r\n  return typeof thing === 'object'\r\n    ? thing.type === 'text'\r\n      ? empty(thing.value)\r\n      : false\r\n    : empty(thing)\r\n}\r\n\r\n/**\r\n * @param {string} value\r\n * @returns {boolean}\r\n */\r\nfunction empty(value) {\r\n  return value.replace(re, '') === ''\r\n}\r\n", "/**\r\n * @import {Schema as SchemaType, Space} from 'property-information'\r\n */\r\n\r\n/** @type {SchemaType} */\r\nexport class Schema {\r\n  /**\r\n   * @param {SchemaType['property']} property\r\n   *   Property.\r\n   * @param {SchemaType['normal']} normal\r\n   *   Normal.\r\n   * @param {Space | undefined} [space]\r\n   *   Space.\r\n   * @returns\r\n   *   Schema.\r\n   */\r\n  constructor(property, normal, space) {\r\n    this.normal = normal\r\n    this.property = property\r\n\r\n    if (space) {\r\n      this.space = space\r\n    }\r\n  }\r\n}\r\n\r\nSchema.prototype.normal = {}\r\nSchema.prototype.property = {}\r\nSchema.prototype.space = undefined\r\n", "/**\r\n * @import {Info, Space} from 'property-information'\r\n */\r\n\r\nimport {Schema} from './schema.js'\r\n\r\n/**\r\n * @param {ReadonlyArray<Schema>} definitions\r\n *   Definitions.\r\n * @param {Space | undefined} [space]\r\n *   Space.\r\n * @returns {Schema}\r\n *   Schema.\r\n */\r\nexport function merge(definitions, space) {\r\n  /** @type {Record<string, Info>} */\r\n  const property = {}\r\n  /** @type {Record<string, string>} */\r\n  const normal = {}\r\n\r\n  for (const definition of definitions) {\r\n    Object.assign(property, definition.property)\r\n    Object.assign(normal, definition.normal)\r\n  }\r\n\r\n  return new Schema(property, normal, space)\r\n}\r\n", "/**\r\n * Get the cleaned case insensitive form of an attribute or property.\r\n *\r\n * @param {string} value\r\n *   An attribute-like or property-like name.\r\n * @returns {string}\r\n *   Value that can be used to look up the properly cased property on a\r\n *   `Schema`.\r\n */\r\nexport function normalize(value) {\r\n  return value.toLowerCase()\r\n}\r\n", "/**\r\n * @import {Info as InfoType} from 'property-information'\r\n */\r\n\r\n/** @type {InfoType} */\r\nexport class Info {\r\n  /**\r\n   * @param {string} property\r\n   *   Property.\r\n   * @param {string} attribute\r\n   *   Attribute.\r\n   * @returns\r\n   *   Info.\r\n   */\r\n  constructor(property, attribute) {\r\n    this.attribute = attribute\r\n    this.property = property\r\n  }\r\n}\r\n\r\nInfo.prototype.attribute = ''\r\nInfo.prototype.booleanish = false\r\nInfo.prototype.boolean = false\r\nInfo.prototype.commaOrSpaceSeparated = false\r\nInfo.prototype.commaSeparated = false\r\nInfo.prototype.defined = false\r\nInfo.prototype.mustUseProperty = false\r\nInfo.prototype.number = false\r\nInfo.prototype.overloadedBoolean = false\r\nInfo.prototype.property = ''\r\nInfo.prototype.spaceSeparated = false\r\nInfo.prototype.space = undefined\r\n", "let powers = 0\r\n\r\nexport const boolean = increment()\r\nexport const booleanish = increment()\r\nexport const overloadedBoolean = increment()\r\nexport const number = increment()\r\nexport const spaceSeparated = increment()\r\nexport const commaSeparated = increment()\r\nexport const commaOrSpaceSeparated = increment()\r\n\r\nfunction increment() {\r\n  return 2 ** ++powers\r\n}\r\n", "/**\r\n * @import {Space} from 'property-information'\r\n */\r\n\r\nimport {Info} from './info.js'\r\nimport * as types from './types.js'\r\n\r\nconst checks = /** @type {ReadonlyArray<keyof typeof types>} */ (\r\n  Object.keys(types)\r\n)\r\n\r\nexport class DefinedInfo extends Info {\r\n  /**\r\n   * @constructor\r\n   * @param {string} property\r\n   *   Property.\r\n   * @param {string} attribute\r\n   *   Attribute.\r\n   * @param {number | null | undefined} [mask]\r\n   *   Mask.\r\n   * @param {Space | undefined} [space]\r\n   *   Space.\r\n   * @returns\r\n   *   Info.\r\n   */\r\n  constructor(property, attribute, mask, space) {\r\n    let index = -1\r\n\r\n    super(property, attribute)\r\n\r\n    mark(this, 'space', space)\r\n\r\n    if (typeof mask === 'number') {\r\n      while (++index < checks.length) {\r\n        const check = checks[index]\r\n        mark(this, checks[index], (mask & types[check]) === types[check])\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nDefinedInfo.prototype.defined = true\r\n\r\n/**\r\n * @template {keyof DefinedInfo} Key\r\n *   Key type.\r\n * @param {DefinedInfo} values\r\n *   Info.\r\n * @param {Key} key\r\n *   Key.\r\n * @param {DefinedInfo[Key]} value\r\n *   Value.\r\n * @returns {undefined}\r\n *   Nothing.\r\n */\r\nfunction mark(values, key, value) {\r\n  if (value) {\r\n    values[key] = value\r\n  }\r\n}\r\n", "/**\r\n * @import {Info, Space} from 'property-information'\r\n */\r\n\r\n/**\r\n * @typedef Definition\r\n *   Definition of a schema.\r\n * @property {Record<string, string> | undefined} [attributes]\r\n *   Normalzed names to special attribute case.\r\n * @property {ReadonlyArray<string> | undefined} [mustUseProperty]\r\n *   Normalized names that must be set as properties.\r\n * @property {Record<string, number | null>} properties\r\n *   Property names to their types.\r\n * @property {Space | undefined} [space]\r\n *   Space.\r\n * @property {Transform} transform\r\n *   Transform a property name.\r\n */\r\n\r\n/**\r\n * @callback Transform\r\n *   Transform.\r\n * @param {Record<string, string>} attributes\r\n *   Attributes.\r\n * @param {string} property\r\n *   Property.\r\n * @returns {string}\r\n *   Attribute.\r\n */\r\n\r\nimport {normalize} from '../normalize.js'\r\nimport {DefinedInfo} from './defined-info.js'\r\nimport {Schema} from './schema.js'\r\n\r\n/**\r\n * @param {Definition} definition\r\n *   Definition.\r\n * @returns {Schema}\r\n *   Schema.\r\n */\r\nexport function create(definition) {\r\n  /** @type {Record<string, Info>} */\r\n  const properties = {}\r\n  /** @type {Record<string, string>} */\r\n  const normals = {}\r\n\r\n  for (const [property, value] of Object.entries(definition.properties)) {\r\n    const info = new DefinedInfo(\r\n      property,\r\n      definition.transform(definition.attributes || {}, property),\r\n      value,\r\n      definition.space\r\n    )\r\n\r\n    if (\r\n      definition.mustUseProperty &&\r\n      definition.mustUseProperty.includes(property)\r\n    ) {\r\n      info.mustUseProperty = true\r\n    }\r\n\r\n    properties[property] = info\r\n\r\n    normals[normalize(property)] = property\r\n    normals[normalize(info.attribute)] = property\r\n  }\r\n\r\n  return new Schema(properties, normals, definition.space)\r\n}\r\n", "import {create} from './util/create.js'\r\nimport {booleanish, number, spaceSeparated} from './util/types.js'\r\n\r\nexport const aria = create({\r\n  properties: {\r\n    ariaActiveDescendant: null,\r\n    ariaAtomic: booleanish,\r\n    ariaAutoComplete: null,\r\n    ariaBusy: booleanish,\r\n    ariaChecked: booleanish,\r\n    ariaColCount: number,\r\n    ariaColIndex: number,\r\n    ariaColSpan: number,\r\n    ariaControls: spaceSeparated,\r\n    ariaCurrent: null,\r\n    ariaDescribedBy: spaceSeparated,\r\n    ariaDetails: null,\r\n    ariaDisabled: booleanish,\r\n    ariaDropEffect: spaceSeparated,\r\n    ariaErrorMessage: null,\r\n    ariaExpanded: booleanish,\r\n    ariaFlowTo: spaceSeparated,\r\n    ariaGrabbed: booleanish,\r\n    ariaHasPopup: null,\r\n    ariaHidden: booleanish,\r\n    ariaInvalid: null,\r\n    ariaKeyShortcuts: null,\r\n    ariaLabel: null,\r\n    ariaLabelledBy: spaceSeparated,\r\n    ariaLevel: number,\r\n    ariaLive: null,\r\n    ariaModal: booleanish,\r\n    ariaMultiLine: booleanish,\r\n    ariaMultiSelectable: booleanish,\r\n    ariaOrientation: null,\r\n    ariaOwns: spaceSeparated,\r\n    ariaPlaceholder: null,\r\n    ariaPosInSet: number,\r\n    ariaPressed: booleanish,\r\n    ariaReadOnly: booleanish,\r\n    ariaRelevant: null,\r\n    ariaRequired: booleanish,\r\n    ariaRoleDescription: spaceSeparated,\r\n    ariaRowCount: number,\r\n    ariaRowIndex: number,\r\n    ariaRowSpan: number,\r\n    ariaSelected: booleanish,\r\n    ariaSetSize: number,\r\n    ariaSort: null,\r\n    ariaValueMax: number,\r\n    ariaValueMin: number,\r\n    ariaValueNow: number,\r\n    ariaValueText: null,\r\n    role: null\r\n  },\r\n  transform(_, property) {\r\n    return property === 'role'\r\n      ? property\r\n      : 'aria-' + property.slice(4).toLowerCase()\r\n  }\r\n})\r\n", "/**\r\n * @param {Record<string, string>} attributes\r\n *   Attributes.\r\n * @param {string} attribute\r\n *   Attribute.\r\n * @returns {string}\r\n *   Transformed attribute.\r\n */\r\nexport function caseSensitiveTransform(attributes, attribute) {\r\n  return attribute in attributes ? attributes[attribute] : attribute\r\n}\r\n", "import {caseSensitiveTransform} from './case-sensitive-transform.js'\r\n\r\n/**\r\n * @param {Record<string, string>} attributes\r\n *   Attributes.\r\n * @param {string} property\r\n *   Property.\r\n * @returns {string}\r\n *   Transformed property.\r\n */\r\nexport function caseInsensitiveTransform(attributes, property) {\r\n  return caseSensitiveTransform(attributes, property.toLowerCase())\r\n}\r\n", "import {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\r\nimport {create} from './util/create.js'\r\nimport {\r\n  booleanish,\r\n  boolean,\r\n  commaSeparated,\r\n  number,\r\n  overloadedBoolean,\r\n  spaceSeparated\r\n} from './util/types.js'\r\n\r\nexport const html = create({\r\n  attributes: {\r\n    acceptcharset: 'accept-charset',\r\n    classname: 'class',\r\n    htmlfor: 'for',\r\n    httpequiv: 'http-equiv'\r\n  },\r\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\r\n  properties: {\r\n    // Standard Properties.\r\n    abbr: null,\r\n    accept: commaSeparated,\r\n    acceptCharset: spaceSeparated,\r\n    accessKey: spaceSeparated,\r\n    action: null,\r\n    allow: null,\r\n    allowFullScreen: boolean,\r\n    allowPaymentRequest: boolean,\r\n    allowUserMedia: boolean,\r\n    alt: null,\r\n    as: null,\r\n    async: boolean,\r\n    autoCapitalize: null,\r\n    autoComplete: spaceSeparated,\r\n    autoFocus: boolean,\r\n    autoPlay: boolean,\r\n    blocking: spaceSeparated,\r\n    capture: null,\r\n    charSet: null,\r\n    checked: boolean,\r\n    cite: null,\r\n    className: spaceSeparated,\r\n    cols: number,\r\n    colSpan: null,\r\n    content: null,\r\n    contentEditable: booleanish,\r\n    controls: boolean,\r\n    controlsList: spaceSeparated,\r\n    coords: number | commaSeparated,\r\n    crossOrigin: null,\r\n    data: null,\r\n    dateTime: null,\r\n    decoding: null,\r\n    default: boolean,\r\n    defer: boolean,\r\n    dir: null,\r\n    dirName: null,\r\n    disabled: boolean,\r\n    download: overloadedBoolean,\r\n    draggable: booleanish,\r\n    encType: null,\r\n    enterKeyHint: null,\r\n    fetchPriority: null,\r\n    form: null,\r\n    formAction: null,\r\n    formEncType: null,\r\n    formMethod: null,\r\n    formNoValidate: boolean,\r\n    formTarget: null,\r\n    headers: spaceSeparated,\r\n    height: number,\r\n    hidden: overloadedBoolean,\r\n    high: number,\r\n    href: null,\r\n    hrefLang: null,\r\n    htmlFor: spaceSeparated,\r\n    httpEquiv: spaceSeparated,\r\n    id: null,\r\n    imageSizes: null,\r\n    imageSrcSet: null,\r\n    inert: boolean,\r\n    inputMode: null,\r\n    integrity: null,\r\n    is: null,\r\n    isMap: boolean,\r\n    itemId: null,\r\n    itemProp: spaceSeparated,\r\n    itemRef: spaceSeparated,\r\n    itemScope: boolean,\r\n    itemType: spaceSeparated,\r\n    kind: null,\r\n    label: null,\r\n    lang: null,\r\n    language: null,\r\n    list: null,\r\n    loading: null,\r\n    loop: boolean,\r\n    low: number,\r\n    manifest: null,\r\n    max: null,\r\n    maxLength: number,\r\n    media: null,\r\n    method: null,\r\n    min: null,\r\n    minLength: number,\r\n    multiple: boolean,\r\n    muted: boolean,\r\n    name: null,\r\n    nonce: null,\r\n    noModule: boolean,\r\n    noValidate: boolean,\r\n    onAbort: null,\r\n    onAfterPrint: null,\r\n    onAuxClick: null,\r\n    onBeforeMatch: null,\r\n    onBeforePrint: null,\r\n    onBeforeToggle: null,\r\n    onBeforeUnload: null,\r\n    onBlur: null,\r\n    onCancel: null,\r\n    onCanPlay: null,\r\n    onCanPlayThrough: null,\r\n    onChange: null,\r\n    onClick: null,\r\n    onClose: null,\r\n    onContextLost: null,\r\n    onContextMenu: null,\r\n    onContextRestored: null,\r\n    onCopy: null,\r\n    onCueChange: null,\r\n    onCut: null,\r\n    onDblClick: null,\r\n    onDrag: null,\r\n    onDragEnd: null,\r\n    onDragEnter: null,\r\n    onDragExit: null,\r\n    onDragLeave: null,\r\n    onDragOver: null,\r\n    onDragStart: null,\r\n    onDrop: null,\r\n    onDurationChange: null,\r\n    onEmptied: null,\r\n    onEnded: null,\r\n    onError: null,\r\n    onFocus: null,\r\n    onFormData: null,\r\n    onHashChange: null,\r\n    onInput: null,\r\n    onInvalid: null,\r\n    onKeyDown: null,\r\n    onKeyPress: null,\r\n    onKeyUp: null,\r\n    onLanguageChange: null,\r\n    onLoad: null,\r\n    onLoadedData: null,\r\n    onLoadedMetadata: null,\r\n    onLoadEnd: null,\r\n    onLoadStart: null,\r\n    onMessage: null,\r\n    onMessageError: null,\r\n    onMouseDown: null,\r\n    onMouseEnter: null,\r\n    onMouseLeave: null,\r\n    onMouseMove: null,\r\n    onMouseOut: null,\r\n    onMouseOver: null,\r\n    onMouseUp: null,\r\n    onOffline: null,\r\n    onOnline: null,\r\n    onPageHide: null,\r\n    onPageShow: null,\r\n    onPaste: null,\r\n    onPause: null,\r\n    onPlay: null,\r\n    onPlaying: null,\r\n    onPopState: null,\r\n    onProgress: null,\r\n    onRateChange: null,\r\n    onRejectionHandled: null,\r\n    onReset: null,\r\n    onResize: null,\r\n    onScroll: null,\r\n    onScrollEnd: null,\r\n    onSecurityPolicyViolation: null,\r\n    onSeeked: null,\r\n    onSeeking: null,\r\n    onSelect: null,\r\n    onSlotChange: null,\r\n    onStalled: null,\r\n    onStorage: null,\r\n    onSubmit: null,\r\n    onSuspend: null,\r\n    onTimeUpdate: null,\r\n    onToggle: null,\r\n    onUnhandledRejection: null,\r\n    onUnload: null,\r\n    onVolumeChange: null,\r\n    onWaiting: null,\r\n    onWheel: null,\r\n    open: boolean,\r\n    optimum: number,\r\n    pattern: null,\r\n    ping: spaceSeparated,\r\n    placeholder: null,\r\n    playsInline: boolean,\r\n    popover: null,\r\n    popoverTarget: null,\r\n    popoverTargetAction: null,\r\n    poster: null,\r\n    preload: null,\r\n    readOnly: boolean,\r\n    referrerPolicy: null,\r\n    rel: spaceSeparated,\r\n    required: boolean,\r\n    reversed: boolean,\r\n    rows: number,\r\n    rowSpan: number,\r\n    sandbox: spaceSeparated,\r\n    scope: null,\r\n    scoped: boolean,\r\n    seamless: boolean,\r\n    selected: boolean,\r\n    shadowRootClonable: boolean,\r\n    shadowRootDelegatesFocus: boolean,\r\n    shadowRootMode: null,\r\n    shape: null,\r\n    size: number,\r\n    sizes: null,\r\n    slot: null,\r\n    span: number,\r\n    spellCheck: booleanish,\r\n    src: null,\r\n    srcDoc: null,\r\n    srcLang: null,\r\n    srcSet: null,\r\n    start: number,\r\n    step: null,\r\n    style: null,\r\n    tabIndex: number,\r\n    target: null,\r\n    title: null,\r\n    translate: null,\r\n    type: null,\r\n    typeMustMatch: boolean,\r\n    useMap: null,\r\n    value: booleanish,\r\n    width: number,\r\n    wrap: null,\r\n    writingSuggestions: null,\r\n\r\n    // Legacy.\r\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\r\n    align: null, // Several. Use CSS `text-align` instead,\r\n    aLink: null, // `<body>`. Use CSS `a:active {color}` instead\r\n    archive: spaceSeparated, // `<object>`. List of URIs to archives\r\n    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`\r\n    background: null, // `<body>`. Use CSS `background-image` instead\r\n    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead\r\n    border: number, // `<table>`. Use CSS `border-width` instead,\r\n    borderColor: null, // `<table>`. Use CSS `border-color` instead,\r\n    bottomMargin: number, // `<body>`\r\n    cellPadding: null, // `<table>`\r\n    cellSpacing: null, // `<table>`\r\n    char: null, // Several table elements. When `align=char`, sets the character to align on\r\n    charOff: null, // Several table elements. When `char`, offsets the alignment\r\n    classId: null, // `<object>`\r\n    clear: null, // `<br>`. Use CSS `clear` instead\r\n    code: null, // `<object>`\r\n    codeBase: null, // `<object>`\r\n    codeType: null, // `<object>`\r\n    color: null, // `<font>` and `<hr>`. Use CSS instead\r\n    compact: boolean, // Lists. Use CSS to reduce space between items instead\r\n    declare: boolean, // `<object>`\r\n    event: null, // `<script>`\r\n    face: null, // `<font>`. Use CSS instead\r\n    frame: null, // `<table>`\r\n    frameBorder: null, // `<iframe>`. Use CSS `border` instead\r\n    hSpace: number, // `<img>` and `<object>`\r\n    leftMargin: number, // `<body>`\r\n    link: null, // `<body>`. Use CSS `a:link {color: *}` instead\r\n    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\r\n    lowSrc: null, // `<img>`. Use a `<picture>`\r\n    marginHeight: number, // `<body>`\r\n    marginWidth: number, // `<body>`\r\n    noResize: boolean, // `<frame>`\r\n    noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`\r\n    noShade: boolean, // `<hr>`. Use background-color and height instead of borders\r\n    noWrap: boolean, // `<td>` and `<th>`\r\n    object: null, // `<applet>`\r\n    profile: null, // `<head>`\r\n    prompt: null, // `<isindex>`\r\n    rev: null, // `<link>`\r\n    rightMargin: number, // `<body>`\r\n    rules: null, // `<table>`\r\n    scheme: null, // `<meta>`\r\n    scrolling: booleanish, // `<frame>`. Use overflow in the child context\r\n    standby: null, // `<object>`\r\n    summary: null, // `<table>`\r\n    text: null, // `<body>`. Use CSS `color` instead\r\n    topMargin: number, // `<body>`\r\n    valueType: null, // `<param>`\r\n    version: null, // `<html>`. Use a doctype.\r\n    vAlign: null, // Several. Use CSS `vertical-align` instead\r\n    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead\r\n    vSpace: number, // `<img>` and `<object>`\r\n\r\n    // Non-standard Properties.\r\n    allowTransparency: null,\r\n    autoCorrect: null,\r\n    autoSave: null,\r\n    disablePictureInPicture: boolean,\r\n    disableRemotePlayback: boolean,\r\n    prefix: null,\r\n    property: null,\r\n    results: number,\r\n    security: null,\r\n    unselectable: null\r\n  },\r\n  space: 'html',\r\n  transform: caseInsensitiveTransform\r\n})\r\n", "import {caseSensitiveTransform} from './util/case-sensitive-transform.js'\r\nimport {create} from './util/create.js'\r\nimport {\r\n  boolean,\r\n  commaOrSpaceSeparated,\r\n  commaSeparated,\r\n  number,\r\n  spaceSeparated\r\n} from './util/types.js'\r\n\r\nexport const svg = create({\r\n  attributes: {\r\n    accentHeight: 'accent-height',\r\n    alignmentBaseline: 'alignment-baseline',\r\n    arabicForm: 'arabic-form',\r\n    baselineShift: 'baseline-shift',\r\n    capHeight: 'cap-height',\r\n    className: 'class',\r\n    clipPath: 'clip-path',\r\n    clipRule: 'clip-rule',\r\n    colorInterpolation: 'color-interpolation',\r\n    colorInterpolationFilters: 'color-interpolation-filters',\r\n    colorProfile: 'color-profile',\r\n    colorRendering: 'color-rendering',\r\n    crossOrigin: 'crossorigin',\r\n    dataType: 'datatype',\r\n    dominantBaseline: 'dominant-baseline',\r\n    enableBackground: 'enable-background',\r\n    fillOpacity: 'fill-opacity',\r\n    fillRule: 'fill-rule',\r\n    floodColor: 'flood-color',\r\n    floodOpacity: 'flood-opacity',\r\n    fontFamily: 'font-family',\r\n    fontSize: 'font-size',\r\n    fontSizeAdjust: 'font-size-adjust',\r\n    fontStretch: 'font-stretch',\r\n    fontStyle: 'font-style',\r\n    fontVariant: 'font-variant',\r\n    fontWeight: 'font-weight',\r\n    glyphName: 'glyph-name',\r\n    glyphOrientationHorizontal: 'glyph-orientation-horizontal',\r\n    glyphOrientationVertical: 'glyph-orientation-vertical',\r\n    hrefLang: 'hreflang',\r\n    horizAdvX: 'horiz-adv-x',\r\n    horizOriginX: 'horiz-origin-x',\r\n    horizOriginY: 'horiz-origin-y',\r\n    imageRendering: 'image-rendering',\r\n    letterSpacing: 'letter-spacing',\r\n    lightingColor: 'lighting-color',\r\n    markerEnd: 'marker-end',\r\n    markerMid: 'marker-mid',\r\n    markerStart: 'marker-start',\r\n    navDown: 'nav-down',\r\n    navDownLeft: 'nav-down-left',\r\n    navDownRight: 'nav-down-right',\r\n    navLeft: 'nav-left',\r\n    navNext: 'nav-next',\r\n    navPrev: 'nav-prev',\r\n    navRight: 'nav-right',\r\n    navUp: 'nav-up',\r\n    navUpLeft: 'nav-up-left',\r\n    navUpRight: 'nav-up-right',\r\n    onAbort: 'onabort',\r\n    onActivate: 'onactivate',\r\n    onAfterPrint: 'onafterprint',\r\n    onBeforePrint: 'onbeforeprint',\r\n    onBegin: 'onbegin',\r\n    onCancel: 'oncancel',\r\n    onCanPlay: 'oncanplay',\r\n    onCanPlayThrough: 'oncanplaythrough',\r\n    onChange: 'onchange',\r\n    onClick: 'onclick',\r\n    onClose: 'onclose',\r\n    onCopy: 'oncopy',\r\n    onCueChange: 'oncuechange',\r\n    onCut: 'oncut',\r\n    onDblClick: 'ondblclick',\r\n    onDrag: 'ondrag',\r\n    onDragEnd: 'ondragend',\r\n    onDragEnter: 'ondragenter',\r\n    onDragExit: 'ondragexit',\r\n    onDragLeave: 'ondragleave',\r\n    onDragOver: 'ondragover',\r\n    onDragStart: 'ondragstart',\r\n    onDrop: 'ondrop',\r\n    onDurationChange: 'ondurationchange',\r\n    onEmptied: 'onemptied',\r\n    onEnd: 'onend',\r\n    onEnded: 'onended',\r\n    onError: 'onerror',\r\n    onFocus: 'onfocus',\r\n    onFocusIn: 'onfocusin',\r\n    onFocusOut: 'onfocusout',\r\n    onHashChange: 'onhashchange',\r\n    onInput: 'oninput',\r\n    onInvalid: 'oninvalid',\r\n    onKeyDown: 'onkeydown',\r\n    onKeyPress: 'onkeypress',\r\n    onKeyUp: 'onkeyup',\r\n    onLoad: 'onload',\r\n    onLoadedData: 'onloadeddata',\r\n    onLoadedMetadata: 'onloadedmetadata',\r\n    onLoadStart: 'onloadstart',\r\n    onMessage: 'onmessage',\r\n    onMouseDown: 'onmousedown',\r\n    onMouseEnter: 'onmouseenter',\r\n    onMouseLeave: 'onmouseleave',\r\n    onMouseMove: 'onmousemove',\r\n    onMouseOut: 'onmouseout',\r\n    onMouseOver: 'onmouseover',\r\n    onMouseUp: 'onmouseup',\r\n    onMouseWheel: 'onmousewheel',\r\n    onOffline: 'onoffline',\r\n    onOnline: 'ononline',\r\n    onPageHide: 'onpagehide',\r\n    onPageShow: 'onpageshow',\r\n    onPaste: 'onpaste',\r\n    onPause: 'onpause',\r\n    onPlay: 'onplay',\r\n    onPlaying: 'onplaying',\r\n    onPopState: 'onpopstate',\r\n    onProgress: 'onprogress',\r\n    onRateChange: 'onratechange',\r\n    onRepeat: 'onrepeat',\r\n    onReset: 'onreset',\r\n    onResize: 'onresize',\r\n    onScroll: 'onscroll',\r\n    onSeeked: 'onseeked',\r\n    onSeeking: 'onseeking',\r\n    onSelect: 'onselect',\r\n    onShow: 'onshow',\r\n    onStalled: 'onstalled',\r\n    onStorage: 'onstorage',\r\n    onSubmit: 'onsubmit',\r\n    onSuspend: 'onsuspend',\r\n    onTimeUpdate: 'ontimeupdate',\r\n    onToggle: 'ontoggle',\r\n    onUnload: 'onunload',\r\n    onVolumeChange: 'onvolumechange',\r\n    onWaiting: 'onwaiting',\r\n    onZoom: 'onzoom',\r\n    overlinePosition: 'overline-position',\r\n    overlineThickness: 'overline-thickness',\r\n    paintOrder: 'paint-order',\r\n    panose1: 'panose-1',\r\n    pointerEvents: 'pointer-events',\r\n    referrerPolicy: 'referrerpolicy',\r\n    renderingIntent: 'rendering-intent',\r\n    shapeRendering: 'shape-rendering',\r\n    stopColor: 'stop-color',\r\n    stopOpacity: 'stop-opacity',\r\n    strikethroughPosition: 'strikethrough-position',\r\n    strikethroughThickness: 'strikethrough-thickness',\r\n    strokeDashArray: 'stroke-dasharray',\r\n    strokeDashOffset: 'stroke-dashoffset',\r\n    strokeLineCap: 'stroke-linecap',\r\n    strokeLineJoin: 'stroke-linejoin',\r\n    strokeMiterLimit: 'stroke-miterlimit',\r\n    strokeOpacity: 'stroke-opacity',\r\n    strokeWidth: 'stroke-width',\r\n    tabIndex: 'tabindex',\r\n    textAnchor: 'text-anchor',\r\n    textDecoration: 'text-decoration',\r\n    textRendering: 'text-rendering',\r\n    transformOrigin: 'transform-origin',\r\n    typeOf: 'typeof',\r\n    underlinePosition: 'underline-position',\r\n    underlineThickness: 'underline-thickness',\r\n    unicodeBidi: 'unicode-bidi',\r\n    unicodeRange: 'unicode-range',\r\n    unitsPerEm: 'units-per-em',\r\n    vAlphabetic: 'v-alphabetic',\r\n    vHanging: 'v-hanging',\r\n    vIdeographic: 'v-ideographic',\r\n    vMathematical: 'v-mathematical',\r\n    vectorEffect: 'vector-effect',\r\n    vertAdvY: 'vert-adv-y',\r\n    vertOriginX: 'vert-origin-x',\r\n    vertOriginY: 'vert-origin-y',\r\n    wordSpacing: 'word-spacing',\r\n    writingMode: 'writing-mode',\r\n    xHeight: 'x-height',\r\n    // These were camelcased in Tiny. Now lowercased in SVG 2\r\n    playbackOrder: 'playbackorder',\r\n    timelineBegin: 'timelinebegin'\r\n  },\r\n  properties: {\r\n    about: commaOrSpaceSeparated,\r\n    accentHeight: number,\r\n    accumulate: null,\r\n    additive: null,\r\n    alignmentBaseline: null,\r\n    alphabetic: number,\r\n    amplitude: number,\r\n    arabicForm: null,\r\n    ascent: number,\r\n    attributeName: null,\r\n    attributeType: null,\r\n    azimuth: number,\r\n    bandwidth: null,\r\n    baselineShift: null,\r\n    baseFrequency: null,\r\n    baseProfile: null,\r\n    bbox: null,\r\n    begin: null,\r\n    bias: number,\r\n    by: null,\r\n    calcMode: null,\r\n    capHeight: number,\r\n    className: spaceSeparated,\r\n    clip: null,\r\n    clipPath: null,\r\n    clipPathUnits: null,\r\n    clipRule: null,\r\n    color: null,\r\n    colorInterpolation: null,\r\n    colorInterpolationFilters: null,\r\n    colorProfile: null,\r\n    colorRendering: null,\r\n    content: null,\r\n    contentScriptType: null,\r\n    contentStyleType: null,\r\n    crossOrigin: null,\r\n    cursor: null,\r\n    cx: null,\r\n    cy: null,\r\n    d: null,\r\n    dataType: null,\r\n    defaultAction: null,\r\n    descent: number,\r\n    diffuseConstant: number,\r\n    direction: null,\r\n    display: null,\r\n    dur: null,\r\n    divisor: number,\r\n    dominantBaseline: null,\r\n    download: boolean,\r\n    dx: null,\r\n    dy: null,\r\n    edgeMode: null,\r\n    editable: null,\r\n    elevation: number,\r\n    enableBackground: null,\r\n    end: null,\r\n    event: null,\r\n    exponent: number,\r\n    externalResourcesRequired: null,\r\n    fill: null,\r\n    fillOpacity: number,\r\n    fillRule: null,\r\n    filter: null,\r\n    filterRes: null,\r\n    filterUnits: null,\r\n    floodColor: null,\r\n    floodOpacity: null,\r\n    focusable: null,\r\n    focusHighlight: null,\r\n    fontFamily: null,\r\n    fontSize: null,\r\n    fontSizeAdjust: null,\r\n    fontStretch: null,\r\n    fontStyle: null,\r\n    fontVariant: null,\r\n    fontWeight: null,\r\n    format: null,\r\n    fr: null,\r\n    from: null,\r\n    fx: null,\r\n    fy: null,\r\n    g1: commaSeparated,\r\n    g2: commaSeparated,\r\n    glyphName: commaSeparated,\r\n    glyphOrientationHorizontal: null,\r\n    glyphOrientationVertical: null,\r\n    glyphRef: null,\r\n    gradientTransform: null,\r\n    gradientUnits: null,\r\n    handler: null,\r\n    hanging: number,\r\n    hatchContentUnits: null,\r\n    hatchUnits: null,\r\n    height: null,\r\n    href: null,\r\n    hrefLang: null,\r\n    horizAdvX: number,\r\n    horizOriginX: number,\r\n    horizOriginY: number,\r\n    id: null,\r\n    ideographic: number,\r\n    imageRendering: null,\r\n    initialVisibility: null,\r\n    in: null,\r\n    in2: null,\r\n    intercept: number,\r\n    k: number,\r\n    k1: number,\r\n    k2: number,\r\n    k3: number,\r\n    k4: number,\r\n    kernelMatrix: commaOrSpaceSeparated,\r\n    kernelUnitLength: null,\r\n    keyPoints: null, // SEMI_COLON_SEPARATED\r\n    keySplines: null, // SEMI_COLON_SEPARATED\r\n    keyTimes: null, // SEMI_COLON_SEPARATED\r\n    kerning: null,\r\n    lang: null,\r\n    lengthAdjust: null,\r\n    letterSpacing: null,\r\n    lightingColor: null,\r\n    limitingConeAngle: number,\r\n    local: null,\r\n    markerEnd: null,\r\n    markerMid: null,\r\n    markerStart: null,\r\n    markerHeight: null,\r\n    markerUnits: null,\r\n    markerWidth: null,\r\n    mask: null,\r\n    maskContentUnits: null,\r\n    maskUnits: null,\r\n    mathematical: null,\r\n    max: null,\r\n    media: null,\r\n    mediaCharacterEncoding: null,\r\n    mediaContentEncodings: null,\r\n    mediaSize: number,\r\n    mediaTime: null,\r\n    method: null,\r\n    min: null,\r\n    mode: null,\r\n    name: null,\r\n    navDown: null,\r\n    navDownLeft: null,\r\n    navDownRight: null,\r\n    navLeft: null,\r\n    navNext: null,\r\n    navPrev: null,\r\n    navRight: null,\r\n    navUp: null,\r\n    navUpLeft: null,\r\n    navUpRight: null,\r\n    numOctaves: null,\r\n    observer: null,\r\n    offset: null,\r\n    onAbort: null,\r\n    onActivate: null,\r\n    onAfterPrint: null,\r\n    onBeforePrint: null,\r\n    onBegin: null,\r\n    onCancel: null,\r\n    onCanPlay: null,\r\n    onCanPlayThrough: null,\r\n    onChange: null,\r\n    onClick: null,\r\n    onClose: null,\r\n    onCopy: null,\r\n    onCueChange: null,\r\n    onCut: null,\r\n    onDblClick: null,\r\n    onDrag: null,\r\n    onDragEnd: null,\r\n    onDragEnter: null,\r\n    onDragExit: null,\r\n    onDragLeave: null,\r\n    onDragOver: null,\r\n    onDragStart: null,\r\n    onDrop: null,\r\n    onDurationChange: null,\r\n    onEmptied: null,\r\n    onEnd: null,\r\n    onEnded: null,\r\n    onError: null,\r\n    onFocus: null,\r\n    onFocusIn: null,\r\n    onFocusOut: null,\r\n    onHashChange: null,\r\n    onInput: null,\r\n    onInvalid: null,\r\n    onKeyDown: null,\r\n    onKeyPress: null,\r\n    onKeyUp: null,\r\n    onLoad: null,\r\n    onLoadedData: null,\r\n    onLoadedMetadata: null,\r\n    onLoadStart: null,\r\n    onMessage: null,\r\n    onMouseDown: null,\r\n    onMouseEnter: null,\r\n    onMouseLeave: null,\r\n    onMouseMove: null,\r\n    onMouseOut: null,\r\n    onMouseOver: null,\r\n    onMouseUp: null,\r\n    onMouseWheel: null,\r\n    onOffline: null,\r\n    onOnline: null,\r\n    onPageHide: null,\r\n    onPageShow: null,\r\n    onPaste: null,\r\n    onPause: null,\r\n    onPlay: null,\r\n    onPlaying: null,\r\n    onPopState: null,\r\n    onProgress: null,\r\n    onRateChange: null,\r\n    onRepeat: null,\r\n    onReset: null,\r\n    onResize: null,\r\n    onScroll: null,\r\n    onSeeked: null,\r\n    onSeeking: null,\r\n    onSelect: null,\r\n    onShow: null,\r\n    onStalled: null,\r\n    onStorage: null,\r\n    onSubmit: null,\r\n    onSuspend: null,\r\n    onTimeUpdate: null,\r\n    onToggle: null,\r\n    onUnload: null,\r\n    onVolumeChange: null,\r\n    onWaiting: null,\r\n    onZoom: null,\r\n    opacity: null,\r\n    operator: null,\r\n    order: null,\r\n    orient: null,\r\n    orientation: null,\r\n    origin: null,\r\n    overflow: null,\r\n    overlay: null,\r\n    overlinePosition: number,\r\n    overlineThickness: number,\r\n    paintOrder: null,\r\n    panose1: null,\r\n    path: null,\r\n    pathLength: number,\r\n    patternContentUnits: null,\r\n    patternTransform: null,\r\n    patternUnits: null,\r\n    phase: null,\r\n    ping: spaceSeparated,\r\n    pitch: null,\r\n    playbackOrder: null,\r\n    pointerEvents: null,\r\n    points: null,\r\n    pointsAtX: number,\r\n    pointsAtY: number,\r\n    pointsAtZ: number,\r\n    preserveAlpha: null,\r\n    preserveAspectRatio: null,\r\n    primitiveUnits: null,\r\n    propagate: null,\r\n    property: commaOrSpaceSeparated,\r\n    r: null,\r\n    radius: null,\r\n    referrerPolicy: null,\r\n    refX: null,\r\n    refY: null,\r\n    rel: commaOrSpaceSeparated,\r\n    rev: commaOrSpaceSeparated,\r\n    renderingIntent: null,\r\n    repeatCount: null,\r\n    repeatDur: null,\r\n    requiredExtensions: commaOrSpaceSeparated,\r\n    requiredFeatures: commaOrSpaceSeparated,\r\n    requiredFonts: commaOrSpaceSeparated,\r\n    requiredFormats: commaOrSpaceSeparated,\r\n    resource: null,\r\n    restart: null,\r\n    result: null,\r\n    rotate: null,\r\n    rx: null,\r\n    ry: null,\r\n    scale: null,\r\n    seed: null,\r\n    shapeRendering: null,\r\n    side: null,\r\n    slope: null,\r\n    snapshotTime: null,\r\n    specularConstant: number,\r\n    specularExponent: number,\r\n    spreadMethod: null,\r\n    spacing: null,\r\n    startOffset: null,\r\n    stdDeviation: null,\r\n    stemh: null,\r\n    stemv: null,\r\n    stitchTiles: null,\r\n    stopColor: null,\r\n    stopOpacity: null,\r\n    strikethroughPosition: number,\r\n    strikethroughThickness: number,\r\n    string: null,\r\n    stroke: null,\r\n    strokeDashArray: commaOrSpaceSeparated,\r\n    strokeDashOffset: null,\r\n    strokeLineCap: null,\r\n    strokeLineJoin: null,\r\n    strokeMiterLimit: number,\r\n    strokeOpacity: number,\r\n    strokeWidth: null,\r\n    style: null,\r\n    surfaceScale: number,\r\n    syncBehavior: null,\r\n    syncBehaviorDefault: null,\r\n    syncMaster: null,\r\n    syncTolerance: null,\r\n    syncToleranceDefault: null,\r\n    systemLanguage: commaOrSpaceSeparated,\r\n    tabIndex: number,\r\n    tableValues: null,\r\n    target: null,\r\n    targetX: number,\r\n    targetY: number,\r\n    textAnchor: null,\r\n    textDecoration: null,\r\n    textRendering: null,\r\n    textLength: null,\r\n    timelineBegin: null,\r\n    title: null,\r\n    transformBehavior: null,\r\n    type: null,\r\n    typeOf: commaOrSpaceSeparated,\r\n    to: null,\r\n    transform: null,\r\n    transformOrigin: null,\r\n    u1: null,\r\n    u2: null,\r\n    underlinePosition: number,\r\n    underlineThickness: number,\r\n    unicode: null,\r\n    unicodeBidi: null,\r\n    unicodeRange: null,\r\n    unitsPerEm: number,\r\n    values: null,\r\n    vAlphabetic: number,\r\n    vMathematical: number,\r\n    vectorEffect: null,\r\n    vHanging: number,\r\n    vIdeographic: number,\r\n    version: null,\r\n    vertAdvY: number,\r\n    vertOriginX: number,\r\n    vertOriginY: number,\r\n    viewBox: null,\r\n    viewTarget: null,\r\n    visibility: null,\r\n    width: null,\r\n    widths: null,\r\n    wordSpacing: null,\r\n    writingMode: null,\r\n    x: null,\r\n    x1: null,\r\n    x2: null,\r\n    xChannelSelector: null,\r\n    xHeight: number,\r\n    y: null,\r\n    y1: null,\r\n    y2: null,\r\n    yChannelSelector: null,\r\n    z: null,\r\n    zoomAndPan: null\r\n  },\r\n  space: 'svg',\r\n  transform: caseSensitiveTransform\r\n})\r\n", "import {create} from './util/create.js'\r\n\r\nexport const xlink = create({\r\n  properties: {\r\n    xLinkActuate: null,\r\n    xLinkArcRole: null,\r\n    xLinkHref: null,\r\n    xLinkRole: null,\r\n    xLinkShow: null,\r\n    xLinkTitle: null,\r\n    xLinkType: null\r\n  },\r\n  space: 'xlink',\r\n  transform(_, property) {\r\n    return 'xlink:' + property.slice(5).toLowerCase()\r\n  }\r\n})\r\n", "import {create} from './util/create.js'\r\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\r\n\r\nexport const xmlns = create({\r\n  attributes: {xmlnsxlink: 'xmlns:xlink'},\r\n  properties: {xmlnsXLink: null, xmlns: null},\r\n  space: 'xmlns',\r\n  transform: caseInsensitiveTransform\r\n})\r\n", "import {create} from './util/create.js'\r\n\r\nexport const xml = create({\r\n  properties: {xmlBase: null, xmlLang: null, xmlSpace: null},\r\n  space: 'xml',\r\n  transform(_, property) {\r\n    return 'xml:' + property.slice(3).toLowerCase()\r\n  }\r\n})\r\n", "/**\r\n * Special cases for React (`Record<string, string>`).\r\n *\r\n * `hast` is close to `React` but differs in a couple of cases.\r\n * To get a React property from a hast property,\r\n * check if it is in `hastToReact`.\r\n * If it is, use the corresponding value;\r\n * otherwise, use the hast property.\r\n *\r\n * @type {Record<string, string>}\r\n */\r\nexport const hastToReact = {\r\n  classId: 'classID',\r\n  dataType: 'datatype',\r\n  itemId: 'itemID',\r\n  strokeDashArray: 'strokeDasharray',\r\n  strokeDashOffset: 'strokeDashoffset',\r\n  strokeLineCap: 'strokeLinecap',\r\n  strokeLineJoin: 'strokeLinejoin',\r\n  strokeMiterLimit: 'strokeMiterlimit',\r\n  typeOf: 'typeof',\r\n  xLinkActuate: 'xlinkActuate',\r\n  xLinkArcRole: 'xlinkArcrole',\r\n  xLinkHref: 'xlinkHref',\r\n  xLinkRole: 'xlinkRole',\r\n  xLinkShow: 'xlinkShow',\r\n  xLinkTitle: 'xlinkTitle',\r\n  xLinkType: 'xlinkType',\r\n  xmlnsXLink: 'xmlnsXlink'\r\n}\r\n", "/**\r\n * @import {Schema} from 'property-information'\r\n */\r\n\r\nimport {DefinedInfo} from './util/defined-info.js'\r\nimport {Info} from './util/info.js'\r\nimport {normalize} from './normalize.js'\r\n\r\nconst cap = /[A-Z]/g\r\nconst dash = /-[a-z]/g\r\nconst valid = /^data[-\\w.:]+$/i\r\n\r\n/**\r\n * Look up info on a property.\r\n *\r\n * In most cases the given `schema` contains info on the property.\r\n * All standard,\r\n * most legacy,\r\n * and some non-standard properties are supported.\r\n * For these cases,\r\n * the returned `Info` has hints about the value of the property.\r\n *\r\n * `name` can also be a valid data attribute or property,\r\n * in which case an `Info` object with the correctly cased `attribute` and\r\n * `property` is returned.\r\n *\r\n * `name` can be an unknown attribute,\r\n * in which case an `Info` object with `attribute` and `property` set to the\r\n * given name is returned.\r\n * It is not recommended to provide unsupported legacy or recently specced\r\n * properties.\r\n *\r\n *\r\n * @param {Schema} schema\r\n *   Schema;\r\n *   either the `html` or `svg` export.\r\n * @param {string} value\r\n *   An attribute-like or property-like name;\r\n *   it will be passed through `normalize` to hopefully find the correct info.\r\n * @returns {Info}\r\n *   Info.\r\n */\r\nexport function find(schema, value) {\r\n  const normal = normalize(value)\r\n  let property = value\r\n  let Type = Info\r\n\r\n  if (normal in schema.normal) {\r\n    return schema.property[schema.normal[normal]]\r\n  }\r\n\r\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\r\n    // Attribute or property.\r\n    if (value.charAt(4) === '-') {\r\n      // Turn it into a property.\r\n      const rest = value.slice(5).replace(dash, camelcase)\r\n      property = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1)\r\n    } else {\r\n      // Turn it into an attribute.\r\n      const rest = value.slice(4)\r\n\r\n      if (!dash.test(rest)) {\r\n        let dashes = rest.replace(cap, kebab)\r\n\r\n        if (dashes.charAt(0) !== '-') {\r\n          dashes = '-' + dashes\r\n        }\r\n\r\n        value = 'data' + dashes\r\n      }\r\n    }\r\n\r\n    Type = DefinedInfo\r\n  }\r\n\r\n  return new Type(property, value)\r\n}\r\n\r\n/**\r\n * @param {string} $0\r\n *   Value.\r\n * @returns {string}\r\n *   Kebab.\r\n */\r\nfunction kebab($0) {\r\n  return '-' + $0.toLowerCase()\r\n}\r\n\r\n/**\r\n * @param {string} $0\r\n *   Value.\r\n * @returns {string}\r\n *   Camel.\r\n */\r\nfunction camelcase($0) {\r\n  return $0.charAt(1).toUpperCase()\r\n}\r\n", "// Note: types exposed from `index.d.ts`.\r\nimport {merge} from './lib/util/merge.js'\r\nimport {aria} from './lib/aria.js'\r\nimport {html as htmlBase} from './lib/html.js'\r\nimport {svg as svgBase} from './lib/svg.js'\r\nimport {xlink} from './lib/xlink.js'\r\nimport {xmlns} from './lib/xmlns.js'\r\nimport {xml} from './lib/xml.js'\r\n\r\nexport {hastToReact} from './lib/hast-to-react.js'\r\n\r\nexport const html = merge([aria, htmlBase, xlink, xmlns, xml], 'html')\r\n\r\nexport {find} from './lib/find.js'\r\nexport {normalize} from './lib/normalize.js'\r\n\r\nexport const svg = merge([aria, svgBase, xlink, xmlns, xml], 'svg')\r\n", "/**\r\n * Parse space-separated tokens to an array of strings.\r\n *\r\n * @param {string} value\r\n *   Space-separated tokens.\r\n * @returns {Array<string>}\r\n *   List of tokens.\r\n */\r\nexport function parse(value) {\r\n  const input = String(value || '').trim()\r\n  return input ? input.split(/[ \\t\\n\\r\\f]+/g) : []\r\n}\r\n\r\n/**\r\n * Serialize an array of strings as space separated-tokens.\r\n *\r\n * @param {Array<string|number>} values\r\n *   List of tokens.\r\n * @returns {string}\r\n *   Space-separated tokens.\r\n */\r\nexport function stringify(values) {\r\n  return values.join(' ').trim()\r\n}\r\n", "/**\r\n * @import {Identifier, Literal, MemberExpression} from 'estree'\r\n * @import {Jsx, JsxDev, Options, Props} from 'hast-util-to-jsx-runtime'\r\n * @import {Element, Nodes, Parents, Root, Text} from 'hast'\r\n * @import {MdxFlowExpressionHast, MdxTextExpressionHast} from 'mdast-util-mdx-expression'\r\n * @import {MdxJsxFlowElementHast, MdxJsxTextElementHast} from 'mdast-util-mdx-jsx'\r\n * @import {MdxjsEsmHast} from 'mdast-util-mdxjs-esm'\r\n * @import {Position} from 'unist'\r\n * @import {Child, Create, Field, JsxElement, State, Style} from './types.js'\r\n */\r\n\r\nimport {stringify as commas} from 'comma-separated-tokens'\r\nimport {ok as assert} from 'devlop'\r\nimport {name as isIdentifierName} from 'estree-util-is-identifier-name'\r\nimport {whitespace} from 'hast-util-whitespace'\r\nimport {find, hastToReact, html, svg} from 'property-information'\r\nimport {stringify as spaces} from 'space-separated-tokens'\r\nimport styleToJs from 'style-to-js'\r\nimport {pointStart} from 'unist-util-position'\r\nimport {VFileMessage} from 'vfile-message'\r\n\r\n// To do: next major: `Object.hasOwn`.\r\nconst own = {}.hasOwnProperty\r\n\r\n/** @type {Map<string, number>} */\r\nconst emptyMap = new Map()\r\n\r\nconst cap = /[A-Z]/g\r\n\r\n// `react-dom` triggers a warning for *any* white space in tables.\r\n// To follow GFM, `mdast-util-to-hast` injects line endings between elements.\r\n// Other tools might do so too, but they don’t do here, so we remove all of\r\n// that.\r\n\r\n// See: <https://github.com/facebook/react/pull/7081>.\r\n// See: <https://github.com/facebook/react/pull/7515>.\r\n// See: <https://github.com/remarkjs/remark-react/issues/64>.\r\n// See: <https://github.com/rehypejs/rehype-react/pull/29>.\r\n// See: <https://github.com/rehypejs/rehype-react/pull/32>.\r\n// See: <https://github.com/rehypejs/rehype-react/pull/45>.\r\nconst tableElements = new Set(['table', 'tbody', 'thead', 'tfoot', 'tr'])\r\n\r\nconst tableCellElement = new Set(['td', 'th'])\r\n\r\nconst docs = 'https://github.com/syntax-tree/hast-util-to-jsx-runtime'\r\n\r\n/**\r\n * Transform a hast tree to preact, react, solid, svelte, vue, etc.,\r\n * with an automatic JSX runtime.\r\n *\r\n * @param {Nodes} tree\r\n *   Tree to transform.\r\n * @param {Options} options\r\n *   Configuration (required).\r\n * @returns {JsxElement}\r\n *   JSX element.\r\n */\r\n\r\nexport function toJsxRuntime(tree, options) {\r\n  if (!options || options.Fragment === undefined) {\r\n    throw new TypeError('Expected `Fragment` in options')\r\n  }\r\n\r\n  const filePath = options.filePath || undefined\r\n  /** @type {Create} */\r\n  let create\r\n\r\n  if (options.development) {\r\n    if (typeof options.jsxDEV !== 'function') {\r\n      throw new TypeError(\r\n        'Expected `jsxDEV` in options when `development: true`'\r\n      )\r\n    }\r\n\r\n    create = developmentCreate(filePath, options.jsxDEV)\r\n  } else {\r\n    if (typeof options.jsx !== 'function') {\r\n      throw new TypeError('Expected `jsx` in production options')\r\n    }\r\n\r\n    if (typeof options.jsxs !== 'function') {\r\n      throw new TypeError('Expected `jsxs` in production options')\r\n    }\r\n\r\n    create = productionCreate(filePath, options.jsx, options.jsxs)\r\n  }\r\n\r\n  /** @type {State} */\r\n  const state = {\r\n    Fragment: options.Fragment,\r\n    ancestors: [],\r\n    components: options.components || {},\r\n    create,\r\n    elementAttributeNameCase: options.elementAttributeNameCase || 'react',\r\n    evaluater: options.createEvaluater ? options.createEvaluater() : undefined,\r\n    filePath,\r\n    ignoreInvalidStyle: options.ignoreInvalidStyle || false,\r\n    passKeys: options.passKeys !== false,\r\n    passNode: options.passNode || false,\r\n    schema: options.space === 'svg' ? svg : html,\r\n    stylePropertyNameCase: options.stylePropertyNameCase || 'dom',\r\n    tableCellAlignToStyle: options.tableCellAlignToStyle !== false\r\n  }\r\n\r\n  const result = one(state, tree, undefined)\r\n\r\n  // JSX element.\r\n  if (result && typeof result !== 'string') {\r\n    return result\r\n  }\r\n\r\n  // Text node or something that turned into nothing.\r\n  return state.create(\r\n    tree,\r\n    state.Fragment,\r\n    {children: result || undefined},\r\n    undefined\r\n  )\r\n}\r\n\r\n/**\r\n * Transform a node.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {Nodes} node\r\n *   Current node.\r\n * @param {string | undefined} key\r\n *   Key.\r\n * @returns {Child | undefined}\r\n *   Child, optional.\r\n */\r\nfunction one(state, node, key) {\r\n  if (node.type === 'element') {\r\n    return element(state, node, key)\r\n  }\r\n\r\n  if (node.type === 'mdxFlowExpression' || node.type === 'mdxTextExpression') {\r\n    return mdxExpression(state, node)\r\n  }\r\n\r\n  if (node.type === 'mdxJsxFlowElement' || node.type === 'mdxJsxTextElement') {\r\n    return mdxJsxElement(state, node, key)\r\n  }\r\n\r\n  if (node.type === 'mdxjsEsm') {\r\n    return mdxEsm(state, node)\r\n  }\r\n\r\n  if (node.type === 'root') {\r\n    return root(state, node, key)\r\n  }\r\n\r\n  if (node.type === 'text') {\r\n    return text(state, node)\r\n  }\r\n}\r\n\r\n/**\r\n * Handle element.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {Element} node\r\n *   Current node.\r\n * @param {string | undefined} key\r\n *   Key.\r\n * @returns {Child | undefined}\r\n *   Child, optional.\r\n */\r\nfunction element(state, node, key) {\r\n  const parentSchema = state.schema\r\n  let schema = parentSchema\r\n\r\n  if (node.tagName.toLowerCase() === 'svg' && parentSchema.space === 'html') {\r\n    schema = svg\r\n    state.schema = schema\r\n  }\r\n\r\n  state.ancestors.push(node)\r\n\r\n  const type = findComponentFromName(state, node.tagName, false)\r\n  const props = createElementProps(state, node)\r\n  let children = createChildren(state, node)\r\n\r\n  if (tableElements.has(node.tagName)) {\r\n    children = children.filter(function (child) {\r\n      return typeof child === 'string' ? !whitespace(child) : true\r\n    })\r\n  }\r\n\r\n  addNode(state, props, type, node)\r\n  addChildren(props, children)\r\n\r\n  // Restore.\r\n  state.ancestors.pop()\r\n  state.schema = parentSchema\r\n\r\n  return state.create(node, type, props, key)\r\n}\r\n\r\n/**\r\n * Handle MDX expression.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {MdxFlowExpressionHast | MdxTextExpressionHast} node\r\n *   Current node.\r\n * @returns {Child | undefined}\r\n *   Child, optional.\r\n */\r\nfunction mdxExpression(state, node) {\r\n  if (node.data && node.data.estree && state.evaluater) {\r\n    const program = node.data.estree\r\n    const expression = program.body[0]\r\n    assert(expression.type === 'ExpressionStatement')\r\n\r\n    // Assume result is a child.\r\n    return /** @type {Child | undefined} */ (\r\n      state.evaluater.evaluateExpression(expression.expression)\r\n    )\r\n  }\r\n\r\n  crashEstree(state, node.position)\r\n}\r\n\r\n/**\r\n * Handle MDX ESM.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {MdxjsEsmHast} node\r\n *   Current node.\r\n * @returns {Child | undefined}\r\n *   Child, optional.\r\n */\r\nfunction mdxEsm(state, node) {\r\n  if (node.data && node.data.estree && state.evaluater) {\r\n    // Assume result is a child.\r\n    return /** @type {Child | undefined} */ (\r\n      state.evaluater.evaluateProgram(node.data.estree)\r\n    )\r\n  }\r\n\r\n  crashEstree(state, node.position)\r\n}\r\n\r\n/**\r\n * Handle MDX JSX.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {MdxJsxFlowElementHast | MdxJsxTextElementHast} node\r\n *   Current node.\r\n * @param {string | undefined} key\r\n *   Key.\r\n * @returns {Child | undefined}\r\n *   Child, optional.\r\n */\r\nfunction mdxJsxElement(state, node, key) {\r\n  const parentSchema = state.schema\r\n  let schema = parentSchema\r\n\r\n  if (node.name === 'svg' && parentSchema.space === 'html') {\r\n    schema = svg\r\n    state.schema = schema\r\n  }\r\n\r\n  state.ancestors.push(node)\r\n\r\n  const type =\r\n    node.name === null\r\n      ? state.Fragment\r\n      : findComponentFromName(state, node.name, true)\r\n  const props = createJsxElementProps(state, node)\r\n  const children = createChildren(state, node)\r\n\r\n  addNode(state, props, type, node)\r\n  addChildren(props, children)\r\n\r\n  // Restore.\r\n  state.ancestors.pop()\r\n  state.schema = parentSchema\r\n\r\n  return state.create(node, type, props, key)\r\n}\r\n\r\n/**\r\n * Handle root.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {Root} node\r\n *   Current node.\r\n * @param {string | undefined} key\r\n *   Key.\r\n * @returns {Child | undefined}\r\n *   Child, optional.\r\n */\r\nfunction root(state, node, key) {\r\n  /** @type {Props} */\r\n  const props = {}\r\n\r\n  addChildren(props, createChildren(state, node))\r\n\r\n  return state.create(node, state.Fragment, props, key)\r\n}\r\n\r\n/**\r\n * Handle text.\r\n *\r\n * @param {State} _\r\n *   Info passed around.\r\n * @param {Text} node\r\n *   Current node.\r\n * @returns {Child | undefined}\r\n *   Child, optional.\r\n */\r\nfunction text(_, node) {\r\n  return node.value\r\n}\r\n\r\n/**\r\n * Add `node` to props.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {Props} props\r\n *   Props.\r\n * @param {unknown} type\r\n *   Type.\r\n * @param {Element | MdxJsxFlowElementHast | MdxJsxTextElementHast} node\r\n *   Node.\r\n * @returns {undefined}\r\n *   Nothing.\r\n */\r\nfunction addNode(state, props, type, node) {\r\n  // If this is swapped out for a component:\r\n  if (typeof type !== 'string' && type !== state.Fragment && state.passNode) {\r\n    props.node = node\r\n  }\r\n}\r\n\r\n/**\r\n * Add children to props.\r\n *\r\n * @param {Props} props\r\n *   Props.\r\n * @param {Array<Child>} children\r\n *   Children.\r\n * @returns {undefined}\r\n *   Nothing.\r\n */\r\nfunction addChildren(props, children) {\r\n  if (children.length > 0) {\r\n    const value = children.length > 1 ? children : children[0]\r\n\r\n    if (value) {\r\n      props.children = value\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @param {string | undefined} _\r\n *   Path to file.\r\n * @param {Jsx} jsx\r\n *   Dynamic.\r\n * @param {Jsx} jsxs\r\n *   Static.\r\n * @returns {Create}\r\n *   Create a production element.\r\n */\r\nfunction productionCreate(_, jsx, jsxs) {\r\n  return create\r\n  /** @type {Create} */\r\n  function create(_, type, props, key) {\r\n    // Only an array when there are 2 or more children.\r\n    const isStaticChildren = Array.isArray(props.children)\r\n    const fn = isStaticChildren ? jsxs : jsx\r\n    return key ? fn(type, props, key) : fn(type, props)\r\n  }\r\n}\r\n\r\n/**\r\n * @param {string | undefined} filePath\r\n *   Path to file.\r\n * @param {JsxDev} jsxDEV\r\n *   Development.\r\n * @returns {Create}\r\n *   Create a development element.\r\n */\r\nfunction developmentCreate(filePath, jsxDEV) {\r\n  return create\r\n  /** @type {Create} */\r\n  function create(node, type, props, key) {\r\n    // Only an array when there are 2 or more children.\r\n    const isStaticChildren = Array.isArray(props.children)\r\n    const point = pointStart(node)\r\n    return jsxDEV(\r\n      type,\r\n      props,\r\n      key,\r\n      isStaticChildren,\r\n      {\r\n        columnNumber: point ? point.column - 1 : undefined,\r\n        fileName: filePath,\r\n        lineNumber: point ? point.line : undefined\r\n      },\r\n      undefined\r\n    )\r\n  }\r\n}\r\n\r\n/**\r\n * Create props from an element.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {Element} node\r\n *   Current element.\r\n * @returns {Props}\r\n *   Props.\r\n */\r\nfunction createElementProps(state, node) {\r\n  /** @type {Props} */\r\n  const props = {}\r\n  /** @type {string | undefined} */\r\n  let alignValue\r\n  /** @type {string} */\r\n  let prop\r\n\r\n  for (prop in node.properties) {\r\n    if (prop !== 'children' && own.call(node.properties, prop)) {\r\n      const result = createProperty(state, prop, node.properties[prop])\r\n\r\n      if (result) {\r\n        const [key, value] = result\r\n\r\n        if (\r\n          state.tableCellAlignToStyle &&\r\n          key === 'align' &&\r\n          typeof value === 'string' &&\r\n          tableCellElement.has(node.tagName)\r\n        ) {\r\n          alignValue = value\r\n        } else {\r\n          props[key] = value\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  if (alignValue) {\r\n    // Assume style is an object.\r\n    const style = /** @type {Style} */ (props.style || (props.style = {}))\r\n    style[state.stylePropertyNameCase === 'css' ? 'text-align' : 'textAlign'] =\r\n      alignValue\r\n  }\r\n\r\n  return props\r\n}\r\n\r\n/**\r\n * Create props from a JSX element.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {MdxJsxFlowElementHast | MdxJsxTextElementHast} node\r\n *   Current JSX element.\r\n * @returns {Props}\r\n *   Props.\r\n */\r\nfunction createJsxElementProps(state, node) {\r\n  /** @type {Props} */\r\n  const props = {}\r\n\r\n  for (const attribute of node.attributes) {\r\n    if (attribute.type === 'mdxJsxExpressionAttribute') {\r\n      if (attribute.data && attribute.data.estree && state.evaluater) {\r\n        const program = attribute.data.estree\r\n        const expression = program.body[0]\r\n        assert(expression.type === 'ExpressionStatement')\r\n        const objectExpression = expression.expression\r\n        assert(objectExpression.type === 'ObjectExpression')\r\n        const property = objectExpression.properties[0]\r\n        assert(property.type === 'SpreadElement')\r\n\r\n        Object.assign(\r\n          props,\r\n          state.evaluater.evaluateExpression(property.argument)\r\n        )\r\n      } else {\r\n        crashEstree(state, node.position)\r\n      }\r\n    } else {\r\n      // For JSX, the author is responsible of passing in the correct values.\r\n      const name = attribute.name\r\n      /** @type {unknown} */\r\n      let value\r\n\r\n      if (attribute.value && typeof attribute.value === 'object') {\r\n        if (\r\n          attribute.value.data &&\r\n          attribute.value.data.estree &&\r\n          state.evaluater\r\n        ) {\r\n          const program = attribute.value.data.estree\r\n          const expression = program.body[0]\r\n          assert(expression.type === 'ExpressionStatement')\r\n          value = state.evaluater.evaluateExpression(expression.expression)\r\n        } else {\r\n          crashEstree(state, node.position)\r\n        }\r\n      } else {\r\n        value = attribute.value === null ? true : attribute.value\r\n      }\r\n\r\n      // Assume a prop.\r\n      props[name] = /** @type {Props[keyof Props]} */ (value)\r\n    }\r\n  }\r\n\r\n  return props\r\n}\r\n\r\n/**\r\n * Create children.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {Parents} node\r\n *   Current element.\r\n * @returns {Array<Child>}\r\n *   Children.\r\n */\r\nfunction createChildren(state, node) {\r\n  /** @type {Array<Child>} */\r\n  const children = []\r\n  let index = -1\r\n  /** @type {Map<string, number>} */\r\n  // Note: test this when Solid doesn’t want to merge my upcoming PR.\r\n  /* c8 ignore next */\r\n  const countsByName = state.passKeys ? new Map() : emptyMap\r\n\r\n  while (++index < node.children.length) {\r\n    const child = node.children[index]\r\n    /** @type {string | undefined} */\r\n    let key\r\n\r\n    if (state.passKeys) {\r\n      const name =\r\n        child.type === 'element'\r\n          ? child.tagName\r\n          : child.type === 'mdxJsxFlowElement' ||\r\n              child.type === 'mdxJsxTextElement'\r\n            ? child.name\r\n            : undefined\r\n\r\n      if (name) {\r\n        const count = countsByName.get(name) || 0\r\n        key = name + '-' + count\r\n        countsByName.set(name, count + 1)\r\n      }\r\n    }\r\n\r\n    const result = one(state, child, key)\r\n    if (result !== undefined) children.push(result)\r\n  }\r\n\r\n  return children\r\n}\r\n\r\n/**\r\n * Handle a property.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {string} prop\r\n *   Key.\r\n * @param {Array<number | string> | boolean | number | string | null | undefined} value\r\n *   hast property value.\r\n * @returns {Field | undefined}\r\n *   Field for runtime, optional.\r\n */\r\nfunction createProperty(state, prop, value) {\r\n  const info = find(state.schema, prop)\r\n\r\n  // Ignore nullish and `NaN` values.\r\n  if (\r\n    value === null ||\r\n    value === undefined ||\r\n    (typeof value === 'number' && Number.isNaN(value))\r\n  ) {\r\n    return\r\n  }\r\n\r\n  if (Array.isArray(value)) {\r\n    // Accept `array`.\r\n    // Most props are space-separated.\r\n    value = info.commaSeparated ? commas(value) : spaces(value)\r\n  }\r\n\r\n  // React only accepts `style` as object.\r\n  if (info.property === 'style') {\r\n    let styleObject =\r\n      typeof value === 'object' ? value : parseStyle(state, String(value))\r\n\r\n    if (state.stylePropertyNameCase === 'css') {\r\n      styleObject = transformStylesToCssCasing(styleObject)\r\n    }\r\n\r\n    return ['style', styleObject]\r\n  }\r\n\r\n  return [\r\n    state.elementAttributeNameCase === 'react' && info.space\r\n      ? hastToReact[info.property] || info.property\r\n      : info.attribute,\r\n    value\r\n  ]\r\n}\r\n\r\n/**\r\n * Parse a CSS declaration to an object.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {string} value\r\n *   CSS declarations.\r\n * @returns {Style}\r\n *   Properties.\r\n * @throws\r\n *   Throws `VFileMessage` when CSS cannot be parsed.\r\n */\r\nfunction parseStyle(state, value) {\r\n  try {\r\n    return styleToJs(value, {reactCompat: true})\r\n  } catch (error) {\r\n    if (state.ignoreInvalidStyle) {\r\n      return {}\r\n    }\r\n\r\n    const cause = /** @type {Error} */ (error)\r\n    const message = new VFileMessage('Cannot parse `style` attribute', {\r\n      ancestors: state.ancestors,\r\n      cause,\r\n      ruleId: 'style',\r\n      source: 'hast-util-to-jsx-runtime'\r\n    })\r\n    message.file = state.filePath || undefined\r\n    message.url = docs + '#cannot-parse-style-attribute'\r\n\r\n    throw message\r\n  }\r\n}\r\n\r\n/**\r\n * Create a JSX name from a string.\r\n *\r\n * @param {State} state\r\n *   To do.\r\n * @param {string} name\r\n *   Name.\r\n * @param {boolean} allowExpression\r\n *   Allow member expressions and identifiers.\r\n * @returns {unknown}\r\n *   To do.\r\n */\r\nfunction findComponentFromName(state, name, allowExpression) {\r\n  /** @type {Identifier | Literal | MemberExpression} */\r\n  let result\r\n\r\n  if (!allowExpression) {\r\n    result = {type: 'Literal', value: name}\r\n  } else if (name.includes('.')) {\r\n    const identifiers = name.split('.')\r\n    let index = -1\r\n    /** @type {Identifier | Literal | MemberExpression | undefined} */\r\n    let node\r\n\r\n    while (++index < identifiers.length) {\r\n      /** @type {Identifier | Literal} */\r\n      const prop = isIdentifierName(identifiers[index])\r\n        ? {type: 'Identifier', name: identifiers[index]}\r\n        : {type: 'Literal', value: identifiers[index]}\r\n      node = node\r\n        ? {\r\n            type: 'MemberExpression',\r\n            object: node,\r\n            property: prop,\r\n            computed: Boolean(index && prop.type === 'Literal'),\r\n            optional: false\r\n          }\r\n        : prop\r\n    }\r\n\r\n    assert(node, 'always a result')\r\n    result = node\r\n  } else {\r\n    result =\r\n      isIdentifierName(name) && !/^[a-z]/.test(name)\r\n        ? {type: 'Identifier', name}\r\n        : {type: 'Literal', value: name}\r\n  }\r\n\r\n  // Only literals can be passed in `components` currently.\r\n  // No identifiers / member expressions.\r\n  if (result.type === 'Literal') {\r\n    const name = /** @type {string | number} */ (result.value)\r\n    return own.call(state.components, name) ? state.components[name] : name\r\n  }\r\n\r\n  // Assume component.\r\n  if (state.evaluater) {\r\n    return state.evaluater.evaluateExpression(result)\r\n  }\r\n\r\n  crashEstree(state)\r\n}\r\n\r\n/**\r\n * @param {State} state\r\n * @param {Position | undefined} [place]\r\n * @returns {never}\r\n */\r\nfunction crashEstree(state, place) {\r\n  const message = new VFileMessage(\r\n    'Cannot handle MDX estrees without `createEvaluater`',\r\n    {\r\n      ancestors: state.ancestors,\r\n      place,\r\n      ruleId: 'mdx-estree',\r\n      source: 'hast-util-to-jsx-runtime'\r\n    }\r\n  )\r\n  message.file = state.filePath || undefined\r\n  message.url = docs + '#cannot-handle-mdx-estrees-without-createevaluater'\r\n\r\n  throw message\r\n}\r\n\r\n/**\r\n * Transform a DOM casing style object to a CSS casing style object.\r\n *\r\n * @param {Style} domCasing\r\n * @returns {Style}\r\n */\r\nfunction transformStylesToCssCasing(domCasing) {\r\n  /** @type {Style} */\r\n  const cssCasing = {}\r\n  /** @type {string} */\r\n  let from\r\n\r\n  for (from in domCasing) {\r\n    if (own.call(domCasing, from)) {\r\n      cssCasing[transformStyleToCssCasing(from)] = domCasing[from]\r\n    }\r\n  }\r\n\r\n  return cssCasing\r\n}\r\n\r\n/**\r\n * Transform a DOM casing style field to a CSS casing style field.\r\n *\r\n * @param {string} from\r\n * @returns {string}\r\n */\r\nfunction transformStyleToCssCasing(from) {\r\n  let to = from.replace(cap, toDash)\r\n  // Handle `ms-xxx` -> `-ms-xxx`.\r\n  if (to.slice(0, 3) === 'ms-') to = '-' + to\r\n  return to\r\n}\r\n\r\n/**\r\n * Make `$0` dash cased.\r\n *\r\n * @param {string} $0\r\n *   Capitalized ASCII leter.\r\n * @returns {string}\r\n *   Dash and lower letter.\r\n */\r\nfunction toDash($0) {\r\n  return '-' + $0.toLowerCase()\r\n}\r\n", "/**\r\n * @typedef {import('unist').Node} Node\r\n * @typedef {import('unist').Point} Point\r\n * @typedef {import('unist').Position} Position\r\n */\r\n\r\n/**\r\n * @typedef NodeLike\r\n * @property {string} type\r\n * @property {PositionLike | null | undefined} [position]\r\n *\r\n * @typedef PositionLike\r\n * @property {PointLike | null | undefined} [start]\r\n * @property {PointLike | null | undefined} [end]\r\n *\r\n * @typedef PointLike\r\n * @property {number | null | undefined} [line]\r\n * @property {number | null | undefined} [column]\r\n * @property {number | null | undefined} [offset]\r\n */\r\n\r\n/**\r\n * Get the ending point of `node`.\r\n *\r\n * @param node\r\n *   Node.\r\n * @returns\r\n *   Point.\r\n */\r\nexport const pointEnd = point('end')\r\n\r\n/**\r\n * Get the starting point of `node`.\r\n *\r\n * @param node\r\n *   Node.\r\n * @returns\r\n *   Point.\r\n */\r\nexport const pointStart = point('start')\r\n\r\n/**\r\n * Get the positional info of `node`.\r\n *\r\n * @param {'end' | 'start'} type\r\n *   Side.\r\n * @returns\r\n *   Getter.\r\n */\r\nfunction point(type) {\r\n  return point\r\n\r\n  /**\r\n   * Get the point info of `node` at a bound side.\r\n   *\r\n   * @param {Node | NodeLike | null | undefined} [node]\r\n   * @returns {Point | undefined}\r\n   */\r\n  function point(node) {\r\n    const point = (node && node.position && node.position[type]) || {}\r\n\r\n    if (\r\n      typeof point.line === 'number' &&\r\n      point.line > 0 &&\r\n      typeof point.column === 'number' &&\r\n      point.column > 0\r\n    ) {\r\n      return {\r\n        line: point.line,\r\n        column: point.column,\r\n        offset:\r\n          typeof point.offset === 'number' && point.offset > -1\r\n            ? point.offset\r\n            : undefined\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Get the positional info of `node`.\r\n *\r\n * @param {Node | NodeLike | null | undefined} [node]\r\n *   Node.\r\n * @returns {Position | undefined}\r\n *   Position.\r\n */\r\nexport function position(node) {\r\n  const start = pointStart(node)\r\n  const end = pointEnd(node)\r\n\r\n  if (start && end) {\r\n    return {start, end}\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('unist').Node} Node\r\n * @typedef {import('unist').Point} Point\r\n * @typedef {import('unist').Position} Position\r\n */\r\n\r\n/**\r\n * @typedef NodeLike\r\n * @property {string} type\r\n * @property {PositionLike | null | undefined} [position]\r\n *\r\n * @typedef PointLike\r\n * @property {number | null | undefined} [line]\r\n * @property {number | null | undefined} [column]\r\n * @property {number | null | undefined} [offset]\r\n *\r\n * @typedef PositionLike\r\n * @property {PointLike | null | undefined} [start]\r\n * @property {PointLike | null | undefined} [end]\r\n */\r\n\r\n/**\r\n * Serialize the positional info of a point, position (start and end points),\r\n * or node.\r\n *\r\n * @param {Node | NodeLike | Point | PointLike | Position | PositionLike | null | undefined} [value]\r\n *   Node, position, or point.\r\n * @returns {string}\r\n *   Pretty printed positional info of a node (`string`).\r\n *\r\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\r\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\r\n *   column, `s` for `start`, and `e` for end.\r\n *   An empty string (`''`) is returned if the given value is neither `node`,\r\n *   `position`, nor `point`.\r\n */\r\nexport function stringifyPosition(value) {\r\n  // Nothing.\r\n  if (!value || typeof value !== 'object') {\r\n    return ''\r\n  }\r\n\r\n  // Node.\r\n  if ('position' in value || 'type' in value) {\r\n    return position(value.position)\r\n  }\r\n\r\n  // Position.\r\n  if ('start' in value || 'end' in value) {\r\n    return position(value)\r\n  }\r\n\r\n  // Point.\r\n  if ('line' in value || 'column' in value) {\r\n    return point(value)\r\n  }\r\n\r\n  // ?\r\n  return ''\r\n}\r\n\r\n/**\r\n * @param {Point | PointLike | null | undefined} point\r\n * @returns {string}\r\n */\r\nfunction point(point) {\r\n  return index(point && point.line) + ':' + index(point && point.column)\r\n}\r\n\r\n/**\r\n * @param {Position | PositionLike | null | undefined} pos\r\n * @returns {string}\r\n */\r\nfunction position(pos) {\r\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\r\n}\r\n\r\n/**\r\n * @param {number | null | undefined} value\r\n * @returns {number}\r\n */\r\nfunction index(value) {\r\n  return value && typeof value === 'number' ? value : 1\r\n}\r\n", "/**\r\n * @typedef {import('unist').Node} Node\r\n * @typedef {import('unist').Point} Point\r\n * @typedef {import('unist').Position} Position\r\n */\r\n\r\n/**\r\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\r\n *\r\n * @typedef Options\r\n *   Configuration.\r\n * @property {Array<Node> | null | undefined} [ancestors]\r\n *   Stack of (inclusive) ancestor nodes surrounding the message (optional).\r\n * @property {Error | null | undefined} [cause]\r\n *   Original error cause of the message (optional).\r\n * @property {Point | Position | null | undefined} [place]\r\n *   Place of message (optional).\r\n * @property {string | null | undefined} [ruleId]\r\n *   Category of message (optional, example: `'my-rule'`).\r\n * @property {string | null | undefined} [source]\r\n *   Namespace of who sent the message (optional, example: `'my-package'`).\r\n */\r\n\r\nimport {stringifyPosition} from 'unist-util-stringify-position'\r\n\r\n/**\r\n * Message.\r\n */\r\nexport class VFileMessage extends Error {\r\n  /**\r\n   * Create a message for `reason`.\r\n   *\r\n   * > 🪦 **Note**: also has obsolete signatures.\r\n   *\r\n   * @overload\r\n   * @param {string} reason\r\n   * @param {Options | null | undefined} [options]\r\n   * @returns\r\n   *\r\n   * @overload\r\n   * @param {string} reason\r\n   * @param {Node | NodeLike | null | undefined} parent\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns\r\n   *\r\n   * @overload\r\n   * @param {string} reason\r\n   * @param {Point | Position | null | undefined} place\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns\r\n   *\r\n   * @overload\r\n   * @param {string} reason\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns\r\n   *\r\n   * @overload\r\n   * @param {Error | VFileMessage} cause\r\n   * @param {Node | NodeLike | null | undefined} parent\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns\r\n   *\r\n   * @overload\r\n   * @param {Error | VFileMessage} cause\r\n   * @param {Point | Position | null | undefined} place\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns\r\n   *\r\n   * @overload\r\n   * @param {Error | VFileMessage} cause\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns\r\n   *\r\n   * @param {Error | VFileMessage | string} causeOrReason\r\n   *   Reason for message, should use markdown.\r\n   * @param {Node | NodeLike | Options | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\r\n   *   Configuration (optional).\r\n   * @param {string | null | undefined} [origin]\r\n   *   Place in code where the message originates (example:\r\n   *   `'my-package:my-rule'` or `'my-rule'`).\r\n   * @returns\r\n   *   Instance of `VFileMessage`.\r\n   */\r\n  // eslint-disable-next-line complexity\r\n  constructor(causeOrReason, optionsOrParentOrPlace, origin) {\r\n    super()\r\n\r\n    if (typeof optionsOrParentOrPlace === 'string') {\r\n      origin = optionsOrParentOrPlace\r\n      optionsOrParentOrPlace = undefined\r\n    }\r\n\r\n    /** @type {string} */\r\n    let reason = ''\r\n    /** @type {Options} */\r\n    let options = {}\r\n    let legacyCause = false\r\n\r\n    if (optionsOrParentOrPlace) {\r\n      // Point.\r\n      if (\r\n        'line' in optionsOrParentOrPlace &&\r\n        'column' in optionsOrParentOrPlace\r\n      ) {\r\n        options = {place: optionsOrParentOrPlace}\r\n      }\r\n      // Position.\r\n      else if (\r\n        'start' in optionsOrParentOrPlace &&\r\n        'end' in optionsOrParentOrPlace\r\n      ) {\r\n        options = {place: optionsOrParentOrPlace}\r\n      }\r\n      // Node.\r\n      else if ('type' in optionsOrParentOrPlace) {\r\n        options = {\r\n          ancestors: [optionsOrParentOrPlace],\r\n          place: optionsOrParentOrPlace.position\r\n        }\r\n      }\r\n      // Options.\r\n      else {\r\n        options = {...optionsOrParentOrPlace}\r\n      }\r\n    }\r\n\r\n    if (typeof causeOrReason === 'string') {\r\n      reason = causeOrReason\r\n    }\r\n    // Error.\r\n    else if (!options.cause && causeOrReason) {\r\n      legacyCause = true\r\n      reason = causeOrReason.message\r\n      options.cause = causeOrReason\r\n    }\r\n\r\n    if (!options.ruleId && !options.source && typeof origin === 'string') {\r\n      const index = origin.indexOf(':')\r\n\r\n      if (index === -1) {\r\n        options.ruleId = origin\r\n      } else {\r\n        options.source = origin.slice(0, index)\r\n        options.ruleId = origin.slice(index + 1)\r\n      }\r\n    }\r\n\r\n    if (!options.place && options.ancestors && options.ancestors) {\r\n      const parent = options.ancestors[options.ancestors.length - 1]\r\n\r\n      if (parent) {\r\n        options.place = parent.position\r\n      }\r\n    }\r\n\r\n    const start =\r\n      options.place && 'start' in options.place\r\n        ? options.place.start\r\n        : options.place\r\n\r\n    /* eslint-disable no-unused-expressions */\r\n    /**\r\n     * Stack of ancestor nodes surrounding the message.\r\n     *\r\n     * @type {Array<Node> | undefined}\r\n     */\r\n    this.ancestors = options.ancestors || undefined\r\n\r\n    /**\r\n     * Original error cause of the message.\r\n     *\r\n     * @type {Error | undefined}\r\n     */\r\n    this.cause = options.cause || undefined\r\n\r\n    /**\r\n     * Starting column of message.\r\n     *\r\n     * @type {number | undefined}\r\n     */\r\n    this.column = start ? start.column : undefined\r\n\r\n    /**\r\n     * State of problem.\r\n     *\r\n     * * `true` — error, file not usable\r\n     * * `false` — warning, change may be needed\r\n     * * `undefined` — change likely not needed\r\n     *\r\n     * @type {boolean | null | undefined}\r\n     */\r\n    this.fatal = undefined\r\n\r\n    /**\r\n     * Path of a file (used throughout the `VFile` ecosystem).\r\n     *\r\n     * @type {string | undefined}\r\n     */\r\n    this.file\r\n\r\n    // Field from `Error`.\r\n    /**\r\n     * Reason for message.\r\n     *\r\n     * @type {string}\r\n     */\r\n    this.message = reason\r\n\r\n    /**\r\n     * Starting line of error.\r\n     *\r\n     * @type {number | undefined}\r\n     */\r\n    this.line = start ? start.line : undefined\r\n\r\n    // Field from `Error`.\r\n    /**\r\n     * Serialized positional info of message.\r\n     *\r\n     * On normal errors, this would be something like `ParseError`, buit in\r\n     * `VFile` messages we use this space to show where an error happened.\r\n     */\r\n    this.name = stringifyPosition(options.place) || '1:1'\r\n\r\n    /**\r\n     * Place of message.\r\n     *\r\n     * @type {Point | Position | undefined}\r\n     */\r\n    this.place = options.place || undefined\r\n\r\n    /**\r\n     * Reason for message, should use markdown.\r\n     *\r\n     * @type {string}\r\n     */\r\n    this.reason = this.message\r\n\r\n    /**\r\n     * Category of message (example: `'my-rule'`).\r\n     *\r\n     * @type {string | undefined}\r\n     */\r\n    this.ruleId = options.ruleId || undefined\r\n\r\n    /**\r\n     * Namespace of message (example: `'my-package'`).\r\n     *\r\n     * @type {string | undefined}\r\n     */\r\n    this.source = options.source || undefined\r\n\r\n    // Field from `Error`.\r\n    /**\r\n     * Stack of message.\r\n     *\r\n     * This is used by normal errors to show where something happened in\r\n     * programming code, irrelevant for `VFile` messages,\r\n     *\r\n     * @type {string}\r\n     */\r\n    this.stack =\r\n      legacyCause && options.cause && typeof options.cause.stack === 'string'\r\n        ? options.cause.stack\r\n        : ''\r\n\r\n    // The following fields are “well known”.\r\n    // Not standard.\r\n    // Feel free to add other non-standard fields to your messages.\r\n\r\n    /**\r\n     * Specify the source value that’s being reported, which is deemed\r\n     * incorrect.\r\n     *\r\n     * @type {string | undefined}\r\n     */\r\n    this.actual\r\n\r\n    /**\r\n     * Suggest acceptable values that can be used instead of `actual`.\r\n     *\r\n     * @type {Array<string> | undefined}\r\n     */\r\n    this.expected\r\n\r\n    /**\r\n     * Long form description of the message (you should use markdown).\r\n     *\r\n     * @type {string | undefined}\r\n     */\r\n    this.note\r\n\r\n    /**\r\n     * Link to docs for the message.\r\n     *\r\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\r\n     * > to `new URL(x)`.\r\n     *\r\n     * @type {string | undefined}\r\n     */\r\n    this.url\r\n    /* eslint-enable no-unused-expressions */\r\n  }\r\n}\r\n\r\nVFileMessage.prototype.file = ''\r\nVFileMessage.prototype.name = ''\r\nVFileMessage.prototype.reason = ''\r\nVFileMessage.prototype.message = ''\r\nVFileMessage.prototype.stack = ''\r\nVFileMessage.prototype.column = undefined\r\nVFileMessage.prototype.line = undefined\r\nVFileMessage.prototype.ancestors = undefined\r\nVFileMessage.prototype.cause = undefined\r\nVFileMessage.prototype.fatal = undefined\r\nVFileMessage.prototype.place = undefined\r\nVFileMessage.prototype.ruleId = undefined\r\nVFileMessage.prototype.source = undefined\r\n", "/**\r\n * HTML URL properties.\r\n *\r\n * Each key is a property name and each value is a list of tag names it applies\r\n * to or `null` if it applies to all elements.\r\n *\r\n * @type {Record<string, Array<string> | null>}\r\n */\r\nexport const urlAttributes = {\r\n  action: ['form'],\r\n  cite: ['blockquote', 'del', 'ins', 'q'],\r\n  data: ['object'],\r\n  formAction: ['button', 'input'],\r\n  href: ['a', 'area', 'base', 'link'],\r\n  icon: ['menuitem'],\r\n  itemId: null,\r\n  manifest: ['html'],\r\n  ping: ['a', 'area'],\r\n  poster: ['video'],\r\n  src: [\r\n    'audio',\r\n    'embed',\r\n    'iframe',\r\n    'img',\r\n    'input',\r\n    'script',\r\n    'source',\r\n    'track',\r\n    'video'\r\n  ]\r\n}\r\n", "/**\r\n * @import {Element, Nodes, Parents, Root} from 'hast'\r\n * @import {Root as MdastRoot} from 'mdast'\r\n * @import {ComponentType, JSX, ReactElement, ReactNode} from 'react'\r\n * @import {Options as RemarkRehypeOptions} from 'remark-rehype'\r\n * @import {BuildVisitor} from 'unist-util-visit'\r\n * @import {PluggableList, Processor} from 'unified'\r\n */\r\n\r\n/**\r\n * @callback AllowElement\r\n *   Filter elements.\r\n * @param {Readonly<Element>} element\r\n *   Element to check.\r\n * @param {number} index\r\n *   Index of `element` in `parent`.\r\n * @param {Readonly<Parents> | undefined} parent\r\n *   Parent of `element`.\r\n * @returns {boolean | null | undefined}\r\n *   Whether to allow `element` (default: `false`).\r\n */\r\n\r\n/**\r\n * @typedef ExtraProps\r\n *   Extra fields we pass.\r\n * @property {Element | undefined} [node]\r\n *   passed when `passNode` is on.\r\n */\r\n\r\n/**\r\n * @typedef {{\r\n *   [Key in keyof JSX.IntrinsicElements]?: ComponentType<JSX.IntrinsicElements[Key] & ExtraProps> | keyof JSX.IntrinsicElements\r\n * }} Components\r\n *   Map tag names to components.\r\n */\r\n\r\n/**\r\n * @typedef Deprecation\r\n *   Deprecation.\r\n * @property {string} from\r\n *   Old field.\r\n * @property {string} id\r\n *   ID in readme.\r\n * @property {keyof Options} [to]\r\n *   New field.\r\n */\r\n\r\n/**\r\n * @typedef Options\r\n *   Configuration.\r\n * @property {AllowElement | null | undefined} [allowElement]\r\n *   Filter elements (optional);\r\n *   `allowedElements` / `disallowedElements` is used first.\r\n * @property {ReadonlyArray<string> | null | undefined} [allowedElements]\r\n *   Tag names to allow (default: all tag names);\r\n *   cannot combine w/ `disallowedElements`.\r\n * @property {string | null | undefined} [children]\r\n *   Markdown.\r\n * @property {Components | null | undefined} [components]\r\n *   Map tag names to components.\r\n * @property {ReadonlyArray<string> | null | undefined} [disallowedElements]\r\n *   Tag names to disallow (default: `[]`);\r\n *   cannot combine w/ `allowedElements`.\r\n * @property {PluggableList | null | undefined} [rehypePlugins]\r\n *   List of rehype plugins to use.\r\n * @property {PluggableList | null | undefined} [remarkPlugins]\r\n *   List of remark plugins to use.\r\n * @property {Readonly<RemarkRehypeOptions> | null | undefined} [remarkRehypeOptions]\r\n *   Options to pass through to `remark-rehype`.\r\n * @property {boolean | null | undefined} [skipHtml=false]\r\n *   Ignore HTML in markdown completely (default: `false`).\r\n * @property {boolean | null | undefined} [unwrapDisallowed=false]\r\n *   Extract (unwrap) what’s in disallowed elements (default: `false`);\r\n *   normally when say `strong` is not allowed, it and it’s children are dropped,\r\n *   with `unwrapDisallowed` the element itself is replaced by its children.\r\n * @property {UrlTransform | null | undefined} [urlTransform]\r\n *   Change URLs (default: `defaultUrlTransform`)\r\n */\r\n\r\n/**\r\n * @typedef HooksOptionsOnly\r\n *   Configuration specifically for {@linkcode MarkdownHooks}.\r\n * @property {ReactNode | null | undefined} [fallback]\r\n *   Content to render while the processor processing the markdown (optional).\r\n */\r\n\r\n/**\r\n * @typedef {Options & HooksOptionsOnly} HooksOptions\r\n *   Configuration for {@linkcode MarkdownHooks};\r\n *   extends the regular {@linkcode Options} with a `fallback` prop.\r\n */\r\n\r\n/**\r\n * @callback UrlTransform\r\n *   Transform all URLs.\r\n * @param {string} url\r\n *   URL.\r\n * @param {string} key\r\n *   Property name (example: `'href'`).\r\n * @param {Readonly<Element>} node\r\n *   Node.\r\n * @returns {string | null | undefined}\r\n *   Transformed URL (optional).\r\n */\r\n\r\nimport {unreachable} from 'devlop'\r\nimport {toJsxRuntime} from 'hast-util-to-jsx-runtime'\r\nimport {urlAttributes} from 'html-url-attributes'\r\nimport {Fragment, jsx, jsxs} from 'react/jsx-runtime'\r\nimport {useEffect, useState} from 'react'\r\nimport remarkParse from 'remark-parse'\r\nimport remarkRehype from 'remark-rehype'\r\nimport {unified} from 'unified'\r\nimport {visit} from 'unist-util-visit'\r\nimport {VFile} from 'vfile'\r\n\r\nconst changelog =\r\n  'https://github.com/remarkjs/react-markdown/blob/main/changelog.md'\r\n\r\n/** @type {PluggableList} */\r\nconst emptyPlugins = []\r\n/** @type {Readonly<RemarkRehypeOptions>} */\r\nconst emptyRemarkRehypeOptions = {allowDangerousHtml: true}\r\nconst safeProtocol = /^(https?|ircs?|mailto|xmpp)$/i\r\n\r\n// Mutable because we `delete` any time it’s used and a message is sent.\r\n/** @type {ReadonlyArray<Readonly<Deprecation>>} */\r\nconst deprecations = [\r\n  {from: 'astPlugins', id: 'remove-buggy-html-in-markdown-parser'},\r\n  {from: 'allowDangerousHtml', id: 'remove-buggy-html-in-markdown-parser'},\r\n  {\r\n    from: 'allowNode',\r\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\r\n    to: 'allowElement'\r\n  },\r\n  {\r\n    from: 'allowedTypes',\r\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\r\n    to: 'allowedElements'\r\n  },\r\n  {from: 'className', id: 'remove-classname'},\r\n  {\r\n    from: 'disallowedTypes',\r\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\r\n    to: 'disallowedElements'\r\n  },\r\n  {from: 'escapeHtml', id: 'remove-buggy-html-in-markdown-parser'},\r\n  {from: 'includeElementIndex', id: '#remove-includeelementindex'},\r\n  {\r\n    from: 'includeNodeIndex',\r\n    id: 'change-includenodeindex-to-includeelementindex'\r\n  },\r\n  {from: 'linkTarget', id: 'remove-linktarget'},\r\n  {from: 'plugins', id: 'change-plugins-to-remarkplugins', to: 'remarkPlugins'},\r\n  {from: 'rawSourcePos', id: '#remove-rawsourcepos'},\r\n  {from: 'renderers', id: 'change-renderers-to-components', to: 'components'},\r\n  {from: 'source', id: 'change-source-to-children', to: 'children'},\r\n  {from: 'sourcePos', id: '#remove-sourcepos'},\r\n  {from: 'transformImageUri', id: '#add-urltransform', to: 'urlTransform'},\r\n  {from: 'transformLinkUri', id: '#add-urltransform', to: 'urlTransform'}\r\n]\r\n\r\n/**\r\n * Component to render markdown.\r\n *\r\n * This is a synchronous component.\r\n * When using async plugins,\r\n * see {@linkcode MarkdownAsync} or {@linkcode MarkdownHooks}.\r\n *\r\n * @param {Readonly<Options>} options\r\n *   Props.\r\n * @returns {ReactElement}\r\n *   React element.\r\n */\r\nexport function Markdown(options) {\r\n  const processor = createProcessor(options)\r\n  const file = createFile(options)\r\n  return post(processor.runSync(processor.parse(file), file), options)\r\n}\r\n\r\n/**\r\n * Component to render markdown with support for async plugins\r\n * through async/await.\r\n *\r\n * Components returning promises are supported on the server.\r\n * For async support on the client,\r\n * see {@linkcode MarkdownHooks}.\r\n *\r\n * @param {Readonly<Options>} options\r\n *   Props.\r\n * @returns {Promise<ReactElement>}\r\n *   Promise to a React element.\r\n */\r\nexport async function MarkdownAsync(options) {\r\n  const processor = createProcessor(options)\r\n  const file = createFile(options)\r\n  const tree = await processor.run(processor.parse(file), file)\r\n  return post(tree, options)\r\n}\r\n\r\n/**\r\n * Component to render markdown with support for async plugins through hooks.\r\n *\r\n * This uses `useEffect` and `useState` hooks.\r\n * Hooks run on the client and do not immediately render something.\r\n * For async support on the server,\r\n * see {@linkcode MarkdownAsync}.\r\n *\r\n * @param {Readonly<HooksOptions>} options\r\n *   Props.\r\n * @returns {ReactNode}\r\n *   React node.\r\n */\r\nexport function MarkdownHooks(options) {\r\n  const processor = createProcessor(options)\r\n  const [error, setError] = useState(\r\n    /** @type {Error | undefined} */ (undefined)\r\n  )\r\n  const [tree, setTree] = useState(/** @type {Root | undefined} */ (undefined))\r\n\r\n  useEffect(\r\n    function () {\r\n      let cancelled = false\r\n      const file = createFile(options)\r\n\r\n      processor.run(processor.parse(file), file, function (error, tree) {\r\n        if (!cancelled) {\r\n          setError(error)\r\n          setTree(tree)\r\n        }\r\n      })\r\n\r\n      /**\r\n       * @returns {undefined}\r\n       *   Nothing.\r\n       */\r\n      return function () {\r\n        cancelled = true\r\n      }\r\n    },\r\n    [\r\n      options.children,\r\n      options.rehypePlugins,\r\n      options.remarkPlugins,\r\n      options.remarkRehypeOptions\r\n    ]\r\n  )\r\n\r\n  if (error) throw error\r\n\r\n  return tree ? post(tree, options) : options.fallback\r\n}\r\n\r\n/**\r\n * Set up the `unified` processor.\r\n *\r\n * @param {Readonly<Options>} options\r\n *   Props.\r\n * @returns {Processor<MdastRoot, MdastRoot, Root, undefined, undefined>}\r\n *   Result.\r\n */\r\nfunction createProcessor(options) {\r\n  const rehypePlugins = options.rehypePlugins || emptyPlugins\r\n  const remarkPlugins = options.remarkPlugins || emptyPlugins\r\n  const remarkRehypeOptions = options.remarkRehypeOptions\r\n    ? {...options.remarkRehypeOptions, ...emptyRemarkRehypeOptions}\r\n    : emptyRemarkRehypeOptions\r\n\r\n  const processor = unified()\r\n    .use(remarkParse)\r\n    .use(remarkPlugins)\r\n    .use(remarkRehype, remarkRehypeOptions)\r\n    .use(rehypePlugins)\r\n\r\n  return processor\r\n}\r\n\r\n/**\r\n * Set up the virtual file.\r\n *\r\n * @param {Readonly<Options>} options\r\n *   Props.\r\n * @returns {VFile}\r\n *   Result.\r\n */\r\nfunction createFile(options) {\r\n  const children = options.children || ''\r\n  const file = new VFile()\r\n\r\n  if (typeof children === 'string') {\r\n    file.value = children\r\n  } else {\r\n    unreachable(\r\n      'Unexpected value `' +\r\n        children +\r\n        '` for `children` prop, expected `string`'\r\n    )\r\n  }\r\n\r\n  return file\r\n}\r\n\r\n/**\r\n * Process the result from unified some more.\r\n *\r\n * @param {Nodes} tree\r\n *   Tree.\r\n * @param {Readonly<Options>} options\r\n *   Props.\r\n * @returns {ReactElement}\r\n *   React element.\r\n */\r\nfunction post(tree, options) {\r\n  const allowedElements = options.allowedElements\r\n  const allowElement = options.allowElement\r\n  const components = options.components\r\n  const disallowedElements = options.disallowedElements\r\n  const skipHtml = options.skipHtml\r\n  const unwrapDisallowed = options.unwrapDisallowed\r\n  const urlTransform = options.urlTransform || defaultUrlTransform\r\n\r\n  for (const deprecation of deprecations) {\r\n    if (Object.hasOwn(options, deprecation.from)) {\r\n      unreachable(\r\n        'Unexpected `' +\r\n          deprecation.from +\r\n          '` prop, ' +\r\n          (deprecation.to\r\n            ? 'use `' + deprecation.to + '` instead'\r\n            : 'remove it') +\r\n          ' (see <' +\r\n          changelog +\r\n          '#' +\r\n          deprecation.id +\r\n          '> for more info)'\r\n      )\r\n    }\r\n  }\r\n\r\n  if (allowedElements && disallowedElements) {\r\n    unreachable(\r\n      'Unexpected combined `allowedElements` and `disallowedElements`, expected one or the other'\r\n    )\r\n  }\r\n\r\n  visit(tree, transform)\r\n\r\n  return toJsxRuntime(tree, {\r\n    Fragment,\r\n    components,\r\n    ignoreInvalidStyle: true,\r\n    jsx,\r\n    jsxs,\r\n    passKeys: true,\r\n    passNode: true\r\n  })\r\n\r\n  /** @type {BuildVisitor<Root>} */\r\n  function transform(node, index, parent) {\r\n    if (node.type === 'raw' && parent && typeof index === 'number') {\r\n      if (skipHtml) {\r\n        parent.children.splice(index, 1)\r\n      } else {\r\n        parent.children[index] = {type: 'text', value: node.value}\r\n      }\r\n\r\n      return index\r\n    }\r\n\r\n    if (node.type === 'element') {\r\n      /** @type {string} */\r\n      let key\r\n\r\n      for (key in urlAttributes) {\r\n        if (\r\n          Object.hasOwn(urlAttributes, key) &&\r\n          Object.hasOwn(node.properties, key)\r\n        ) {\r\n          const value = node.properties[key]\r\n          const test = urlAttributes[key]\r\n          if (test === null || test.includes(node.tagName)) {\r\n            node.properties[key] = urlTransform(String(value || ''), key, node)\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (node.type === 'element') {\r\n      let remove = allowedElements\r\n        ? !allowedElements.includes(node.tagName)\r\n        : disallowedElements\r\n          ? disallowedElements.includes(node.tagName)\r\n          : false\r\n\r\n      if (!remove && allowElement && typeof index === 'number') {\r\n        remove = !allowElement(node, index, parent)\r\n      }\r\n\r\n      if (remove && parent && typeof index === 'number') {\r\n        if (unwrapDisallowed && node.children) {\r\n          parent.children.splice(index, 1, ...node.children)\r\n        } else {\r\n          parent.children.splice(index, 1)\r\n        }\r\n\r\n        return index\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Make a URL safe.\r\n *\r\n * @satisfies {UrlTransform}\r\n * @param {string} value\r\n *   URL.\r\n * @returns {string}\r\n *   Safe URL.\r\n */\r\nexport function defaultUrlTransform(value) {\r\n  // Same as:\r\n  // <https://github.com/micromark/micromark/blob/929275e/packages/micromark-util-sanitize-uri/dev/index.js#L34>\r\n  // But without the `encode` part.\r\n  const colon = value.indexOf(':')\r\n  const questionMark = value.indexOf('?')\r\n  const numberSign = value.indexOf('#')\r\n  const slash = value.indexOf('/')\r\n\r\n  if (\r\n    // If there is no protocol, it’s relative.\r\n    colon === -1 ||\r\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\r\n    (slash !== -1 && colon > slash) ||\r\n    (questionMark !== -1 && colon > questionMark) ||\r\n    (numberSign !== -1 && colon > numberSign) ||\r\n    // It is a protocol, it should be allowed.\r\n    safeProtocol.test(value.slice(0, colon))\r\n  ) {\r\n    return value\r\n  }\r\n\r\n  return ''\r\n}\r\n", "/**\r\n * While micromark is a lexer/tokenizer, the common case of going from markdown\r\n * to html is currently built in as this module, even though the parts can be\r\n * used separately to build ASTs, CSTs, or many other output formats.\r\n *\r\n * Having an HTML compiler built in is useful because it allows us to check for\r\n * compliancy to CommonMark, the de facto norm of markdown, specified in roughly\r\n * 600 input/output cases.\r\n *\r\n * This module has an interface that accepts lists of events instead of the\r\n * whole at once, however, because markdown can’t be truly streaming, we buffer\r\n * events before processing and outputting the final result.\r\n */\r\n\r\n/**\r\n * @import {\r\n *   CompileContext,\r\n *   CompileData,\r\n *   CompileOptions,\r\n *   Compile,\r\n *   Definition,\r\n *   Event,\r\n *   Handle,\r\n *   HtmlExtension,\r\n *   LineEnding,\r\n *   NormalizedHtmlExtension,\r\n *   Token\r\n * } from 'micromark-util-types'\r\n */\r\n\r\n/**\r\n * @typedef Media\r\n * @property {boolean | undefined} [image]\r\n * @property {string | undefined} [labelId]\r\n * @property {string | undefined} [label]\r\n * @property {string | undefined} [referenceId]\r\n * @property {string | undefined} [destination]\r\n * @property {string | undefined} [title]\r\n */\r\n\r\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\r\nimport {ok as assert} from 'devlop'\r\nimport {push} from 'micromark-util-chunked'\r\nimport {combineHtmlExtensions} from 'micromark-util-combine-extensions'\r\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\r\nimport {encode as _encode} from 'micromark-util-encode'\r\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\r\nimport {sanitizeUri} from 'micromark-util-sanitize-uri'\r\nimport {codes, constants, types} from 'micromark-util-symbol'\r\n\r\nconst hasOwnProperty = {}.hasOwnProperty\r\n\r\n/**\r\n * These two are allowlists of safe protocols for full URLs in respectively the\r\n * `href` (on `<a>`) and `src` (on `<img>`) attributes.\r\n * They are based on what is allowed on GitHub,\r\n * <https://github.com/syntax-tree/hast-util-sanitize/blob/9275b21/lib/github.json#L31>\r\n */\r\nconst protocolHref = /^(https?|ircs?|mailto|xmpp)$/i\r\nconst protocolSource = /^https?$/i\r\n\r\n/**\r\n * @param {CompileOptions | null | undefined} [options]\r\n * @returns {Compile}\r\n */\r\nexport function compile(options) {\r\n  const settings = options || {}\r\n\r\n  /**\r\n   * Tags is needed because according to markdown, links and emphasis and\r\n   * whatnot can exist in images, however, as HTML doesn’t allow content in\r\n   * images, the tags are ignored in the `alt` attribute, but the content\r\n   * remains.\r\n   *\r\n   * @type {boolean | undefined}\r\n   */\r\n  let tags = true\r\n\r\n  /**\r\n   * An object to track identifiers to media (URLs and titles) defined with\r\n   * definitions.\r\n   *\r\n   * @type {Record<string, Definition>}\r\n   */\r\n  const definitions = {}\r\n\r\n  /**\r\n   * A lot of the handlers need to capture some of the output data, modify it\r\n   * somehow, and then deal with it.\r\n   * We do that by tracking a stack of buffers, that can be opened (with\r\n   * `buffer`) and closed (with `resume`) to access them.\r\n   *\r\n   * @type {Array<Array<string>>}\r\n   */\r\n  const buffers = [[]]\r\n\r\n  /**\r\n   * As we can have links in images and the other way around, where the deepest\r\n   * ones are closed first, we need to track which one we’re in.\r\n   *\r\n   * @type {Array<Media>}\r\n   */\r\n  const mediaStack = []\r\n\r\n  /**\r\n   * Same as `mediaStack` for tightness, which is specific to lists.\r\n   * We need to track if we’re currently in a tight or loose container.\r\n   *\r\n   * @type {Array<boolean>}\r\n   */\r\n  const tightStack = []\r\n\r\n  /** @type {HtmlExtension} */\r\n  const defaultHandlers = {\r\n    enter: {\r\n      blockQuote: onenterblockquote,\r\n      codeFenced: onentercodefenced,\r\n      codeFencedFenceInfo: buffer,\r\n      codeFencedFenceMeta: buffer,\r\n      codeIndented: onentercodeindented,\r\n      codeText: onentercodetext,\r\n      content: onentercontent,\r\n      definition: onenterdefinition,\r\n      definitionDestinationString: onenterdefinitiondestinationstring,\r\n      definitionLabelString: buffer,\r\n      definitionTitleString: buffer,\r\n      emphasis: onenteremphasis,\r\n      htmlFlow: onenterhtmlflow,\r\n      htmlText: onenterhtml,\r\n      image: onenterimage,\r\n      label: buffer,\r\n      link: onenterlink,\r\n      listItemMarker: onenterlistitemmarker,\r\n      listItemValue: onenterlistitemvalue,\r\n      listOrdered: onenterlistordered,\r\n      listUnordered: onenterlistunordered,\r\n      paragraph: onenterparagraph,\r\n      reference: buffer,\r\n      resource: onenterresource,\r\n      resourceDestinationString: onenterresourcedestinationstring,\r\n      resourceTitleString: buffer,\r\n      setextHeading: onentersetextheading,\r\n      strong: onenterstrong\r\n    },\r\n    exit: {\r\n      atxHeading: onexitatxheading,\r\n      atxHeadingSequence: onexitatxheadingsequence,\r\n      autolinkEmail: onexitautolinkemail,\r\n      autolinkProtocol: onexitautolinkprotocol,\r\n      blockQuote: onexitblockquote,\r\n      characterEscapeValue: onexitdata,\r\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\r\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\r\n      characterReferenceValue: onexitcharacterreferencevalue,\r\n      codeFenced: onexitflowcode,\r\n      codeFencedFence: onexitcodefencedfence,\r\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\r\n      codeFencedFenceMeta: onresumedrop,\r\n      codeFlowValue: onexitcodeflowvalue,\r\n      codeIndented: onexitflowcode,\r\n      codeText: onexitcodetext,\r\n      codeTextData: onexitdata,\r\n      data: onexitdata,\r\n      definition: onexitdefinition,\r\n      definitionDestinationString: onexitdefinitiondestinationstring,\r\n      definitionLabelString: onexitdefinitionlabelstring,\r\n      definitionTitleString: onexitdefinitiontitlestring,\r\n      emphasis: onexitemphasis,\r\n      hardBreakEscape: onexithardbreak,\r\n      hardBreakTrailing: onexithardbreak,\r\n      htmlFlow: onexithtml,\r\n      htmlFlowData: onexitdata,\r\n      htmlText: onexithtml,\r\n      htmlTextData: onexitdata,\r\n      image: onexitmedia,\r\n      label: onexitlabel,\r\n      labelText: onexitlabeltext,\r\n      lineEnding: onexitlineending,\r\n      link: onexitmedia,\r\n      listOrdered: onexitlistordered,\r\n      listUnordered: onexitlistunordered,\r\n      paragraph: onexitparagraph,\r\n      reference: onresumedrop,\r\n      referenceString: onexitreferencestring,\r\n      resource: onresumedrop,\r\n      resourceDestinationString: onexitresourcedestinationstring,\r\n      resourceTitleString: onexitresourcetitlestring,\r\n      setextHeading: onexitsetextheading,\r\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\r\n      setextHeadingText: onexitsetextheadingtext,\r\n      strong: onexitstrong,\r\n      thematicBreak: onexitthematicbreak\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Combine the HTML extensions with the default handlers.\r\n   * An HTML extension is an object whose fields are either `enter` or `exit`\r\n   * (reflecting whether a token is entered or exited).\r\n   * The values at such objects are names of tokens mapping to handlers.\r\n   * Handlers are called, respectively when a token is opener or closed, with\r\n   * that token, and a context as `this`.\r\n   */\r\n  const handlers = /** @type {NormalizedHtmlExtension} */ (\r\n    combineHtmlExtensions([defaultHandlers, ...(settings.htmlExtensions || [])])\r\n  )\r\n\r\n  /**\r\n   * Handlers do often need to keep track of some state.\r\n   * That state is provided here as a key-value store (an object).\r\n   *\r\n   * @type {CompileData}\r\n   */\r\n  const data = {\r\n    definitions,\r\n    tightStack\r\n  }\r\n\r\n  /**\r\n   * The context for handlers references a couple of useful functions.\r\n   * In handlers from extensions, those can be accessed at `this`.\r\n   * For the handlers here, they can be accessed directly.\r\n   *\r\n   * @type {Omit<CompileContext, 'sliceSerialize'>}\r\n   */\r\n  const context = {\r\n    buffer,\r\n    encode,\r\n    getData,\r\n    lineEndingIfNeeded,\r\n    options: settings,\r\n    raw,\r\n    resume,\r\n    setData,\r\n    tag\r\n  }\r\n\r\n  /**\r\n   * Generally, micromark copies line endings (`'\\r'`, `'\\n'`, `'\\r\\n'`) in the\r\n   * markdown document over to the compiled HTML.\r\n   * In some cases, such as `> a`, CommonMark requires that extra line endings\r\n   * are added: `<blockquote>\\n<p>a</p>\\n</blockquote>`.\r\n   * This variable hold the default line ending when given (or `undefined`),\r\n   * and in the latter case will be updated to the first found line ending if\r\n   * there is one.\r\n   */\r\n  let lineEndingStyle = settings.defaultLineEnding\r\n\r\n  // Return the function that handles a slice of events.\r\n  return compile\r\n\r\n  /**\r\n   * Deal w/ a slice of events.\r\n   * Return either the empty string if there’s nothing of note to return, or the\r\n   * result when done.\r\n   *\r\n   * @param {ReadonlyArray<Event>} events\r\n   * @returns {string}\r\n   */\r\n  function compile(events) {\r\n    let index = -1\r\n    let start = 0\r\n    /** @type {Array<number>} */\r\n    const listStack = []\r\n    // As definitions can come after references, we need to figure out the media\r\n    // (urls and titles) defined by them before handling the references.\r\n    // So, we do sort of what HTML does: put metadata at the start (in head), and\r\n    // then put content after (`body`).\r\n    /** @type {Array<Event>} */\r\n    let head = []\r\n    /** @type {Array<Event>} */\r\n    let body = []\r\n\r\n    while (++index < events.length) {\r\n      // Figure out the line ending style used in the document.\r\n      if (\r\n        !lineEndingStyle &&\r\n        (events[index][1].type === types.lineEnding ||\r\n          events[index][1].type === types.lineEndingBlank)\r\n      ) {\r\n        lineEndingStyle = /** @type {LineEnding} */ (\r\n          events[index][2].sliceSerialize(events[index][1])\r\n        )\r\n      }\r\n\r\n      // Preprocess lists to infer whether the list is loose or not.\r\n      if (\r\n        events[index][1].type === types.listOrdered ||\r\n        events[index][1].type === types.listUnordered\r\n      ) {\r\n        if (events[index][0] === 'enter') {\r\n          listStack.push(index)\r\n        } else {\r\n          prepareList(events.slice(listStack.pop(), index))\r\n        }\r\n      }\r\n\r\n      // Move definitions to the front.\r\n      if (events[index][1].type === types.definition) {\r\n        if (events[index][0] === 'enter') {\r\n          body = push(body, events.slice(start, index))\r\n          start = index\r\n        } else {\r\n          head = push(head, events.slice(start, index + 1))\r\n          start = index + 1\r\n        }\r\n      }\r\n    }\r\n\r\n    head = push(head, body)\r\n    head = push(head, events.slice(start))\r\n    index = -1\r\n    const result = head\r\n\r\n    // Handle the start of the document, if defined.\r\n    if (handlers.enter.null) {\r\n      handlers.enter.null.call(context)\r\n    }\r\n\r\n    // Handle all events.\r\n    while (++index < events.length) {\r\n      const handles = handlers[result[index][0]]\r\n      const kind = result[index][1].type\r\n      const handle = handles[kind]\r\n\r\n      if (hasOwnProperty.call(handles, kind) && handle) {\r\n        handle.call(\r\n          {sliceSerialize: result[index][2].sliceSerialize, ...context},\r\n          result[index][1]\r\n        )\r\n      }\r\n    }\r\n\r\n    // Handle the end of the document, if defined.\r\n    if (handlers.exit.null) {\r\n      handlers.exit.null.call(context)\r\n    }\r\n\r\n    return buffers[0].join('')\r\n  }\r\n\r\n  /**\r\n   * Figure out whether lists are loose or not.\r\n   *\r\n   * @param {ReadonlyArray<Event>} slice\r\n   * @returns {undefined}\r\n   */\r\n  function prepareList(slice) {\r\n    const length = slice.length\r\n    let index = 0 // Skip open.\r\n    let containerBalance = 0\r\n    let loose = false\r\n    /** @type {boolean | undefined} */\r\n    let atMarker\r\n\r\n    while (++index < length) {\r\n      const event = slice[index]\r\n\r\n      if (event[1]._container) {\r\n        atMarker = undefined\r\n\r\n        if (event[0] === 'enter') {\r\n          containerBalance++\r\n        } else {\r\n          containerBalance--\r\n        }\r\n      } else\r\n        switch (event[1].type) {\r\n          case types.listItemPrefix: {\r\n            if (event[0] === 'exit') {\r\n              atMarker = true\r\n            }\r\n\r\n            break\r\n          }\r\n\r\n          case types.linePrefix: {\r\n            // Ignore\r\n\r\n            break\r\n          }\r\n\r\n          case types.lineEndingBlank: {\r\n            if (event[0] === 'enter' && !containerBalance) {\r\n              if (atMarker) {\r\n                atMarker = undefined\r\n              } else {\r\n                loose = true\r\n              }\r\n            }\r\n\r\n            break\r\n          }\r\n\r\n          default: {\r\n            atMarker = undefined\r\n          }\r\n        }\r\n    }\r\n\r\n    slice[0][1]._loose = loose\r\n  }\r\n\r\n  /**\r\n   * @type {CompileContext['setData']}\r\n   */\r\n  function setData(key, value) {\r\n    // @ts-expect-error: assume `value` is omitted (`undefined` is passed) only\r\n    // if allowed.\r\n    data[key] = value\r\n  }\r\n\r\n  /**\r\n   * @type {CompileContext['getData']}\r\n   */\r\n  function getData(key) {\r\n    return data[key]\r\n  }\r\n\r\n  /** @type {CompileContext['buffer']} */\r\n  function buffer() {\r\n    buffers.push([])\r\n  }\r\n\r\n  /** @type {CompileContext['resume']} */\r\n  function resume() {\r\n    const buf = buffers.pop()\r\n    assert(buf !== undefined, 'Cannot resume w/o buffer')\r\n    return buf.join('')\r\n  }\r\n\r\n  /** @type {CompileContext['tag']} */\r\n  function tag(value) {\r\n    if (!tags) return\r\n    setData('lastWasTag', true)\r\n    buffers[buffers.length - 1].push(value)\r\n  }\r\n\r\n  /** @type {CompileContext['raw']} */\r\n  function raw(value) {\r\n    setData('lastWasTag')\r\n    buffers[buffers.length - 1].push(value)\r\n  }\r\n\r\n  /**\r\n   * Output an extra line ending.\r\n   *\r\n   * @returns {undefined}\r\n   */\r\n  function lineEnding() {\r\n    raw(lineEndingStyle || '\\n')\r\n  }\r\n\r\n  /** @type {CompileContext['lineEndingIfNeeded']} */\r\n  function lineEndingIfNeeded() {\r\n    const buffer = buffers[buffers.length - 1]\r\n    const slice = buffer[buffer.length - 1]\r\n    const previous = slice ? slice.charCodeAt(slice.length - 1) : codes.eof\r\n\r\n    if (\r\n      previous === codes.lf ||\r\n      previous === codes.cr ||\r\n      previous === codes.eof\r\n    ) {\r\n      return\r\n    }\r\n\r\n    lineEnding()\r\n  }\r\n\r\n  /** @type {CompileContext['encode']} */\r\n  function encode(value) {\r\n    return getData('ignoreEncode') ? value : _encode(value)\r\n  }\r\n\r\n  //\r\n  // Handlers.\r\n  //\r\n\r\n  /**\r\n   * @returns {undefined}\r\n   */\r\n  function onresumedrop() {\r\n    resume()\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onenterlistordered(token) {\r\n    tightStack.push(!token._loose)\r\n    lineEndingIfNeeded()\r\n    tag('<ol')\r\n    setData('expectFirstItem', true)\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onenterlistunordered(token) {\r\n    tightStack.push(!token._loose)\r\n    lineEndingIfNeeded()\r\n    tag('<ul')\r\n    setData('expectFirstItem', true)\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onenterlistitemvalue(token) {\r\n    if (getData('expectFirstItem')) {\r\n      const value = Number.parseInt(\r\n        this.sliceSerialize(token),\r\n        constants.numericBaseDecimal\r\n      )\r\n\r\n      if (value !== 1) {\r\n        tag(' start=\"' + encode(String(value)) + '\"')\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {undefined}\r\n   */\r\n  function onenterlistitemmarker() {\r\n    if (getData('expectFirstItem')) {\r\n      tag('>')\r\n    } else {\r\n      onexitlistitem()\r\n    }\r\n\r\n    lineEndingIfNeeded()\r\n    tag('<li>')\r\n    setData('expectFirstItem')\r\n    // “Hack” to prevent a line ending from showing up if the item is empty.\r\n    setData('lastWasTag')\r\n  }\r\n\r\n  /**\r\n   * @returns {undefined}\r\n   */\r\n  function onexitlistordered() {\r\n    onexitlistitem()\r\n    tightStack.pop()\r\n    lineEnding()\r\n    tag('</ol>')\r\n  }\r\n\r\n  /**\r\n   * @returns {undefined}\r\n   */\r\n  function onexitlistunordered() {\r\n    onexitlistitem()\r\n    tightStack.pop()\r\n    lineEnding()\r\n    tag('</ul>')\r\n  }\r\n\r\n  /**\r\n   * @returns {undefined}\r\n   */\r\n  function onexitlistitem() {\r\n    if (getData('lastWasTag') && !getData('slurpAllLineEndings')) {\r\n      lineEndingIfNeeded()\r\n    }\r\n\r\n    tag('</li>')\r\n    setData('slurpAllLineEndings')\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onenterblockquote() {\r\n    tightStack.push(false)\r\n    lineEndingIfNeeded()\r\n    tag('<blockquote>')\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitblockquote() {\r\n    tightStack.pop()\r\n    lineEndingIfNeeded()\r\n    tag('</blockquote>')\r\n    setData('slurpAllLineEndings')\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onenterparagraph() {\r\n    if (!tightStack[tightStack.length - 1]) {\r\n      lineEndingIfNeeded()\r\n      tag('<p>')\r\n    }\r\n\r\n    setData('slurpAllLineEndings')\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitparagraph() {\r\n    if (tightStack[tightStack.length - 1]) {\r\n      setData('slurpAllLineEndings', true)\r\n    } else {\r\n      tag('</p>')\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onentercodefenced() {\r\n    lineEndingIfNeeded()\r\n    tag('<pre><code')\r\n    setData('fencesCount', 0)\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitcodefencedfenceinfo() {\r\n    const value = resume()\r\n    tag(' class=\"language-' + value + '\"')\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitcodefencedfence() {\r\n    const count = getData('fencesCount') || 0\r\n\r\n    if (!count) {\r\n      tag('>')\r\n      setData('slurpOneLineEnding', true)\r\n    }\r\n\r\n    setData('fencesCount', count + 1)\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onentercodeindented() {\r\n    lineEndingIfNeeded()\r\n    tag('<pre><code>')\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitflowcode() {\r\n    const count = getData('fencesCount')\r\n\r\n    // One special case is if we are inside a container, and the fenced code was\r\n    // not closed (meaning it runs to the end).\r\n    // In that case, the following line ending, is considered *outside* the\r\n    // fenced code and block quote by micromark, but CM wants to treat that\r\n    // ending as part of the code.\r\n    if (\r\n      count !== undefined &&\r\n      count < 2 &&\r\n      data.tightStack.length > 0 &&\r\n      !getData('lastWasTag')\r\n    ) {\r\n      lineEnding()\r\n    }\r\n\r\n    // But in most cases, it’s simpler: when we’ve seen some data, emit an extra\r\n    // line ending when needed.\r\n    if (getData('flowCodeSeenData')) {\r\n      lineEndingIfNeeded()\r\n    }\r\n\r\n    tag('</code></pre>')\r\n    if (count !== undefined && count < 2) lineEndingIfNeeded()\r\n    setData('flowCodeSeenData')\r\n    setData('fencesCount')\r\n    setData('slurpOneLineEnding')\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onenterimage() {\r\n    mediaStack.push({image: true})\r\n    tags = undefined // Disallow tags.\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onenterlink() {\r\n    mediaStack.push({})\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitlabeltext(token) {\r\n    mediaStack[mediaStack.length - 1].labelId = this.sliceSerialize(token)\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitlabel() {\r\n    mediaStack[mediaStack.length - 1].label = resume()\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitreferencestring(token) {\r\n    mediaStack[mediaStack.length - 1].referenceId = this.sliceSerialize(token)\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onenterresource() {\r\n    buffer() // We can have line endings in the resource, ignore them.\r\n    mediaStack[mediaStack.length - 1].destination = ''\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onenterresourcedestinationstring() {\r\n    buffer()\r\n    // Ignore encoding the result, as we’ll first percent encode the url and\r\n    // encode manually after.\r\n    setData('ignoreEncode', true)\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitresourcedestinationstring() {\r\n    mediaStack[mediaStack.length - 1].destination = resume()\r\n    setData('ignoreEncode')\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitresourcetitlestring() {\r\n    mediaStack[mediaStack.length - 1].title = resume()\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitmedia() {\r\n    let index = mediaStack.length - 1 // Skip current.\r\n    const media = mediaStack[index]\r\n    const id = media.referenceId || media.labelId\r\n    assert(id !== undefined, 'media should have `referenceId` or `labelId`')\r\n    assert(media.label !== undefined, 'media should have `label`')\r\n    const context =\r\n      media.destination === undefined\r\n        ? definitions[normalizeIdentifier(id)]\r\n        : media\r\n\r\n    tags = true\r\n\r\n    while (index--) {\r\n      if (mediaStack[index].image) {\r\n        tags = undefined\r\n        break\r\n      }\r\n    }\r\n\r\n    if (media.image) {\r\n      tag(\r\n        '<img src=\"' +\r\n          sanitizeUri(\r\n            context.destination,\r\n            settings.allowDangerousProtocol ? undefined : protocolSource\r\n          ) +\r\n          '\" alt=\"'\r\n      )\r\n      raw(media.label)\r\n      tag('\"')\r\n    } else {\r\n      tag(\r\n        '<a href=\"' +\r\n          sanitizeUri(\r\n            context.destination,\r\n            settings.allowDangerousProtocol ? undefined : protocolHref\r\n          ) +\r\n          '\"'\r\n      )\r\n    }\r\n\r\n    tag(context.title ? ' title=\"' + context.title + '\"' : '')\r\n\r\n    if (media.image) {\r\n      tag(' />')\r\n    } else {\r\n      tag('>')\r\n      raw(media.label)\r\n      tag('</a>')\r\n    }\r\n\r\n    mediaStack.pop()\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onenterdefinition() {\r\n    buffer()\r\n    mediaStack.push({})\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitdefinitionlabelstring(token) {\r\n    // Discard label, use the source content instead.\r\n    resume()\r\n    mediaStack[mediaStack.length - 1].labelId = this.sliceSerialize(token)\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onenterdefinitiondestinationstring() {\r\n    buffer()\r\n    setData('ignoreEncode', true)\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitdefinitiondestinationstring() {\r\n    mediaStack[mediaStack.length - 1].destination = resume()\r\n    setData('ignoreEncode')\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitdefinitiontitlestring() {\r\n    mediaStack[mediaStack.length - 1].title = resume()\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitdefinition() {\r\n    const media = mediaStack[mediaStack.length - 1]\r\n    assert(media.labelId !== undefined, 'media should have `labelId`')\r\n    const id = normalizeIdentifier(media.labelId)\r\n\r\n    resume()\r\n\r\n    if (!hasOwnProperty.call(definitions, id)) {\r\n      definitions[id] = mediaStack[mediaStack.length - 1]\r\n    }\r\n\r\n    mediaStack.pop()\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onentercontent() {\r\n    setData('slurpAllLineEndings', true)\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitatxheadingsequence(token) {\r\n    // Exit for further sequences.\r\n    if (getData('headingRank')) return\r\n    setData('headingRank', this.sliceSerialize(token).length)\r\n    lineEndingIfNeeded()\r\n    tag('<h' + getData('headingRank') + '>')\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onentersetextheading() {\r\n    buffer()\r\n    setData('slurpAllLineEndings')\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitsetextheadingtext() {\r\n    setData('slurpAllLineEndings', true)\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitatxheading() {\r\n    tag('</h' + getData('headingRank') + '>')\r\n    setData('headingRank')\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitsetextheadinglinesequence(token) {\r\n    setData(\r\n      'headingRank',\r\n      this.sliceSerialize(token).charCodeAt(0) === codes.equalsTo ? 1 : 2\r\n    )\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitsetextheading() {\r\n    const value = resume()\r\n    lineEndingIfNeeded()\r\n    tag('<h' + getData('headingRank') + '>')\r\n    raw(value)\r\n    tag('</h' + getData('headingRank') + '>')\r\n    setData('slurpAllLineEndings')\r\n    setData('headingRank')\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitdata(token) {\r\n    raw(encode(this.sliceSerialize(token)))\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitlineending(token) {\r\n    if (getData('slurpAllLineEndings')) {\r\n      return\r\n    }\r\n\r\n    if (getData('slurpOneLineEnding')) {\r\n      setData('slurpOneLineEnding')\r\n      return\r\n    }\r\n\r\n    if (getData('inCodeText')) {\r\n      raw(' ')\r\n      return\r\n    }\r\n\r\n    raw(encode(this.sliceSerialize(token)))\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitcodeflowvalue(token) {\r\n    raw(encode(this.sliceSerialize(token)))\r\n    setData('flowCodeSeenData', true)\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexithardbreak() {\r\n    tag('<br />')\r\n  }\r\n\r\n  /**\r\n   * @returns {undefined}\r\n   */\r\n  function onenterhtmlflow() {\r\n    lineEndingIfNeeded()\r\n    onenterhtml()\r\n  }\r\n\r\n  /**\r\n   * @returns {undefined}\r\n   */\r\n  function onexithtml() {\r\n    setData('ignoreEncode')\r\n  }\r\n\r\n  /**\r\n   * @returns {undefined}\r\n   */\r\n  function onenterhtml() {\r\n    if (settings.allowDangerousHtml) {\r\n      setData('ignoreEncode', true)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {undefined}\r\n   */\r\n  function onenteremphasis() {\r\n    tag('<em>')\r\n  }\r\n\r\n  /**\r\n   * @returns {undefined}\r\n   */\r\n  function onenterstrong() {\r\n    tag('<strong>')\r\n  }\r\n\r\n  /**\r\n   * @returns {undefined}\r\n   */\r\n  function onentercodetext() {\r\n    setData('inCodeText', true)\r\n    tag('<code>')\r\n  }\r\n\r\n  /**\r\n   * @returns {undefined}\r\n   */\r\n  function onexitcodetext() {\r\n    setData('inCodeText')\r\n    tag('</code>')\r\n  }\r\n\r\n  /**\r\n   * @returns {undefined}\r\n   */\r\n  function onexitemphasis() {\r\n    tag('</em>')\r\n  }\r\n\r\n  /**\r\n   * @returns {undefined}\r\n   */\r\n  function onexitstrong() {\r\n    tag('</strong>')\r\n  }\r\n\r\n  /**\r\n   * @returns {undefined}\r\n   */\r\n  function onexitthematicbreak() {\r\n    lineEndingIfNeeded()\r\n    tag('<hr />')\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @param {Token} token\r\n   * @returns {undefined}\r\n   */\r\n  function onexitcharacterreferencemarker(token) {\r\n    setData('characterReferenceType', token.type)\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitcharacterreferencevalue(token) {\r\n    const value = this.sliceSerialize(token)\r\n    const decoded = getData('characterReferenceType')\r\n      ? decodeNumericCharacterReference(\r\n          value,\r\n          getData('characterReferenceType') ===\r\n            types.characterReferenceMarkerNumeric\r\n            ? constants.numericBaseDecimal\r\n            : constants.numericBaseHexadecimal\r\n        )\r\n      : decodeNamedCharacterReference(value)\r\n\r\n    // `decodeNamedCharacterReference` can return `false` for invalid named\r\n    // character references,\r\n    // but everything we’ve tokenized is valid.\r\n    raw(encode(/** @type {string} */ (decoded)))\r\n    setData('characterReferenceType')\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitautolinkprotocol(token) {\r\n    const uri = this.sliceSerialize(token)\r\n    tag(\r\n      '<a href=\"' +\r\n        sanitizeUri(\r\n          uri,\r\n          settings.allowDangerousProtocol ? undefined : protocolHref\r\n        ) +\r\n        '\">'\r\n    )\r\n    raw(encode(uri))\r\n    tag('</a>')\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitautolinkemail(token) {\r\n    const uri = this.sliceSerialize(token)\r\n    tag('<a href=\"' + sanitizeUri('mailto:' + uri) + '\">')\r\n    raw(encode(uri))\r\n    tag('</a>')\r\n  }\r\n}\r\n", "/**\r\n * @import {\r\n *   InitialConstruct,\r\n *   Initializer,\r\n *   State,\r\n *   TokenizeContext,\r\n *   Token\r\n * } from 'micromark-util-types'\r\n */\r\n\r\nimport {ok as assert} from 'devlop'\r\nimport {factorySpace} from 'micromark-factory-space'\r\nimport {markdownLineEnding} from 'micromark-util-character'\r\nimport {codes, constants, types} from 'micromark-util-symbol'\r\n\r\n/** @type {InitialConstruct} */\r\nexport const content = {tokenize: initializeContent}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n *   Context.\r\n * @type {Initializer}\r\n *   Content.\r\n */\r\nfunction initializeContent(effects) {\r\n  const contentStart = effects.attempt(\r\n    this.parser.constructs.contentInitial,\r\n    afterContentStartConstruct,\r\n    paragraphInitial\r\n  )\r\n  /** @type {Token} */\r\n  let previous\r\n\r\n  return contentStart\r\n\r\n  /** @type {State} */\r\n  function afterContentStartConstruct(code) {\r\n    assert(\r\n      code === codes.eof || markdownLineEnding(code),\r\n      'expected eol or eof'\r\n    )\r\n\r\n    if (code === codes.eof) {\r\n      effects.consume(code)\r\n      return\r\n    }\r\n\r\n    effects.enter(types.lineEnding)\r\n    effects.consume(code)\r\n    effects.exit(types.lineEnding)\r\n    return factorySpace(effects, contentStart, types.linePrefix)\r\n  }\r\n\r\n  /** @type {State} */\r\n  function paragraphInitial(code) {\r\n    assert(\r\n      code !== codes.eof && !markdownLineEnding(code),\r\n      'expected anything other than a line ending or EOF'\r\n    )\r\n    effects.enter(types.paragraph)\r\n    return lineStart(code)\r\n  }\r\n\r\n  /** @type {State} */\r\n  function lineStart(code) {\r\n    const token = effects.enter(types.chunkText, {\r\n      contentType: constants.contentTypeText,\r\n      previous\r\n    })\r\n\r\n    if (previous) {\r\n      previous.next = token\r\n    }\r\n\r\n    previous = token\r\n\r\n    return data(code)\r\n  }\r\n\r\n  /** @type {State} */\r\n  function data(code) {\r\n    if (code === codes.eof) {\r\n      effects.exit(types.chunkText)\r\n      effects.exit(types.paragraph)\r\n      effects.consume(code)\r\n      return\r\n    }\r\n\r\n    if (markdownLineEnding(code)) {\r\n      effects.consume(code)\r\n      effects.exit(types.chunkText)\r\n      return lineStart\r\n    }\r\n\r\n    // Data.\r\n    effects.consume(code)\r\n    return data\r\n  }\r\n}\r\n", "/**\r\n * @import {\r\n *   Construct,\r\n *   ContainerState,\r\n *   InitialConstruct,\r\n *   Initializer,\r\n *   Point,\r\n *   State,\r\n *   TokenizeContext,\r\n *   Tokenizer,\r\n *   Token\r\n * } from 'micromark-util-types'\r\n */\r\n\r\n/**\r\n * @typedef {[Construct, ContainerState]} StackItem\r\n *   Construct and its state.\r\n */\r\n\r\nimport {ok as assert} from 'devlop'\r\nimport {factorySpace} from 'micromark-factory-space'\r\nimport {markdownLineEnding} from 'micromark-util-character'\r\nimport {splice} from 'micromark-util-chunked'\r\nimport {codes, constants, types} from 'micromark-util-symbol'\r\n\r\n/** @type {InitialConstruct} */\r\nexport const document = {tokenize: initializeDocument}\r\n\r\n/** @type {Construct} */\r\nconst containerConstruct = {tokenize: tokenizeContainer}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n *   Self.\r\n * @type {Initializer}\r\n *   Initializer.\r\n */\r\nfunction initializeDocument(effects) {\r\n  const self = this\r\n  /** @type {Array<StackItem>} */\r\n  const stack = []\r\n  let continued = 0\r\n  /** @type {TokenizeContext | undefined} */\r\n  let childFlow\r\n  /** @type {Token | undefined} */\r\n  let childToken\r\n  /** @type {number} */\r\n  let lineStartOffset\r\n\r\n  return start\r\n\r\n  /** @type {State} */\r\n  function start(code) {\r\n    // First we iterate through the open blocks, starting with the root\r\n    // document, and descending through last children down to the last open\r\n    // block.\r\n    // Each block imposes a condition that the line must satisfy if the block is\r\n    // to remain open.\r\n    // For example, a block quote requires a `>` character.\r\n    // A paragraph requires a non-blank line.\r\n    // In this phase we may match all or just some of the open blocks.\r\n    // But we cannot close unmatched blocks yet, because we may have a lazy\r\n    // continuation line.\r\n    if (continued < stack.length) {\r\n      const item = stack[continued]\r\n      self.containerState = item[1]\r\n      assert(\r\n        item[0].continuation,\r\n        'expected `continuation` to be defined on container construct'\r\n      )\r\n      return effects.attempt(\r\n        item[0].continuation,\r\n        documentContinue,\r\n        checkNewContainers\r\n      )(code)\r\n    }\r\n\r\n    // Done.\r\n    return checkNewContainers(code)\r\n  }\r\n\r\n  /** @type {State} */\r\n  function documentContinue(code) {\r\n    assert(\r\n      self.containerState,\r\n      'expected `containerState` to be defined after continuation'\r\n    )\r\n\r\n    continued++\r\n\r\n    // Note: this field is called `_closeFlow` but it also closes containers.\r\n    // Perhaps a good idea to rename it but it’s already used in the wild by\r\n    // extensions.\r\n    if (self.containerState._closeFlow) {\r\n      self.containerState._closeFlow = undefined\r\n\r\n      if (childFlow) {\r\n        closeFlow()\r\n      }\r\n\r\n      // Note: this algorithm for moving events around is similar to the\r\n      // algorithm when dealing with lazy lines in `writeToChild`.\r\n      const indexBeforeExits = self.events.length\r\n      let indexBeforeFlow = indexBeforeExits\r\n      /** @type {Point | undefined} */\r\n      let point\r\n\r\n      // Find the flow chunk.\r\n      while (indexBeforeFlow--) {\r\n        if (\r\n          self.events[indexBeforeFlow][0] === 'exit' &&\r\n          self.events[indexBeforeFlow][1].type === types.chunkFlow\r\n        ) {\r\n          point = self.events[indexBeforeFlow][1].end\r\n          break\r\n        }\r\n      }\r\n\r\n      assert(point, 'could not find previous flow chunk')\r\n\r\n      exitContainers(continued)\r\n\r\n      // Fix positions.\r\n      let index = indexBeforeExits\r\n\r\n      while (index < self.events.length) {\r\n        self.events[index][1].end = {...point}\r\n        index++\r\n      }\r\n\r\n      // Inject the exits earlier (they’re still also at the end).\r\n      splice(\r\n        self.events,\r\n        indexBeforeFlow + 1,\r\n        0,\r\n        self.events.slice(indexBeforeExits)\r\n      )\r\n\r\n      // Discard the duplicate exits.\r\n      self.events.length = index\r\n\r\n      return checkNewContainers(code)\r\n    }\r\n\r\n    return start(code)\r\n  }\r\n\r\n  /** @type {State} */\r\n  function checkNewContainers(code) {\r\n    // Next, after consuming the continuation markers for existing blocks, we\r\n    // look for new block starts (e.g. `>` for a block quote).\r\n    // If we encounter a new block start, we close any blocks unmatched in\r\n    // step 1 before creating the new block as a child of the last matched\r\n    // block.\r\n    if (continued === stack.length) {\r\n      // No need to `check` whether there’s a container, of `exitContainers`\r\n      // would be moot.\r\n      // We can instead immediately `attempt` to parse one.\r\n      if (!childFlow) {\r\n        return documentContinued(code)\r\n      }\r\n\r\n      // If we have concrete content, such as block HTML or fenced code,\r\n      // we can’t have containers “pierce” into them, so we can immediately\r\n      // start.\r\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\r\n        return flowStart(code)\r\n      }\r\n\r\n      // If we do have flow, it could still be a blank line,\r\n      // but we’d be interrupting it w/ a new container if there’s a current\r\n      // construct.\r\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\r\n      // needed in micromark-extension-gfm-table@1.0.6).\r\n      self.interrupt = Boolean(\r\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\r\n      )\r\n    }\r\n\r\n    // Check if there is a new container.\r\n    self.containerState = {}\r\n    return effects.check(\r\n      containerConstruct,\r\n      thereIsANewContainer,\r\n      thereIsNoNewContainer\r\n    )(code)\r\n  }\r\n\r\n  /** @type {State} */\r\n  function thereIsANewContainer(code) {\r\n    if (childFlow) closeFlow()\r\n    exitContainers(continued)\r\n    return documentContinued(code)\r\n  }\r\n\r\n  /** @type {State} */\r\n  function thereIsNoNewContainer(code) {\r\n    self.parser.lazy[self.now().line] = continued !== stack.length\r\n    lineStartOffset = self.now().offset\r\n    return flowStart(code)\r\n  }\r\n\r\n  /** @type {State} */\r\n  function documentContinued(code) {\r\n    // Try new containers.\r\n    self.containerState = {}\r\n    return effects.attempt(\r\n      containerConstruct,\r\n      containerContinue,\r\n      flowStart\r\n    )(code)\r\n  }\r\n\r\n  /** @type {State} */\r\n  function containerContinue(code) {\r\n    assert(\r\n      self.currentConstruct,\r\n      'expected `currentConstruct` to be defined on tokenizer'\r\n    )\r\n    assert(\r\n      self.containerState,\r\n      'expected `containerState` to be defined on tokenizer'\r\n    )\r\n    continued++\r\n    stack.push([self.currentConstruct, self.containerState])\r\n    // Try another.\r\n    return documentContinued(code)\r\n  }\r\n\r\n  /** @type {State} */\r\n  function flowStart(code) {\r\n    if (code === codes.eof) {\r\n      if (childFlow) closeFlow()\r\n      exitContainers(0)\r\n      effects.consume(code)\r\n      return\r\n    }\r\n\r\n    childFlow = childFlow || self.parser.flow(self.now())\r\n    effects.enter(types.chunkFlow, {\r\n      _tokenizer: childFlow,\r\n      contentType: constants.contentTypeFlow,\r\n      previous: childToken\r\n    })\r\n\r\n    return flowContinue(code)\r\n  }\r\n\r\n  /** @type {State} */\r\n  function flowContinue(code) {\r\n    if (code === codes.eof) {\r\n      writeToChild(effects.exit(types.chunkFlow), true)\r\n      exitContainers(0)\r\n      effects.consume(code)\r\n      return\r\n    }\r\n\r\n    if (markdownLineEnding(code)) {\r\n      effects.consume(code)\r\n      writeToChild(effects.exit(types.chunkFlow))\r\n      // Get ready for the next line.\r\n      continued = 0\r\n      self.interrupt = undefined\r\n      return start\r\n    }\r\n\r\n    effects.consume(code)\r\n    return flowContinue\r\n  }\r\n\r\n  /**\r\n   * @param {Token} token\r\n   *   Token.\r\n   * @param {boolean | undefined} [endOfFile]\r\n   *   Whether the token is at the end of the file (default: `false`).\r\n   * @returns {undefined}\r\n   *   Nothing.\r\n   */\r\n  function writeToChild(token, endOfFile) {\r\n    assert(childFlow, 'expected `childFlow` to be defined when continuing')\r\n    const stream = self.sliceStream(token)\r\n    if (endOfFile) stream.push(null)\r\n    token.previous = childToken\r\n    if (childToken) childToken.next = token\r\n    childToken = token\r\n    childFlow.defineSkip(token.start)\r\n    childFlow.write(stream)\r\n\r\n    // Alright, so we just added a lazy line:\r\n    //\r\n    // ```markdown\r\n    // > a\r\n    // b.\r\n    //\r\n    // Or:\r\n    //\r\n    // > ~~~c\r\n    // d\r\n    //\r\n    // Or:\r\n    //\r\n    // > | e |\r\n    // f\r\n    // ```\r\n    //\r\n    // The construct in the second example (fenced code) does not accept lazy\r\n    // lines, so it marked itself as done at the end of its first line, and\r\n    // then the content construct parses `d`.\r\n    // Most constructs in markdown match on the first line: if the first line\r\n    // forms a construct, a non-lazy line can’t “unmake” it.\r\n    //\r\n    // The construct in the third example is potentially a GFM table, and\r\n    // those are *weird*.\r\n    // It *could* be a table, from the first line, if the following line\r\n    // matches a condition.\r\n    // In this case, that second line is lazy, which “unmakes” the first line\r\n    // and turns the whole into one content block.\r\n    //\r\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\r\n    // whether the lazy line started a new flow block.\r\n    // If it did, we exit the current containers between the two flow blocks.\r\n    if (self.parser.lazy[token.start.line]) {\r\n      let index = childFlow.events.length\r\n\r\n      while (index--) {\r\n        if (\r\n          // The token starts before the line ending…\r\n          childFlow.events[index][1].start.offset < lineStartOffset &&\r\n          // …and either is not ended yet…\r\n          (!childFlow.events[index][1].end ||\r\n            // …or ends after it.\r\n            childFlow.events[index][1].end.offset > lineStartOffset)\r\n        ) {\r\n          // Exit: there’s still something open, which means it’s a lazy line\r\n          // part of something.\r\n          return\r\n        }\r\n      }\r\n\r\n      // Note: this algorithm for moving events around is similar to the\r\n      // algorithm when closing flow in `documentContinue`.\r\n      const indexBeforeExits = self.events.length\r\n      let indexBeforeFlow = indexBeforeExits\r\n      /** @type {boolean | undefined} */\r\n      let seen\r\n      /** @type {Point | undefined} */\r\n      let point\r\n\r\n      // Find the previous chunk (the one before the lazy line).\r\n      while (indexBeforeFlow--) {\r\n        if (\r\n          self.events[indexBeforeFlow][0] === 'exit' &&\r\n          self.events[indexBeforeFlow][1].type === types.chunkFlow\r\n        ) {\r\n          if (seen) {\r\n            point = self.events[indexBeforeFlow][1].end\r\n            break\r\n          }\r\n\r\n          seen = true\r\n        }\r\n      }\r\n\r\n      assert(point, 'could not find previous flow chunk')\r\n\r\n      exitContainers(continued)\r\n\r\n      // Fix positions.\r\n      index = indexBeforeExits\r\n\r\n      while (index < self.events.length) {\r\n        self.events[index][1].end = {...point}\r\n        index++\r\n      }\r\n\r\n      // Inject the exits earlier (they’re still also at the end).\r\n      splice(\r\n        self.events,\r\n        indexBeforeFlow + 1,\r\n        0,\r\n        self.events.slice(indexBeforeExits)\r\n      )\r\n\r\n      // Discard the duplicate exits.\r\n      self.events.length = index\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} size\r\n   *   Size.\r\n   * @returns {undefined}\r\n   *   Nothing.\r\n   */\r\n  function exitContainers(size) {\r\n    let index = stack.length\r\n\r\n    // Exit open containers.\r\n    while (index-- > size) {\r\n      const entry = stack[index]\r\n      self.containerState = entry[1]\r\n      assert(\r\n        entry[0].exit,\r\n        'expected `exit` to be defined on container construct'\r\n      )\r\n      entry[0].exit.call(self, effects)\r\n    }\r\n\r\n    stack.length = size\r\n  }\r\n\r\n  function closeFlow() {\r\n    assert(\r\n      self.containerState,\r\n      'expected `containerState` to be defined when closing flow'\r\n    )\r\n    assert(childFlow, 'expected `childFlow` to be defined when closing it')\r\n    childFlow.write([codes.eof])\r\n    childToken = undefined\r\n    childFlow = undefined\r\n    self.containerState._closeFlow = undefined\r\n  }\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n *   Context.\r\n * @type {Tokenizer}\r\n *   Tokenizer.\r\n */\r\nfunction tokenizeContainer(effects, ok, nok) {\r\n  // Always populated by defaults.\r\n  assert(\r\n    this.parser.constructs.disable.null,\r\n    'expected `disable.null` to be populated'\r\n  )\r\n  return factorySpace(\r\n    effects,\r\n    effects.attempt(this.parser.constructs.document, ok, nok),\r\n    types.linePrefix,\r\n    this.parser.constructs.disable.null.includes('codeIndented')\r\n      ? undefined\r\n      : constants.tabSize\r\n  )\r\n}\r\n", "/**\r\n * @import {\r\n *   InitialConstruct,\r\n *   Initializer,\r\n *   State,\r\n *   TokenizeContext\r\n * } from 'micromark-util-types'\r\n */\r\n\r\nimport {ok as assert} from 'devlop'\r\nimport {blankLine, content} from 'micromark-core-commonmark'\r\nimport {factorySpace} from 'micromark-factory-space'\r\nimport {markdownLineEnding} from 'micromark-util-character'\r\nimport {codes, types} from 'micromark-util-symbol'\r\n\r\n/** @type {InitialConstruct} */\r\nexport const flow = {tokenize: initializeFlow}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n *   Self.\r\n * @type {Initializer}\r\n *   Initializer.\r\n */\r\nfunction initializeFlow(effects) {\r\n  const self = this\r\n  const initial = effects.attempt(\r\n    // Try to parse a blank line.\r\n    blankLine,\r\n    atBlankEnding,\r\n    // Try to parse initial flow (essentially, only code).\r\n    effects.attempt(\r\n      this.parser.constructs.flowInitial,\r\n      afterConstruct,\r\n      factorySpace(\r\n        effects,\r\n        effects.attempt(\r\n          this.parser.constructs.flow,\r\n          afterConstruct,\r\n          effects.attempt(content, afterConstruct)\r\n        ),\r\n        types.linePrefix\r\n      )\r\n    )\r\n  )\r\n\r\n  return initial\r\n\r\n  /** @type {State} */\r\n  function atBlankEnding(code) {\r\n    assert(\r\n      code === codes.eof || markdownLineEnding(code),\r\n      'expected eol or eof'\r\n    )\r\n\r\n    if (code === codes.eof) {\r\n      effects.consume(code)\r\n      return\r\n    }\r\n\r\n    effects.enter(types.lineEndingBlank)\r\n    effects.consume(code)\r\n    effects.exit(types.lineEndingBlank)\r\n    self.currentConstruct = undefined\r\n    return initial\r\n  }\r\n\r\n  /** @type {State} */\r\n  function afterConstruct(code) {\r\n    assert(\r\n      code === codes.eof || markdownLineEnding(code),\r\n      'expected eol or eof'\r\n    )\r\n\r\n    if (code === codes.eof) {\r\n      effects.consume(code)\r\n      return\r\n    }\r\n\r\n    effects.enter(types.lineEnding)\r\n    effects.consume(code)\r\n    effects.exit(types.lineEnding)\r\n    self.currentConstruct = undefined\r\n    return initial\r\n  }\r\n}\r\n", "/**\r\n * @import {\r\n *   Code,\r\n *   InitialConstruct,\r\n *   Initializer,\r\n *   Resolver,\r\n *   State,\r\n *   TokenizeContext\r\n * } from 'micromark-util-types'\r\n */\r\n\r\nimport {ok as assert} from 'devlop'\r\nimport {codes, constants, types} from 'micromark-util-symbol'\r\n\r\nexport const resolver = {resolveAll: createResolver()}\r\nexport const string = initializeFactory('string')\r\nexport const text = initializeFactory('text')\r\n\r\n/**\r\n * @param {'string' | 'text'} field\r\n *   Field.\r\n * @returns {InitialConstruct}\r\n *   Construct.\r\n */\r\nfunction initializeFactory(field) {\r\n  return {\r\n    resolveAll: createResolver(\r\n      field === 'text' ? resolveAllLineSuffixes : undefined\r\n    ),\r\n    tokenize: initializeText\r\n  }\r\n\r\n  /**\r\n   * @this {TokenizeContext}\r\n   *   Context.\r\n   * @type {Initializer}\r\n   */\r\n  function initializeText(effects) {\r\n    const self = this\r\n    const constructs = this.parser.constructs[field]\r\n    const text = effects.attempt(constructs, start, notText)\r\n\r\n    return start\r\n\r\n    /** @type {State} */\r\n    function start(code) {\r\n      return atBreak(code) ? text(code) : notText(code)\r\n    }\r\n\r\n    /** @type {State} */\r\n    function notText(code) {\r\n      if (code === codes.eof) {\r\n        effects.consume(code)\r\n        return\r\n      }\r\n\r\n      effects.enter(types.data)\r\n      effects.consume(code)\r\n      return data\r\n    }\r\n\r\n    /** @type {State} */\r\n    function data(code) {\r\n      if (atBreak(code)) {\r\n        effects.exit(types.data)\r\n        return text(code)\r\n      }\r\n\r\n      // Data.\r\n      effects.consume(code)\r\n      return data\r\n    }\r\n\r\n    /**\r\n     * @param {Code} code\r\n     *   Code.\r\n     * @returns {boolean}\r\n     *   Whether the code is a break.\r\n     */\r\n    function atBreak(code) {\r\n      if (code === codes.eof) {\r\n        return true\r\n      }\r\n\r\n      const list = constructs[code]\r\n      let index = -1\r\n\r\n      if (list) {\r\n        // Always populated by defaults.\r\n        assert(Array.isArray(list), 'expected `disable.null` to be populated')\r\n\r\n        while (++index < list.length) {\r\n          const item = list[index]\r\n          if (!item.previous || item.previous.call(self, self.previous)) {\r\n            return true\r\n          }\r\n        }\r\n      }\r\n\r\n      return false\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Resolver | undefined} [extraResolver]\r\n *   Resolver.\r\n * @returns {Resolver}\r\n *   Resolver.\r\n */\r\nfunction createResolver(extraResolver) {\r\n  return resolveAllText\r\n\r\n  /** @type {Resolver} */\r\n  function resolveAllText(events, context) {\r\n    let index = -1\r\n    /** @type {number | undefined} */\r\n    let enter\r\n\r\n    // A rather boring computation (to merge adjacent `data` events) which\r\n    // improves mm performance by 29%.\r\n    while (++index <= events.length) {\r\n      if (enter === undefined) {\r\n        if (events[index] && events[index][1].type === types.data) {\r\n          enter = index\r\n          index++\r\n        }\r\n      } else if (!events[index] || events[index][1].type !== types.data) {\r\n        // Don’t do anything if there is one data token.\r\n        if (index !== enter + 2) {\r\n          events[enter][1].end = events[index - 1][1].end\r\n          events.splice(enter + 2, index - enter - 2)\r\n          index = enter + 2\r\n        }\r\n\r\n        enter = undefined\r\n      }\r\n    }\r\n\r\n    return extraResolver ? extraResolver(events, context) : events\r\n  }\r\n}\r\n\r\n/**\r\n * A rather ugly set of instructions which again looks at chunks in the input\r\n * stream.\r\n * The reason to do this here is that it is *much* faster to parse in reverse.\r\n * And that we can’t hook into `null` to split the line suffix before an EOF.\r\n * To do: figure out if we can make this into a clean utility, or even in core.\r\n * As it will be useful for GFMs literal autolink extension (and maybe even\r\n * tables?)\r\n *\r\n * @type {Resolver}\r\n */\r\nfunction resolveAllLineSuffixes(events, context) {\r\n  let eventIndex = 0 // Skip first.\r\n\r\n  while (++eventIndex <= events.length) {\r\n    if (\r\n      (eventIndex === events.length ||\r\n        events[eventIndex][1].type === types.lineEnding) &&\r\n      events[eventIndex - 1][1].type === types.data\r\n    ) {\r\n      const data = events[eventIndex - 1][1]\r\n      const chunks = context.sliceStream(data)\r\n      let index = chunks.length\r\n      let bufferIndex = -1\r\n      let size = 0\r\n      /** @type {boolean | undefined} */\r\n      let tabs\r\n\r\n      while (index--) {\r\n        const chunk = chunks[index]\r\n\r\n        if (typeof chunk === 'string') {\r\n          bufferIndex = chunk.length\r\n\r\n          while (chunk.charCodeAt(bufferIndex - 1) === codes.space) {\r\n            size++\r\n            bufferIndex--\r\n          }\r\n\r\n          if (bufferIndex) break\r\n          bufferIndex = -1\r\n        }\r\n        // Number\r\n        else if (chunk === codes.horizontalTab) {\r\n          tabs = true\r\n          size++\r\n        } else if (chunk === codes.virtualSpace) {\r\n          // Empty\r\n        } else {\r\n          // Replacement character, exit.\r\n          index++\r\n          break\r\n        }\r\n      }\r\n\r\n      // Allow final trailing whitespace.\r\n      if (context._contentTypeTextTrailing && eventIndex === events.length) {\r\n        size = 0\r\n      }\r\n\r\n      if (size) {\r\n        const token = {\r\n          type:\r\n            eventIndex === events.length ||\r\n            tabs ||\r\n            size < constants.hardBreakPrefixSizeMin\r\n              ? types.lineSuffix\r\n              : types.hardBreakTrailing,\r\n          start: {\r\n            _bufferIndex: index\r\n              ? bufferIndex\r\n              : data.start._bufferIndex + bufferIndex,\r\n            _index: data.start._index + index,\r\n            line: data.end.line,\r\n            column: data.end.column - size,\r\n            offset: data.end.offset - size\r\n          },\r\n          end: {...data.end}\r\n        }\r\n\r\n        data.end = {...token.start}\r\n\r\n        if (data.start.offset === data.end.offset) {\r\n          Object.assign(data, token)\r\n        } else {\r\n          events.splice(\r\n            eventIndex,\r\n            0,\r\n            ['enter', token, context],\r\n            ['exit', token, context]\r\n          )\r\n          eventIndex += 2\r\n        }\r\n      }\r\n\r\n      eventIndex++\r\n    }\r\n  }\r\n\r\n  return events\r\n}\r\n", "/**\r\n * @import {Extension} from 'micromark-util-types'\r\n */\r\n\r\nimport {\r\n  attention,\r\n  autolink,\r\n  blockQuote,\r\n  characterEscape,\r\n  characterReference,\r\n  codeFenced,\r\n  codeIndented,\r\n  codeText,\r\n  definition,\r\n  hardBreakEscape,\r\n  headingAtx,\r\n  htmlFlow,\r\n  htmlText,\r\n  labelEnd,\r\n  labelStartImage,\r\n  labelStartLink,\r\n  lineEnding,\r\n  list,\r\n  setextUnderline,\r\n  thematicBreak\r\n} from 'micromark-core-commonmark'\r\nimport {codes} from 'micromark-util-symbol'\r\nimport {resolver as resolveText} from './initialize/text.js'\r\n\r\n/** @satisfies {Extension['document']} */\r\nexport const document = {\r\n  [codes.asterisk]: list,\r\n  [codes.plusSign]: list,\r\n  [codes.dash]: list,\r\n  [codes.digit0]: list,\r\n  [codes.digit1]: list,\r\n  [codes.digit2]: list,\r\n  [codes.digit3]: list,\r\n  [codes.digit4]: list,\r\n  [codes.digit5]: list,\r\n  [codes.digit6]: list,\r\n  [codes.digit7]: list,\r\n  [codes.digit8]: list,\r\n  [codes.digit9]: list,\r\n  [codes.greaterThan]: blockQuote\r\n}\r\n\r\n/** @satisfies {Extension['contentInitial']} */\r\nexport const contentInitial = {\r\n  [codes.leftSquareBracket]: definition\r\n}\r\n\r\n/** @satisfies {Extension['flowInitial']} */\r\nexport const flowInitial = {\r\n  [codes.horizontalTab]: codeIndented,\r\n  [codes.virtualSpace]: codeIndented,\r\n  [codes.space]: codeIndented\r\n}\r\n\r\n/** @satisfies {Extension['flow']} */\r\nexport const flow = {\r\n  [codes.numberSign]: headingAtx,\r\n  [codes.asterisk]: thematicBreak,\r\n  [codes.dash]: [setextUnderline, thematicBreak],\r\n  [codes.lessThan]: htmlFlow,\r\n  [codes.equalsTo]: setextUnderline,\r\n  [codes.underscore]: thematicBreak,\r\n  [codes.graveAccent]: codeFenced,\r\n  [codes.tilde]: codeFenced\r\n}\r\n\r\n/** @satisfies {Extension['string']} */\r\nexport const string = {\r\n  [codes.ampersand]: characterReference,\r\n  [codes.backslash]: characterEscape\r\n}\r\n\r\n/** @satisfies {Extension['text']} */\r\nexport const text = {\r\n  [codes.carriageReturn]: lineEnding,\r\n  [codes.lineFeed]: lineEnding,\r\n  [codes.carriageReturnLineFeed]: lineEnding,\r\n  [codes.exclamationMark]: labelStartImage,\r\n  [codes.ampersand]: characterReference,\r\n  [codes.asterisk]: attention,\r\n  [codes.lessThan]: [autolink, htmlText],\r\n  [codes.leftSquareBracket]: labelStartLink,\r\n  [codes.backslash]: [hardBreakEscape, characterEscape],\r\n  [codes.rightSquareBracket]: labelEnd,\r\n  [codes.underscore]: attention,\r\n  [codes.graveAccent]: codeText\r\n}\r\n\r\n/** @satisfies {Extension['insideSpan']} */\r\nexport const insideSpan = {null: [attention, resolveText]}\r\n\r\n/** @satisfies {Extension['attentionMarkers']} */\r\nexport const attentionMarkers = {null: [codes.asterisk, codes.underscore]}\r\n\r\n/** @satisfies {Extension['disable']} */\r\nexport const disable = {null: []}\r\n", "/**\r\n * @import {\r\n *   Chunk,\r\n *   Code,\r\n *   ConstructRecord,\r\n *   Construct,\r\n *   Effects,\r\n *   InitialConstruct,\r\n *   ParseContext,\r\n *   Point,\r\n *   State,\r\n *   TokenizeContext,\r\n *   Token\r\n * } from 'micromark-util-types'\r\n */\r\n\r\n/**\r\n * @callback Restore\r\n *   Restore the state.\r\n * @returns {undefined}\r\n *   Nothing.\r\n *\r\n * @typedef Info\r\n *   Info.\r\n * @property {Restore} restore\r\n *   Restore.\r\n * @property {number} from\r\n *   From.\r\n *\r\n * @callback ReturnHandle\r\n *   Handle a successful run.\r\n * @param {Construct} construct\r\n *   Construct.\r\n * @param {Info} info\r\n *   Info.\r\n * @returns {undefined}\r\n *   Nothing.\r\n */\r\n\r\nimport createDebug from 'debug'\r\nimport {ok as assert} from 'devlop'\r\nimport {markdownLineEnding} from 'micromark-util-character'\r\nimport {push, splice} from 'micromark-util-chunked'\r\nimport {resolveAll} from 'micromark-util-resolve-all'\r\nimport {codes, values} from 'micromark-util-symbol'\r\n\r\nconst debug = createDebug('micromark')\r\n\r\n/**\r\n * Create a tokenizer.\r\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\r\n * The parser is the object dealing with it all.\r\n * `initialize` works like other constructs, except that only its `tokenize`\r\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\r\n * `from` can be given to set the point before the first character, although\r\n * when further lines are indented, they must be set with `defineSkip`.\r\n *\r\n * @param {ParseContext} parser\r\n *   Parser.\r\n * @param {InitialConstruct} initialize\r\n *   Construct.\r\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\r\n *   Point (optional).\r\n * @returns {TokenizeContext}\r\n *   Context.\r\n */\r\nexport function createTokenizer(parser, initialize, from) {\r\n  /** @type {Point} */\r\n  let point = {\r\n    _bufferIndex: -1,\r\n    _index: 0,\r\n    line: (from && from.line) || 1,\r\n    column: (from && from.column) || 1,\r\n    offset: (from && from.offset) || 0\r\n  }\r\n  /** @type {Record<string, number>} */\r\n  const columnStart = {}\r\n  /** @type {Array<Construct>} */\r\n  const resolveAllConstructs = []\r\n  /** @type {Array<Chunk>} */\r\n  let chunks = []\r\n  /** @type {Array<Token>} */\r\n  let stack = []\r\n  /** @type {boolean | undefined} */\r\n  let consumed = true\r\n\r\n  /**\r\n   * Tools used for tokenizing.\r\n   *\r\n   * @type {Effects}\r\n   */\r\n  const effects = {\r\n    attempt: constructFactory(onsuccessfulconstruct),\r\n    check: constructFactory(onsuccessfulcheck),\r\n    consume,\r\n    enter,\r\n    exit,\r\n    interrupt: constructFactory(onsuccessfulcheck, {interrupt: true})\r\n  }\r\n\r\n  /**\r\n   * State and tools for resolving and serializing.\r\n   *\r\n   * @type {TokenizeContext}\r\n   */\r\n  const context = {\r\n    code: codes.eof,\r\n    containerState: {},\r\n    defineSkip,\r\n    events: [],\r\n    now,\r\n    parser,\r\n    previous: codes.eof,\r\n    sliceSerialize,\r\n    sliceStream,\r\n    write\r\n  }\r\n\r\n  /**\r\n   * The state function.\r\n   *\r\n   * @type {State | undefined}\r\n   */\r\n  let state = initialize.tokenize.call(context, effects)\r\n\r\n  /**\r\n   * Track which character we expect to be consumed, to catch bugs.\r\n   *\r\n   * @type {Code}\r\n   */\r\n  let expectedCode\r\n\r\n  if (initialize.resolveAll) {\r\n    resolveAllConstructs.push(initialize)\r\n  }\r\n\r\n  return context\r\n\r\n  /** @type {TokenizeContext['write']} */\r\n  function write(slice) {\r\n    chunks = push(chunks, slice)\r\n\r\n    main()\r\n\r\n    // Exit if we’re not done, resolve might change stuff.\r\n    if (chunks[chunks.length - 1] !== codes.eof) {\r\n      return []\r\n    }\r\n\r\n    addResult(initialize, 0)\r\n\r\n    // Otherwise, resolve, and exit.\r\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\r\n\r\n    return context.events\r\n  }\r\n\r\n  //\r\n  // Tools.\r\n  //\r\n\r\n  /** @type {TokenizeContext['sliceSerialize']} */\r\n  function sliceSerialize(token, expandTabs) {\r\n    return serializeChunks(sliceStream(token), expandTabs)\r\n  }\r\n\r\n  /** @type {TokenizeContext['sliceStream']} */\r\n  function sliceStream(token) {\r\n    return sliceChunks(chunks, token)\r\n  }\r\n\r\n  /** @type {TokenizeContext['now']} */\r\n  function now() {\r\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\r\n    const {_bufferIndex, _index, line, column, offset} = point\r\n    return {_bufferIndex, _index, line, column, offset}\r\n  }\r\n\r\n  /** @type {TokenizeContext['defineSkip']} */\r\n  function defineSkip(value) {\r\n    columnStart[value.line] = value.column\r\n    accountForPotentialSkip()\r\n    debug('position: define skip: `%j`', point)\r\n  }\r\n\r\n  //\r\n  // State management.\r\n  //\r\n\r\n  /**\r\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\r\n   * `consume`).\r\n   * Here is where we walk through the chunks, which either include strings of\r\n   * several characters, or numerical character codes.\r\n   * The reason to do this in a loop instead of a call is so the stack can\r\n   * drain.\r\n   *\r\n   * @returns {undefined}\r\n   *   Nothing.\r\n   */\r\n  function main() {\r\n    /** @type {number} */\r\n    let chunkIndex\r\n\r\n    while (point._index < chunks.length) {\r\n      const chunk = chunks[point._index]\r\n\r\n      // If we’re in a buffer chunk, loop through it.\r\n      if (typeof chunk === 'string') {\r\n        chunkIndex = point._index\r\n\r\n        if (point._bufferIndex < 0) {\r\n          point._bufferIndex = 0\r\n        }\r\n\r\n        while (\r\n          point._index === chunkIndex &&\r\n          point._bufferIndex < chunk.length\r\n        ) {\r\n          go(chunk.charCodeAt(point._bufferIndex))\r\n        }\r\n      } else {\r\n        go(chunk)\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deal with one code.\r\n   *\r\n   * @param {Code} code\r\n   *   Code.\r\n   * @returns {undefined}\r\n   *   Nothing.\r\n   */\r\n  function go(code) {\r\n    assert(consumed === true, 'expected character to be consumed')\r\n    consumed = undefined\r\n    debug('main: passing `%s` to %s', code, state && state.name)\r\n    expectedCode = code\r\n    assert(typeof state === 'function', 'expected state')\r\n    state = state(code)\r\n  }\r\n\r\n  /** @type {Effects['consume']} */\r\n  function consume(code) {\r\n    assert(code === expectedCode, 'expected given code to equal expected code')\r\n\r\n    debug('consume: `%s`', code)\r\n\r\n    assert(\r\n      consumed === undefined,\r\n      'expected code to not have been consumed: this might be because `return x(code)` instead of `return x` was used'\r\n    )\r\n    assert(\r\n      code === null\r\n        ? context.events.length === 0 ||\r\n            context.events[context.events.length - 1][0] === 'exit'\r\n        : context.events[context.events.length - 1][0] === 'enter',\r\n      'expected last token to be open'\r\n    )\r\n\r\n    if (markdownLineEnding(code)) {\r\n      point.line++\r\n      point.column = 1\r\n      point.offset += code === codes.carriageReturnLineFeed ? 2 : 1\r\n      accountForPotentialSkip()\r\n      debug('position: after eol: `%j`', point)\r\n    } else if (code !== codes.virtualSpace) {\r\n      point.column++\r\n      point.offset++\r\n    }\r\n\r\n    // Not in a string chunk.\r\n    if (point._bufferIndex < 0) {\r\n      point._index++\r\n    } else {\r\n      point._bufferIndex++\r\n\r\n      // At end of string chunk.\r\n      if (\r\n        point._bufferIndex ===\r\n        // Points w/ non-negative `_bufferIndex` reference\r\n        // strings.\r\n        /** @type {string} */ (chunks[point._index]).length\r\n      ) {\r\n        point._bufferIndex = -1\r\n        point._index++\r\n      }\r\n    }\r\n\r\n    // Expose the previous character.\r\n    context.previous = code\r\n\r\n    // Mark as consumed.\r\n    consumed = true\r\n  }\r\n\r\n  /** @type {Effects['enter']} */\r\n  function enter(type, fields) {\r\n    /** @type {Token} */\r\n    // @ts-expect-error Patch instead of assign required fields to help GC.\r\n    const token = fields || {}\r\n    token.type = type\r\n    token.start = now()\r\n\r\n    assert(typeof type === 'string', 'expected string type')\r\n    assert(type.length > 0, 'expected non-empty string')\r\n    debug('enter: `%s`', type)\r\n\r\n    context.events.push(['enter', token, context])\r\n\r\n    stack.push(token)\r\n\r\n    return token\r\n  }\r\n\r\n  /** @type {Effects['exit']} */\r\n  function exit(type) {\r\n    assert(typeof type === 'string', 'expected string type')\r\n    assert(type.length > 0, 'expected non-empty string')\r\n\r\n    const token = stack.pop()\r\n    assert(token, 'cannot close w/o open tokens')\r\n    token.end = now()\r\n\r\n    assert(type === token.type, 'expected exit token to match current token')\r\n\r\n    assert(\r\n      !(\r\n        token.start._index === token.end._index &&\r\n        token.start._bufferIndex === token.end._bufferIndex\r\n      ),\r\n      'expected non-empty token (`' + type + '`)'\r\n    )\r\n\r\n    debug('exit: `%s`', token.type)\r\n    context.events.push(['exit', token, context])\r\n\r\n    return token\r\n  }\r\n\r\n  /**\r\n   * Use results.\r\n   *\r\n   * @type {ReturnHandle}\r\n   */\r\n  function onsuccessfulconstruct(construct, info) {\r\n    addResult(construct, info.from)\r\n  }\r\n\r\n  /**\r\n   * Discard results.\r\n   *\r\n   * @type {ReturnHandle}\r\n   */\r\n  function onsuccessfulcheck(_, info) {\r\n    info.restore()\r\n  }\r\n\r\n  /**\r\n   * Factory to attempt/check/interrupt.\r\n   *\r\n   * @param {ReturnHandle} onreturn\r\n   *   Callback.\r\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\r\n   *   Fields.\r\n   */\r\n  function constructFactory(onreturn, fields) {\r\n    return hook\r\n\r\n    /**\r\n     * Handle either an object mapping codes to constructs, a list of\r\n     * constructs, or a single construct.\r\n     *\r\n     * @param {Array<Construct> | ConstructRecord | Construct} constructs\r\n     *   Constructs.\r\n     * @param {State} returnState\r\n     *   State.\r\n     * @param {State | undefined} [bogusState]\r\n     *   State.\r\n     * @returns {State}\r\n     *   State.\r\n     */\r\n    function hook(constructs, returnState, bogusState) {\r\n      /** @type {ReadonlyArray<Construct>} */\r\n      let listOfConstructs\r\n      /** @type {number} */\r\n      let constructIndex\r\n      /** @type {Construct} */\r\n      let currentConstruct\r\n      /** @type {Info} */\r\n      let info\r\n\r\n      return Array.isArray(constructs)\r\n        ? /* c8 ignore next 1 */\r\n          handleListOfConstructs(constructs)\r\n        : 'tokenize' in constructs\r\n          ? // Looks like a construct.\r\n            handleListOfConstructs([/** @type {Construct} */ (constructs)])\r\n          : handleMapOfConstructs(constructs)\r\n\r\n      /**\r\n       * Handle a list of construct.\r\n       *\r\n       * @param {ConstructRecord} map\r\n       *   Constructs.\r\n       * @returns {State}\r\n       *   State.\r\n       */\r\n      function handleMapOfConstructs(map) {\r\n        return start\r\n\r\n        /** @type {State} */\r\n        function start(code) {\r\n          const left = code !== null && map[code]\r\n          const all = code !== null && map.null\r\n          const list = [\r\n            // To do: add more extension tests.\r\n            /* c8 ignore next 2 */\r\n            ...(Array.isArray(left) ? left : left ? [left] : []),\r\n            ...(Array.isArray(all) ? all : all ? [all] : [])\r\n          ]\r\n\r\n          return handleListOfConstructs(list)(code)\r\n        }\r\n      }\r\n\r\n      /**\r\n       * Handle a list of construct.\r\n       *\r\n       * @param {ReadonlyArray<Construct>} list\r\n       *   Constructs.\r\n       * @returns {State}\r\n       *   State.\r\n       */\r\n      function handleListOfConstructs(list) {\r\n        listOfConstructs = list\r\n        constructIndex = 0\r\n\r\n        if (list.length === 0) {\r\n          assert(bogusState, 'expected `bogusState` to be given')\r\n          return bogusState\r\n        }\r\n\r\n        return handleConstruct(list[constructIndex])\r\n      }\r\n\r\n      /**\r\n       * Handle a single construct.\r\n       *\r\n       * @param {Construct} construct\r\n       *   Construct.\r\n       * @returns {State}\r\n       *   State.\r\n       */\r\n      function handleConstruct(construct) {\r\n        return start\r\n\r\n        /** @type {State} */\r\n        function start(code) {\r\n          // To do: not needed to store if there is no bogus state, probably?\r\n          // Currently doesn’t work because `inspect` in document does a check\r\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\r\n          // by not storing.\r\n          info = store()\r\n          currentConstruct = construct\r\n\r\n          if (!construct.partial) {\r\n            context.currentConstruct = construct\r\n          }\r\n\r\n          // Always populated by defaults.\r\n          assert(\r\n            context.parser.constructs.disable.null,\r\n            'expected `disable.null` to be populated'\r\n          )\r\n\r\n          if (\r\n            construct.name &&\r\n            context.parser.constructs.disable.null.includes(construct.name)\r\n          ) {\r\n            return nok(code)\r\n          }\r\n\r\n          return construct.tokenize.call(\r\n            // If we do have fields, create an object w/ `context` as its\r\n            // prototype.\r\n            // This allows a “live binding”, which is needed for `interrupt`.\r\n            fields ? Object.assign(Object.create(context), fields) : context,\r\n            effects,\r\n            ok,\r\n            nok\r\n          )(code)\r\n        }\r\n      }\r\n\r\n      /** @type {State} */\r\n      function ok(code) {\r\n        assert(code === expectedCode, 'expected code')\r\n        consumed = true\r\n        onreturn(currentConstruct, info)\r\n        return returnState\r\n      }\r\n\r\n      /** @type {State} */\r\n      function nok(code) {\r\n        assert(code === expectedCode, 'expected code')\r\n        consumed = true\r\n        info.restore()\r\n\r\n        if (++constructIndex < listOfConstructs.length) {\r\n          return handleConstruct(listOfConstructs[constructIndex])\r\n        }\r\n\r\n        return bogusState\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Construct} construct\r\n   *   Construct.\r\n   * @param {number} from\r\n   *   From.\r\n   * @returns {undefined}\r\n   *   Nothing.\r\n   */\r\n  function addResult(construct, from) {\r\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\r\n      resolveAllConstructs.push(construct)\r\n    }\r\n\r\n    if (construct.resolve) {\r\n      splice(\r\n        context.events,\r\n        from,\r\n        context.events.length - from,\r\n        construct.resolve(context.events.slice(from), context)\r\n      )\r\n    }\r\n\r\n    if (construct.resolveTo) {\r\n      context.events = construct.resolveTo(context.events, context)\r\n    }\r\n\r\n    assert(\r\n      construct.partial ||\r\n        context.events.length === 0 ||\r\n        context.events[context.events.length - 1][0] === 'exit',\r\n      'expected last token to end'\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Store state.\r\n   *\r\n   * @returns {Info}\r\n   *   Info.\r\n   */\r\n  function store() {\r\n    const startPoint = now()\r\n    const startPrevious = context.previous\r\n    const startCurrentConstruct = context.currentConstruct\r\n    const startEventsIndex = context.events.length\r\n    const startStack = Array.from(stack)\r\n\r\n    return {from: startEventsIndex, restore}\r\n\r\n    /**\r\n     * Restore state.\r\n     *\r\n     * @returns {undefined}\r\n     *   Nothing.\r\n     */\r\n    function restore() {\r\n      point = startPoint\r\n      context.previous = startPrevious\r\n      context.currentConstruct = startCurrentConstruct\r\n      context.events.length = startEventsIndex\r\n      stack = startStack\r\n      accountForPotentialSkip()\r\n      debug('position: restore: `%j`', point)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Move the current point a bit forward in the line when it’s on a column\r\n   * skip.\r\n   *\r\n   * @returns {undefined}\r\n   *   Nothing.\r\n   */\r\n  function accountForPotentialSkip() {\r\n    if (point.line in columnStart && point.column < 2) {\r\n      point.column = columnStart[point.line]\r\n      point.offset += columnStart[point.line] - 1\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Get the chunks from a slice of chunks in the range of a token.\r\n *\r\n * @param {ReadonlyArray<Chunk>} chunks\r\n *   Chunks.\r\n * @param {Pick<Token, 'end' | 'start'>} token\r\n *   Token.\r\n * @returns {Array<Chunk>}\r\n *   Chunks.\r\n */\r\nfunction sliceChunks(chunks, token) {\r\n  const startIndex = token.start._index\r\n  const startBufferIndex = token.start._bufferIndex\r\n  const endIndex = token.end._index\r\n  const endBufferIndex = token.end._bufferIndex\r\n  /** @type {Array<Chunk>} */\r\n  let view\r\n\r\n  if (startIndex === endIndex) {\r\n    assert(endBufferIndex > -1, 'expected non-negative end buffer index')\r\n    assert(startBufferIndex > -1, 'expected non-negative start buffer index')\r\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\r\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\r\n  } else {\r\n    view = chunks.slice(startIndex, endIndex)\r\n\r\n    if (startBufferIndex > -1) {\r\n      const head = view[0]\r\n      if (typeof head === 'string') {\r\n        view[0] = head.slice(startBufferIndex)\r\n        /* c8 ignore next 4 -- used to be used, no longer */\r\n      } else {\r\n        assert(startBufferIndex === 0, 'expected `startBufferIndex` to be `0`')\r\n        view.shift()\r\n      }\r\n    }\r\n\r\n    if (endBufferIndex > 0) {\r\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\r\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\r\n    }\r\n  }\r\n\r\n  return view\r\n}\r\n\r\n/**\r\n * Get the string value of a slice of chunks.\r\n *\r\n * @param {ReadonlyArray<Chunk>} chunks\r\n *   Chunks.\r\n * @param {boolean | undefined} [expandTabs=false]\r\n *   Whether to expand tabs (default: `false`).\r\n * @returns {string}\r\n *   Result.\r\n */\r\nfunction serializeChunks(chunks, expandTabs) {\r\n  let index = -1\r\n  /** @type {Array<string>} */\r\n  const result = []\r\n  /** @type {boolean | undefined} */\r\n  let atTab\r\n\r\n  while (++index < chunks.length) {\r\n    const chunk = chunks[index]\r\n    /** @type {string} */\r\n    let value\r\n\r\n    if (typeof chunk === 'string') {\r\n      value = chunk\r\n    } else\r\n      switch (chunk) {\r\n        case codes.carriageReturn: {\r\n          value = values.cr\r\n\r\n          break\r\n        }\r\n\r\n        case codes.lineFeed: {\r\n          value = values.lf\r\n\r\n          break\r\n        }\r\n\r\n        case codes.carriageReturnLineFeed: {\r\n          value = values.cr + values.lf\r\n\r\n          break\r\n        }\r\n\r\n        case codes.horizontalTab: {\r\n          value = expandTabs ? values.space : values.ht\r\n\r\n          break\r\n        }\r\n\r\n        case codes.virtualSpace: {\r\n          if (!expandTabs && atTab) continue\r\n          value = values.space\r\n\r\n          break\r\n        }\r\n\r\n        default: {\r\n          assert(typeof chunk === 'number', 'expected number')\r\n          // Currently only replacement character.\r\n          value = String.fromCharCode(chunk)\r\n        }\r\n      }\r\n\r\n    atTab = chunk === codes.horizontalTab\r\n    result.push(value)\r\n  }\r\n\r\n  return result.join('')\r\n}\r\n", "/**\r\n * @import {\r\n *   Create,\r\n *   FullNormalizedExtension,\r\n *   InitialConstruct,\r\n *   ParseContext,\r\n *   ParseOptions\r\n * } from 'micromark-util-types'\r\n */\r\n\r\nimport {combineExtensions} from 'micromark-util-combine-extensions'\r\nimport {content} from './initialize/content.js'\r\nimport {document} from './initialize/document.js'\r\nimport {flow} from './initialize/flow.js'\r\nimport {string, text} from './initialize/text.js'\r\nimport * as defaultConstructs from './constructs.js'\r\nimport {createTokenizer} from './create-tokenizer.js'\r\n\r\n/**\r\n * @param {ParseOptions | null | undefined} [options]\r\n *   Configuration (optional).\r\n * @returns {ParseContext}\r\n *   Parser.\r\n */\r\nexport function parse(options) {\r\n  const settings = options || {}\r\n  const constructs = /** @type {FullNormalizedExtension} */ (\r\n    combineExtensions([defaultConstructs, ...(settings.extensions || [])])\r\n  )\r\n\r\n  /** @type {ParseContext} */\r\n  const parser = {\r\n    constructs,\r\n    content: create(content),\r\n    defined: [],\r\n    document: create(document),\r\n    flow: create(flow),\r\n    lazy: {},\r\n    string: create(string),\r\n    text: create(text)\r\n  }\r\n\r\n  return parser\r\n\r\n  /**\r\n   * @param {InitialConstruct} initial\r\n   *   Construct to start with.\r\n   * @returns {Create}\r\n   *   Create a tokenizer.\r\n   */\r\n  function create(initial) {\r\n    return creator\r\n    /** @type {Create} */\r\n    function creator(from) {\r\n      return createTokenizer(parser, initial, from)\r\n    }\r\n  }\r\n}\r\n", "/**\r\n * @import {Event} from 'micromark-util-types'\r\n */\r\n\r\nimport {subtokenize} from 'micromark-util-subtokenize'\r\n\r\n/**\r\n * @param {Array<Event>} events\r\n *   Events.\r\n * @returns {Array<Event>}\r\n *   Events.\r\n */\r\nexport function postprocess(events) {\r\n  while (!subtokenize(events)) {\r\n    // Empty\r\n  }\r\n\r\n  return events\r\n}\r\n", "/**\r\n * @import {Chunk, Code, Encoding, Value} from 'micromark-util-types'\r\n */\r\n\r\n/**\r\n * @callback Preprocessor\r\n *   Preprocess a value.\r\n * @param {Value} value\r\n *   Value.\r\n * @param {Encoding | null | undefined} [encoding]\r\n *   Encoding when `value` is a typed array (optional).\r\n * @param {boolean | null | undefined} [end=false]\r\n *   Whether this is the last chunk (default: `false`).\r\n * @returns {Array<Chunk>}\r\n *   Chunks.\r\n */\r\n\r\nimport {codes, constants} from 'micromark-util-symbol'\r\n\r\nconst search = /[\\0\\t\\n\\r]/g\r\n\r\n/**\r\n * @returns {Preprocessor}\r\n *   Preprocess a value.\r\n */\r\nexport function preprocess() {\r\n  let column = 1\r\n  let buffer = ''\r\n  /** @type {boolean | undefined} */\r\n  let start = true\r\n  /** @type {boolean | undefined} */\r\n  let atCarriageReturn\r\n\r\n  return preprocessor\r\n\r\n  /** @type {Preprocessor} */\r\n  // eslint-disable-next-line complexity\r\n  function preprocessor(value, encoding, end) {\r\n    /** @type {Array<Chunk>} */\r\n    const chunks = []\r\n    /** @type {RegExpMatchArray | null} */\r\n    let match\r\n    /** @type {number} */\r\n    let next\r\n    /** @type {number} */\r\n    let startPosition\r\n    /** @type {number} */\r\n    let endPosition\r\n    /** @type {Code} */\r\n    let code\r\n\r\n    value =\r\n      buffer +\r\n      (typeof value === 'string'\r\n        ? value.toString()\r\n        : new TextDecoder(encoding || undefined).decode(value))\r\n\r\n    startPosition = 0\r\n    buffer = ''\r\n\r\n    if (start) {\r\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\r\n      if (value.charCodeAt(0) === codes.byteOrderMarker) {\r\n        startPosition++\r\n      }\r\n\r\n      start = undefined\r\n    }\r\n\r\n    while (startPosition < value.length) {\r\n      search.lastIndex = startPosition\r\n      match = search.exec(value)\r\n      endPosition =\r\n        match && match.index !== undefined ? match.index : value.length\r\n      code = value.charCodeAt(endPosition)\r\n\r\n      if (!match) {\r\n        buffer = value.slice(startPosition)\r\n        break\r\n      }\r\n\r\n      if (\r\n        code === codes.lf &&\r\n        startPosition === endPosition &&\r\n        atCarriageReturn\r\n      ) {\r\n        chunks.push(codes.carriageReturnLineFeed)\r\n        atCarriageReturn = undefined\r\n      } else {\r\n        if (atCarriageReturn) {\r\n          chunks.push(codes.carriageReturn)\r\n          atCarriageReturn = undefined\r\n        }\r\n\r\n        if (startPosition < endPosition) {\r\n          chunks.push(value.slice(startPosition, endPosition))\r\n          column += endPosition - startPosition\r\n        }\r\n\r\n        switch (code) {\r\n          case codes.nul: {\r\n            chunks.push(codes.replacementCharacter)\r\n            column++\r\n\r\n            break\r\n          }\r\n\r\n          case codes.ht: {\r\n            next = Math.ceil(column / constants.tabSize) * constants.tabSize\r\n            chunks.push(codes.horizontalTab)\r\n            while (column++ < next) chunks.push(codes.virtualSpace)\r\n\r\n            break\r\n          }\r\n\r\n          case codes.lf: {\r\n            chunks.push(codes.lineFeed)\r\n            column = 1\r\n\r\n            break\r\n          }\r\n\r\n          default: {\r\n            atCarriageReturn = true\r\n            column = 1\r\n          }\r\n        }\r\n      }\r\n\r\n      startPosition = endPosition + 1\r\n    }\r\n\r\n    if (end) {\r\n      if (atCarriageReturn) chunks.push(codes.carriageReturn)\r\n      if (buffer) chunks.push(buffer)\r\n      chunks.push(codes.eof)\r\n    }\r\n\r\n    return chunks\r\n  }\r\n}\r\n", "/**\r\n * @import {\r\n *   Break,\r\n *   Blockquote,\r\n *   Code,\r\n *   Definition,\r\n *   Emphasis,\r\n *   Heading,\r\n *   Html,\r\n *   Image,\r\n *   InlineCode,\r\n *   Link,\r\n *   ListItem,\r\n *   List,\r\n *   Nodes,\r\n *   Paragraph,\r\n *   PhrasingContent,\r\n *   ReferenceType,\r\n *   Root,\r\n *   Strong,\r\n *   Text,\r\n *   ThematicBreak\r\n * } from 'mdast'\r\n * @import {\r\n *   Encoding,\r\n *   Event,\r\n *   Token,\r\n *   Value\r\n * } from 'micromark-util-types'\r\n * @import {Point} from 'unist'\r\n * @import {\r\n *   CompileContext,\r\n *   CompileData,\r\n *   Config,\r\n *   Extension,\r\n *   Handle,\r\n *   OnEnterError,\r\n *   Options\r\n * } from './types.js'\r\n */\r\n\r\nimport {ok as assert} from 'devlop'\r\nimport {toString} from 'mdast-util-to-string'\r\nimport {parse, postprocess, preprocess} from 'micromark'\r\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\r\nimport {decodeString} from 'micromark-util-decode-string'\r\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\r\nimport {codes, constants, types} from 'micromark-util-symbol'\r\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\r\nimport {stringifyPosition} from 'unist-util-stringify-position'\r\n\r\nconst own = {}.hasOwnProperty\r\n\r\n/**\r\n * Turn markdown into a syntax tree.\r\n *\r\n * @overload\r\n * @param {Value} value\r\n * @param {Encoding | null | undefined} [encoding]\r\n * @param {Options | null | undefined} [options]\r\n * @returns {Root}\r\n *\r\n * @overload\r\n * @param {Value} value\r\n * @param {Options | null | undefined} [options]\r\n * @returns {Root}\r\n *\r\n * @param {Value} value\r\n *   Markdown to parse.\r\n * @param {Encoding | Options | null | undefined} [encoding]\r\n *   Character encoding for when `value` is `Buffer`.\r\n * @param {Options | null | undefined} [options]\r\n *   Configuration.\r\n * @returns {Root}\r\n *   mdast tree.\r\n */\r\nexport function fromMarkdown(value, encoding, options) {\r\n  if (typeof encoding !== 'string') {\r\n    options = encoding\r\n    encoding = undefined\r\n  }\r\n\r\n  return compiler(options)(\r\n    postprocess(\r\n      parse(options)\r\n        .document()\r\n        .write(preprocess()(value, encoding, true))\r\n    )\r\n  )\r\n}\r\n\r\n/**\r\n * Note this compiler only understand complete buffering, not streaming.\r\n *\r\n * @param {Options | null | undefined} [options]\r\n */\r\nfunction compiler(options) {\r\n  /** @type {Config} */\r\n  const config = {\r\n    transforms: [],\r\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\r\n    enter: {\r\n      autolink: opener(link),\r\n      autolinkProtocol: onenterdata,\r\n      autolinkEmail: onenterdata,\r\n      atxHeading: opener(heading),\r\n      blockQuote: opener(blockQuote),\r\n      characterEscape: onenterdata,\r\n      characterReference: onenterdata,\r\n      codeFenced: opener(codeFlow),\r\n      codeFencedFenceInfo: buffer,\r\n      codeFencedFenceMeta: buffer,\r\n      codeIndented: opener(codeFlow, buffer),\r\n      codeText: opener(codeText, buffer),\r\n      codeTextData: onenterdata,\r\n      data: onenterdata,\r\n      codeFlowValue: onenterdata,\r\n      definition: opener(definition),\r\n      definitionDestinationString: buffer,\r\n      definitionLabelString: buffer,\r\n      definitionTitleString: buffer,\r\n      emphasis: opener(emphasis),\r\n      hardBreakEscape: opener(hardBreak),\r\n      hardBreakTrailing: opener(hardBreak),\r\n      htmlFlow: opener(html, buffer),\r\n      htmlFlowData: onenterdata,\r\n      htmlText: opener(html, buffer),\r\n      htmlTextData: onenterdata,\r\n      image: opener(image),\r\n      label: buffer,\r\n      link: opener(link),\r\n      listItem: opener(listItem),\r\n      listItemValue: onenterlistitemvalue,\r\n      listOrdered: opener(list, onenterlistordered),\r\n      listUnordered: opener(list),\r\n      paragraph: opener(paragraph),\r\n      reference: onenterreference,\r\n      referenceString: buffer,\r\n      resourceDestinationString: buffer,\r\n      resourceTitleString: buffer,\r\n      setextHeading: opener(heading),\r\n      strong: opener(strong),\r\n      thematicBreak: opener(thematicBreak)\r\n    },\r\n    exit: {\r\n      atxHeading: closer(),\r\n      atxHeadingSequence: onexitatxheadingsequence,\r\n      autolink: closer(),\r\n      autolinkEmail: onexitautolinkemail,\r\n      autolinkProtocol: onexitautolinkprotocol,\r\n      blockQuote: closer(),\r\n      characterEscapeValue: onexitdata,\r\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\r\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\r\n      characterReferenceValue: onexitcharacterreferencevalue,\r\n      characterReference: onexitcharacterreference,\r\n      codeFenced: closer(onexitcodefenced),\r\n      codeFencedFence: onexitcodefencedfence,\r\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\r\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\r\n      codeFlowValue: onexitdata,\r\n      codeIndented: closer(onexitcodeindented),\r\n      codeText: closer(onexitcodetext),\r\n      codeTextData: onexitdata,\r\n      data: onexitdata,\r\n      definition: closer(),\r\n      definitionDestinationString: onexitdefinitiondestinationstring,\r\n      definitionLabelString: onexitdefinitionlabelstring,\r\n      definitionTitleString: onexitdefinitiontitlestring,\r\n      emphasis: closer(),\r\n      hardBreakEscape: closer(onexithardbreak),\r\n      hardBreakTrailing: closer(onexithardbreak),\r\n      htmlFlow: closer(onexithtmlflow),\r\n      htmlFlowData: onexitdata,\r\n      htmlText: closer(onexithtmltext),\r\n      htmlTextData: onexitdata,\r\n      image: closer(onexitimage),\r\n      label: onexitlabel,\r\n      labelText: onexitlabeltext,\r\n      lineEnding: onexitlineending,\r\n      link: closer(onexitlink),\r\n      listItem: closer(),\r\n      listOrdered: closer(),\r\n      listUnordered: closer(),\r\n      paragraph: closer(),\r\n      referenceString: onexitreferencestring,\r\n      resourceDestinationString: onexitresourcedestinationstring,\r\n      resourceTitleString: onexitresourcetitlestring,\r\n      resource: onexitresource,\r\n      setextHeading: closer(onexitsetextheading),\r\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\r\n      setextHeadingText: onexitsetextheadingtext,\r\n      strong: closer(),\r\n      thematicBreak: closer()\r\n    }\r\n  }\r\n\r\n  configure(config, (options || {}).mdastExtensions || [])\r\n\r\n  /** @type {CompileData} */\r\n  const data = {}\r\n\r\n  return compile\r\n\r\n  /**\r\n   * Turn micromark events into an mdast tree.\r\n   *\r\n   * @param {Array<Event>} events\r\n   *   Events.\r\n   * @returns {Root}\r\n   *   mdast tree.\r\n   */\r\n  function compile(events) {\r\n    /** @type {Root} */\r\n    let tree = {type: 'root', children: []}\r\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\r\n    const context = {\r\n      stack: [tree],\r\n      tokenStack: [],\r\n      config,\r\n      enter,\r\n      exit,\r\n      buffer,\r\n      resume,\r\n      data\r\n    }\r\n    /** @type {Array<number>} */\r\n    const listStack = []\r\n    let index = -1\r\n\r\n    while (++index < events.length) {\r\n      // We preprocess lists to add `listItem` tokens, and to infer whether\r\n      // items the list itself are spread out.\r\n      if (\r\n        events[index][1].type === types.listOrdered ||\r\n        events[index][1].type === types.listUnordered\r\n      ) {\r\n        if (events[index][0] === 'enter') {\r\n          listStack.push(index)\r\n        } else {\r\n          const tail = listStack.pop()\r\n          assert(typeof tail === 'number', 'expected list ot be open')\r\n          index = prepareList(events, tail, index)\r\n        }\r\n      }\r\n    }\r\n\r\n    index = -1\r\n\r\n    while (++index < events.length) {\r\n      const handler = config[events[index][0]]\r\n\r\n      if (own.call(handler, events[index][1].type)) {\r\n        handler[events[index][1].type].call(\r\n          Object.assign(\r\n            {sliceSerialize: events[index][2].sliceSerialize},\r\n            context\r\n          ),\r\n          events[index][1]\r\n        )\r\n      }\r\n    }\r\n\r\n    // Handle tokens still being open.\r\n    if (context.tokenStack.length > 0) {\r\n      const tail = context.tokenStack[context.tokenStack.length - 1]\r\n      const handler = tail[1] || defaultOnError\r\n      handler.call(context, undefined, tail[0])\r\n    }\r\n\r\n    // Figure out `root` position.\r\n    tree.position = {\r\n      start: point(\r\n        events.length > 0 ? events[0][1].start : {line: 1, column: 1, offset: 0}\r\n      ),\r\n      end: point(\r\n        events.length > 0\r\n          ? events[events.length - 2][1].end\r\n          : {line: 1, column: 1, offset: 0}\r\n      )\r\n    }\r\n\r\n    // Call transforms.\r\n    index = -1\r\n    while (++index < config.transforms.length) {\r\n      tree = config.transforms[index](tree) || tree\r\n    }\r\n\r\n    return tree\r\n  }\r\n\r\n  /**\r\n   * @param {Array<Event>} events\r\n   * @param {number} start\r\n   * @param {number} length\r\n   * @returns {number}\r\n   */\r\n  function prepareList(events, start, length) {\r\n    let index = start - 1\r\n    let containerBalance = -1\r\n    let listSpread = false\r\n    /** @type {Token | undefined} */\r\n    let listItem\r\n    /** @type {number | undefined} */\r\n    let lineIndex\r\n    /** @type {number | undefined} */\r\n    let firstBlankLineIndex\r\n    /** @type {boolean | undefined} */\r\n    let atMarker\r\n\r\n    while (++index <= length) {\r\n      const event = events[index]\r\n\r\n      switch (event[1].type) {\r\n        case types.listUnordered:\r\n        case types.listOrdered:\r\n        case types.blockQuote: {\r\n          if (event[0] === 'enter') {\r\n            containerBalance++\r\n          } else {\r\n            containerBalance--\r\n          }\r\n\r\n          atMarker = undefined\r\n\r\n          break\r\n        }\r\n\r\n        case types.lineEndingBlank: {\r\n          if (event[0] === 'enter') {\r\n            if (\r\n              listItem &&\r\n              !atMarker &&\r\n              !containerBalance &&\r\n              !firstBlankLineIndex\r\n            ) {\r\n              firstBlankLineIndex = index\r\n            }\r\n\r\n            atMarker = undefined\r\n          }\r\n\r\n          break\r\n        }\r\n\r\n        case types.linePrefix:\r\n        case types.listItemValue:\r\n        case types.listItemMarker:\r\n        case types.listItemPrefix:\r\n        case types.listItemPrefixWhitespace: {\r\n          // Empty.\r\n\r\n          break\r\n        }\r\n\r\n        default: {\r\n          atMarker = undefined\r\n        }\r\n      }\r\n\r\n      if (\r\n        (!containerBalance &&\r\n          event[0] === 'enter' &&\r\n          event[1].type === types.listItemPrefix) ||\r\n        (containerBalance === -1 &&\r\n          event[0] === 'exit' &&\r\n          (event[1].type === types.listUnordered ||\r\n            event[1].type === types.listOrdered))\r\n      ) {\r\n        if (listItem) {\r\n          let tailIndex = index\r\n          lineIndex = undefined\r\n\r\n          while (tailIndex--) {\r\n            const tailEvent = events[tailIndex]\r\n\r\n            if (\r\n              tailEvent[1].type === types.lineEnding ||\r\n              tailEvent[1].type === types.lineEndingBlank\r\n            ) {\r\n              if (tailEvent[0] === 'exit') continue\r\n\r\n              if (lineIndex) {\r\n                events[lineIndex][1].type = types.lineEndingBlank\r\n                listSpread = true\r\n              }\r\n\r\n              tailEvent[1].type = types.lineEnding\r\n              lineIndex = tailIndex\r\n            } else if (\r\n              tailEvent[1].type === types.linePrefix ||\r\n              tailEvent[1].type === types.blockQuotePrefix ||\r\n              tailEvent[1].type === types.blockQuotePrefixWhitespace ||\r\n              tailEvent[1].type === types.blockQuoteMarker ||\r\n              tailEvent[1].type === types.listItemIndent\r\n            ) {\r\n              // Empty\r\n            } else {\r\n              break\r\n            }\r\n          }\r\n\r\n          if (\r\n            firstBlankLineIndex &&\r\n            (!lineIndex || firstBlankLineIndex < lineIndex)\r\n          ) {\r\n            listItem._spread = true\r\n          }\r\n\r\n          // Fix position.\r\n          listItem.end = Object.assign(\r\n            {},\r\n            lineIndex ? events[lineIndex][1].start : event[1].end\r\n          )\r\n\r\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]])\r\n          index++\r\n          length++\r\n        }\r\n\r\n        // Create a new list item.\r\n        if (event[1].type === types.listItemPrefix) {\r\n          /** @type {Token} */\r\n          const item = {\r\n            type: 'listItem',\r\n            _spread: false,\r\n            start: Object.assign({}, event[1].start),\r\n            // @ts-expect-error: we’ll add `end` in a second.\r\n            end: undefined\r\n          }\r\n          listItem = item\r\n          events.splice(index, 0, ['enter', item, event[2]])\r\n          index++\r\n          length++\r\n          firstBlankLineIndex = undefined\r\n          atMarker = true\r\n        }\r\n      }\r\n    }\r\n\r\n    events[start][1]._spread = listSpread\r\n    return length\r\n  }\r\n\r\n  /**\r\n   * Create an opener handle.\r\n   *\r\n   * @param {(token: Token) => Nodes} create\r\n   *   Create a node.\r\n   * @param {Handle | undefined} [and]\r\n   *   Optional function to also run.\r\n   * @returns {Handle}\r\n   *   Handle.\r\n   */\r\n  function opener(create, and) {\r\n    return open\r\n\r\n    /**\r\n     * @this {CompileContext}\r\n     * @param {Token} token\r\n     * @returns {undefined}\r\n     */\r\n    function open(token) {\r\n      enter.call(this, create(token), token)\r\n      if (and) and.call(this, token)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @type {CompileContext['buffer']}\r\n   */\r\n  function buffer() {\r\n    this.stack.push({type: 'fragment', children: []})\r\n  }\r\n\r\n  /**\r\n   * @type {CompileContext['enter']}\r\n   */\r\n  function enter(node, token, errorHandler) {\r\n    const parent = this.stack[this.stack.length - 1]\r\n    assert(parent, 'expected `parent`')\r\n    assert('children' in parent, 'expected `parent`')\r\n    /** @type {Array<Nodes>} */\r\n    const siblings = parent.children\r\n    siblings.push(node)\r\n    this.stack.push(node)\r\n    this.tokenStack.push([token, errorHandler || undefined])\r\n    node.position = {\r\n      start: point(token.start),\r\n      // @ts-expect-error: `end` will be patched later.\r\n      end: undefined\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create a closer handle.\r\n   *\r\n   * @param {Handle | undefined} [and]\r\n   *   Optional function to also run.\r\n   * @returns {Handle}\r\n   *   Handle.\r\n   */\r\n  function closer(and) {\r\n    return close\r\n\r\n    /**\r\n     * @this {CompileContext}\r\n     * @param {Token} token\r\n     * @returns {undefined}\r\n     */\r\n    function close(token) {\r\n      if (and) and.call(this, token)\r\n      exit.call(this, token)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @type {CompileContext['exit']}\r\n   */\r\n  function exit(token, onExitError) {\r\n    const node = this.stack.pop()\r\n    assert(node, 'expected `node`')\r\n    const open = this.tokenStack.pop()\r\n\r\n    if (!open) {\r\n      throw new Error(\r\n        'Cannot close `' +\r\n          token.type +\r\n          '` (' +\r\n          stringifyPosition({start: token.start, end: token.end}) +\r\n          '): it’s not open'\r\n      )\r\n    } else if (open[0].type !== token.type) {\r\n      if (onExitError) {\r\n        onExitError.call(this, token, open[0])\r\n      } else {\r\n        const handler = open[1] || defaultOnError\r\n        handler.call(this, token, open[0])\r\n      }\r\n    }\r\n\r\n    assert(node.type !== 'fragment', 'unexpected fragment `exit`ed')\r\n    assert(node.position, 'expected `position` to be defined')\r\n    node.position.end = point(token.end)\r\n  }\r\n\r\n  /**\r\n   * @type {CompileContext['resume']}\r\n   */\r\n  function resume() {\r\n    return toString(this.stack.pop())\r\n  }\r\n\r\n  //\r\n  // Handlers.\r\n  //\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onenterlistordered() {\r\n    this.data.expectingFirstListItemValue = true\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onenterlistitemvalue(token) {\r\n    if (this.data.expectingFirstListItemValue) {\r\n      const ancestor = this.stack[this.stack.length - 2]\r\n      assert(ancestor, 'expected nodes on stack')\r\n      assert(ancestor.type === 'list', 'expected list on stack')\r\n      ancestor.start = Number.parseInt(\r\n        this.sliceSerialize(token),\r\n        constants.numericBaseDecimal\r\n      )\r\n      this.data.expectingFirstListItemValue = undefined\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitcodefencedfenceinfo() {\r\n    const data = this.resume()\r\n    const node = this.stack[this.stack.length - 1]\r\n    assert(node, 'expected node on stack')\r\n    assert(node.type === 'code', 'expected code on stack')\r\n    node.lang = data\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitcodefencedfencemeta() {\r\n    const data = this.resume()\r\n    const node = this.stack[this.stack.length - 1]\r\n    assert(node, 'expected node on stack')\r\n    assert(node.type === 'code', 'expected code on stack')\r\n    node.meta = data\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitcodefencedfence() {\r\n    // Exit if this is the closing fence.\r\n    if (this.data.flowCodeInside) return\r\n    this.buffer()\r\n    this.data.flowCodeInside = true\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitcodefenced() {\r\n    const data = this.resume()\r\n    const node = this.stack[this.stack.length - 1]\r\n    assert(node, 'expected node on stack')\r\n    assert(node.type === 'code', 'expected code on stack')\r\n\r\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '')\r\n    this.data.flowCodeInside = undefined\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitcodeindented() {\r\n    const data = this.resume()\r\n    const node = this.stack[this.stack.length - 1]\r\n    assert(node, 'expected node on stack')\r\n    assert(node.type === 'code', 'expected code on stack')\r\n\r\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '')\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitdefinitionlabelstring(token) {\r\n    const label = this.resume()\r\n    const node = this.stack[this.stack.length - 1]\r\n    assert(node, 'expected node on stack')\r\n    assert(node.type === 'definition', 'expected definition on stack')\r\n\r\n    node.label = label\r\n    node.identifier = normalizeIdentifier(\r\n      this.sliceSerialize(token)\r\n    ).toLowerCase()\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitdefinitiontitlestring() {\r\n    const data = this.resume()\r\n    const node = this.stack[this.stack.length - 1]\r\n    assert(node, 'expected node on stack')\r\n    assert(node.type === 'definition', 'expected definition on stack')\r\n\r\n    node.title = data\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitdefinitiondestinationstring() {\r\n    const data = this.resume()\r\n    const node = this.stack[this.stack.length - 1]\r\n    assert(node, 'expected node on stack')\r\n    assert(node.type === 'definition', 'expected definition on stack')\r\n\r\n    node.url = data\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitatxheadingsequence(token) {\r\n    const node = this.stack[this.stack.length - 1]\r\n    assert(node, 'expected node on stack')\r\n    assert(node.type === 'heading', 'expected heading on stack')\r\n\r\n    if (!node.depth) {\r\n      const depth = this.sliceSerialize(token).length\r\n\r\n      assert(\r\n        depth === 1 ||\r\n          depth === 2 ||\r\n          depth === 3 ||\r\n          depth === 4 ||\r\n          depth === 5 ||\r\n          depth === 6,\r\n        'expected `depth` between `1` and `6`'\r\n      )\r\n\r\n      node.depth = depth\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitsetextheadingtext() {\r\n    this.data.setextHeadingSlurpLineEnding = true\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitsetextheadinglinesequence(token) {\r\n    const node = this.stack[this.stack.length - 1]\r\n    assert(node, 'expected node on stack')\r\n    assert(node.type === 'heading', 'expected heading on stack')\r\n\r\n    node.depth =\r\n      this.sliceSerialize(token).codePointAt(0) === codes.equalsTo ? 1 : 2\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitsetextheading() {\r\n    this.data.setextHeadingSlurpLineEnding = undefined\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onenterdata(token) {\r\n    const node = this.stack[this.stack.length - 1]\r\n    assert(node, 'expected node on stack')\r\n    assert('children' in node, 'expected parent on stack')\r\n    /** @type {Array<Nodes>} */\r\n    const siblings = node.children\r\n\r\n    let tail = siblings[siblings.length - 1]\r\n\r\n    if (!tail || tail.type !== 'text') {\r\n      // Add a new text node.\r\n      tail = text()\r\n      tail.position = {\r\n        start: point(token.start),\r\n        // @ts-expect-error: we’ll add `end` later.\r\n        end: undefined\r\n      }\r\n      siblings.push(tail)\r\n    }\r\n\r\n    this.stack.push(tail)\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexitdata(token) {\r\n    const tail = this.stack.pop()\r\n    assert(tail, 'expected a `node` to be on the stack')\r\n    assert('value' in tail, 'expected a `literal` to be on the stack')\r\n    assert(tail.position, 'expected `node` to have an open position')\r\n    tail.value += this.sliceSerialize(token)\r\n    tail.position.end = point(token.end)\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexitlineending(token) {\r\n    const context = this.stack[this.stack.length - 1]\r\n    assert(context, 'expected `node`')\r\n\r\n    // If we’re at a hard break, include the line ending in there.\r\n    if (this.data.atHardBreak) {\r\n      assert('children' in context, 'expected `parent`')\r\n      const tail = context.children[context.children.length - 1]\r\n      assert(tail.position, 'expected tail to have a starting position')\r\n      tail.position.end = point(token.end)\r\n      this.data.atHardBreak = undefined\r\n      return\r\n    }\r\n\r\n    if (\r\n      !this.data.setextHeadingSlurpLineEnding &&\r\n      config.canContainEols.includes(context.type)\r\n    ) {\r\n      onenterdata.call(this, token)\r\n      onexitdata.call(this, token)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexithardbreak() {\r\n    this.data.atHardBreak = true\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexithtmlflow() {\r\n    const data = this.resume()\r\n    const node = this.stack[this.stack.length - 1]\r\n    assert(node, 'expected node on stack')\r\n    assert(node.type === 'html', 'expected html on stack')\r\n\r\n    node.value = data\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexithtmltext() {\r\n    const data = this.resume()\r\n    const node = this.stack[this.stack.length - 1]\r\n    assert(node, 'expected node on stack')\r\n    assert(node.type === 'html', 'expected html on stack')\r\n\r\n    node.value = data\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexitcodetext() {\r\n    const data = this.resume()\r\n    const node = this.stack[this.stack.length - 1]\r\n    assert(node, 'expected node on stack')\r\n    assert(node.type === 'inlineCode', 'expected inline code on stack')\r\n\r\n    node.value = data\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexitlink() {\r\n    const node = this.stack[this.stack.length - 1]\r\n    assert(node, 'expected node on stack')\r\n    assert(node.type === 'link', 'expected link on stack')\r\n\r\n    // Note: there are also `identifier` and `label` fields on this link node!\r\n    // These are used / cleaned here.\r\n\r\n    // To do: clean.\r\n    if (this.data.inReference) {\r\n      /** @type {ReferenceType} */\r\n      const referenceType = this.data.referenceType || 'shortcut'\r\n\r\n      node.type += 'Reference'\r\n      // @ts-expect-error: mutate.\r\n      node.referenceType = referenceType\r\n      // @ts-expect-error: mutate.\r\n      delete node.url\r\n      delete node.title\r\n    } else {\r\n      // @ts-expect-error: mutate.\r\n      delete node.identifier\r\n      // @ts-expect-error: mutate.\r\n      delete node.label\r\n    }\r\n\r\n    this.data.referenceType = undefined\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexitimage() {\r\n    const node = this.stack[this.stack.length - 1]\r\n    assert(node, 'expected node on stack')\r\n    assert(node.type === 'image', 'expected image on stack')\r\n\r\n    // Note: there are also `identifier` and `label` fields on this link node!\r\n    // These are used / cleaned here.\r\n\r\n    // To do: clean.\r\n    if (this.data.inReference) {\r\n      /** @type {ReferenceType} */\r\n      const referenceType = this.data.referenceType || 'shortcut'\r\n\r\n      node.type += 'Reference'\r\n      // @ts-expect-error: mutate.\r\n      node.referenceType = referenceType\r\n      // @ts-expect-error: mutate.\r\n      delete node.url\r\n      delete node.title\r\n    } else {\r\n      // @ts-expect-error: mutate.\r\n      delete node.identifier\r\n      // @ts-expect-error: mutate.\r\n      delete node.label\r\n    }\r\n\r\n    this.data.referenceType = undefined\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexitlabeltext(token) {\r\n    const string = this.sliceSerialize(token)\r\n    const ancestor = this.stack[this.stack.length - 2]\r\n    assert(ancestor, 'expected ancestor on stack')\r\n    assert(\r\n      ancestor.type === 'image' || ancestor.type === 'link',\r\n      'expected image or link on stack'\r\n    )\r\n\r\n    // @ts-expect-error: stash this on the node, as it might become a reference\r\n    // later.\r\n    ancestor.label = decodeString(string)\r\n    // @ts-expect-error: same as above.\r\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase()\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexitlabel() {\r\n    const fragment = this.stack[this.stack.length - 1]\r\n    assert(fragment, 'expected node on stack')\r\n    assert(fragment.type === 'fragment', 'expected fragment on stack')\r\n    const value = this.resume()\r\n    const node = this.stack[this.stack.length - 1]\r\n    assert(node, 'expected node on stack')\r\n    assert(\r\n      node.type === 'image' || node.type === 'link',\r\n      'expected image or link on stack'\r\n    )\r\n\r\n    // Assume a reference.\r\n    this.data.inReference = true\r\n\r\n    if (node.type === 'link') {\r\n      /** @type {Array<PhrasingContent>} */\r\n      const children = fragment.children\r\n\r\n      node.children = children\r\n    } else {\r\n      node.alt = value\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexitresourcedestinationstring() {\r\n    const data = this.resume()\r\n    const node = this.stack[this.stack.length - 1]\r\n    assert(node, 'expected node on stack')\r\n    assert(\r\n      node.type === 'image' || node.type === 'link',\r\n      'expected image or link on stack'\r\n    )\r\n    node.url = data\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexitresourcetitlestring() {\r\n    const data = this.resume()\r\n    const node = this.stack[this.stack.length - 1]\r\n    assert(node, 'expected node on stack')\r\n    assert(\r\n      node.type === 'image' || node.type === 'link',\r\n      'expected image or link on stack'\r\n    )\r\n    node.title = data\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexitresource() {\r\n    this.data.inReference = undefined\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onenterreference() {\r\n    this.data.referenceType = 'collapsed'\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexitreferencestring(token) {\r\n    const label = this.resume()\r\n    const node = this.stack[this.stack.length - 1]\r\n    assert(node, 'expected node on stack')\r\n    assert(\r\n      node.type === 'image' || node.type === 'link',\r\n      'expected image reference or link reference on stack'\r\n    )\r\n\r\n    // @ts-expect-error: stash this on the node, as it might become a reference\r\n    // later.\r\n    node.label = label\r\n    // @ts-expect-error: same as above.\r\n    node.identifier = normalizeIdentifier(\r\n      this.sliceSerialize(token)\r\n    ).toLowerCase()\r\n    this.data.referenceType = 'full'\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexitcharacterreferencemarker(token) {\r\n    assert(\r\n      token.type === 'characterReferenceMarkerNumeric' ||\r\n        token.type === 'characterReferenceMarkerHexadecimal'\r\n    )\r\n    this.data.characterReferenceType = token.type\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitcharacterreferencevalue(token) {\r\n    const data = this.sliceSerialize(token)\r\n    const type = this.data.characterReferenceType\r\n    /** @type {string} */\r\n    let value\r\n\r\n    if (type) {\r\n      value = decodeNumericCharacterReference(\r\n        data,\r\n        type === types.characterReferenceMarkerNumeric\r\n          ? constants.numericBaseDecimal\r\n          : constants.numericBaseHexadecimal\r\n      )\r\n      this.data.characterReferenceType = undefined\r\n    } else {\r\n      const result = decodeNamedCharacterReference(data)\r\n      assert(result !== false, 'expected reference to decode')\r\n      value = result\r\n    }\r\n\r\n    const tail = this.stack[this.stack.length - 1]\r\n    assert(tail, 'expected `node`')\r\n    assert('value' in tail, 'expected `node.value`')\r\n    tail.value += value\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitcharacterreference(token) {\r\n    const tail = this.stack.pop()\r\n    assert(tail, 'expected `node`')\r\n    assert(tail.position, 'expected `node.position`')\r\n    tail.position.end = point(token.end)\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitautolinkprotocol(token) {\r\n    onexitdata.call(this, token)\r\n    const node = this.stack[this.stack.length - 1]\r\n    assert(node, 'expected node on stack')\r\n    assert(node.type === 'link', 'expected link on stack')\r\n\r\n    node.url = this.sliceSerialize(token)\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitautolinkemail(token) {\r\n    onexitdata.call(this, token)\r\n    const node = this.stack[this.stack.length - 1]\r\n    assert(node, 'expected node on stack')\r\n    assert(node.type === 'link', 'expected link on stack')\r\n\r\n    node.url = 'mailto:' + this.sliceSerialize(token)\r\n  }\r\n\r\n  //\r\n  // Creaters.\r\n  //\r\n\r\n  /** @returns {Blockquote} */\r\n  function blockQuote() {\r\n    return {type: 'blockquote', children: []}\r\n  }\r\n\r\n  /** @returns {Code} */\r\n  function codeFlow() {\r\n    return {type: 'code', lang: null, meta: null, value: ''}\r\n  }\r\n\r\n  /** @returns {InlineCode} */\r\n  function codeText() {\r\n    return {type: 'inlineCode', value: ''}\r\n  }\r\n\r\n  /** @returns {Definition} */\r\n  function definition() {\r\n    return {\r\n      type: 'definition',\r\n      identifier: '',\r\n      label: null,\r\n      title: null,\r\n      url: ''\r\n    }\r\n  }\r\n\r\n  /** @returns {Emphasis} */\r\n  function emphasis() {\r\n    return {type: 'emphasis', children: []}\r\n  }\r\n\r\n  /** @returns {Heading} */\r\n  function heading() {\r\n    return {\r\n      type: 'heading',\r\n      // @ts-expect-error `depth` will be set later.\r\n      depth: 0,\r\n      children: []\r\n    }\r\n  }\r\n\r\n  /** @returns {Break} */\r\n  function hardBreak() {\r\n    return {type: 'break'}\r\n  }\r\n\r\n  /** @returns {Html} */\r\n  function html() {\r\n    return {type: 'html', value: ''}\r\n  }\r\n\r\n  /** @returns {Image} */\r\n  function image() {\r\n    return {type: 'image', title: null, url: '', alt: null}\r\n  }\r\n\r\n  /** @returns {Link} */\r\n  function link() {\r\n    return {type: 'link', title: null, url: '', children: []}\r\n  }\r\n\r\n  /**\r\n   * @param {Token} token\r\n   * @returns {List}\r\n   */\r\n  function list(token) {\r\n    return {\r\n      type: 'list',\r\n      ordered: token.type === 'listOrdered',\r\n      start: null,\r\n      spread: token._spread,\r\n      children: []\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Token} token\r\n   * @returns {ListItem}\r\n   */\r\n  function listItem(token) {\r\n    return {\r\n      type: 'listItem',\r\n      spread: token._spread,\r\n      checked: null,\r\n      children: []\r\n    }\r\n  }\r\n\r\n  /** @returns {Paragraph} */\r\n  function paragraph() {\r\n    return {type: 'paragraph', children: []}\r\n  }\r\n\r\n  /** @returns {Strong} */\r\n  function strong() {\r\n    return {type: 'strong', children: []}\r\n  }\r\n\r\n  /** @returns {Text} */\r\n  function text() {\r\n    return {type: 'text', value: ''}\r\n  }\r\n\r\n  /** @returns {ThematicBreak} */\r\n  function thematicBreak() {\r\n    return {type: 'thematicBreak'}\r\n  }\r\n}\r\n\r\n/**\r\n * Copy a point-like value.\r\n *\r\n * @param {Point} d\r\n *   Point-like value.\r\n * @returns {Point}\r\n *   unist point.\r\n */\r\nfunction point(d) {\r\n  return {line: d.line, column: d.column, offset: d.offset}\r\n}\r\n\r\n/**\r\n * @param {Config} combined\r\n * @param {Array<Array<Extension> | Extension>} extensions\r\n * @returns {undefined}\r\n */\r\nfunction configure(combined, extensions) {\r\n  let index = -1\r\n\r\n  while (++index < extensions.length) {\r\n    const value = extensions[index]\r\n\r\n    if (Array.isArray(value)) {\r\n      configure(combined, value)\r\n    } else {\r\n      extension(combined, value)\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Config} combined\r\n * @param {Extension} extension\r\n * @returns {undefined}\r\n */\r\nfunction extension(combined, extension) {\r\n  /** @type {keyof Extension} */\r\n  let key\r\n\r\n  for (key in extension) {\r\n    if (own.call(extension, key)) {\r\n      switch (key) {\r\n        case 'canContainEols': {\r\n          const right = extension[key]\r\n          if (right) {\r\n            combined[key].push(...right)\r\n          }\r\n\r\n          break\r\n        }\r\n\r\n        case 'transforms': {\r\n          const right = extension[key]\r\n          if (right) {\r\n            combined[key].push(...right)\r\n          }\r\n\r\n          break\r\n        }\r\n\r\n        case 'enter':\r\n        case 'exit': {\r\n          const right = extension[key]\r\n          if (right) {\r\n            Object.assign(combined[key], right)\r\n          }\r\n\r\n          break\r\n        }\r\n        // No default\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/** @type {OnEnterError} */\r\nfunction defaultOnError(left, right) {\r\n  if (left) {\r\n    throw new Error(\r\n      'Cannot close `' +\r\n        left.type +\r\n        '` (' +\r\n        stringifyPosition({start: left.start, end: left.end}) +\r\n        '): a different token (`' +\r\n        right.type +\r\n        '`, ' +\r\n        stringifyPosition({start: right.start, end: right.end}) +\r\n        ') is open'\r\n    )\r\n  } else {\r\n    throw new Error(\r\n      'Cannot close document, a token (`' +\r\n        right.type +\r\n        '`, ' +\r\n        stringifyPosition({start: right.start, end: right.end}) +\r\n        ') is still open'\r\n    )\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('mdast').Root} Root\r\n * @typedef {import('mdast-util-from-markdown').Options} FromMarkdownOptions\r\n * @typedef {import('unified').Parser<Root>} Parser\r\n * @typedef {import('unified').Processor<Root>} Processor\r\n */\r\n\r\n/**\r\n * @typedef {Omit<FromMarkdownOptions, 'extensions' | 'mdastExtensions'>} Options\r\n */\r\n\r\nimport {fromMarkdown} from 'mdast-util-from-markdown'\r\n\r\n/**\r\n * Aadd support for parsing from markdown.\r\n *\r\n * @param {Readonly<Options> | null | undefined} [options]\r\n *   Configuration (optional).\r\n * @returns {undefined}\r\n *   Nothing.\r\n */\r\nexport default function remarkParse(options) {\r\n  /** @type {Processor} */\r\n  // @ts-expect-error: TS in JSDoc generates wrong types if `this` is typed regularly.\r\n  const self = this\r\n\r\n  self.parser = parser\r\n\r\n  /**\r\n   * @type {Parser}\r\n   */\r\n  function parser(doc) {\r\n    return fromMarkdown(doc, {\r\n      ...self.data('settings'),\r\n      ...options,\r\n      // Note: these options are not in the readme.\r\n      // The goal is for them to be set by plugins on `data` instead of being\r\n      // passed by users.\r\n      extensions: self.data('micromarkExtensions') || [],\r\n      mdastExtensions: self.data('fromMarkdownExtensions') || []\r\n    })\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('mdast').Blockquote} Blockquote\r\n * @typedef {import('../state.js').State} State\r\n */\r\n\r\n// Make VS Code show references to the above types.\r\n''\r\n\r\n/**\r\n * Turn an mdast `blockquote` node into hast.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {Blockquote} node\r\n *   mdast node.\r\n * @returns {Element}\r\n *   hast node.\r\n */\r\nexport function blockquote(state, node) {\r\n  /** @type {Element} */\r\n  const result = {\r\n    type: 'element',\r\n    tagName: 'blockquote',\r\n    properties: {},\r\n    children: state.wrap(state.all(node), true)\r\n  }\r\n  state.patch(node, result)\r\n  return state.applyData(node, result)\r\n}\r\n", "/**\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('hast').Text} Text\r\n * @typedef {import('mdast').Break} Break\r\n * @typedef {import('../state.js').State} State\r\n */\r\n\r\n// Make VS Code show references to the above types.\r\n''\r\n\r\n/**\r\n * Turn an mdast `break` node into hast.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {Break} node\r\n *   mdast node.\r\n * @returns {Array<Element | Text>}\r\n *   hast element content.\r\n */\r\nexport function hardBreak(state, node) {\r\n  /** @type {Element} */\r\n  const result = {type: 'element', tagName: 'br', properties: {}, children: []}\r\n  state.patch(node, result)\r\n  return [state.applyData(node, result), {type: 'text', value: '\\n'}]\r\n}\r\n", "/**\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('hast').Properties} Properties\r\n * @typedef {import('mdast').Code} Code\r\n * @typedef {import('../state.js').State} State\r\n */\r\n\r\n// Make VS Code show references to the above types.\r\n''\r\n\r\n/**\r\n * Turn an mdast `code` node into hast.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {Code} node\r\n *   mdast node.\r\n * @returns {Element}\r\n *   hast node.\r\n */\r\nexport function code(state, node) {\r\n  const value = node.value ? node.value + '\\n' : ''\r\n  /** @type {Properties} */\r\n  const properties = {}\r\n\r\n  if (node.lang) {\r\n    properties.className = ['language-' + node.lang]\r\n  }\r\n\r\n  // Create `<code>`.\r\n  /** @type {Element} */\r\n  let result = {\r\n    type: 'element',\r\n    tagName: 'code',\r\n    properties,\r\n    children: [{type: 'text', value}]\r\n  }\r\n\r\n  if (node.meta) {\r\n    result.data = {meta: node.meta}\r\n  }\r\n\r\n  state.patch(node, result)\r\n  result = state.applyData(node, result)\r\n\r\n  // Create `<pre>`.\r\n  result = {type: 'element', tagName: 'pre', properties: {}, children: [result]}\r\n  state.patch(node, result)\r\n  return result\r\n}\r\n", "/**\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('mdast').Delete} Delete\r\n * @typedef {import('../state.js').State} State\r\n */\r\n\r\n// Make VS Code show references to the above types.\r\n''\r\n\r\n/**\r\n * Turn an mdast `delete` node into hast.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {Delete} node\r\n *   mdast node.\r\n * @returns {Element}\r\n *   hast node.\r\n */\r\nexport function strikethrough(state, node) {\r\n  /** @type {Element} */\r\n  const result = {\r\n    type: 'element',\r\n    tagName: 'del',\r\n    properties: {},\r\n    children: state.all(node)\r\n  }\r\n  state.patch(node, result)\r\n  return state.applyData(node, result)\r\n}\r\n", "/**\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('mdast').Emphasis} Emphasis\r\n * @typedef {import('../state.js').State} State\r\n */\r\n\r\n// Make VS Code show references to the above types.\r\n''\r\n\r\n/**\r\n * Turn an mdast `emphasis` node into hast.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {Emphasis} node\r\n *   mdast node.\r\n * @returns {Element}\r\n *   hast node.\r\n */\r\nexport function emphasis(state, node) {\r\n  /** @type {Element} */\r\n  const result = {\r\n    type: 'element',\r\n    tagName: 'em',\r\n    properties: {},\r\n    children: state.all(node)\r\n  }\r\n  state.patch(node, result)\r\n  return state.applyData(node, result)\r\n}\r\n", "/**\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\r\n * @typedef {import('../state.js').State} State\r\n */\r\n\r\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\r\n\r\n/**\r\n * Turn an mdast `footnoteReference` node into hast.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {FootnoteReference} node\r\n *   mdast node.\r\n * @returns {Element}\r\n *   hast node.\r\n */\r\nexport function footnoteReference(state, node) {\r\n  const clobberPrefix =\r\n    typeof state.options.clobberPrefix === 'string'\r\n      ? state.options.clobberPrefix\r\n      : 'user-content-'\r\n  const id = String(node.identifier).toUpperCase()\r\n  const safeId = normalizeUri(id.toLowerCase())\r\n  const index = state.footnoteOrder.indexOf(id)\r\n  /** @type {number} */\r\n  let counter\r\n\r\n  let reuseCounter = state.footnoteCounts.get(id)\r\n\r\n  if (reuseCounter === undefined) {\r\n    reuseCounter = 0\r\n    state.footnoteOrder.push(id)\r\n    counter = state.footnoteOrder.length\r\n  } else {\r\n    counter = index + 1\r\n  }\r\n\r\n  reuseCounter += 1\r\n  state.footnoteCounts.set(id, reuseCounter)\r\n\r\n  /** @type {Element} */\r\n  const link = {\r\n    type: 'element',\r\n    tagName: 'a',\r\n    properties: {\r\n      href: '#' + clobberPrefix + 'fn-' + safeId,\r\n      id:\r\n        clobberPrefix +\r\n        'fnref-' +\r\n        safeId +\r\n        (reuseCounter > 1 ? '-' + reuseCounter : ''),\r\n      dataFootnoteRef: true,\r\n      ariaDescribedBy: ['footnote-label']\r\n    },\r\n    children: [{type: 'text', value: String(counter)}]\r\n  }\r\n  state.patch(node, link)\r\n\r\n  /** @type {Element} */\r\n  const sup = {\r\n    type: 'element',\r\n    tagName: 'sup',\r\n    properties: {},\r\n    children: [link]\r\n  }\r\n  state.patch(node, sup)\r\n  return state.applyData(node, sup)\r\n}\r\n", "/**\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('mdast').Heading} Heading\r\n * @typedef {import('../state.js').State} State\r\n */\r\n\r\n// Make VS Code show references to the above types.\r\n''\r\n\r\n/**\r\n * Turn an mdast `heading` node into hast.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {Heading} node\r\n *   mdast node.\r\n * @returns {Element}\r\n *   hast node.\r\n */\r\nexport function heading(state, node) {\r\n  /** @type {Element} */\r\n  const result = {\r\n    type: 'element',\r\n    tagName: 'h' + node.depth,\r\n    properties: {},\r\n    children: state.all(node)\r\n  }\r\n  state.patch(node, result)\r\n  return state.applyData(node, result)\r\n}\r\n", "/**\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('mdast').Html} Html\r\n * @typedef {import('../state.js').State} State\r\n * @typedef {import('../../index.js').Raw} Raw\r\n */\r\n\r\n// Make VS Code show references to the above types.\r\n''\r\n\r\n/**\r\n * Turn an mdast `html` node into hast (`raw` node in dangerous mode, otherwise\r\n * nothing).\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {Html} node\r\n *   mdast node.\r\n * @returns {Element | Raw | undefined}\r\n *   hast node.\r\n */\r\nexport function html(state, node) {\r\n  if (state.options.allowDangerousHtml) {\r\n    /** @type {Raw} */\r\n    const result = {type: 'raw', value: node.value}\r\n    state.patch(node, result)\r\n    return state.applyData(node, result)\r\n  }\r\n\r\n  return undefined\r\n}\r\n", "/**\r\n * @typedef {import('hast').ElementContent} ElementContent\r\n *\r\n * @typedef {import('mdast').Nodes} Nodes\r\n * @typedef {import('mdast').Reference} Reference\r\n *\r\n * @typedef {import('./state.js').State} State\r\n */\r\n\r\n// Make VS Code show references to the above types.\r\n''\r\n\r\n/**\r\n * Return the content of a reference without definition as plain text.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {Extract<Nodes, Reference>} node\r\n *   Reference node (image, link).\r\n * @returns {Array<ElementContent>}\r\n *   hast content.\r\n */\r\nexport function revert(state, node) {\r\n  const subtype = node.referenceType\r\n  let suffix = ']'\r\n\r\n  if (subtype === 'collapsed') {\r\n    suffix += '[]'\r\n  } else if (subtype === 'full') {\r\n    suffix += '[' + (node.label || node.identifier) + ']'\r\n  }\r\n\r\n  if (node.type === 'imageReference') {\r\n    return [{type: 'text', value: '![' + node.alt + suffix}]\r\n  }\r\n\r\n  const contents = state.all(node)\r\n  const head = contents[0]\r\n\r\n  if (head && head.type === 'text') {\r\n    head.value = '[' + head.value\r\n  } else {\r\n    contents.unshift({type: 'text', value: '['})\r\n  }\r\n\r\n  const tail = contents[contents.length - 1]\r\n\r\n  if (tail && tail.type === 'text') {\r\n    tail.value += suffix\r\n  } else {\r\n    contents.push({type: 'text', value: suffix})\r\n  }\r\n\r\n  return contents\r\n}\r\n", "/**\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('hast').ElementContent} ElementContent\r\n * @typedef {import('hast').Properties} Properties\r\n * @typedef {import('mdast').ImageReference} ImageReference\r\n * @typedef {import('../state.js').State} State\r\n */\r\n\r\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\r\nimport {revert} from '../revert.js'\r\n\r\n/**\r\n * Turn an mdast `imageReference` node into hast.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {ImageReference} node\r\n *   mdast node.\r\n * @returns {Array<ElementContent> | ElementContent}\r\n *   hast node.\r\n */\r\nexport function imageReference(state, node) {\r\n  const id = String(node.identifier).toUpperCase()\r\n  const definition = state.definitionById.get(id)\r\n\r\n  if (!definition) {\r\n    return revert(state, node)\r\n  }\r\n\r\n  /** @type {Properties} */\r\n  const properties = {src: normalizeUri(definition.url || ''), alt: node.alt}\r\n\r\n  if (definition.title !== null && definition.title !== undefined) {\r\n    properties.title = definition.title\r\n  }\r\n\r\n  /** @type {Element} */\r\n  const result = {type: 'element', tagName: 'img', properties, children: []}\r\n  state.patch(node, result)\r\n  return state.applyData(node, result)\r\n}\r\n", "/**\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('hast').Properties} Properties\r\n * @typedef {import('mdast').Image} Image\r\n * @typedef {import('../state.js').State} State\r\n */\r\n\r\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\r\n\r\n/**\r\n * Turn an mdast `image` node into hast.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {Image} node\r\n *   mdast node.\r\n * @returns {Element}\r\n *   hast node.\r\n */\r\nexport function image(state, node) {\r\n  /** @type {Properties} */\r\n  const properties = {src: normalizeUri(node.url)}\r\n\r\n  if (node.alt !== null && node.alt !== undefined) {\r\n    properties.alt = node.alt\r\n  }\r\n\r\n  if (node.title !== null && node.title !== undefined) {\r\n    properties.title = node.title\r\n  }\r\n\r\n  /** @type {Element} */\r\n  const result = {type: 'element', tagName: 'img', properties, children: []}\r\n  state.patch(node, result)\r\n  return state.applyData(node, result)\r\n}\r\n", "/**\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('hast').Text} Text\r\n * @typedef {import('mdast').InlineCode} InlineCode\r\n * @typedef {import('../state.js').State} State\r\n */\r\n\r\n// Make VS Code show references to the above types.\r\n''\r\n\r\n/**\r\n * Turn an mdast `inlineCode` node into hast.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {InlineCode} node\r\n *   mdast node.\r\n * @returns {Element}\r\n *   hast node.\r\n */\r\nexport function inlineCode(state, node) {\r\n  /** @type {Text} */\r\n  const text = {type: 'text', value: node.value.replace(/\\r?\\n|\\r/g, ' ')}\r\n  state.patch(node, text)\r\n\r\n  /** @type {Element} */\r\n  const result = {\r\n    type: 'element',\r\n    tagName: 'code',\r\n    properties: {},\r\n    children: [text]\r\n  }\r\n  state.patch(node, result)\r\n  return state.applyData(node, result)\r\n}\r\n", "/**\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('hast').ElementContent} ElementContent\r\n * @typedef {import('hast').Properties} Properties\r\n * @typedef {import('mdast').LinkReference} LinkReference\r\n * @typedef {import('../state.js').State} State\r\n */\r\n\r\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\r\nimport {revert} from '../revert.js'\r\n\r\n/**\r\n * Turn an mdast `linkReference` node into hast.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {LinkReference} node\r\n *   mdast node.\r\n * @returns {Array<ElementContent> | ElementContent}\r\n *   hast node.\r\n */\r\nexport function linkReference(state, node) {\r\n  const id = String(node.identifier).toUpperCase()\r\n  const definition = state.definitionById.get(id)\r\n\r\n  if (!definition) {\r\n    return revert(state, node)\r\n  }\r\n\r\n  /** @type {Properties} */\r\n  const properties = {href: normalizeUri(definition.url || '')}\r\n\r\n  if (definition.title !== null && definition.title !== undefined) {\r\n    properties.title = definition.title\r\n  }\r\n\r\n  /** @type {Element} */\r\n  const result = {\r\n    type: 'element',\r\n    tagName: 'a',\r\n    properties,\r\n    children: state.all(node)\r\n  }\r\n  state.patch(node, result)\r\n  return state.applyData(node, result)\r\n}\r\n", "/**\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('hast').Properties} Properties\r\n * @typedef {import('mdast').Link} Link\r\n * @typedef {import('../state.js').State} State\r\n */\r\n\r\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\r\n\r\n/**\r\n * Turn an mdast `link` node into hast.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {Link} node\r\n *   mdast node.\r\n * @returns {Element}\r\n *   hast node.\r\n */\r\nexport function link(state, node) {\r\n  /** @type {Properties} */\r\n  const properties = {href: normalizeUri(node.url)}\r\n\r\n  if (node.title !== null && node.title !== undefined) {\r\n    properties.title = node.title\r\n  }\r\n\r\n  /** @type {Element} */\r\n  const result = {\r\n    type: 'element',\r\n    tagName: 'a',\r\n    properties,\r\n    children: state.all(node)\r\n  }\r\n  state.patch(node, result)\r\n  return state.applyData(node, result)\r\n}\r\n", "/**\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('hast').ElementContent} ElementContent\r\n * @typedef {import('hast').Properties} Properties\r\n * @typedef {import('mdast').ListItem} ListItem\r\n * @typedef {import('mdast').Parents} Parents\r\n * @typedef {import('../state.js').State} State\r\n */\r\n\r\n// Make VS Code show references to the above types.\r\n''\r\n\r\n/**\r\n * Turn an mdast `listItem` node into hast.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {ListItem} node\r\n *   mdast node.\r\n * @param {Parents | undefined} parent\r\n *   Parent of `node`.\r\n * @returns {Element}\r\n *   hast node.\r\n */\r\nexport function listItem(state, node, parent) {\r\n  const results = state.all(node)\r\n  const loose = parent ? listLoose(parent) : listItemLoose(node)\r\n  /** @type {Properties} */\r\n  const properties = {}\r\n  /** @type {Array<ElementContent>} */\r\n  const children = []\r\n\r\n  if (typeof node.checked === 'boolean') {\r\n    const head = results[0]\r\n    /** @type {Element} */\r\n    let paragraph\r\n\r\n    if (head && head.type === 'element' && head.tagName === 'p') {\r\n      paragraph = head\r\n    } else {\r\n      paragraph = {type: 'element', tagName: 'p', properties: {}, children: []}\r\n      results.unshift(paragraph)\r\n    }\r\n\r\n    if (paragraph.children.length > 0) {\r\n      paragraph.children.unshift({type: 'text', value: ' '})\r\n    }\r\n\r\n    paragraph.children.unshift({\r\n      type: 'element',\r\n      tagName: 'input',\r\n      properties: {type: 'checkbox', checked: node.checked, disabled: true},\r\n      children: []\r\n    })\r\n\r\n    // According to github-markdown-css, this class hides bullet.\r\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\r\n    properties.className = ['task-list-item']\r\n  }\r\n\r\n  let index = -1\r\n\r\n  while (++index < results.length) {\r\n    const child = results[index]\r\n\r\n    // Add eols before nodes, except if this is a loose, first paragraph.\r\n    if (\r\n      loose ||\r\n      index !== 0 ||\r\n      child.type !== 'element' ||\r\n      child.tagName !== 'p'\r\n    ) {\r\n      children.push({type: 'text', value: '\\n'})\r\n    }\r\n\r\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\r\n      children.push(...child.children)\r\n    } else {\r\n      children.push(child)\r\n    }\r\n  }\r\n\r\n  const tail = results[results.length - 1]\r\n\r\n  // Add a final eol.\r\n  if (tail && (loose || tail.type !== 'element' || tail.tagName !== 'p')) {\r\n    children.push({type: 'text', value: '\\n'})\r\n  }\r\n\r\n  /** @type {Element} */\r\n  const result = {type: 'element', tagName: 'li', properties, children}\r\n  state.patch(node, result)\r\n  return state.applyData(node, result)\r\n}\r\n\r\n/**\r\n * @param {Parents} node\r\n * @return {Boolean}\r\n */\r\nfunction listLoose(node) {\r\n  let loose = false\r\n  if (node.type === 'list') {\r\n    loose = node.spread || false\r\n    const children = node.children\r\n    let index = -1\r\n\r\n    while (!loose && ++index < children.length) {\r\n      loose = listItemLoose(children[index])\r\n    }\r\n  }\r\n\r\n  return loose\r\n}\r\n\r\n/**\r\n * @param {ListItem} node\r\n * @return {Boolean}\r\n */\r\nfunction listItemLoose(node) {\r\n  const spread = node.spread\r\n\r\n  return spread === null || spread === undefined\r\n    ? node.children.length > 1\r\n    : spread\r\n}\r\n", "/**\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('hast').Properties} Properties\r\n * @typedef {import('mdast').List} List\r\n * @typedef {import('../state.js').State} State\r\n */\r\n\r\n// Make VS Code show references to the above types.\r\n''\r\n\r\n/**\r\n * Turn an mdast `list` node into hast.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {List} node\r\n *   mdast node.\r\n * @returns {Element}\r\n *   hast node.\r\n */\r\nexport function list(state, node) {\r\n  /** @type {Properties} */\r\n  const properties = {}\r\n  const results = state.all(node)\r\n  let index = -1\r\n\r\n  if (typeof node.start === 'number' && node.start !== 1) {\r\n    properties.start = node.start\r\n  }\r\n\r\n  // Like GitHub, add a class for custom styling.\r\n  while (++index < results.length) {\r\n    const child = results[index]\r\n\r\n    if (\r\n      child.type === 'element' &&\r\n      child.tagName === 'li' &&\r\n      child.properties &&\r\n      Array.isArray(child.properties.className) &&\r\n      child.properties.className.includes('task-list-item')\r\n    ) {\r\n      properties.className = ['contains-task-list']\r\n      break\r\n    }\r\n  }\r\n\r\n  /** @type {Element} */\r\n  const result = {\r\n    type: 'element',\r\n    tagName: node.ordered ? 'ol' : 'ul',\r\n    properties,\r\n    children: state.wrap(results, true)\r\n  }\r\n  state.patch(node, result)\r\n  return state.applyData(node, result)\r\n}\r\n", "/**\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('mdast').Paragraph} Paragraph\r\n * @typedef {import('../state.js').State} State\r\n */\r\n\r\n// Make VS Code show references to the above types.\r\n''\r\n\r\n/**\r\n * Turn an mdast `paragraph` node into hast.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {Paragraph} node\r\n *   mdast node.\r\n * @returns {Element}\r\n *   hast node.\r\n */\r\nexport function paragraph(state, node) {\r\n  /** @type {Element} */\r\n  const result = {\r\n    type: 'element',\r\n    tagName: 'p',\r\n    properties: {},\r\n    children: state.all(node)\r\n  }\r\n  state.patch(node, result)\r\n  return state.applyData(node, result)\r\n}\r\n", "/**\r\n * @typedef {import('hast').Parents} HastParents\r\n * @typedef {import('hast').Root} HastRoot\r\n * @typedef {import('mdast').Root} MdastRoot\r\n * @typedef {import('../state.js').State} State\r\n */\r\n\r\n// Make VS Code show references to the above types.\r\n''\r\n\r\n/**\r\n * Turn an mdast `root` node into hast.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {MdastRoot} node\r\n *   mdast node.\r\n * @returns {HastParents}\r\n *   hast node.\r\n */\r\nexport function root(state, node) {\r\n  /** @type {HastRoot} */\r\n  const result = {type: 'root', children: state.wrap(state.all(node))}\r\n  state.patch(node, result)\r\n  return state.applyData(node, result)\r\n}\r\n", "/**\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('mdast').Strong} Strong\r\n * @typedef {import('../state.js').State} State\r\n */\r\n\r\n// Make VS Code show references to the above types.\r\n''\r\n\r\n/**\r\n * Turn an mdast `strong` node into hast.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {Strong} node\r\n *   mdast node.\r\n * @returns {Element}\r\n *   hast node.\r\n */\r\nexport function strong(state, node) {\r\n  /** @type {Element} */\r\n  const result = {\r\n    type: 'element',\r\n    tagName: 'strong',\r\n    properties: {},\r\n    children: state.all(node)\r\n  }\r\n  state.patch(node, result)\r\n  return state.applyData(node, result)\r\n}\r\n", "/**\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('mdast').Table} Table\r\n * @typedef {import('../state.js').State} State\r\n */\r\n\r\nimport {pointEnd, pointStart} from 'unist-util-position'\r\n\r\n/**\r\n * Turn an mdast `table` node into hast.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {Table} node\r\n *   mdast node.\r\n * @returns {Element}\r\n *   hast node.\r\n */\r\nexport function table(state, node) {\r\n  const rows = state.all(node)\r\n  const firstRow = rows.shift()\r\n  /** @type {Array<Element>} */\r\n  const tableContent = []\r\n\r\n  if (firstRow) {\r\n    /** @type {Element} */\r\n    const head = {\r\n      type: 'element',\r\n      tagName: 'thead',\r\n      properties: {},\r\n      children: state.wrap([firstRow], true)\r\n    }\r\n    state.patch(node.children[0], head)\r\n    tableContent.push(head)\r\n  }\r\n\r\n  if (rows.length > 0) {\r\n    /** @type {Element} */\r\n    const body = {\r\n      type: 'element',\r\n      tagName: 'tbody',\r\n      properties: {},\r\n      children: state.wrap(rows, true)\r\n    }\r\n\r\n    const start = pointStart(node.children[1])\r\n    const end = pointEnd(node.children[node.children.length - 1])\r\n    if (start && end) body.position = {start, end}\r\n    tableContent.push(body)\r\n  }\r\n\r\n  /** @type {Element} */\r\n  const result = {\r\n    type: 'element',\r\n    tagName: 'table',\r\n    properties: {},\r\n    children: state.wrap(tableContent, true)\r\n  }\r\n  state.patch(node, result)\r\n  return state.applyData(node, result)\r\n}\r\n", "/**\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('hast').ElementContent} ElementContent\r\n * @typedef {import('hast').Properties} Properties\r\n * @typedef {import('mdast').Parents} Parents\r\n * @typedef {import('mdast').TableRow} TableRow\r\n * @typedef {import('../state.js').State} State\r\n */\r\n\r\n// Make VS Code show references to the above types.\r\n''\r\n\r\n/**\r\n * Turn an mdast `tableRow` node into hast.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {TableRow} node\r\n *   mdast node.\r\n * @param {Parents | undefined} parent\r\n *   Parent of `node`.\r\n * @returns {Element}\r\n *   hast node.\r\n */\r\nexport function tableRow(state, node, parent) {\r\n  const siblings = parent ? parent.children : undefined\r\n  // Generate a body row when without parent.\r\n  const rowIndex = siblings ? siblings.indexOf(node) : 1\r\n  const tagName = rowIndex === 0 ? 'th' : 'td'\r\n  // To do: option to use `style`?\r\n  const align = parent && parent.type === 'table' ? parent.align : undefined\r\n  const length = align ? align.length : node.children.length\r\n  let cellIndex = -1\r\n  /** @type {Array<ElementContent>} */\r\n  const cells = []\r\n\r\n  while (++cellIndex < length) {\r\n    // Note: can also be undefined.\r\n    const cell = node.children[cellIndex]\r\n    /** @type {Properties} */\r\n    const properties = {}\r\n    const alignValue = align ? align[cellIndex] : undefined\r\n\r\n    if (alignValue) {\r\n      properties.align = alignValue\r\n    }\r\n\r\n    /** @type {Element} */\r\n    let result = {type: 'element', tagName, properties, children: []}\r\n\r\n    if (cell) {\r\n      result.children = state.all(cell)\r\n      state.patch(cell, result)\r\n      result = state.applyData(cell, result)\r\n    }\r\n\r\n    cells.push(result)\r\n  }\r\n\r\n  /** @type {Element} */\r\n  const result = {\r\n    type: 'element',\r\n    tagName: 'tr',\r\n    properties: {},\r\n    children: state.wrap(cells, true)\r\n  }\r\n  state.patch(node, result)\r\n  return state.applyData(node, result)\r\n}\r\n", "/**\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('mdast').TableCell} TableCell\r\n * @typedef {import('../state.js').State} State\r\n */\r\n\r\n// Make VS Code show references to the above types.\r\n''\r\n\r\n/**\r\n * Turn an mdast `tableCell` node into hast.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {TableCell} node\r\n *   mdast node.\r\n * @returns {Element}\r\n *   hast node.\r\n */\r\nexport function tableCell(state, node) {\r\n  // Note: this function is normally not called: see `table-row` for how rows\r\n  // and their cells are compiled.\r\n  /** @type {Element} */\r\n  const result = {\r\n    type: 'element',\r\n    tagName: 'td', // Assume body cell.\r\n    properties: {},\r\n    children: state.all(node)\r\n  }\r\n  state.patch(node, result)\r\n  return state.applyData(node, result)\r\n}\r\n", "const tab = 9 /* `\\t` */\r\nconst space = 32 /* ` ` */\r\n\r\n/**\r\n * Remove initial and final spaces and tabs at the line breaks in `value`.\r\n * Does not trim initial and final spaces and tabs of the value itself.\r\n *\r\n * @param {string} value\r\n *   Value to trim.\r\n * @returns {string}\r\n *   Trimmed value.\r\n */\r\nexport function trimLines(value) {\r\n  const source = String(value)\r\n  const search = /\\r?\\n|\\r/g\r\n  let match = search.exec(source)\r\n  let last = 0\r\n  /** @type {Array<string>} */\r\n  const lines = []\r\n\r\n  while (match) {\r\n    lines.push(\r\n      trimLine(source.slice(last, match.index), last > 0, true),\r\n      match[0]\r\n    )\r\n\r\n    last = match.index + match[0].length\r\n    match = search.exec(source)\r\n  }\r\n\r\n  lines.push(trimLine(source.slice(last), last > 0, false))\r\n\r\n  return lines.join('')\r\n}\r\n\r\n/**\r\n * @param {string} value\r\n *   Line to trim.\r\n * @param {boolean} start\r\n *   Whether to trim the start of the line.\r\n * @param {boolean} end\r\n *   Whether to trim the end of the line.\r\n * @returns {string}\r\n *   Trimmed line.\r\n */\r\nfunction trimLine(value, start, end) {\r\n  let startIndex = 0\r\n  let endIndex = value.length\r\n\r\n  if (start) {\r\n    let code = value.codePointAt(startIndex)\r\n\r\n    while (code === tab || code === space) {\r\n      startIndex++\r\n      code = value.codePointAt(startIndex)\r\n    }\r\n  }\r\n\r\n  if (end) {\r\n    let code = value.codePointAt(endIndex - 1)\r\n\r\n    while (code === tab || code === space) {\r\n      endIndex--\r\n      code = value.codePointAt(endIndex - 1)\r\n    }\r\n  }\r\n\r\n  return endIndex > startIndex ? value.slice(startIndex, endIndex) : ''\r\n}\r\n", "/**\r\n * @typedef {import('hast').Element} HastElement\r\n * @typedef {import('hast').Text} HastText\r\n * @typedef {import('mdast').Text} MdastText\r\n * @typedef {import('../state.js').State} State\r\n */\r\n\r\nimport {trimLines} from 'trim-lines'\r\n\r\n/**\r\n * Turn an mdast `text` node into hast.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {MdastText} node\r\n *   mdast node.\r\n * @returns {HastElement | HastText}\r\n *   hast node.\r\n */\r\nexport function text(state, node) {\r\n  /** @type {HastText} */\r\n  const result = {type: 'text', value: trimLines(String(node.value))}\r\n  state.patch(node, result)\r\n  return state.applyData(node, result)\r\n}\r\n", "/**\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\r\n * @typedef {import('../state.js').State} State\r\n */\r\n\r\n// Make VS Code show references to the above types.\r\n''\r\n\r\n/**\r\n * Turn an mdast `thematicBreak` node into hast.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {ThematicBreak} node\r\n *   mdast node.\r\n * @returns {Element}\r\n *   hast node.\r\n */\r\nexport function thematicBreak(state, node) {\r\n  /** @type {Element} */\r\n  const result = {\r\n    type: 'element',\r\n    tagName: 'hr',\r\n    properties: {},\r\n    children: []\r\n  }\r\n  state.patch(node, result)\r\n  return state.applyData(node, result)\r\n}\r\n", "import {blockquote} from './blockquote.js'\r\nimport {hardBreak} from './break.js'\r\nimport {code} from './code.js'\r\nimport {strikethrough} from './delete.js'\r\nimport {emphasis} from './emphasis.js'\r\nimport {footnoteReference} from './footnote-reference.js'\r\nimport {heading} from './heading.js'\r\nimport {html} from './html.js'\r\nimport {imageReference} from './image-reference.js'\r\nimport {image} from './image.js'\r\nimport {inlineCode} from './inline-code.js'\r\nimport {linkReference} from './link-reference.js'\r\nimport {link} from './link.js'\r\nimport {listItem} from './list-item.js'\r\nimport {list} from './list.js'\r\nimport {paragraph} from './paragraph.js'\r\nimport {root} from './root.js'\r\nimport {strong} from './strong.js'\r\nimport {table} from './table.js'\r\nimport {tableRow} from './table-row.js'\r\nimport {tableCell} from './table-cell.js'\r\nimport {text} from './text.js'\r\nimport {thematicBreak} from './thematic-break.js'\r\n\r\n/**\r\n * Default handlers for nodes.\r\n *\r\n * @satisfies {import('../state.js').Handlers}\r\n */\r\nexport const handlers = {\r\n  blockquote,\r\n  break: hardBreak,\r\n  code,\r\n  delete: strikethrough,\r\n  emphasis,\r\n  footnoteReference,\r\n  heading,\r\n  html,\r\n  imageReference,\r\n  image,\r\n  inlineCode,\r\n  linkReference,\r\n  link,\r\n  listItem,\r\n  list,\r\n  paragraph,\r\n  // @ts-expect-error: root is different, but hard to type.\r\n  root,\r\n  strong,\r\n  table,\r\n  tableCell,\r\n  tableRow,\r\n  text,\r\n  thematicBreak,\r\n  toml: ignore,\r\n  yaml: ignore,\r\n  definition: ignore,\r\n  footnoteDefinition: ignore\r\n}\r\n\r\n// Return nothing for nodes that are ignored.\r\nfunction ignore() {\r\n  return undefined\r\n}\r\n", "export const VOID       = -1;\r\nexport const PRIMITIVE  = 0;\r\nexport const ARRAY      = 1;\r\nexport const OBJECT     = 2;\r\nexport const DATE       = 3;\r\nexport const REGEXP     = 4;\r\nexport const MAP        = 5;\r\nexport const SET        = 6;\r\nexport const ERROR      = 7;\r\nexport const BIGINT     = 8;\r\n// export const SYMBOL = 9;\r\n", "import {\r\n  VOID, PRIMITIVE,\r\n  ARRAY, OBJECT,\r\n  DATE, REGEXP, MAP, SET,\r\n  ERROR, BIGINT\r\n} from './types.js';\r\n\r\nconst env = typeof self === 'object' ? self : globalThis;\r\n\r\nconst deserializer = ($, _) => {\r\n  const as = (out, index) => {\r\n    $.set(index, out);\r\n    return out;\r\n  };\r\n\r\n  const unpair = index => {\r\n    if ($.has(index))\r\n      return $.get(index);\r\n\r\n    const [type, value] = _[index];\r\n    switch (type) {\r\n      case PRIMITIVE:\r\n      case VOID:\r\n        return as(value, index);\r\n      case ARRAY: {\r\n        const arr = as([], index);\r\n        for (const index of value)\r\n          arr.push(unpair(index));\r\n        return arr;\r\n      }\r\n      case OBJECT: {\r\n        const object = as({}, index);\r\n        for (const [key, index] of value)\r\n          object[unpair(key)] = unpair(index);\r\n        return object;\r\n      }\r\n      case DATE:\r\n        return as(new Date(value), index);\r\n      case REGEXP: {\r\n        const {source, flags} = value;\r\n        return as(new RegExp(source, flags), index);\r\n      }\r\n      case MAP: {\r\n        const map = as(new Map, index);\r\n        for (const [key, index] of value)\r\n          map.set(unpair(key), unpair(index));\r\n        return map;\r\n      }\r\n      case SET: {\r\n        const set = as(new Set, index);\r\n        for (const index of value)\r\n          set.add(unpair(index));\r\n        return set;\r\n      }\r\n      case ERROR: {\r\n        const {name, message} = value;\r\n        return as(new env[name](message), index);\r\n      }\r\n      case BIGINT:\r\n        return as(BigInt(value), index);\r\n      case 'BigInt':\r\n        return as(Object(BigInt(value)), index);\r\n      case 'ArrayBuffer':\r\n        return as(new Uint8Array(value).buffer, value);\r\n      case 'DataView': {\r\n        const { buffer } = new Uint8Array(value);\r\n        return as(new DataView(buffer), value);\r\n      }\r\n    }\r\n    return as(new env[type](value), index);\r\n  };\r\n\r\n  return unpair;\r\n};\r\n\r\n/**\r\n * @typedef {Array<string,any>} Record a type representation\r\n */\r\n\r\n/**\r\n * Returns a deserialized value from a serialized array of Records.\r\n * @param {Record[]} serialized a previously serialized value.\r\n * @returns {any}\r\n */\r\nexport const deserialize = serialized => deserializer(new Map, serialized)(0);\r\n", "import {\r\n  VOID, PRIMITIVE,\r\n  ARRAY, OBJECT,\r\n  DATE, REGEXP, MAP, SET,\r\n  ERROR, BIGINT\r\n} from './types.js';\r\n\r\nconst EMPTY = '';\r\n\r\nconst {toString} = {};\r\nconst {keys} = Object;\r\n\r\nconst typeOf = value => {\r\n  const type = typeof value;\r\n  if (type !== 'object' || !value)\r\n    return [PRIMITIVE, type];\r\n\r\n  const asString = toString.call(value).slice(8, -1);\r\n  switch (asString) {\r\n    case 'Array':\r\n      return [ARRAY, EMPTY];\r\n    case 'Object':\r\n      return [OBJECT, EMPTY];\r\n    case 'Date':\r\n      return [DATE, EMPTY];\r\n    case 'RegExp':\r\n      return [REGEXP, EMPTY];\r\n    case 'Map':\r\n      return [MAP, EMPTY];\r\n    case 'Set':\r\n      return [SET, EMPTY];\r\n    case 'DataView':\r\n      return [ARRAY, asString];\r\n  }\r\n\r\n  if (asString.includes('Array'))\r\n    return [ARRAY, asString];\r\n\r\n  if (asString.includes('Error'))\r\n    return [ERROR, asString];\r\n\r\n  return [OBJECT, asString];\r\n};\r\n\r\nconst shouldSkip = ([TYPE, type]) => (\r\n  TYPE === PRIMITIVE &&\r\n  (type === 'function' || type === 'symbol')\r\n);\r\n\r\nconst serializer = (strict, json, $, _) => {\r\n\r\n  const as = (out, value) => {\r\n    const index = _.push(out) - 1;\r\n    $.set(value, index);\r\n    return index;\r\n  };\r\n\r\n  const pair = value => {\r\n    if ($.has(value))\r\n      return $.get(value);\r\n\r\n    let [TYPE, type] = typeOf(value);\r\n    switch (TYPE) {\r\n      case PRIMITIVE: {\r\n        let entry = value;\r\n        switch (type) {\r\n          case 'bigint':\r\n            TYPE = BIGINT;\r\n            entry = value.toString();\r\n            break;\r\n          case 'function':\r\n          case 'symbol':\r\n            if (strict)\r\n              throw new TypeError('unable to serialize ' + type);\r\n            entry = null;\r\n            break;\r\n          case 'undefined':\r\n            return as([VOID], value);\r\n        }\r\n        return as([TYPE, entry], value);\r\n      }\r\n      case ARRAY: {\r\n        if (type) {\r\n          let spread = value;\r\n          if (type === 'DataView') {\r\n            spread = new Uint8Array(value.buffer);\r\n          }\r\n          else if (type === 'ArrayBuffer') {\r\n            spread = new Uint8Array(value);\r\n          }\r\n          return as([type, [...spread]], value);\r\n        }\r\n\r\n        const arr = [];\r\n        const index = as([TYPE, arr], value);\r\n        for (const entry of value)\r\n          arr.push(pair(entry));\r\n        return index;\r\n      }\r\n      case OBJECT: {\r\n        if (type) {\r\n          switch (type) {\r\n            case 'BigInt':\r\n              return as([type, value.toString()], value);\r\n            case 'Boolean':\r\n            case 'Number':\r\n            case 'String':\r\n              return as([type, value.valueOf()], value);\r\n          }\r\n        }\r\n\r\n        if (json && ('toJSON' in value))\r\n          return pair(value.toJSON());\r\n\r\n        const entries = [];\r\n        const index = as([TYPE, entries], value);\r\n        for (const key of keys(value)) {\r\n          if (strict || !shouldSkip(typeOf(value[key])))\r\n            entries.push([pair(key), pair(value[key])]);\r\n        }\r\n        return index;\r\n      }\r\n      case DATE:\r\n        return as([TYPE, value.toISOString()], value);\r\n      case REGEXP: {\r\n        const {source, flags} = value;\r\n        return as([TYPE, {source, flags}], value);\r\n      }\r\n      case MAP: {\r\n        const entries = [];\r\n        const index = as([TYPE, entries], value);\r\n        for (const [key, entry] of value) {\r\n          if (strict || !(shouldSkip(typeOf(key)) || shouldSkip(typeOf(entry))))\r\n            entries.push([pair(key), pair(entry)]);\r\n        }\r\n        return index;\r\n      }\r\n      case SET: {\r\n        const entries = [];\r\n        const index = as([TYPE, entries], value);\r\n        for (const entry of value) {\r\n          if (strict || !shouldSkip(typeOf(entry)))\r\n            entries.push(pair(entry));\r\n        }\r\n        return index;\r\n      }\r\n    }\r\n\r\n    const {message} = value;\r\n    return as([TYPE, {name: type, message}], value);\r\n  };\r\n\r\n  return pair;\r\n};\r\n\r\n/**\r\n * @typedef {Array<string,any>} Record a type representation\r\n */\r\n\r\n/**\r\n * Returns an array of serialized Records.\r\n * @param {any} value a serializable value.\r\n * @param {{json?: boolean, lossy?: boolean}?} options an object with a `lossy` or `json` property that,\r\n *  if `true`, will not throw errors on incompatible types, and behave more\r\n *  like JSON stringify would behave. Symbol and Function will be discarded.\r\n * @returns {Record[]}\r\n */\r\n export const serialize = (value, {json, lossy} = {}) => {\r\n  const _ = [];\r\n  return serializer(!(json || lossy), !!json, new Map, _)(value), _;\r\n};\r\n", "import {deserialize} from './deserialize.js';\r\nimport {serialize} from './serialize.js';\r\n\r\n/**\r\n * @typedef {Array<string,any>} Record a type representation\r\n */\r\n\r\n/**\r\n * Returns an array of serialized Records.\r\n * @param {any} any a serializable value.\r\n * @param {{transfer?: any[], json?: boolean, lossy?: boolean}?} options an object with\r\n * a transfer option (ignored when polyfilled) and/or non standard fields that\r\n * fallback to the polyfill if present.\r\n * @returns {Record[]}\r\n */\r\nexport default typeof structuredClone === \"function\" ?\r\n  /* c8 ignore start */\r\n  (any, options) => (\r\n    options && ('json' in options || 'lossy' in options) ?\r\n      deserialize(serialize(any, options)) : structuredClone(any)\r\n  ) :\r\n  (any, options) => deserialize(serialize(any, options));\r\n  /* c8 ignore stop */\r\n\r\nexport {deserialize, serialize};\r\n", "/**\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('hast').ElementContent} ElementContent\r\n *\r\n * @typedef {import('./state.js').State} State\r\n */\r\n\r\n/**\r\n * @callback FootnoteBackContentTemplate\r\n *   Generate content for the backreference dynamically.\r\n *\r\n *   For the following markdown:\r\n *\r\n *   ```markdown\r\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\r\n *\r\n *   [^remark]: things about remark\r\n *   [^micromark]: things about micromark\r\n *   ```\r\n *\r\n *   This function will be called with:\r\n *\r\n *   *  `0` and `0` for the backreference from `things about micromark` to\r\n *      `alpha`, as it is the first used definition, and the first call to it\r\n *   *  `0` and `1` for the backreference from `things about micromark` to\r\n *      `bravo`, as it is the first used definition, and the second call to it\r\n *   *  `1` and `0` for the backreference from `things about remark` to\r\n *      `charlie`, as it is the second used definition\r\n * @param {number} referenceIndex\r\n *   Index of the definition in the order that they are first referenced,\r\n *   0-indexed.\r\n * @param {number} rereferenceIndex\r\n *   Index of calls to the same definition, 0-indexed.\r\n * @returns {Array<ElementContent> | ElementContent | string}\r\n *   Content for the backreference when linking back from definitions to their\r\n *   reference.\r\n *\r\n * @callback FootnoteBackLabelTemplate\r\n *   Generate a back label dynamically.\r\n *\r\n *   For the following markdown:\r\n *\r\n *   ```markdown\r\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\r\n *\r\n *   [^remark]: things about remark\r\n *   [^micromark]: things about micromark\r\n *   ```\r\n *\r\n *   This function will be called with:\r\n *\r\n *   *  `0` and `0` for the backreference from `things about micromark` to\r\n *      `alpha`, as it is the first used definition, and the first call to it\r\n *   *  `0` and `1` for the backreference from `things about micromark` to\r\n *      `bravo`, as it is the first used definition, and the second call to it\r\n *   *  `1` and `0` for the backreference from `things about remark` to\r\n *      `charlie`, as it is the second used definition\r\n * @param {number} referenceIndex\r\n *   Index of the definition in the order that they are first referenced,\r\n *   0-indexed.\r\n * @param {number} rereferenceIndex\r\n *   Index of calls to the same definition, 0-indexed.\r\n * @returns {string}\r\n *   Back label to use when linking back from definitions to their reference.\r\n */\r\n\r\nimport structuredClone from '@ungap/structured-clone'\r\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\r\n\r\n/**\r\n * Generate the default content that GitHub uses on backreferences.\r\n *\r\n * @param {number} _\r\n *   Index of the definition in the order that they are first referenced,\r\n *   0-indexed.\r\n * @param {number} rereferenceIndex\r\n *   Index of calls to the same definition, 0-indexed.\r\n * @returns {Array<ElementContent>}\r\n *   Content.\r\n */\r\nexport function defaultFootnoteBackContent(_, rereferenceIndex) {\r\n  /** @type {Array<ElementContent>} */\r\n  const result = [{type: 'text', value: '↩'}]\r\n\r\n  if (rereferenceIndex > 1) {\r\n    result.push({\r\n      type: 'element',\r\n      tagName: 'sup',\r\n      properties: {},\r\n      children: [{type: 'text', value: String(rereferenceIndex)}]\r\n    })\r\n  }\r\n\r\n  return result\r\n}\r\n\r\n/**\r\n * Generate the default label that GitHub uses on backreferences.\r\n *\r\n * @param {number} referenceIndex\r\n *   Index of the definition in the order that they are first referenced,\r\n *   0-indexed.\r\n * @param {number} rereferenceIndex\r\n *   Index of calls to the same definition, 0-indexed.\r\n * @returns {string}\r\n *   Label.\r\n */\r\nexport function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\r\n  return (\r\n    'Back to reference ' +\r\n    (referenceIndex + 1) +\r\n    (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\r\n  )\r\n}\r\n\r\n/**\r\n * Generate a hast footer for called footnote definitions.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @returns {Element | undefined}\r\n *   `section` element or `undefined`.\r\n */\r\n// eslint-disable-next-line complexity\r\nexport function footer(state) {\r\n  const clobberPrefix =\r\n    typeof state.options.clobberPrefix === 'string'\r\n      ? state.options.clobberPrefix\r\n      : 'user-content-'\r\n  const footnoteBackContent =\r\n    state.options.footnoteBackContent || defaultFootnoteBackContent\r\n  const footnoteBackLabel =\r\n    state.options.footnoteBackLabel || defaultFootnoteBackLabel\r\n  const footnoteLabel = state.options.footnoteLabel || 'Footnotes'\r\n  const footnoteLabelTagName = state.options.footnoteLabelTagName || 'h2'\r\n  const footnoteLabelProperties = state.options.footnoteLabelProperties || {\r\n    className: ['sr-only']\r\n  }\r\n  /** @type {Array<ElementContent>} */\r\n  const listItems = []\r\n  let referenceIndex = -1\r\n\r\n  while (++referenceIndex < state.footnoteOrder.length) {\r\n    const definition = state.footnoteById.get(\r\n      state.footnoteOrder[referenceIndex]\r\n    )\r\n\r\n    if (!definition) {\r\n      continue\r\n    }\r\n\r\n    const content = state.all(definition)\r\n    const id = String(definition.identifier).toUpperCase()\r\n    const safeId = normalizeUri(id.toLowerCase())\r\n    let rereferenceIndex = 0\r\n    /** @type {Array<ElementContent>} */\r\n    const backReferences = []\r\n    const counts = state.footnoteCounts.get(id)\r\n\r\n    // eslint-disable-next-line no-unmodified-loop-condition\r\n    while (counts !== undefined && ++rereferenceIndex <= counts) {\r\n      if (backReferences.length > 0) {\r\n        backReferences.push({type: 'text', value: ' '})\r\n      }\r\n\r\n      let children =\r\n        typeof footnoteBackContent === 'string'\r\n          ? footnoteBackContent\r\n          : footnoteBackContent(referenceIndex, rereferenceIndex)\r\n\r\n      if (typeof children === 'string') {\r\n        children = {type: 'text', value: children}\r\n      }\r\n\r\n      backReferences.push({\r\n        type: 'element',\r\n        tagName: 'a',\r\n        properties: {\r\n          href:\r\n            '#' +\r\n            clobberPrefix +\r\n            'fnref-' +\r\n            safeId +\r\n            (rereferenceIndex > 1 ? '-' + rereferenceIndex : ''),\r\n          dataFootnoteBackref: '',\r\n          ariaLabel:\r\n            typeof footnoteBackLabel === 'string'\r\n              ? footnoteBackLabel\r\n              : footnoteBackLabel(referenceIndex, rereferenceIndex),\r\n          className: ['data-footnote-backref']\r\n        },\r\n        children: Array.isArray(children) ? children : [children]\r\n      })\r\n    }\r\n\r\n    const tail = content[content.length - 1]\r\n\r\n    if (tail && tail.type === 'element' && tail.tagName === 'p') {\r\n      const tailTail = tail.children[tail.children.length - 1]\r\n      if (tailTail && tailTail.type === 'text') {\r\n        tailTail.value += ' '\r\n      } else {\r\n        tail.children.push({type: 'text', value: ' '})\r\n      }\r\n\r\n      tail.children.push(...backReferences)\r\n    } else {\r\n      content.push(...backReferences)\r\n    }\r\n\r\n    /** @type {Element} */\r\n    const listItem = {\r\n      type: 'element',\r\n      tagName: 'li',\r\n      properties: {id: clobberPrefix + 'fn-' + safeId},\r\n      children: state.wrap(content, true)\r\n    }\r\n\r\n    state.patch(definition, listItem)\r\n\r\n    listItems.push(listItem)\r\n  }\r\n\r\n  if (listItems.length === 0) {\r\n    return\r\n  }\r\n\r\n  return {\r\n    type: 'element',\r\n    tagName: 'section',\r\n    properties: {dataFootnotes: true, className: ['footnotes']},\r\n    children: [\r\n      {\r\n        type: 'element',\r\n        tagName: footnoteLabelTagName,\r\n        properties: {\r\n          ...structuredClone(footnoteLabelProperties),\r\n          id: 'footnote-label'\r\n        },\r\n        children: [{type: 'text', value: footnoteLabel}]\r\n      },\r\n      {type: 'text', value: '\\n'},\r\n      {\r\n        type: 'element',\r\n        tagName: 'ol',\r\n        properties: {},\r\n        children: state.wrap(listItems, true)\r\n      },\r\n      {type: 'text', value: '\\n'}\r\n    ]\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('hast').Element} HastElement\r\n * @typedef {import('hast').ElementContent} HastElementContent\r\n * @typedef {import('hast').Nodes} HastNodes\r\n * @typedef {import('hast').Properties} HastProperties\r\n * @typedef {import('hast').RootContent} HastRootContent\r\n * @typedef {import('hast').Text} HastText\r\n *\r\n * @typedef {import('mdast').Definition} MdastDefinition\r\n * @typedef {import('mdast').FootnoteDefinition} MdastFootnoteDefinition\r\n * @typedef {import('mdast').Nodes} MdastNodes\r\n * @typedef {import('mdast').Parents} MdastParents\r\n *\r\n * @typedef {import('vfile').VFile} VFile\r\n *\r\n * @typedef {import('./footer.js').FootnoteBackContentTemplate} FootnoteBackContentTemplate\r\n * @typedef {import('./footer.js').FootnoteBackLabelTemplate} FootnoteBackLabelTemplate\r\n */\r\n\r\n/**\r\n * @callback Handler\r\n *   Handle a node.\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {any} node\r\n *   mdast node to handle.\r\n * @param {MdastParents | undefined} parent\r\n *   Parent of `node`.\r\n * @returns {Array<HastElementContent> | HastElementContent | undefined}\r\n *   hast node.\r\n *\r\n * @typedef {Partial<Record<MdastNodes['type'], Handler>>} Handlers\r\n *   Handle nodes.\r\n *\r\n * @typedef Options\r\n *   Configuration (optional).\r\n * @property {boolean | null | undefined} [allowDangerousHtml=false]\r\n *   Whether to persist raw HTML in markdown in the hast tree (default:\r\n *   `false`).\r\n * @property {string | null | undefined} [clobberPrefix='user-content-']\r\n *   Prefix to use before the `id` property on footnotes to prevent them from\r\n *   *clobbering* (default: `'user-content-'`).\r\n *\r\n *   Pass `''` for trusted markdown and when you are careful with\r\n *   polyfilling.\r\n *   You could pass a different prefix.\r\n *\r\n *   DOM clobbering is this:\r\n *\r\n *   ```html\r\n *   <p id=\"x\"></p>\r\n *   <script>alert(x) // `x` now refers to the `p#x` DOM element</script>\r\n *   ```\r\n *\r\n *   The above example shows that elements are made available by browsers, by\r\n *   their ID, on the `window` object.\r\n *   This is a security risk because you might be expecting some other variable\r\n *   at that place.\r\n *   It can also break polyfills.\r\n *   Using a prefix solves these problems.\r\n * @property {VFile | null | undefined} [file]\r\n *   Corresponding virtual file representing the input document (optional).\r\n * @property {FootnoteBackContentTemplate | string | null | undefined} [footnoteBackContent]\r\n *   Content of the backreference back to references (default: `defaultFootnoteBackContent`).\r\n *\r\n *   The default value is:\r\n *\r\n *   ```js\r\n *   function defaultFootnoteBackContent(_, rereferenceIndex) {\r\n *     const result = [{type: 'text', value: '↩'}]\r\n *\r\n *     if (rereferenceIndex > 1) {\r\n *       result.push({\r\n *         type: 'element',\r\n *         tagName: 'sup',\r\n *         properties: {},\r\n *         children: [{type: 'text', value: String(rereferenceIndex)}]\r\n *       })\r\n *     }\r\n *\r\n *     return result\r\n *   }\r\n *   ```\r\n *\r\n *   This content is used in the `a` element of each backreference (the `↩`\r\n *   links).\r\n * @property {FootnoteBackLabelTemplate | string | null | undefined} [footnoteBackLabel]\r\n *   Label to describe the backreference back to references (default:\r\n *   `defaultFootnoteBackLabel`).\r\n *\r\n *   The default value is:\r\n *\r\n *   ```js\r\n *   function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\r\n *    return (\r\n *      'Back to reference ' +\r\n *      (referenceIndex + 1) +\r\n *      (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\r\n *    )\r\n *   }\r\n *   ```\r\n *\r\n *   Change it when the markdown is not in English.\r\n *\r\n *   This label is used in the `ariaLabel` property on each backreference\r\n *   (the `↩` links).\r\n *   It affects users of assistive technology.\r\n * @property {string | null | undefined} [footnoteLabel='Footnotes']\r\n *   Textual label to use for the footnotes section (default: `'Footnotes'`).\r\n *\r\n *   Change it when the markdown is not in English.\r\n *\r\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\r\n *   is defined that does that) and so affects screen readers only.\r\n *   If you do have such a class, but want to show this section to everyone,\r\n *   pass different properties with the `footnoteLabelProperties` option.\r\n * @property {HastProperties | null | undefined} [footnoteLabelProperties={className: ['sr-only']}]\r\n *   Properties to use on the footnote label (default: `{className:\r\n *   ['sr-only']}`).\r\n *\r\n *   Change it to show the label and add other properties.\r\n *\r\n *   This label is typically hidden visually (assuming an `sr-only` CSS class\r\n *   is defined that does that) and so affects screen readers only.\r\n *   If you do have such a class, but want to show this section to everyone,\r\n *   pass an empty string.\r\n *   You can also add different properties.\r\n *\r\n *   > **Note**: `id: 'footnote-label'` is always added, because footnote\r\n *   > calls use it with `aria-describedby` to provide an accessible label.\r\n * @property {string | null | undefined} [footnoteLabelTagName='h2']\r\n *   HTML tag name to use for the footnote label element (default: `'h2'`).\r\n *\r\n *   Change it to match your document structure.\r\n *\r\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\r\n *   is defined that does that) and so affects screen readers only.\r\n *   If you do have such a class, but want to show this section to everyone,\r\n *   pass different properties with the `footnoteLabelProperties` option.\r\n * @property {Handlers | null | undefined} [handlers]\r\n *   Extra handlers for nodes (optional).\r\n * @property {Array<MdastNodes['type']> | null | undefined} [passThrough]\r\n *   List of custom mdast node types to pass through (keep) in hast (note that\r\n *   the node itself is passed, but eventual children are transformed)\r\n *   (optional).\r\n * @property {Handler | null | undefined} [unknownHandler]\r\n *   Handler for all unknown nodes (optional).\r\n *\r\n * @typedef State\r\n *   Info passed around.\r\n * @property {(node: MdastNodes) => Array<HastElementContent>} all\r\n *   Transform the children of an mdast parent to hast.\r\n * @property {<Type extends HastNodes>(from: MdastNodes, to: Type) => HastElement | Type} applyData\r\n *   Honor the `data` of `from`, and generate an element instead of `node`.\r\n * @property {Map<string, MdastDefinition>} definitionById\r\n *   Definitions by their identifier.\r\n * @property {Map<string, MdastFootnoteDefinition>} footnoteById\r\n *   Footnote definitions by their identifier.\r\n * @property {Map<string, number>} footnoteCounts\r\n *   Counts for how often the same footnote was called.\r\n * @property {Array<string>} footnoteOrder\r\n *   Identifiers of order when footnote calls first appear in tree order.\r\n * @property {Handlers} handlers\r\n *   Applied handlers.\r\n * @property {(node: MdastNodes, parent: MdastParents | undefined) => Array<HastElementContent> | HastElementContent | undefined} one\r\n *   Transform an mdast node to hast.\r\n * @property {Options} options\r\n *   Configuration.\r\n * @property {(from: MdastNodes, node: HastNodes) => undefined} patch\r\n *   Copy a node’s positional info.\r\n * @property {<Type extends HastRootContent>(nodes: Array<Type>, loose?: boolean | undefined) => Array<HastText | Type>} wrap\r\n *   Wrap `nodes` with line endings between each node, adds initial/final line endings when `loose`.\r\n */\r\n\r\nimport structuredClone from '@ungap/structured-clone'\r\nimport {visit} from 'unist-util-visit'\r\nimport {position} from 'unist-util-position'\r\nimport {handlers as defaultHandlers} from './handlers/index.js'\r\n\r\nconst own = {}.hasOwnProperty\r\n\r\n/** @type {Options} */\r\nconst emptyOptions = {}\r\n\r\n/**\r\n * Create `state` from an mdast tree.\r\n *\r\n * @param {MdastNodes} tree\r\n *   mdast node to transform.\r\n * @param {Options | null | undefined} [options]\r\n *   Configuration (optional).\r\n * @returns {State}\r\n *   `state` function.\r\n */\r\nexport function createState(tree, options) {\r\n  const settings = options || emptyOptions\r\n  /** @type {Map<string, MdastDefinition>} */\r\n  const definitionById = new Map()\r\n  /** @type {Map<string, MdastFootnoteDefinition>} */\r\n  const footnoteById = new Map()\r\n  /** @type {Map<string, number>} */\r\n  const footnoteCounts = new Map()\r\n  /** @type {Handlers} */\r\n  // @ts-expect-error: the root handler returns a root.\r\n  // Hard to type.\r\n  const handlers = {...defaultHandlers, ...settings.handlers}\r\n\r\n  /** @type {State} */\r\n  const state = {\r\n    all,\r\n    applyData,\r\n    definitionById,\r\n    footnoteById,\r\n    footnoteCounts,\r\n    footnoteOrder: [],\r\n    handlers,\r\n    one,\r\n    options: settings,\r\n    patch,\r\n    wrap\r\n  }\r\n\r\n  visit(tree, function (node) {\r\n    if (node.type === 'definition' || node.type === 'footnoteDefinition') {\r\n      const map = node.type === 'definition' ? definitionById : footnoteById\r\n      const id = String(node.identifier).toUpperCase()\r\n\r\n      // Mimick CM behavior of link definitions.\r\n      // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/9032189/lib/index.js#L20-L21>.\r\n      if (!map.has(id)) {\r\n        // @ts-expect-error: node type matches map.\r\n        map.set(id, node)\r\n      }\r\n    }\r\n  })\r\n\r\n  return state\r\n\r\n  /**\r\n   * Transform an mdast node into a hast node.\r\n   *\r\n   * @param {MdastNodes} node\r\n   *   mdast node.\r\n   * @param {MdastParents | undefined} [parent]\r\n   *   Parent of `node`.\r\n   * @returns {Array<HastElementContent> | HastElementContent | undefined}\r\n   *   Resulting hast node.\r\n   */\r\n  function one(node, parent) {\r\n    const type = node.type\r\n    const handle = state.handlers[type]\r\n\r\n    if (own.call(state.handlers, type) && handle) {\r\n      return handle(state, node, parent)\r\n    }\r\n\r\n    if (state.options.passThrough && state.options.passThrough.includes(type)) {\r\n      if ('children' in node) {\r\n        const {children, ...shallow} = node\r\n        const result = structuredClone(shallow)\r\n        // @ts-expect-error: TS doesn’t understand…\r\n        result.children = state.all(node)\r\n        // @ts-expect-error: TS doesn’t understand…\r\n        return result\r\n      }\r\n\r\n      // @ts-expect-error: it’s custom.\r\n      return structuredClone(node)\r\n    }\r\n\r\n    const unknown = state.options.unknownHandler || defaultUnknownHandler\r\n\r\n    return unknown(state, node, parent)\r\n  }\r\n\r\n  /**\r\n   * Transform the children of an mdast node into hast nodes.\r\n   *\r\n   * @param {MdastNodes} parent\r\n   *   mdast node to compile\r\n   * @returns {Array<HastElementContent>}\r\n   *   Resulting hast nodes.\r\n   */\r\n  function all(parent) {\r\n    /** @type {Array<HastElementContent>} */\r\n    const values = []\r\n\r\n    if ('children' in parent) {\r\n      const nodes = parent.children\r\n      let index = -1\r\n      while (++index < nodes.length) {\r\n        const result = state.one(nodes[index], parent)\r\n\r\n        // To do: see if we van clean this? Can we merge texts?\r\n        if (result) {\r\n          if (index && nodes[index - 1].type === 'break') {\r\n            if (!Array.isArray(result) && result.type === 'text') {\r\n              result.value = trimMarkdownSpaceStart(result.value)\r\n            }\r\n\r\n            if (!Array.isArray(result) && result.type === 'element') {\r\n              const head = result.children[0]\r\n\r\n              if (head && head.type === 'text') {\r\n                head.value = trimMarkdownSpaceStart(head.value)\r\n              }\r\n            }\r\n          }\r\n\r\n          if (Array.isArray(result)) {\r\n            values.push(...result)\r\n          } else {\r\n            values.push(result)\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return values\r\n  }\r\n}\r\n\r\n/**\r\n * Copy a node’s positional info.\r\n *\r\n * @param {MdastNodes} from\r\n *   mdast node to copy from.\r\n * @param {HastNodes} to\r\n *   hast node to copy into.\r\n * @returns {undefined}\r\n *   Nothing.\r\n */\r\nfunction patch(from, to) {\r\n  if (from.position) to.position = position(from)\r\n}\r\n\r\n/**\r\n * Honor the `data` of `from` and maybe generate an element instead of `to`.\r\n *\r\n * @template {HastNodes} Type\r\n *   Node type.\r\n * @param {MdastNodes} from\r\n *   mdast node to use data from.\r\n * @param {Type} to\r\n *   hast node to change.\r\n * @returns {HastElement | Type}\r\n *   Nothing.\r\n */\r\nfunction applyData(from, to) {\r\n  /** @type {HastElement | Type} */\r\n  let result = to\r\n\r\n  // Handle `data.hName`, `data.hProperties, `data.hChildren`.\r\n  if (from && from.data) {\r\n    const hName = from.data.hName\r\n    const hChildren = from.data.hChildren\r\n    const hProperties = from.data.hProperties\r\n\r\n    if (typeof hName === 'string') {\r\n      // Transforming the node resulted in an element with a different name\r\n      // than wanted:\r\n      if (result.type === 'element') {\r\n        result.tagName = hName\r\n      }\r\n      // Transforming the node resulted in a non-element, which happens for\r\n      // raw, text, and root nodes (unless custom handlers are passed).\r\n      // The intent of `hName` is to create an element, but likely also to keep\r\n      // the content around (otherwise: pass `hChildren`).\r\n      else {\r\n        /** @type {Array<HastElementContent>} */\r\n        // @ts-expect-error: assume no doctypes in `root`.\r\n        const children = 'children' in result ? result.children : [result]\r\n        result = {type: 'element', tagName: hName, properties: {}, children}\r\n      }\r\n    }\r\n\r\n    if (result.type === 'element' && hProperties) {\r\n      Object.assign(result.properties, structuredClone(hProperties))\r\n    }\r\n\r\n    if (\r\n      'children' in result &&\r\n      result.children &&\r\n      hChildren !== null &&\r\n      hChildren !== undefined\r\n    ) {\r\n      result.children = hChildren\r\n    }\r\n  }\r\n\r\n  return result\r\n}\r\n\r\n/**\r\n * Transform an unknown node.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {MdastNodes} node\r\n *   Unknown mdast node.\r\n * @returns {HastElement | HastText}\r\n *   Resulting hast node.\r\n */\r\nfunction defaultUnknownHandler(state, node) {\r\n  const data = node.data || {}\r\n  /** @type {HastElement | HastText} */\r\n  const result =\r\n    'value' in node &&\r\n    !(own.call(data, 'hProperties') || own.call(data, 'hChildren'))\r\n      ? {type: 'text', value: node.value}\r\n      : {\r\n          type: 'element',\r\n          tagName: 'div',\r\n          properties: {},\r\n          children: state.all(node)\r\n        }\r\n\r\n  state.patch(node, result)\r\n  return state.applyData(node, result)\r\n}\r\n\r\n/**\r\n * Wrap `nodes` with line endings between each node.\r\n *\r\n * @template {HastRootContent} Type\r\n *   Node type.\r\n * @param {Array<Type>} nodes\r\n *   List of nodes to wrap.\r\n * @param {boolean | undefined} [loose=false]\r\n *   Whether to add line endings at start and end (default: `false`).\r\n * @returns {Array<HastText | Type>}\r\n *   Wrapped nodes.\r\n */\r\nexport function wrap(nodes, loose) {\r\n  /** @type {Array<HastText | Type>} */\r\n  const result = []\r\n  let index = -1\r\n\r\n  if (loose) {\r\n    result.push({type: 'text', value: '\\n'})\r\n  }\r\n\r\n  while (++index < nodes.length) {\r\n    if (index) result.push({type: 'text', value: '\\n'})\r\n    result.push(nodes[index])\r\n  }\r\n\r\n  if (loose && nodes.length > 0) {\r\n    result.push({type: 'text', value: '\\n'})\r\n  }\r\n\r\n  return result\r\n}\r\n\r\n/**\r\n * Trim spaces and tabs at the start of `value`.\r\n *\r\n * @param {string} value\r\n *   Value to trim.\r\n * @returns {string}\r\n *   Result.\r\n */\r\nfunction trimMarkdownSpaceStart(value) {\r\n  let index = 0\r\n  let code = value.charCodeAt(index)\r\n\r\n  while (code === 9 || code === 32) {\r\n    index++\r\n    code = value.charCodeAt(index)\r\n  }\r\n\r\n  return value.slice(index)\r\n}\r\n", "/**\r\n * @typedef {import('hast').Nodes} HastNodes\r\n * @typedef {import('mdast').Nodes} MdastNodes\r\n * @typedef {import('./state.js').Options} Options\r\n */\r\n\r\nimport {ok as assert} from 'devlop'\r\nimport {footer} from './footer.js'\r\nimport {createState} from './state.js'\r\n\r\n/**\r\n * Transform mdast to hast.\r\n *\r\n * ##### Notes\r\n *\r\n * ###### HTML\r\n *\r\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\r\n * as semistandard `raw` nodes.\r\n * Most utilities ignore `raw` nodes but two notable ones don’t:\r\n *\r\n * *   `hast-util-to-html` also has an option `allowDangerousHtml` which will\r\n *     output the raw HTML.\r\n *     This is typically discouraged as noted by the option name but is useful\r\n *     if you completely trust authors\r\n * *   `hast-util-raw` can handle the raw embedded HTML strings by parsing them\r\n *     into standard hast nodes (`element`, `text`, etc).\r\n *     This is a heavy task as it needs a full HTML parser, but it is the only\r\n *     way to support untrusted content\r\n *\r\n * ###### Footnotes\r\n *\r\n * Many options supported here relate to footnotes.\r\n * Footnotes are not specified by CommonMark, which we follow by default.\r\n * They are supported by GitHub, so footnotes can be enabled in markdown with\r\n * `mdast-util-gfm`.\r\n *\r\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\r\n * that explains footnotes, which is hidden for sighted users but shown to\r\n * assistive technology.\r\n * When your page is not in English, you must define translated values.\r\n *\r\n * Back references use ARIA attributes, but the section label itself uses a\r\n * heading that is hidden with an `sr-only` class.\r\n * To show it to sighted users, define different attributes in\r\n * `footnoteLabelProperties`.\r\n *\r\n * ###### Clobbering\r\n *\r\n * Footnotes introduces a problem, as it links footnote calls to footnote\r\n * definitions on the page through `id` attributes generated from user content,\r\n * which results in DOM clobbering.\r\n *\r\n * DOM clobbering is this:\r\n *\r\n * ```html\r\n * <p id=x></p>\r\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\r\n * ```\r\n *\r\n * Elements by their ID are made available by browsers on the `window` object,\r\n * which is a security risk.\r\n * Using a prefix solves this problem.\r\n *\r\n * More information on how to handle clobbering and the prefix is explained in\r\n * Example: headings (DOM clobbering) in `rehype-sanitize`.\r\n *\r\n * ###### Unknown nodes\r\n *\r\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\r\n * The default behavior for unknown nodes is:\r\n *\r\n * *   when the node has a `value` (and doesn’t have `data.hName`,\r\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\r\n *     node\r\n * *   otherwise, create a `<div>` element (which could be changed with\r\n *     `data.hName`), with its children mapped from mdast to hast as well\r\n *\r\n * This behavior can be changed by passing an `unknownHandler`.\r\n *\r\n * @param {MdastNodes} tree\r\n *   mdast tree.\r\n * @param {Options | null | undefined} [options]\r\n *   Configuration (optional).\r\n * @returns {HastNodes}\r\n *   hast tree.\r\n */\r\nexport function toHast(tree, options) {\r\n  const state = createState(tree, options)\r\n  const node = state.one(tree, undefined)\r\n  const foot = footer(state)\r\n  /** @type {HastNodes} */\r\n  const result = Array.isArray(node)\r\n    ? {type: 'root', children: node}\r\n    : node || {type: 'root', children: []}\r\n\r\n  if (foot) {\r\n    // If there’s a footer, there were definitions, meaning block\r\n    // content.\r\n    // So `result` is a parent node.\r\n    assert('children' in result)\r\n    result.children.push({type: 'text', value: '\\n'}, foot)\r\n  }\r\n\r\n  return result\r\n}\r\n", "/**\r\n * @import {Root as HastRoot} from 'hast'\r\n * @import {Root as MdastRoot} from 'mdast'\r\n * @import {Options as ToHastOptions} from 'mdast-util-to-hast'\r\n * @import {Processor} from 'unified'\r\n * @import {VFile} from 'vfile'\r\n */\r\n\r\n/**\r\n * @typedef {Omit<ToHastOptions, 'file'>} Options\r\n *\r\n * @callback TransformBridge\r\n *   Bridge-mode.\r\n *\r\n *   Runs the destination with the new hast tree.\r\n *   Discards result.\r\n * @param {MdastRoot} tree\r\n *   Tree.\r\n * @param {VFile} file\r\n *   File.\r\n * @returns {Promise<undefined>}\r\n *   Nothing.\r\n *\r\n * @callback TransformMutate\r\n *  Mutate-mode.\r\n *\r\n *  Further transformers run on the hast tree.\r\n * @param {MdastRoot} tree\r\n *   Tree.\r\n * @param {VFile} file\r\n *   File.\r\n * @returns {HastRoot}\r\n *   Tree (hast).\r\n */\r\n\r\nimport {toHast} from 'mdast-util-to-hast'\r\n\r\n/**\r\n * Turn markdown into HTML.\r\n *\r\n * ##### Notes\r\n *\r\n * ###### Signature\r\n *\r\n * * if a processor is given,\r\n *   runs the (rehype) plugins used on it with a hast tree,\r\n *   then discards the result (*bridge mode*)\r\n * * otherwise,\r\n *   returns a hast tree,\r\n *   the plugins used after `remarkRehype` are rehype plugins (*mutate mode*)\r\n *\r\n * > 👉 **Note**:\r\n * > It’s highly unlikely that you want to pass a `processor`.\r\n *\r\n * ###### HTML\r\n *\r\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\r\n * as semistandard `raw` nodes.\r\n * Most plugins ignore `raw` nodes but two notable ones don’t:\r\n *\r\n * * `rehype-stringify` also has an option `allowDangerousHtml` which will\r\n *   output the raw HTML.\r\n *   This is typically discouraged as noted by the option name but is useful if\r\n *   you completely trust authors\r\n * * `rehype-raw` can handle the raw embedded HTML strings by parsing them\r\n *   into standard hast nodes (`element`, `text`, etc);\r\n *   this is a heavy task as it needs a full HTML parser,\r\n *   but it is the only way to support untrusted content\r\n *\r\n * ###### Footnotes\r\n *\r\n * Many options supported here relate to footnotes.\r\n * Footnotes are not specified by CommonMark,\r\n * which we follow by default.\r\n * They are supported by GitHub,\r\n * so footnotes can be enabled in markdown with `remark-gfm`.\r\n *\r\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\r\n * that explains footnotes,\r\n * which is hidden for sighted users but shown to assistive technology.\r\n * When your page is not in English,\r\n * you must define translated values.\r\n *\r\n * Back references use ARIA attributes,\r\n * but the section label itself uses a heading that is hidden with an\r\n * `sr-only` class.\r\n * To show it to sighted users,\r\n * define different attributes in `footnoteLabelProperties`.\r\n *\r\n * ###### Clobbering\r\n *\r\n * Footnotes introduces a problem,\r\n * as it links footnote calls to footnote definitions on the page through `id`\r\n * attributes generated from user content,\r\n * which results in DOM clobbering.\r\n *\r\n * DOM clobbering is this:\r\n *\r\n * ```html\r\n * <p id=x></p>\r\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\r\n * ```\r\n *\r\n * Elements by their ID are made available by browsers on the `window` object,\r\n * which is a security risk.\r\n * Using a prefix solves this problem.\r\n *\r\n * More information on how to handle clobbering and the prefix is explained in\r\n * *Example: headings (DOM clobbering)* in `rehype-sanitize`.\r\n *\r\n * ###### Unknown nodes\r\n *\r\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\r\n * The default behavior for unknown nodes is:\r\n *\r\n * * when the node has a `value`\r\n *   (and doesn’t have `data.hName`, `data.hProperties`, or `data.hChildren`,\r\n *   see later),\r\n *   create a hast `text` node\r\n * * otherwise,\r\n *   create a `<div>` element (which could be changed with `data.hName`),\r\n *   with its children mapped from mdast to hast as well\r\n *\r\n * This behavior can be changed by passing an `unknownHandler`.\r\n *\r\n * @overload\r\n * @param {Processor} processor\r\n * @param {Readonly<Options> | null | undefined} [options]\r\n * @returns {TransformBridge}\r\n *\r\n * @overload\r\n * @param {Readonly<Options> | null | undefined} [options]\r\n * @returns {TransformMutate}\r\n *\r\n * @overload\r\n * @param {Readonly<Options> | Processor | null | undefined} [destination]\r\n * @param {Readonly<Options> | null | undefined} [options]\r\n * @returns {TransformBridge | TransformMutate}\r\n *\r\n * @param {Readonly<Options> | Processor | null | undefined} [destination]\r\n *   Processor or configuration (optional).\r\n * @param {Readonly<Options> | null | undefined} [options]\r\n *   When a processor was given,\r\n *   configuration (optional).\r\n * @returns {TransformBridge | TransformMutate}\r\n *   Transform.\r\n */\r\nexport default function remarkRehype(destination, options) {\r\n  if (destination && 'run' in destination) {\r\n    /**\r\n     * @type {TransformBridge}\r\n     */\r\n    return async function (tree, file) {\r\n      // Cast because root in -> root out.\r\n      const hastTree = /** @type {HastRoot} */ (\r\n        toHast(tree, {file, ...options})\r\n      )\r\n      await destination.run(hastTree, file)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @type {TransformMutate}\r\n   */\r\n  return function (tree, file) {\r\n    // Cast because root in -> root out.\r\n    // To do: in the future, disallow ` || options` fallback.\r\n    // With `unified-engine`, `destination` can be `undefined` but\r\n    // `options` will be the file set.\r\n    // We should not pass that as `options`.\r\n    return /** @type {HastRoot} */ (\r\n      toHast(tree, {file, ...(destination || options)})\r\n    )\r\n  }\r\n}\r\n", "/**\r\n * Throw a given error.\r\n *\r\n * @param {Error|null|undefined} [error]\r\n *   Maybe error.\r\n * @returns {asserts error is null|undefined}\r\n */\r\nexport function bail(error) {\r\n  if (error) {\r\n    throw error\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('trough').Pipeline} Pipeline\r\n *\r\n * @typedef {import('unist').Node} Node\r\n *\r\n * @typedef {import('vfile').Compatible} Compatible\r\n * @typedef {import('vfile').Value} Value\r\n *\r\n * @typedef {import('../index.js').CompileResultMap} CompileResultMap\r\n * @typedef {import('../index.js').Data} Data\r\n * @typedef {import('../index.js').Settings} Settings\r\n */\r\n\r\n/**\r\n * @typedef {CompileResultMap[keyof CompileResultMap]} CompileResults\r\n *   Acceptable results from compilers.\r\n *\r\n *   To register custom results, add them to\r\n *   {@linkcode CompileResultMap}.\r\n */\r\n\r\n/**\r\n * @template {Node} [Tree=Node]\r\n *   The node that the compiler receives (default: `Node`).\r\n * @template {CompileResults} [Result=CompileResults]\r\n *   The thing that the compiler yields (default: `CompileResults`).\r\n * @callback Compiler\r\n *   A **compiler** handles the compiling of a syntax tree to something else\r\n *   (in most cases, text) (TypeScript type).\r\n *\r\n *   It is used in the stringify phase and called with a {@linkcode Node}\r\n *   and {@linkcode VFile} representation of the document to compile.\r\n *   It should return the textual representation of the given tree (typically\r\n *   `string`).\r\n *\r\n *   > **Note**: unified typically compiles by serializing: most compilers\r\n *   > return `string` (or `Uint8Array`).\r\n *   > Some compilers, such as the one configured with\r\n *   > [`rehype-react`][rehype-react], return other values (in this case, a\r\n *   > React tree).\r\n *   > If you’re using a compiler that doesn’t serialize, expect different\r\n *   > result values.\r\n *   >\r\n *   > To register custom results in TypeScript, add them to\r\n *   > {@linkcode CompileResultMap}.\r\n *\r\n *   [rehype-react]: https://github.com/rehypejs/rehype-react\r\n * @param {Tree} tree\r\n *   Tree to compile.\r\n * @param {VFile} file\r\n *   File associated with `tree`.\r\n * @returns {Result}\r\n *   New content: compiled text (`string` or `Uint8Array`, for `file.value`) or\r\n *   something else (for `file.result`).\r\n */\r\n\r\n/**\r\n * @template {Node} [Tree=Node]\r\n *   The node that the parser yields (default: `Node`)\r\n * @callback Parser\r\n *   A **parser** handles the parsing of text to a syntax tree.\r\n *\r\n *   It is used in the parse phase and is called with a `string` and\r\n *   {@linkcode VFile} of the document to parse.\r\n *   It must return the syntax tree representation of the given file\r\n *   ({@linkcode Node}).\r\n * @param {string} document\r\n *   Document to parse.\r\n * @param {VFile} file\r\n *   File associated with `document`.\r\n * @returns {Tree}\r\n *   Node representing the given file.\r\n */\r\n\r\n/**\r\n * @typedef {(\r\n *   Plugin<Array<any>, any, any> |\r\n *   PluginTuple<Array<any>, any, any> |\r\n *   Preset\r\n * )} Pluggable\r\n *   Union of the different ways to add plugins and settings.\r\n */\r\n\r\n/**\r\n * @typedef {Array<Pluggable>} PluggableList\r\n *   List of plugins and presets.\r\n */\r\n\r\n// Note: we can’t use `callback` yet as it messes up `this`:\r\n//  <https://github.com/microsoft/TypeScript/issues/55197>.\r\n/**\r\n * @template {Array<unknown>} [PluginParameters=[]]\r\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\r\n * @template {Node | string | undefined} [Input=Node]\r\n *   Value that is expected as input (default: `Node`).\r\n *\r\n *   *   If the plugin returns a {@linkcode Transformer}, this\r\n *       should be the node it expects.\r\n *   *   If the plugin sets a {@linkcode Parser}, this should be\r\n *       `string`.\r\n *   *   If the plugin sets a {@linkcode Compiler}, this should be the\r\n *       node it expects.\r\n * @template [Output=Input]\r\n *   Value that is yielded as output (default: `Input`).\r\n *\r\n *   *   If the plugin returns a {@linkcode Transformer}, this\r\n *       should be the node that that yields.\r\n *   *   If the plugin sets a {@linkcode Parser}, this should be the\r\n *       node that it yields.\r\n *   *   If the plugin sets a {@linkcode Compiler}, this should be\r\n *       result it yields.\r\n * @typedef {(\r\n *   (this: Processor, ...parameters: PluginParameters) =>\r\n *     Input extends string ? // Parser.\r\n *        Output extends Node | undefined ? undefined | void : never :\r\n *     Output extends CompileResults ? // Compiler.\r\n *        Input extends Node | undefined ? undefined | void : never :\r\n *     Transformer<\r\n *       Input extends Node ? Input : Node,\r\n *       Output extends Node ? Output : Node\r\n *     > | undefined | void\r\n * )} Plugin\r\n *   Single plugin.\r\n *\r\n *   Plugins configure the processors they are applied on in the following\r\n *   ways:\r\n *\r\n *   *   they change the processor, such as the parser, the compiler, or by\r\n *       configuring data\r\n *   *   they specify how to handle trees and files\r\n *\r\n *   In practice, they are functions that can receive options and configure the\r\n *   processor (`this`).\r\n *\r\n *   > **Note**: plugins are called when the processor is *frozen*, not when\r\n *   > they are applied.\r\n */\r\n\r\n/**\r\n * Tuple of a plugin and its configuration.\r\n *\r\n * The first item is a plugin, the rest are its parameters.\r\n *\r\n * @template {Array<unknown>} [TupleParameters=[]]\r\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\r\n * @template {Node | string | undefined} [Input=undefined]\r\n *   Value that is expected as input (optional).\r\n *\r\n *   *   If the plugin returns a {@linkcode Transformer}, this\r\n *       should be the node it expects.\r\n *   *   If the plugin sets a {@linkcode Parser}, this should be\r\n *       `string`.\r\n *   *   If the plugin sets a {@linkcode Compiler}, this should be the\r\n *       node it expects.\r\n * @template [Output=undefined] (optional).\r\n *   Value that is yielded as output.\r\n *\r\n *   *   If the plugin returns a {@linkcode Transformer}, this\r\n *       should be the node that that yields.\r\n *   *   If the plugin sets a {@linkcode Parser}, this should be the\r\n *       node that it yields.\r\n *   *   If the plugin sets a {@linkcode Compiler}, this should be\r\n *       result it yields.\r\n * @typedef {(\r\n *   [\r\n *     plugin: Plugin<TupleParameters, Input, Output>,\r\n *     ...parameters: TupleParameters\r\n *   ]\r\n * )} PluginTuple\r\n */\r\n\r\n/**\r\n * @typedef Preset\r\n *   Sharable configuration.\r\n *\r\n *   They can contain plugins and settings.\r\n * @property {PluggableList | undefined} [plugins]\r\n *   List of plugins and presets (optional).\r\n * @property {Settings | undefined} [settings]\r\n *   Shared settings for parsers and compilers (optional).\r\n */\r\n\r\n/**\r\n * @template {VFile} [File=VFile]\r\n *   The file that the callback receives (default: `VFile`).\r\n * @callback ProcessCallback\r\n *   Callback called when the process is done.\r\n *\r\n *   Called with either an error or a result.\r\n * @param {Error | undefined} [error]\r\n *   Fatal error (optional).\r\n * @param {File | undefined} [file]\r\n *   Processed file (optional).\r\n * @returns {undefined}\r\n *   Nothing.\r\n */\r\n\r\n/**\r\n * @template {Node} [Tree=Node]\r\n *   The tree that the callback receives (default: `Node`).\r\n * @callback RunCallback\r\n *   Callback called when transformers are done.\r\n *\r\n *   Called with either an error or results.\r\n * @param {Error | undefined} [error]\r\n *   Fatal error (optional).\r\n * @param {Tree | undefined} [tree]\r\n *   Transformed tree (optional).\r\n * @param {VFile | undefined} [file]\r\n *   File (optional).\r\n * @returns {undefined}\r\n *   Nothing.\r\n */\r\n\r\n/**\r\n * @template {Node} [Output=Node]\r\n *   Node type that the transformer yields (default: `Node`).\r\n * @callback TransformCallback\r\n *   Callback passed to transforms.\r\n *\r\n *   If the signature of a `transformer` accepts a third argument, the\r\n *   transformer may perform asynchronous operations, and must call it.\r\n * @param {Error | undefined} [error]\r\n *   Fatal error to stop the process (optional).\r\n * @param {Output | undefined} [tree]\r\n *   New, changed, tree (optional).\r\n * @param {VFile | undefined} [file]\r\n *   New, changed, file (optional).\r\n * @returns {undefined}\r\n *   Nothing.\r\n */\r\n\r\n/**\r\n * @template {Node} [Input=Node]\r\n *   Node type that the transformer expects (default: `Node`).\r\n * @template {Node} [Output=Input]\r\n *   Node type that the transformer yields (default: `Input`).\r\n * @callback Transformer\r\n *   Transformers handle syntax trees and files.\r\n *\r\n *   They are functions that are called each time a syntax tree and file are\r\n *   passed through the run phase.\r\n *   When an error occurs in them (either because it’s thrown, returned,\r\n *   rejected, or passed to `next`), the process stops.\r\n *\r\n *   The run phase is handled by [`trough`][trough], see its documentation for\r\n *   the exact semantics of these functions.\r\n *\r\n *   > **Note**: you should likely ignore `next`: don’t accept it.\r\n *   > it supports callback-style async work.\r\n *   > But promises are likely easier to reason about.\r\n *\r\n *   [trough]: https://github.com/wooorm/trough#function-fninput-next\r\n * @param {Input} tree\r\n *   Tree to handle.\r\n * @param {VFile} file\r\n *   File to handle.\r\n * @param {TransformCallback<Output>} next\r\n *   Callback.\r\n * @returns {(\r\n *   Promise<Output | undefined | void> |\r\n *   Promise<never> | // For some reason this is needed separately.\r\n *   Output |\r\n *   Error |\r\n *   undefined |\r\n *   void\r\n * )}\r\n *   If you accept `next`, nothing.\r\n *   Otherwise:\r\n *\r\n *   *   `Error` — fatal error to stop the process\r\n *   *   `Promise<undefined>` or `undefined` — the next transformer keeps using\r\n *       same tree\r\n *   *   `Promise<Node>` or `Node` — new, changed, tree\r\n */\r\n\r\n/**\r\n * @template {Node | undefined} ParseTree\r\n *   Output of `parse`.\r\n * @template {Node | undefined} HeadTree\r\n *   Input for `run`.\r\n * @template {Node | undefined} TailTree\r\n *   Output for `run`.\r\n * @template {Node | undefined} CompileTree\r\n *   Input of `stringify`.\r\n * @template {CompileResults | undefined} CompileResult\r\n *   Output of `stringify`.\r\n * @template {Node | string | undefined} Input\r\n *   Input of plugin.\r\n * @template Output\r\n *   Output of plugin (optional).\r\n * @typedef {(\r\n *   Input extends string\r\n *     ? Output extends Node | undefined\r\n *       ? // Parser.\r\n *         Processor<\r\n *           Output extends undefined ? ParseTree : Output,\r\n *           HeadTree,\r\n *           TailTree,\r\n *           CompileTree,\r\n *           CompileResult\r\n *         >\r\n *       : // Unknown.\r\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\r\n *     : Output extends CompileResults\r\n *     ? Input extends Node | undefined\r\n *       ? // Compiler.\r\n *         Processor<\r\n *           ParseTree,\r\n *           HeadTree,\r\n *           TailTree,\r\n *           Input extends undefined ? CompileTree : Input,\r\n *           Output extends undefined ? CompileResult : Output\r\n *         >\r\n *       : // Unknown.\r\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\r\n *     : Input extends Node | undefined\r\n *     ? Output extends Node | undefined\r\n *       ? // Transform.\r\n *         Processor<\r\n *           ParseTree,\r\n *           HeadTree extends undefined ? Input : HeadTree,\r\n *           Output extends undefined ? TailTree : Output,\r\n *           CompileTree,\r\n *           CompileResult\r\n *         >\r\n *       : // Unknown.\r\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\r\n *     : // Unknown.\r\n *       Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\r\n * )} UsePlugin\r\n *   Create a processor based on the input/output of a {@link Plugin plugin}.\r\n */\r\n\r\n/**\r\n * @template {CompileResults | undefined} Result\r\n *   Node type that the transformer yields.\r\n * @typedef {(\r\n *   Result extends Value | undefined ?\r\n *     VFile :\r\n *     VFile & {result: Result}\r\n *   )} VFileWithOutput\r\n *   Type to generate a {@linkcode VFile} corresponding to a compiler result.\r\n *\r\n *   If a result that is not acceptable on a `VFile` is used, that will\r\n *   be stored on the `result` field of {@linkcode VFile}.\r\n */\r\n\r\nimport {bail} from 'bail'\r\nimport extend from 'extend'\r\nimport {ok as assert} from 'devlop'\r\nimport isPlainObj from 'is-plain-obj'\r\nimport {trough} from 'trough'\r\nimport {VFile} from 'vfile'\r\nimport {CallableInstance} from './callable-instance.js'\r\n\r\n// To do: next major: drop `Compiler`, `Parser`: prefer lowercase.\r\n\r\n// To do: we could start yielding `never` in TS when a parser is missing and\r\n// `parse` is called.\r\n// Currently, we allow directly setting `processor.parser`, which is untyped.\r\n\r\nconst own = {}.hasOwnProperty\r\n\r\n/**\r\n * @template {Node | undefined} [ParseTree=undefined]\r\n *   Output of `parse` (optional).\r\n * @template {Node | undefined} [HeadTree=undefined]\r\n *   Input for `run` (optional).\r\n * @template {Node | undefined} [TailTree=undefined]\r\n *   Output for `run` (optional).\r\n * @template {Node | undefined} [CompileTree=undefined]\r\n *   Input of `stringify` (optional).\r\n * @template {CompileResults | undefined} [CompileResult=undefined]\r\n *   Output of `stringify` (optional).\r\n * @extends {CallableInstance<[], Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>>}\r\n */\r\nexport class Processor extends CallableInstance {\r\n  /**\r\n   * Create a processor.\r\n   */\r\n  constructor() {\r\n    // If `Processor()` is called (w/o new), `copy` is called instead.\r\n    super('copy')\r\n\r\n    /**\r\n     * Compiler to use (deprecated).\r\n     *\r\n     * @deprecated\r\n     *   Use `compiler` instead.\r\n     * @type {(\r\n     *   Compiler<\r\n     *     CompileTree extends undefined ? Node : CompileTree,\r\n     *     CompileResult extends undefined ? CompileResults : CompileResult\r\n     *   > |\r\n     *   undefined\r\n     * )}\r\n     */\r\n    this.Compiler = undefined\r\n\r\n    /**\r\n     * Parser to use (deprecated).\r\n     *\r\n     * @deprecated\r\n     *   Use `parser` instead.\r\n     * @type {(\r\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\r\n     *   undefined\r\n     * )}\r\n     */\r\n    this.Parser = undefined\r\n\r\n    // Note: the following fields are considered private.\r\n    // However, they are needed for tests, and TSC generates an untyped\r\n    // `private freezeIndex` field for, which trips `type-coverage` up.\r\n    // Instead, we use `@deprecated` to visualize that they shouldn’t be used.\r\n    /**\r\n     * Internal list of configured plugins.\r\n     *\r\n     * @deprecated\r\n     *   This is a private internal property and should not be used.\r\n     * @type {Array<PluginTuple<Array<unknown>>>}\r\n     */\r\n    this.attachers = []\r\n\r\n    /**\r\n     * Compiler to use.\r\n     *\r\n     * @type {(\r\n     *   Compiler<\r\n     *     CompileTree extends undefined ? Node : CompileTree,\r\n     *     CompileResult extends undefined ? CompileResults : CompileResult\r\n     *   > |\r\n     *   undefined\r\n     * )}\r\n     */\r\n    this.compiler = undefined\r\n\r\n    /**\r\n     * Internal state to track where we are while freezing.\r\n     *\r\n     * @deprecated\r\n     *   This is a private internal property and should not be used.\r\n     * @type {number}\r\n     */\r\n    this.freezeIndex = -1\r\n\r\n    /**\r\n     * Internal state to track whether we’re frozen.\r\n     *\r\n     * @deprecated\r\n     *   This is a private internal property and should not be used.\r\n     * @type {boolean | undefined}\r\n     */\r\n    this.frozen = undefined\r\n\r\n    /**\r\n     * Internal state.\r\n     *\r\n     * @deprecated\r\n     *   This is a private internal property and should not be used.\r\n     * @type {Data}\r\n     */\r\n    this.namespace = {}\r\n\r\n    /**\r\n     * Parser to use.\r\n     *\r\n     * @type {(\r\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\r\n     *   undefined\r\n     * )}\r\n     */\r\n    this.parser = undefined\r\n\r\n    /**\r\n     * Internal list of configured transformers.\r\n     *\r\n     * @deprecated\r\n     *   This is a private internal property and should not be used.\r\n     * @type {Pipeline}\r\n     */\r\n    this.transformers = trough()\r\n  }\r\n\r\n  /**\r\n   * Copy a processor.\r\n   *\r\n   * @deprecated\r\n   *   This is a private internal method and should not be used.\r\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\r\n   *   New *unfrozen* processor ({@linkcode Processor}) that is\r\n   *   configured to work the same as its ancestor.\r\n   *   When the descendant processor is configured in the future it does not\r\n   *   affect the ancestral processor.\r\n   */\r\n  copy() {\r\n    // Cast as the type parameters will be the same after attaching.\r\n    const destination =\r\n      /** @type {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>} */ (\r\n        new Processor()\r\n      )\r\n    let index = -1\r\n\r\n    while (++index < this.attachers.length) {\r\n      const attacher = this.attachers[index]\r\n      destination.use(...attacher)\r\n    }\r\n\r\n    destination.data(extend(true, {}, this.namespace))\r\n\r\n    return destination\r\n  }\r\n\r\n  /**\r\n   * Configure the processor with info available to all plugins.\r\n   * Information is stored in an object.\r\n   *\r\n   * Typically, options can be given to a specific plugin, but sometimes it\r\n   * makes sense to have information shared with several plugins.\r\n   * For example, a list of HTML elements that are self-closing, which is\r\n   * needed during all phases.\r\n   *\r\n   * > **Note**: setting information cannot occur on *frozen* processors.\r\n   * > Call the processor first to create a new unfrozen processor.\r\n   *\r\n   * > **Note**: to register custom data in TypeScript, augment the\r\n   * > {@linkcode Data} interface.\r\n   *\r\n   * @example\r\n   *   This example show how to get and set info:\r\n   *\r\n   *   ```js\r\n   *   import {unified} from 'unified'\r\n   *\r\n   *   const processor = unified().data('alpha', 'bravo')\r\n   *\r\n   *   processor.data('alpha') // => 'bravo'\r\n   *\r\n   *   processor.data() // => {alpha: 'bravo'}\r\n   *\r\n   *   processor.data({charlie: 'delta'})\r\n   *\r\n   *   processor.data() // => {charlie: 'delta'}\r\n   *   ```\r\n   *\r\n   * @template {keyof Data} Key\r\n   *\r\n   * @overload\r\n   * @returns {Data}\r\n   *\r\n   * @overload\r\n   * @param {Data} dataset\r\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\r\n   *\r\n   * @overload\r\n   * @param {Key} key\r\n   * @returns {Data[Key]}\r\n   *\r\n   * @overload\r\n   * @param {Key} key\r\n   * @param {Data[Key]} value\r\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\r\n   *\r\n   * @param {Data | Key} [key]\r\n   *   Key to get or set, or entire dataset to set, or nothing to get the\r\n   *   entire dataset (optional).\r\n   * @param {Data[Key]} [value]\r\n   *   Value to set (optional).\r\n   * @returns {unknown}\r\n   *   The current processor when setting, the value at `key` when getting, or\r\n   *   the entire dataset when getting without key.\r\n   */\r\n  data(key, value) {\r\n    if (typeof key === 'string') {\r\n      // Set `key`.\r\n      if (arguments.length === 2) {\r\n        assertUnfrozen('data', this.frozen)\r\n        this.namespace[key] = value\r\n        return this\r\n      }\r\n\r\n      // Get `key`.\r\n      return (own.call(this.namespace, key) && this.namespace[key]) || undefined\r\n    }\r\n\r\n    // Set space.\r\n    if (key) {\r\n      assertUnfrozen('data', this.frozen)\r\n      this.namespace = key\r\n      return this\r\n    }\r\n\r\n    // Get space.\r\n    return this.namespace\r\n  }\r\n\r\n  /**\r\n   * Freeze a processor.\r\n   *\r\n   * Frozen processors are meant to be extended and not to be configured\r\n   * directly.\r\n   *\r\n   * When a processor is frozen it cannot be unfrozen.\r\n   * New processors working the same way can be created by calling the\r\n   * processor.\r\n   *\r\n   * It’s possible to freeze processors explicitly by calling `.freeze()`.\r\n   * Processors freeze automatically when `.parse()`, `.run()`, `.runSync()`,\r\n   * `.stringify()`, `.process()`, or `.processSync()` are called.\r\n   *\r\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\r\n   *   The current processor.\r\n   */\r\n  freeze() {\r\n    if (this.frozen) {\r\n      return this\r\n    }\r\n\r\n    // Cast so that we can type plugins easier.\r\n    // Plugins are supposed to be usable on different processors, not just on\r\n    // this exact processor.\r\n    const self = /** @type {Processor} */ (/** @type {unknown} */ (this))\r\n\r\n    while (++this.freezeIndex < this.attachers.length) {\r\n      const [attacher, ...options] = this.attachers[this.freezeIndex]\r\n\r\n      if (options[0] === false) {\r\n        continue\r\n      }\r\n\r\n      if (options[0] === true) {\r\n        options[0] = undefined\r\n      }\r\n\r\n      const transformer = attacher.call(self, ...options)\r\n\r\n      if (typeof transformer === 'function') {\r\n        this.transformers.use(transformer)\r\n      }\r\n    }\r\n\r\n    this.frozen = true\r\n    this.freezeIndex = Number.POSITIVE_INFINITY\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Parse text to a syntax tree.\r\n   *\r\n   * > **Note**: `parse` freezes the processor if not already *frozen*.\r\n   *\r\n   * > **Note**: `parse` performs the parse phase, not the run phase or other\r\n   * > phases.\r\n   *\r\n   * @param {Compatible | undefined} [file]\r\n   *   file to parse (optional); typically `string` or `VFile`; any value\r\n   *   accepted as `x` in `new VFile(x)`.\r\n   * @returns {ParseTree extends undefined ? Node : ParseTree}\r\n   *   Syntax tree representing `file`.\r\n   */\r\n  parse(file) {\r\n    this.freeze()\r\n    const realFile = vfile(file)\r\n    const parser = this.parser || this.Parser\r\n    assertParser('parse', parser)\r\n    return parser(String(realFile), realFile)\r\n  }\r\n\r\n  /**\r\n   * Process the given file as configured on the processor.\r\n   *\r\n   * > **Note**: `process` freezes the processor if not already *frozen*.\r\n   *\r\n   * > **Note**: `process` performs the parse, run, and stringify phases.\r\n   *\r\n   * @overload\r\n   * @param {Compatible | undefined} file\r\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>>} done\r\n   * @returns {undefined}\r\n   *\r\n   * @overload\r\n   * @param {Compatible | undefined} [file]\r\n   * @returns {Promise<VFileWithOutput<CompileResult>>}\r\n   *\r\n   * @param {Compatible | undefined} [file]\r\n   *   File (optional); typically `string` or `VFile`]; any value accepted as\r\n   *   `x` in `new VFile(x)`.\r\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>> | undefined} [done]\r\n   *   Callback (optional).\r\n   * @returns {Promise<VFile> | undefined}\r\n   *   Nothing if `done` is given.\r\n   *   Otherwise a promise, rejected with a fatal error or resolved with the\r\n   *   processed file.\r\n   *\r\n   *   The parsed, transformed, and compiled value is available at\r\n   *   `file.value` (see note).\r\n   *\r\n   *   > **Note**: unified typically compiles by serializing: most\r\n   *   > compilers return `string` (or `Uint8Array`).\r\n   *   > Some compilers, such as the one configured with\r\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\r\n   *   > React tree).\r\n   *   > If you’re using a compiler that doesn’t serialize, expect different\r\n   *   > result values.\r\n   *   >\r\n   *   > To register custom results in TypeScript, add them to\r\n   *   > {@linkcode CompileResultMap}.\r\n   *\r\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\r\n   */\r\n  process(file, done) {\r\n    const self = this\r\n\r\n    this.freeze()\r\n    assertParser('process', this.parser || this.Parser)\r\n    assertCompiler('process', this.compiler || this.Compiler)\r\n\r\n    return done ? executor(undefined, done) : new Promise(executor)\r\n\r\n    // Note: `void`s needed for TS.\r\n    /**\r\n     * @param {((file: VFileWithOutput<CompileResult>) => undefined | void) | undefined} resolve\r\n     * @param {(error: Error | undefined) => undefined | void} reject\r\n     * @returns {undefined}\r\n     */\r\n    function executor(resolve, reject) {\r\n      const realFile = vfile(file)\r\n      // Assume `ParseTree` (the result of the parser) matches `HeadTree` (the\r\n      // input of the first transform).\r\n      const parseTree =\r\n        /** @type {HeadTree extends undefined ? Node : HeadTree} */ (\r\n          /** @type {unknown} */ (self.parse(realFile))\r\n        )\r\n\r\n      self.run(parseTree, realFile, function (error, tree, file) {\r\n        if (error || !tree || !file) {\r\n          return realDone(error)\r\n        }\r\n\r\n        // Assume `TailTree` (the output of the last transform) matches\r\n        // `CompileTree` (the input of the compiler).\r\n        const compileTree =\r\n          /** @type {CompileTree extends undefined ? Node : CompileTree} */ (\r\n            /** @type {unknown} */ (tree)\r\n          )\r\n\r\n        const compileResult = self.stringify(compileTree, file)\r\n\r\n        if (looksLikeAValue(compileResult)) {\r\n          file.value = compileResult\r\n        } else {\r\n          file.result = compileResult\r\n        }\r\n\r\n        realDone(error, /** @type {VFileWithOutput<CompileResult>} */ (file))\r\n      })\r\n\r\n      /**\r\n       * @param {Error | undefined} error\r\n       * @param {VFileWithOutput<CompileResult> | undefined} [file]\r\n       * @returns {undefined}\r\n       */\r\n      function realDone(error, file) {\r\n        if (error || !file) {\r\n          reject(error)\r\n        } else if (resolve) {\r\n          resolve(file)\r\n        } else {\r\n          assert(done, '`done` is defined if `resolve` is not')\r\n          done(undefined, file)\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Process the given file as configured on the processor.\r\n   *\r\n   * An error is thrown if asynchronous transforms are configured.\r\n   *\r\n   * > **Note**: `processSync` freezes the processor if not already *frozen*.\r\n   *\r\n   * > **Note**: `processSync` performs the parse, run, and stringify phases.\r\n   *\r\n   * @param {Compatible | undefined} [file]\r\n   *   File (optional); typically `string` or `VFile`; any value accepted as\r\n   *   `x` in `new VFile(x)`.\r\n   * @returns {VFileWithOutput<CompileResult>}\r\n   *   The processed file.\r\n   *\r\n   *   The parsed, transformed, and compiled value is available at\r\n   *   `file.value` (see note).\r\n   *\r\n   *   > **Note**: unified typically compiles by serializing: most\r\n   *   > compilers return `string` (or `Uint8Array`).\r\n   *   > Some compilers, such as the one configured with\r\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\r\n   *   > React tree).\r\n   *   > If you’re using a compiler that doesn’t serialize, expect different\r\n   *   > result values.\r\n   *   >\r\n   *   > To register custom results in TypeScript, add them to\r\n   *   > {@linkcode CompileResultMap}.\r\n   *\r\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\r\n   */\r\n  processSync(file) {\r\n    /** @type {boolean} */\r\n    let complete = false\r\n    /** @type {VFileWithOutput<CompileResult> | undefined} */\r\n    let result\r\n\r\n    this.freeze()\r\n    assertParser('processSync', this.parser || this.Parser)\r\n    assertCompiler('processSync', this.compiler || this.Compiler)\r\n\r\n    this.process(file, realDone)\r\n    assertDone('processSync', 'process', complete)\r\n    assert(result, 'we either bailed on an error or have a tree')\r\n\r\n    return result\r\n\r\n    /**\r\n     * @type {ProcessCallback<VFileWithOutput<CompileResult>>}\r\n     */\r\n    function realDone(error, file) {\r\n      complete = true\r\n      bail(error)\r\n      result = file\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Run *transformers* on a syntax tree.\r\n   *\r\n   * > **Note**: `run` freezes the processor if not already *frozen*.\r\n   *\r\n   * > **Note**: `run` performs the run phase, not other phases.\r\n   *\r\n   * @overload\r\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\r\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\r\n   * @returns {undefined}\r\n   *\r\n   * @overload\r\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\r\n   * @param {Compatible | undefined} file\r\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\r\n   * @returns {undefined}\r\n   *\r\n   * @overload\r\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\r\n   * @param {Compatible | undefined} [file]\r\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree>}\r\n   *\r\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\r\n   *   Tree to transform and inspect.\r\n   * @param {(\r\n   *   RunCallback<TailTree extends undefined ? Node : TailTree> |\r\n   *   Compatible\r\n   * )} [file]\r\n   *   File associated with `node` (optional); any value accepted as `x` in\r\n   *   `new VFile(x)`.\r\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} [done]\r\n   *   Callback (optional).\r\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree> | undefined}\r\n   *   Nothing if `done` is given.\r\n   *   Otherwise, a promise rejected with a fatal error or resolved with the\r\n   *   transformed tree.\r\n   */\r\n  run(tree, file, done) {\r\n    assertNode(tree)\r\n    this.freeze()\r\n\r\n    const transformers = this.transformers\r\n\r\n    if (!done && typeof file === 'function') {\r\n      done = file\r\n      file = undefined\r\n    }\r\n\r\n    return done ? executor(undefined, done) : new Promise(executor)\r\n\r\n    // Note: `void`s needed for TS.\r\n    /**\r\n     * @param {(\r\n     *   ((tree: TailTree extends undefined ? Node : TailTree) => undefined | void) |\r\n     *   undefined\r\n     * )} resolve\r\n     * @param {(error: Error) => undefined | void} reject\r\n     * @returns {undefined}\r\n     */\r\n    function executor(resolve, reject) {\r\n      assert(\r\n        typeof file !== 'function',\r\n        '`file` can’t be a `done` anymore, we checked'\r\n      )\r\n      const realFile = vfile(file)\r\n      transformers.run(tree, realFile, realDone)\r\n\r\n      /**\r\n       * @param {Error | undefined} error\r\n       * @param {Node} outputTree\r\n       * @param {VFile} file\r\n       * @returns {undefined}\r\n       */\r\n      function realDone(error, outputTree, file) {\r\n        const resultingTree =\r\n          /** @type {TailTree extends undefined ? Node : TailTree} */ (\r\n            outputTree || tree\r\n          )\r\n\r\n        if (error) {\r\n          reject(error)\r\n        } else if (resolve) {\r\n          resolve(resultingTree)\r\n        } else {\r\n          assert(done, '`done` is defined if `resolve` is not')\r\n          done(undefined, resultingTree, file)\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Run *transformers* on a syntax tree.\r\n   *\r\n   * An error is thrown if asynchronous transforms are configured.\r\n   *\r\n   * > **Note**: `runSync` freezes the processor if not already *frozen*.\r\n   *\r\n   * > **Note**: `runSync` performs the run phase, not other phases.\r\n   *\r\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\r\n   *   Tree to transform and inspect.\r\n   * @param {Compatible | undefined} [file]\r\n   *   File associated with `node` (optional); any value accepted as `x` in\r\n   *   `new VFile(x)`.\r\n   * @returns {TailTree extends undefined ? Node : TailTree}\r\n   *   Transformed tree.\r\n   */\r\n  runSync(tree, file) {\r\n    /** @type {boolean} */\r\n    let complete = false\r\n    /** @type {(TailTree extends undefined ? Node : TailTree) | undefined} */\r\n    let result\r\n\r\n    this.run(tree, file, realDone)\r\n\r\n    assertDone('runSync', 'run', complete)\r\n    assert(result, 'we either bailed on an error or have a tree')\r\n    return result\r\n\r\n    /**\r\n     * @type {RunCallback<TailTree extends undefined ? Node : TailTree>}\r\n     */\r\n    function realDone(error, tree) {\r\n      bail(error)\r\n      result = tree\r\n      complete = true\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Compile a syntax tree.\r\n   *\r\n   * > **Note**: `stringify` freezes the processor if not already *frozen*.\r\n   *\r\n   * > **Note**: `stringify` performs the stringify phase, not the run phase\r\n   * > or other phases.\r\n   *\r\n   * @param {CompileTree extends undefined ? Node : CompileTree} tree\r\n   *   Tree to compile.\r\n   * @param {Compatible | undefined} [file]\r\n   *   File associated with `node` (optional); any value accepted as `x` in\r\n   *   `new VFile(x)`.\r\n   * @returns {CompileResult extends undefined ? Value : CompileResult}\r\n   *   Textual representation of the tree (see note).\r\n   *\r\n   *   > **Note**: unified typically compiles by serializing: most compilers\r\n   *   > return `string` (or `Uint8Array`).\r\n   *   > Some compilers, such as the one configured with\r\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\r\n   *   > React tree).\r\n   *   > If you’re using a compiler that doesn’t serialize, expect different\r\n   *   > result values.\r\n   *   >\r\n   *   > To register custom results in TypeScript, add them to\r\n   *   > {@linkcode CompileResultMap}.\r\n   *\r\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\r\n   */\r\n  stringify(tree, file) {\r\n    this.freeze()\r\n    const realFile = vfile(file)\r\n    const compiler = this.compiler || this.Compiler\r\n    assertCompiler('stringify', compiler)\r\n    assertNode(tree)\r\n\r\n    return compiler(tree, realFile)\r\n  }\r\n\r\n  /**\r\n   * Configure the processor to use a plugin, a list of usable values, or a\r\n   * preset.\r\n   *\r\n   * If the processor is already using a plugin, the previous plugin\r\n   * configuration is changed based on the options that are passed in.\r\n   * In other words, the plugin is not added a second time.\r\n   *\r\n   * > **Note**: `use` cannot be called on *frozen* processors.\r\n   * > Call the processor first to create a new unfrozen processor.\r\n   *\r\n   * @example\r\n   *   There are many ways to pass plugins to `.use()`.\r\n   *   This example gives an overview:\r\n   *\r\n   *   ```js\r\n   *   import {unified} from 'unified'\r\n   *\r\n   *   unified()\r\n   *     // Plugin with options:\r\n   *     .use(pluginA, {x: true, y: true})\r\n   *     // Passing the same plugin again merges configuration (to `{x: true, y: false, z: true}`):\r\n   *     .use(pluginA, {y: false, z: true})\r\n   *     // Plugins:\r\n   *     .use([pluginB, pluginC])\r\n   *     // Two plugins, the second with options:\r\n   *     .use([pluginD, [pluginE, {}]])\r\n   *     // Preset with plugins and settings:\r\n   *     .use({plugins: [pluginF, [pluginG, {}]], settings: {position: false}})\r\n   *     // Settings only:\r\n   *     .use({settings: {position: false}})\r\n   *   ```\r\n   *\r\n   * @template {Array<unknown>} [Parameters=[]]\r\n   * @template {Node | string | undefined} [Input=undefined]\r\n   * @template [Output=Input]\r\n   *\r\n   * @overload\r\n   * @param {Preset | null | undefined} [preset]\r\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\r\n   *\r\n   * @overload\r\n   * @param {PluggableList} list\r\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\r\n   *\r\n   * @overload\r\n   * @param {Plugin<Parameters, Input, Output>} plugin\r\n   * @param {...(Parameters | [boolean])} parameters\r\n   * @returns {UsePlugin<ParseTree, HeadTree, TailTree, CompileTree, CompileResult, Input, Output>}\r\n   *\r\n   * @param {PluggableList | Plugin | Preset | null | undefined} value\r\n   *   Usable value.\r\n   * @param {...unknown} parameters\r\n   *   Parameters, when a plugin is given as a usable value.\r\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\r\n   *   Current processor.\r\n   */\r\n  use(value, ...parameters) {\r\n    const attachers = this.attachers\r\n    const namespace = this.namespace\r\n\r\n    assertUnfrozen('use', this.frozen)\r\n\r\n    if (value === null || value === undefined) {\r\n      // Empty.\r\n    } else if (typeof value === 'function') {\r\n      addPlugin(value, parameters)\r\n    } else if (typeof value === 'object') {\r\n      if (Array.isArray(value)) {\r\n        addList(value)\r\n      } else {\r\n        addPreset(value)\r\n      }\r\n    } else {\r\n      throw new TypeError('Expected usable value, not `' + value + '`')\r\n    }\r\n\r\n    return this\r\n\r\n    /**\r\n     * @param {Pluggable} value\r\n     * @returns {undefined}\r\n     */\r\n    function add(value) {\r\n      if (typeof value === 'function') {\r\n        addPlugin(value, [])\r\n      } else if (typeof value === 'object') {\r\n        if (Array.isArray(value)) {\r\n          const [plugin, ...parameters] =\r\n            /** @type {PluginTuple<Array<unknown>>} */ (value)\r\n          addPlugin(plugin, parameters)\r\n        } else {\r\n          addPreset(value)\r\n        }\r\n      } else {\r\n        throw new TypeError('Expected usable value, not `' + value + '`')\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @param {Preset} result\r\n     * @returns {undefined}\r\n     */\r\n    function addPreset(result) {\r\n      if (!('plugins' in result) && !('settings' in result)) {\r\n        throw new Error(\r\n          'Expected usable value but received an empty preset, which is probably a mistake: presets typically come with `plugins` and sometimes with `settings`, but this has neither'\r\n        )\r\n      }\r\n\r\n      addList(result.plugins)\r\n\r\n      if (result.settings) {\r\n        namespace.settings = extend(true, namespace.settings, result.settings)\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @param {PluggableList | null | undefined} plugins\r\n     * @returns {undefined}\r\n     */\r\n    function addList(plugins) {\r\n      let index = -1\r\n\r\n      if (plugins === null || plugins === undefined) {\r\n        // Empty.\r\n      } else if (Array.isArray(plugins)) {\r\n        while (++index < plugins.length) {\r\n          const thing = plugins[index]\r\n          add(thing)\r\n        }\r\n      } else {\r\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @param {Plugin} plugin\r\n     * @param {Array<unknown>} parameters\r\n     * @returns {undefined}\r\n     */\r\n    function addPlugin(plugin, parameters) {\r\n      let index = -1\r\n      let entryIndex = -1\r\n\r\n      while (++index < attachers.length) {\r\n        if (attachers[index][0] === plugin) {\r\n          entryIndex = index\r\n          break\r\n        }\r\n      }\r\n\r\n      if (entryIndex === -1) {\r\n        attachers.push([plugin, ...parameters])\r\n      }\r\n      // Only set if there was at least a `primary` value, otherwise we’d change\r\n      // `arguments.length`.\r\n      else if (parameters.length > 0) {\r\n        let [primary, ...rest] = parameters\r\n        const currentPrimary = attachers[entryIndex][1]\r\n        if (isPlainObj(currentPrimary) && isPlainObj(primary)) {\r\n          primary = extend(true, currentPrimary, primary)\r\n        }\r\n\r\n        attachers[entryIndex] = [plugin, primary, ...rest]\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// Note: this returns a *callable* instance.\r\n// That’s why it’s documented as a function.\r\n/**\r\n * Create a new processor.\r\n *\r\n * @example\r\n *   This example shows how a new processor can be created (from `remark`) and linked\r\n *   to **stdin**(4) and **stdout**(4).\r\n *\r\n *   ```js\r\n *   import process from 'node:process'\r\n *   import concatStream from 'concat-stream'\r\n *   import {remark} from 'remark'\r\n *\r\n *   process.stdin.pipe(\r\n *     concatStream(function (buf) {\r\n *       process.stdout.write(String(remark().processSync(buf)))\r\n *     })\r\n *   )\r\n *   ```\r\n *\r\n * @returns\r\n *   New *unfrozen* processor (`processor`).\r\n *\r\n *   This processor is configured to work the same as its ancestor.\r\n *   When the descendant processor is configured in the future it does not\r\n *   affect the ancestral processor.\r\n */\r\nexport const unified = new Processor().freeze()\r\n\r\n/**\r\n * Assert a parser is available.\r\n *\r\n * @param {string} name\r\n * @param {unknown} value\r\n * @returns {asserts value is Parser}\r\n */\r\nfunction assertParser(name, value) {\r\n  if (typeof value !== 'function') {\r\n    throw new TypeError('Cannot `' + name + '` without `parser`')\r\n  }\r\n}\r\n\r\n/**\r\n * Assert a compiler is available.\r\n *\r\n * @param {string} name\r\n * @param {unknown} value\r\n * @returns {asserts value is Compiler}\r\n */\r\nfunction assertCompiler(name, value) {\r\n  if (typeof value !== 'function') {\r\n    throw new TypeError('Cannot `' + name + '` without `compiler`')\r\n  }\r\n}\r\n\r\n/**\r\n * Assert the processor is not frozen.\r\n *\r\n * @param {string} name\r\n * @param {unknown} frozen\r\n * @returns {asserts frozen is false}\r\n */\r\nfunction assertUnfrozen(name, frozen) {\r\n  if (frozen) {\r\n    throw new Error(\r\n      'Cannot call `' +\r\n        name +\r\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\r\n    )\r\n  }\r\n}\r\n\r\n/**\r\n * Assert `node` is a unist node.\r\n *\r\n * @param {unknown} node\r\n * @returns {asserts node is Node}\r\n */\r\nfunction assertNode(node) {\r\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\r\n  // type-coverage:ignore-next-line\r\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\r\n    throw new TypeError('Expected node, got `' + node + '`')\r\n    // Fine.\r\n  }\r\n}\r\n\r\n/**\r\n * Assert that `complete` is `true`.\r\n *\r\n * @param {string} name\r\n * @param {string} asyncName\r\n * @param {unknown} complete\r\n * @returns {asserts complete is true}\r\n */\r\nfunction assertDone(name, asyncName, complete) {\r\n  if (!complete) {\r\n    throw new Error(\r\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\r\n    )\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Compatible | undefined} [value]\r\n * @returns {VFile}\r\n */\r\nfunction vfile(value) {\r\n  return looksLikeAVFile(value) ? value : new VFile(value)\r\n}\r\n\r\n/**\r\n * @param {Compatible | undefined} [value]\r\n * @returns {value is VFile}\r\n */\r\nfunction looksLikeAVFile(value) {\r\n  return Boolean(\r\n    value &&\r\n      typeof value === 'object' &&\r\n      'message' in value &&\r\n      'messages' in value\r\n  )\r\n}\r\n\r\n/**\r\n * @param {unknown} [value]\r\n * @returns {value is Value}\r\n */\r\nfunction looksLikeAValue(value) {\r\n  return typeof value === 'string' || isUint8Array(value)\r\n}\r\n\r\n/**\r\n * Assert `value` is an `Uint8Array`.\r\n *\r\n * @param {unknown} value\r\n *   thing.\r\n * @returns {value is Uint8Array}\r\n *   Whether `value` is an `Uint8Array`.\r\n */\r\nfunction isUint8Array(value) {\r\n  return Boolean(\r\n    value &&\r\n      typeof value === 'object' &&\r\n      'byteLength' in value &&\r\n      'byteOffset' in value\r\n  )\r\n}\r\n", "export default function isPlainObject(value) {\r\n\tif (typeof value !== 'object' || value === null) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tconst prototype = Object.getPrototypeOf(value);\r\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\r\n}\r\n", "// To do: remove `void`s\r\n// To do: remove `null` from output of our APIs, allow it as user APIs.\r\n\r\n/**\r\n * @typedef {(error?: Error | null | undefined, ...output: Array<any>) => void} Callback\r\n *   Callback.\r\n *\r\n * @typedef {(...input: Array<any>) => any} Middleware\r\n *   Ware.\r\n *\r\n * @typedef Pipeline\r\n *   Pipeline.\r\n * @property {Run} run\r\n *   Run the pipeline.\r\n * @property {Use} use\r\n *   Add middleware.\r\n *\r\n * @typedef {(...input: Array<any>) => void} Run\r\n *   Call all middleware.\r\n *\r\n *   Calls `done` on completion with either an error or the output of the\r\n *   last middleware.\r\n *\r\n *   > 👉 **Note**: as the length of input defines whether async functions get a\r\n *   > `next` function,\r\n *   > it’s recommended to keep `input` at one value normally.\r\n\r\n *\r\n * @typedef {(fn: Middleware) => Pipeline} Use\r\n *   Add middleware.\r\n */\r\n\r\n/**\r\n * Create new middleware.\r\n *\r\n * @returns {Pipeline}\r\n *   Pipeline.\r\n */\r\nexport function trough() {\r\n  /** @type {Array<Middleware>} */\r\n  const fns = []\r\n  /** @type {Pipeline} */\r\n  const pipeline = {run, use}\r\n\r\n  return pipeline\r\n\r\n  /** @type {Run} */\r\n  function run(...values) {\r\n    let middlewareIndex = -1\r\n    /** @type {Callback} */\r\n    const callback = values.pop()\r\n\r\n    if (typeof callback !== 'function') {\r\n      throw new TypeError('Expected function as last argument, not ' + callback)\r\n    }\r\n\r\n    next(null, ...values)\r\n\r\n    /**\r\n     * Run the next `fn`, or we’re done.\r\n     *\r\n     * @param {Error | null | undefined} error\r\n     * @param {Array<any>} output\r\n     */\r\n    function next(error, ...output) {\r\n      const fn = fns[++middlewareIndex]\r\n      let index = -1\r\n\r\n      if (error) {\r\n        callback(error)\r\n        return\r\n      }\r\n\r\n      // Copy non-nullish input into values.\r\n      while (++index < values.length) {\r\n        if (output[index] === null || output[index] === undefined) {\r\n          output[index] = values[index]\r\n        }\r\n      }\r\n\r\n      // Save the newly created `output` for the next call.\r\n      values = output\r\n\r\n      // Next or done.\r\n      if (fn) {\r\n        wrap(fn, next)(...output)\r\n      } else {\r\n        callback(null, ...output)\r\n      }\r\n    }\r\n  }\r\n\r\n  /** @type {Use} */\r\n  function use(middelware) {\r\n    if (typeof middelware !== 'function') {\r\n      throw new TypeError(\r\n        'Expected `middelware` to be a function, not ' + middelware\r\n      )\r\n    }\r\n\r\n    fns.push(middelware)\r\n    return pipeline\r\n  }\r\n}\r\n\r\n/**\r\n * Wrap `middleware` into a uniform interface.\r\n *\r\n * You can pass all input to the resulting function.\r\n * `callback` is then called with the output of `middleware`.\r\n *\r\n * If `middleware` accepts more arguments than the later given in input,\r\n * an extra `done` function is passed to it after that input,\r\n * which must be called by `middleware`.\r\n *\r\n * The first value in `input` is the main input value.\r\n * All other input values are the rest input values.\r\n * The values given to `callback` are the input values,\r\n * merged with every non-nullish output value.\r\n *\r\n * * if `middleware` throws an error,\r\n *   returns a promise that is rejected,\r\n *   or calls the given `done` function with an error,\r\n *   `callback` is called with that error\r\n * * if `middleware` returns a value or returns a promise that is resolved,\r\n *   that value is the main output value\r\n * * if `middleware` calls `done`,\r\n *   all non-nullish values except for the first one (the error) overwrite the\r\n *   output values\r\n *\r\n * @param {Middleware} middleware\r\n *   Function to wrap.\r\n * @param {Callback} callback\r\n *   Callback called with the output of `middleware`.\r\n * @returns {Run}\r\n *   Wrapped middleware.\r\n */\r\nexport function wrap(middleware, callback) {\r\n  /** @type {boolean} */\r\n  let called\r\n\r\n  return wrapped\r\n\r\n  /**\r\n   * Call `middleware`.\r\n   * @this {any}\r\n   * @param {Array<any>} parameters\r\n   * @returns {void}\r\n   */\r\n  function wrapped(...parameters) {\r\n    const fnExpectsCallback = middleware.length > parameters.length\r\n    /** @type {any} */\r\n    let result\r\n\r\n    if (fnExpectsCallback) {\r\n      parameters.push(done)\r\n    }\r\n\r\n    try {\r\n      result = middleware.apply(this, parameters)\r\n    } catch (error) {\r\n      const exception = /** @type {Error} */ (error)\r\n\r\n      // Well, this is quite the pickle.\r\n      // `middleware` received a callback and called it synchronously, but that\r\n      // threw an error.\r\n      // The only thing left to do is to throw the thing instead.\r\n      if (fnExpectsCallback && called) {\r\n        throw exception\r\n      }\r\n\r\n      return done(exception)\r\n    }\r\n\r\n    if (!fnExpectsCallback) {\r\n      if (result && result.then && typeof result.then === 'function') {\r\n        result.then(then, done)\r\n      } else if (result instanceof Error) {\r\n        done(result)\r\n      } else {\r\n        then(result)\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Call `callback`, only once.\r\n   *\r\n   * @type {Callback}\r\n   */\r\n  function done(error, ...output) {\r\n    if (!called) {\r\n      called = true\r\n      callback(error, ...output)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Call `done` with one value.\r\n   *\r\n   * @param {any} [value]\r\n   */\r\n  function then(value) {\r\n    done(null, value)\r\n  }\r\n}\r\n", "// A derivative work based on:\r\n// <https://github.com/browserify/path-browserify>.\r\n// Which is licensed:\r\n//\r\n// MIT License\r\n//\r\n// Copyright (c) 2013 James Halliday\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\r\n// this software and associated documentation files (the \"Software\"), to deal in\r\n// the Software without restriction, including without limitation the rights to\r\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\r\n// the Software, and to permit persons to whom the Software is furnished to do so,\r\n// subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included in all\r\n// copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\r\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\r\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\r\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\r\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n// A derivative work based on:\r\n//\r\n// Parts of that are extracted from Node’s internal `path` module:\r\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\r\n// Which is licensed:\r\n//\r\n// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\nexport const minpath = {basename, dirname, extname, join, sep: '/'}\r\n\r\n/* eslint-disable max-depth, complexity */\r\n\r\n/**\r\n * Get the basename from a path.\r\n *\r\n * @param {string} path\r\n *   File path.\r\n * @param {string | null | undefined} [extname]\r\n *   Extension to strip.\r\n * @returns {string}\r\n *   Stem or basename.\r\n */\r\nfunction basename(path, extname) {\r\n  if (extname !== undefined && typeof extname !== 'string') {\r\n    throw new TypeError('\"ext\" argument must be a string')\r\n  }\r\n\r\n  assertPath(path)\r\n  let start = 0\r\n  let end = -1\r\n  let index = path.length\r\n  /** @type {boolean | undefined} */\r\n  let seenNonSlash\r\n\r\n  if (\r\n    extname === undefined ||\r\n    extname.length === 0 ||\r\n    extname.length > path.length\r\n  ) {\r\n    while (index--) {\r\n      if (path.codePointAt(index) === 47 /* `/` */) {\r\n        // If we reached a path separator that was not part of a set of path\r\n        // separators at the end of the string, stop now.\r\n        if (seenNonSlash) {\r\n          start = index + 1\r\n          break\r\n        }\r\n      } else if (end < 0) {\r\n        // We saw the first non-path separator, mark this as the end of our\r\n        // path component.\r\n        seenNonSlash = true\r\n        end = index + 1\r\n      }\r\n    }\r\n\r\n    return end < 0 ? '' : path.slice(start, end)\r\n  }\r\n\r\n  if (extname === path) {\r\n    return ''\r\n  }\r\n\r\n  let firstNonSlashEnd = -1\r\n  let extnameIndex = extname.length - 1\r\n\r\n  while (index--) {\r\n    if (path.codePointAt(index) === 47 /* `/` */) {\r\n      // If we reached a path separator that was not part of a set of path\r\n      // separators at the end of the string, stop now.\r\n      if (seenNonSlash) {\r\n        start = index + 1\r\n        break\r\n      }\r\n    } else {\r\n      if (firstNonSlashEnd < 0) {\r\n        // We saw the first non-path separator, remember this index in case\r\n        // we need it if the extension ends up not matching.\r\n        seenNonSlash = true\r\n        firstNonSlashEnd = index + 1\r\n      }\r\n\r\n      if (extnameIndex > -1) {\r\n        // Try to match the explicit extension.\r\n        if (path.codePointAt(index) === extname.codePointAt(extnameIndex--)) {\r\n          if (extnameIndex < 0) {\r\n            // We matched the extension, so mark this as the end of our path\r\n            // component\r\n            end = index\r\n          }\r\n        } else {\r\n          // Extension does not match, so our result is the entire path\r\n          // component\r\n          extnameIndex = -1\r\n          end = firstNonSlashEnd\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  if (start === end) {\r\n    end = firstNonSlashEnd\r\n  } else if (end < 0) {\r\n    end = path.length\r\n  }\r\n\r\n  return path.slice(start, end)\r\n}\r\n\r\n/**\r\n * Get the dirname from a path.\r\n *\r\n * @param {string} path\r\n *   File path.\r\n * @returns {string}\r\n *   File path.\r\n */\r\nfunction dirname(path) {\r\n  assertPath(path)\r\n\r\n  if (path.length === 0) {\r\n    return '.'\r\n  }\r\n\r\n  let end = -1\r\n  let index = path.length\r\n  /** @type {boolean | undefined} */\r\n  let unmatchedSlash\r\n\r\n  // Prefix `--` is important to not run on `0`.\r\n  while (--index) {\r\n    if (path.codePointAt(index) === 47 /* `/` */) {\r\n      if (unmatchedSlash) {\r\n        end = index\r\n        break\r\n      }\r\n    } else if (!unmatchedSlash) {\r\n      // We saw the first non-path separator\r\n      unmatchedSlash = true\r\n    }\r\n  }\r\n\r\n  return end < 0\r\n    ? path.codePointAt(0) === 47 /* `/` */\r\n      ? '/'\r\n      : '.'\r\n    : end === 1 && path.codePointAt(0) === 47 /* `/` */\r\n      ? '//'\r\n      : path.slice(0, end)\r\n}\r\n\r\n/**\r\n * Get an extname from a path.\r\n *\r\n * @param {string} path\r\n *   File path.\r\n * @returns {string}\r\n *   Extname.\r\n */\r\nfunction extname(path) {\r\n  assertPath(path)\r\n\r\n  let index = path.length\r\n\r\n  let end = -1\r\n  let startPart = 0\r\n  let startDot = -1\r\n  // Track the state of characters (if any) we see before our first dot and\r\n  // after any path separator we find.\r\n  let preDotState = 0\r\n  /** @type {boolean | undefined} */\r\n  let unmatchedSlash\r\n\r\n  while (index--) {\r\n    const code = path.codePointAt(index)\r\n\r\n    if (code === 47 /* `/` */) {\r\n      // If we reached a path separator that was not part of a set of path\r\n      // separators at the end of the string, stop now.\r\n      if (unmatchedSlash) {\r\n        startPart = index + 1\r\n        break\r\n      }\r\n\r\n      continue\r\n    }\r\n\r\n    if (end < 0) {\r\n      // We saw the first non-path separator, mark this as the end of our\r\n      // extension.\r\n      unmatchedSlash = true\r\n      end = index + 1\r\n    }\r\n\r\n    if (code === 46 /* `.` */) {\r\n      // If this is our first dot, mark it as the start of our extension.\r\n      if (startDot < 0) {\r\n        startDot = index\r\n      } else if (preDotState !== 1) {\r\n        preDotState = 1\r\n      }\r\n    } else if (startDot > -1) {\r\n      // We saw a non-dot and non-path separator before our dot, so we should\r\n      // have a good chance at having a non-empty extension.\r\n      preDotState = -1\r\n    }\r\n  }\r\n\r\n  if (\r\n    startDot < 0 ||\r\n    end < 0 ||\r\n    // We saw a non-dot character immediately before the dot.\r\n    preDotState === 0 ||\r\n    // The (right-most) trimmed path component is exactly `..`.\r\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\r\n  ) {\r\n    return ''\r\n  }\r\n\r\n  return path.slice(startDot, end)\r\n}\r\n\r\n/**\r\n * Join segments from a path.\r\n *\r\n * @param {Array<string>} segments\r\n *   Path segments.\r\n * @returns {string}\r\n *   File path.\r\n */\r\nfunction join(...segments) {\r\n  let index = -1\r\n  /** @type {string | undefined} */\r\n  let joined\r\n\r\n  while (++index < segments.length) {\r\n    assertPath(segments[index])\r\n\r\n    if (segments[index]) {\r\n      joined =\r\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\r\n    }\r\n  }\r\n\r\n  return joined === undefined ? '.' : normalize(joined)\r\n}\r\n\r\n/**\r\n * Normalize a basic file path.\r\n *\r\n * @param {string} path\r\n *   File path.\r\n * @returns {string}\r\n *   File path.\r\n */\r\n// Note: `normalize` is not exposed as `path.normalize`, so some code is\r\n// manually removed from it.\r\nfunction normalize(path) {\r\n  assertPath(path)\r\n\r\n  const absolute = path.codePointAt(0) === 47 /* `/` */\r\n\r\n  // Normalize the path according to POSIX rules.\r\n  let value = normalizeString(path, !absolute)\r\n\r\n  if (value.length === 0 && !absolute) {\r\n    value = '.'\r\n  }\r\n\r\n  if (value.length > 0 && path.codePointAt(path.length - 1) === 47 /* / */) {\r\n    value += '/'\r\n  }\r\n\r\n  return absolute ? '/' + value : value\r\n}\r\n\r\n/**\r\n * Resolve `.` and `..` elements in a path with directory names.\r\n *\r\n * @param {string} path\r\n *   File path.\r\n * @param {boolean} allowAboveRoot\r\n *   Whether `..` can move above root.\r\n * @returns {string}\r\n *   File path.\r\n */\r\nfunction normalizeString(path, allowAboveRoot) {\r\n  let result = ''\r\n  let lastSegmentLength = 0\r\n  let lastSlash = -1\r\n  let dots = 0\r\n  let index = -1\r\n  /** @type {number | undefined} */\r\n  let code\r\n  /** @type {number} */\r\n  let lastSlashIndex\r\n\r\n  while (++index <= path.length) {\r\n    if (index < path.length) {\r\n      code = path.codePointAt(index)\r\n    } else if (code === 47 /* `/` */) {\r\n      break\r\n    } else {\r\n      code = 47 /* `/` */\r\n    }\r\n\r\n    if (code === 47 /* `/` */) {\r\n      if (lastSlash === index - 1 || dots === 1) {\r\n        // Empty.\r\n      } else if (lastSlash !== index - 1 && dots === 2) {\r\n        if (\r\n          result.length < 2 ||\r\n          lastSegmentLength !== 2 ||\r\n          result.codePointAt(result.length - 1) !== 46 /* `.` */ ||\r\n          result.codePointAt(result.length - 2) !== 46 /* `.` */\r\n        ) {\r\n          if (result.length > 2) {\r\n            lastSlashIndex = result.lastIndexOf('/')\r\n\r\n            if (lastSlashIndex !== result.length - 1) {\r\n              if (lastSlashIndex < 0) {\r\n                result = ''\r\n                lastSegmentLength = 0\r\n              } else {\r\n                result = result.slice(0, lastSlashIndex)\r\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\r\n              }\r\n\r\n              lastSlash = index\r\n              dots = 0\r\n              continue\r\n            }\r\n          } else if (result.length > 0) {\r\n            result = ''\r\n            lastSegmentLength = 0\r\n            lastSlash = index\r\n            dots = 0\r\n            continue\r\n          }\r\n        }\r\n\r\n        if (allowAboveRoot) {\r\n          result = result.length > 0 ? result + '/..' : '..'\r\n          lastSegmentLength = 2\r\n        }\r\n      } else {\r\n        if (result.length > 0) {\r\n          result += '/' + path.slice(lastSlash + 1, index)\r\n        } else {\r\n          result = path.slice(lastSlash + 1, index)\r\n        }\r\n\r\n        lastSegmentLength = index - lastSlash - 1\r\n      }\r\n\r\n      lastSlash = index\r\n      dots = 0\r\n    } else if (code === 46 /* `.` */ && dots > -1) {\r\n      dots++\r\n    } else {\r\n      dots = -1\r\n    }\r\n  }\r\n\r\n  return result\r\n}\r\n\r\n/**\r\n * Make sure `path` is a string.\r\n *\r\n * @param {string} path\r\n *   File path.\r\n * @returns {asserts path is string}\r\n *   Nothing.\r\n */\r\nfunction assertPath(path) {\r\n  if (typeof path !== 'string') {\r\n    throw new TypeError(\r\n      'Path must be a string. Received ' + JSON.stringify(path)\r\n    )\r\n  }\r\n}\r\n\r\n/* eslint-enable max-depth, complexity */\r\n", "// Somewhat based on:\r\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\r\n// But I don’t think one tiny line of code can be copyrighted. 😅\r\nexport const minproc = {cwd}\r\n\r\nfunction cwd() {\r\n  return '/'\r\n}\r\n", "/**\r\n * Checks if a value has the shape of a WHATWG URL object.\r\n *\r\n * Using a symbol or instanceof would not be able to recognize URL objects\r\n * coming from other implementations (e.g. in Electron), so instead we are\r\n * checking some well known properties for a lack of a better test.\r\n *\r\n * We use `href` and `protocol` as they are the only properties that are\r\n * easy to retrieve and calculate due to the lazy nature of the getters.\r\n *\r\n * We check for auth attribute to distinguish legacy url instance with\r\n * WHATWG URL instance.\r\n *\r\n * @param {unknown} fileUrlOrPath\r\n *   File path or URL.\r\n * @returns {fileUrlOrPath is URL}\r\n *   Whether it’s a URL.\r\n */\r\n// From: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js#L720>\r\nexport function isUrl(fileUrlOrPath) {\r\n  return Boolean(\r\n    fileUrlOrPath !== null &&\r\n      typeof fileUrlOrPath === 'object' &&\r\n      'href' in fileUrlOrPath &&\r\n      fileUrlOrPath.href &&\r\n      'protocol' in fileUrlOrPath &&\r\n      fileUrlOrPath.protocol &&\r\n      // @ts-expect-error: indexing is fine.\r\n      fileUrlOrPath.auth === undefined\r\n  )\r\n}\r\n", "import {isUrl} from './minurl.shared.js'\r\n\r\nexport {isUrl} from './minurl.shared.js'\r\n\r\n// See: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js>\r\n\r\n/**\r\n * @param {URL | string} path\r\n *   File URL.\r\n * @returns {string}\r\n *   File URL.\r\n */\r\nexport function urlToPath(path) {\r\n  if (typeof path === 'string') {\r\n    path = new URL(path)\r\n  } else if (!isUrl(path)) {\r\n    /** @type {NodeJS.ErrnoException} */\r\n    const error = new TypeError(\r\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\r\n        path +\r\n        '`'\r\n    )\r\n    error.code = 'ERR_INVALID_ARG_TYPE'\r\n    throw error\r\n  }\r\n\r\n  if (path.protocol !== 'file:') {\r\n    /** @type {NodeJS.ErrnoException} */\r\n    const error = new TypeError('The URL must be of scheme file')\r\n    error.code = 'ERR_INVALID_URL_SCHEME'\r\n    throw error\r\n  }\r\n\r\n  return getPathFromURLPosix(path)\r\n}\r\n\r\n/**\r\n * Get a path from a POSIX URL.\r\n *\r\n * @param {URL} url\r\n *   URL.\r\n * @returns {string}\r\n *   File path.\r\n */\r\nfunction getPathFromURLPosix(url) {\r\n  if (url.hostname !== '') {\r\n    /** @type {NodeJS.ErrnoException} */\r\n    const error = new TypeError(\r\n      'File URL host must be \"localhost\" or empty on darwin'\r\n    )\r\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\r\n    throw error\r\n  }\r\n\r\n  const pathname = url.pathname\r\n  let index = -1\r\n\r\n  while (++index < pathname.length) {\r\n    if (\r\n      pathname.codePointAt(index) === 37 /* `%` */ &&\r\n      pathname.codePointAt(index + 1) === 50 /* `2` */\r\n    ) {\r\n      const third = pathname.codePointAt(index + 2)\r\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\r\n        /** @type {NodeJS.ErrnoException} */\r\n        const error = new TypeError(\r\n          'File URL path must not include encoded / characters'\r\n        )\r\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\r\n        throw error\r\n      }\r\n    }\r\n  }\r\n\r\n  return decodeURIComponent(pathname)\r\n}\r\n", "/**\r\n * @import {Node, Point, Position} from 'unist'\r\n * @import {Options as MessageOptions} from 'vfile-message'\r\n * @import {Compatible, Data, Map, Options, Value} from 'vfile'\r\n */\r\n\r\n/**\r\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\r\n */\r\n\r\nimport {VFileMessage} from 'vfile-message'\r\nimport {minpath} from '#minpath'\r\nimport {minproc} from '#minproc'\r\nimport {urlToPath, isUrl} from '#minurl'\r\n\r\n/**\r\n * Order of setting (least specific to most), we need this because otherwise\r\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\r\n * stem can be set.\r\n */\r\nconst order = /** @type {const} */ ([\r\n  'history',\r\n  'path',\r\n  'basename',\r\n  'stem',\r\n  'extname',\r\n  'dirname'\r\n])\r\n\r\nexport class VFile {\r\n  /**\r\n   * Create a new virtual file.\r\n   *\r\n   * `options` is treated as:\r\n   *\r\n   * *   `string` or `Uint8Array` — `{value: options}`\r\n   * *   `URL` — `{path: options}`\r\n   * *   `VFile` — shallow copies its data over to the new file\r\n   * *   `object` — all fields are shallow copied over to the new file\r\n   *\r\n   * Path related fields are set in the following order (least specific to\r\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\r\n   * `dirname`.\r\n   *\r\n   * You cannot set `dirname` or `extname` without setting either `history`,\r\n   * `path`, `basename`, or `stem` too.\r\n   *\r\n   * @param {Compatible | null | undefined} [value]\r\n   *   File value.\r\n   * @returns\r\n   *   New instance.\r\n   */\r\n  constructor(value) {\r\n    /** @type {Options | VFile} */\r\n    let options\r\n\r\n    if (!value) {\r\n      options = {}\r\n    } else if (isUrl(value)) {\r\n      options = {path: value}\r\n    } else if (typeof value === 'string' || isUint8Array(value)) {\r\n      options = {value}\r\n    } else {\r\n      options = value\r\n    }\r\n\r\n    /* eslint-disable no-unused-expressions */\r\n\r\n    /**\r\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\r\n     *\r\n     * @type {string}\r\n     */\r\n    // Prevent calling `cwd` (which could be expensive) if it’s not needed;\r\n    // the empty string will be overridden in the next block.\r\n    this.cwd = 'cwd' in options ? '' : minproc.cwd()\r\n\r\n    /**\r\n     * Place to store custom info (default: `{}`).\r\n     *\r\n     * It’s OK to store custom data directly on the file but moving it to\r\n     * `data` is recommended.\r\n     *\r\n     * @type {Data}\r\n     */\r\n    this.data = {}\r\n\r\n    /**\r\n     * List of file paths the file moved between.\r\n     *\r\n     * The first is the original path and the last is the current path.\r\n     *\r\n     * @type {Array<string>}\r\n     */\r\n    this.history = []\r\n\r\n    /**\r\n     * List of messages associated with the file.\r\n     *\r\n     * @type {Array<VFileMessage>}\r\n     */\r\n    this.messages = []\r\n\r\n    /**\r\n     * Raw value.\r\n     *\r\n     * @type {Value}\r\n     */\r\n    this.value\r\n\r\n    // The below are non-standard, they are “well-known”.\r\n    // As in, used in several tools.\r\n    /**\r\n     * Source map.\r\n     *\r\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\r\n     * module.\r\n     *\r\n     * @type {Map | null | undefined}\r\n     */\r\n    this.map\r\n\r\n    /**\r\n     * Custom, non-string, compiled, representation.\r\n     *\r\n     * This is used by unified to store non-string results.\r\n     * One example is when turning markdown into React nodes.\r\n     *\r\n     * @type {unknown}\r\n     */\r\n    this.result\r\n\r\n    /**\r\n     * Whether a file was saved to disk.\r\n     *\r\n     * This is used by vfile reporters.\r\n     *\r\n     * @type {boolean}\r\n     */\r\n    this.stored\r\n    /* eslint-enable no-unused-expressions */\r\n\r\n    // Set path related properties in the correct order.\r\n    let index = -1\r\n\r\n    while (++index < order.length) {\r\n      const field = order[index]\r\n\r\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\r\n      // `vfile`s too.\r\n      if (\r\n        field in options &&\r\n        options[field] !== undefined &&\r\n        options[field] !== null\r\n      ) {\r\n        // @ts-expect-error: TS doesn’t understand basic reality.\r\n        this[field] = field === 'history' ? [...options[field]] : options[field]\r\n      }\r\n    }\r\n\r\n    /** @type {string} */\r\n    let field\r\n\r\n    // Set non-path related properties.\r\n    for (field in options) {\r\n      // @ts-expect-error: fine to set other things.\r\n      if (!order.includes(field)) {\r\n        // @ts-expect-error: fine to set other things.\r\n        this[field] = options[field]\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the basename (including extname) (example: `'index.min.js'`).\r\n   *\r\n   * @returns {string | undefined}\r\n   *   Basename.\r\n   */\r\n  get basename() {\r\n    return typeof this.path === 'string'\r\n      ? minpath.basename(this.path)\r\n      : undefined\r\n  }\r\n\r\n  /**\r\n   * Set basename (including extname) (`'index.min.js'`).\r\n   *\r\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\r\n   * on windows).\r\n   * Cannot be nullified (use `file.path = file.dirname` instead).\r\n   *\r\n   * @param {string} basename\r\n   *   Basename.\r\n   * @returns {undefined}\r\n   *   Nothing.\r\n   */\r\n  set basename(basename) {\r\n    assertNonEmpty(basename, 'basename')\r\n    assertPart(basename, 'basename')\r\n    this.path = minpath.join(this.dirname || '', basename)\r\n  }\r\n\r\n  /**\r\n   * Get the parent path (example: `'~'`).\r\n   *\r\n   * @returns {string | undefined}\r\n   *   Dirname.\r\n   */\r\n  get dirname() {\r\n    return typeof this.path === 'string'\r\n      ? minpath.dirname(this.path)\r\n      : undefined\r\n  }\r\n\r\n  /**\r\n   * Set the parent path (example: `'~'`).\r\n   *\r\n   * Cannot be set if there’s no `path` yet.\r\n   *\r\n   * @param {string | undefined} dirname\r\n   *   Dirname.\r\n   * @returns {undefined}\r\n   *   Nothing.\r\n   */\r\n  set dirname(dirname) {\r\n    assertPath(this.basename, 'dirname')\r\n    this.path = minpath.join(dirname || '', this.basename)\r\n  }\r\n\r\n  /**\r\n   * Get the extname (including dot) (example: `'.js'`).\r\n   *\r\n   * @returns {string | undefined}\r\n   *   Extname.\r\n   */\r\n  get extname() {\r\n    return typeof this.path === 'string'\r\n      ? minpath.extname(this.path)\r\n      : undefined\r\n  }\r\n\r\n  /**\r\n   * Set the extname (including dot) (example: `'.js'`).\r\n   *\r\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\r\n   * on windows).\r\n   * Cannot be set if there’s no `path` yet.\r\n   *\r\n   * @param {string | undefined} extname\r\n   *   Extname.\r\n   * @returns {undefined}\r\n   *   Nothing.\r\n   */\r\n  set extname(extname) {\r\n    assertPart(extname, 'extname')\r\n    assertPath(this.dirname, 'extname')\r\n\r\n    if (extname) {\r\n      if (extname.codePointAt(0) !== 46 /* `.` */) {\r\n        throw new Error('`extname` must start with `.`')\r\n      }\r\n\r\n      if (extname.includes('.', 1)) {\r\n        throw new Error('`extname` cannot contain multiple dots')\r\n      }\r\n    }\r\n\r\n    this.path = minpath.join(this.dirname, this.stem + (extname || ''))\r\n  }\r\n\r\n  /**\r\n   * Get the full path (example: `'~/index.min.js'`).\r\n   *\r\n   * @returns {string}\r\n   *   Path.\r\n   */\r\n  get path() {\r\n    return this.history[this.history.length - 1]\r\n  }\r\n\r\n  /**\r\n   * Set the full path (example: `'~/index.min.js'`).\r\n   *\r\n   * Cannot be nullified.\r\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\r\n   * be turned into a path with `url.fileURLToPath`.\r\n   *\r\n   * @param {URL | string} path\r\n   *   Path.\r\n   * @returns {undefined}\r\n   *   Nothing.\r\n   */\r\n  set path(path) {\r\n    if (isUrl(path)) {\r\n      path = urlToPath(path)\r\n    }\r\n\r\n    assertNonEmpty(path, 'path')\r\n\r\n    if (this.path !== path) {\r\n      this.history.push(path)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\r\n   *\r\n   * @returns {string | undefined}\r\n   *   Stem.\r\n   */\r\n  get stem() {\r\n    return typeof this.path === 'string'\r\n      ? minpath.basename(this.path, this.extname)\r\n      : undefined\r\n  }\r\n\r\n  /**\r\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\r\n   *\r\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\r\n   * on windows).\r\n   * Cannot be nullified (use `file.path = file.dirname` instead).\r\n   *\r\n   * @param {string} stem\r\n   *   Stem.\r\n   * @returns {undefined}\r\n   *   Nothing.\r\n   */\r\n  set stem(stem) {\r\n    assertNonEmpty(stem, 'stem')\r\n    assertPart(stem, 'stem')\r\n    this.path = minpath.join(this.dirname || '', stem + (this.extname || ''))\r\n  }\r\n\r\n  // Normal prototypal methods.\r\n  /**\r\n   * Create a fatal message for `reason` associated with the file.\r\n   *\r\n   * The `fatal` field of the message is set to `true` (error; file not usable)\r\n   * and the `file` field is set to the current file path.\r\n   * The message is added to the `messages` field on `file`.\r\n   *\r\n   * > 🪦 **Note**: also has obsolete signatures.\r\n   *\r\n   * @overload\r\n   * @param {string} reason\r\n   * @param {MessageOptions | null | undefined} [options]\r\n   * @returns {never}\r\n   *\r\n   * @overload\r\n   * @param {string} reason\r\n   * @param {Node | NodeLike | null | undefined} parent\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {never}\r\n   *\r\n   * @overload\r\n   * @param {string} reason\r\n   * @param {Point | Position | null | undefined} place\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {never}\r\n   *\r\n   * @overload\r\n   * @param {string} reason\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {never}\r\n   *\r\n   * @overload\r\n   * @param {Error | VFileMessage} cause\r\n   * @param {Node | NodeLike | null | undefined} parent\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {never}\r\n   *\r\n   * @overload\r\n   * @param {Error | VFileMessage} cause\r\n   * @param {Point | Position | null | undefined} place\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {never}\r\n   *\r\n   * @overload\r\n   * @param {Error | VFileMessage} cause\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {never}\r\n   *\r\n   * @param {Error | VFileMessage | string} causeOrReason\r\n   *   Reason for message, should use markdown.\r\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\r\n   *   Configuration (optional).\r\n   * @param {string | null | undefined} [origin]\r\n   *   Place in code where the message originates (example:\r\n   *   `'my-package:my-rule'` or `'my-rule'`).\r\n   * @returns {never}\r\n   *   Never.\r\n   * @throws {VFileMessage}\r\n   *   Message.\r\n   */\r\n  fail(causeOrReason, optionsOrParentOrPlace, origin) {\r\n    // @ts-expect-error: the overloads are fine.\r\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\r\n\r\n    message.fatal = true\r\n\r\n    throw message\r\n  }\r\n\r\n  /**\r\n   * Create an info message for `reason` associated with the file.\r\n   *\r\n   * The `fatal` field of the message is set to `undefined` (info; change\r\n   * likely not needed) and the `file` field is set to the current file path.\r\n   * The message is added to the `messages` field on `file`.\r\n   *\r\n   * > 🪦 **Note**: also has obsolete signatures.\r\n   *\r\n   * @overload\r\n   * @param {string} reason\r\n   * @param {MessageOptions | null | undefined} [options]\r\n   * @returns {VFileMessage}\r\n   *\r\n   * @overload\r\n   * @param {string} reason\r\n   * @param {Node | NodeLike | null | undefined} parent\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {VFileMessage}\r\n   *\r\n   * @overload\r\n   * @param {string} reason\r\n   * @param {Point | Position | null | undefined} place\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {VFileMessage}\r\n   *\r\n   * @overload\r\n   * @param {string} reason\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {VFileMessage}\r\n   *\r\n   * @overload\r\n   * @param {Error | VFileMessage} cause\r\n   * @param {Node | NodeLike | null | undefined} parent\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {VFileMessage}\r\n   *\r\n   * @overload\r\n   * @param {Error | VFileMessage} cause\r\n   * @param {Point | Position | null | undefined} place\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {VFileMessage}\r\n   *\r\n   * @overload\r\n   * @param {Error | VFileMessage} cause\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {VFileMessage}\r\n   *\r\n   * @param {Error | VFileMessage | string} causeOrReason\r\n   *   Reason for message, should use markdown.\r\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\r\n   *   Configuration (optional).\r\n   * @param {string | null | undefined} [origin]\r\n   *   Place in code where the message originates (example:\r\n   *   `'my-package:my-rule'` or `'my-rule'`).\r\n   * @returns {VFileMessage}\r\n   *   Message.\r\n   */\r\n  info(causeOrReason, optionsOrParentOrPlace, origin) {\r\n    // @ts-expect-error: the overloads are fine.\r\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\r\n\r\n    message.fatal = undefined\r\n\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Create a message for `reason` associated with the file.\r\n   *\r\n   * The `fatal` field of the message is set to `false` (warning; change may be\r\n   * needed) and the `file` field is set to the current file path.\r\n   * The message is added to the `messages` field on `file`.\r\n   *\r\n   * > 🪦 **Note**: also has obsolete signatures.\r\n   *\r\n   * @overload\r\n   * @param {string} reason\r\n   * @param {MessageOptions | null | undefined} [options]\r\n   * @returns {VFileMessage}\r\n   *\r\n   * @overload\r\n   * @param {string} reason\r\n   * @param {Node | NodeLike | null | undefined} parent\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {VFileMessage}\r\n   *\r\n   * @overload\r\n   * @param {string} reason\r\n   * @param {Point | Position | null | undefined} place\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {VFileMessage}\r\n   *\r\n   * @overload\r\n   * @param {string} reason\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {VFileMessage}\r\n   *\r\n   * @overload\r\n   * @param {Error | VFileMessage} cause\r\n   * @param {Node | NodeLike | null | undefined} parent\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {VFileMessage}\r\n   *\r\n   * @overload\r\n   * @param {Error | VFileMessage} cause\r\n   * @param {Point | Position | null | undefined} place\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {VFileMessage}\r\n   *\r\n   * @overload\r\n   * @param {Error | VFileMessage} cause\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {VFileMessage}\r\n   *\r\n   * @param {Error | VFileMessage | string} causeOrReason\r\n   *   Reason for message, should use markdown.\r\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\r\n   *   Configuration (optional).\r\n   * @param {string | null | undefined} [origin]\r\n   *   Place in code where the message originates (example:\r\n   *   `'my-package:my-rule'` or `'my-rule'`).\r\n   * @returns {VFileMessage}\r\n   *   Message.\r\n   */\r\n  message(causeOrReason, optionsOrParentOrPlace, origin) {\r\n    const message = new VFileMessage(\r\n      // @ts-expect-error: the overloads are fine.\r\n      causeOrReason,\r\n      optionsOrParentOrPlace,\r\n      origin\r\n    )\r\n\r\n    if (this.path) {\r\n      message.name = this.path + ':' + message.name\r\n      message.file = this.path\r\n    }\r\n\r\n    message.fatal = false\r\n\r\n    this.messages.push(message)\r\n\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Serialize the file.\r\n   *\r\n   * > **Note**: which encodings are supported depends on the engine.\r\n   * > For info on Node.js, see:\r\n   * > <https://nodejs.org/api/util.html#whatwg-supported-encodings>.\r\n   *\r\n   * @param {string | null | undefined} [encoding='utf8']\r\n   *   Character encoding to understand `value` as when it’s a `Uint8Array`\r\n   *   (default: `'utf-8'`).\r\n   * @returns {string}\r\n   *   Serialized file.\r\n   */\r\n  toString(encoding) {\r\n    if (this.value === undefined) {\r\n      return ''\r\n    }\r\n\r\n    if (typeof this.value === 'string') {\r\n      return this.value\r\n    }\r\n\r\n    const decoder = new TextDecoder(encoding || undefined)\r\n    return decoder.decode(this.value)\r\n  }\r\n}\r\n\r\n/**\r\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\r\n *\r\n * @param {string | null | undefined} part\r\n *   File path part.\r\n * @param {string} name\r\n *   Part name.\r\n * @returns {undefined}\r\n *   Nothing.\r\n */\r\nfunction assertPart(part, name) {\r\n  if (part && part.includes(minpath.sep)) {\r\n    throw new Error(\r\n      '`' + name + '` cannot be a path: did not expect `' + minpath.sep + '`'\r\n    )\r\n  }\r\n}\r\n\r\n/**\r\n * Assert that `part` is not empty.\r\n *\r\n * @param {string | undefined} part\r\n *   Thing.\r\n * @param {string} name\r\n *   Part name.\r\n * @returns {asserts part is string}\r\n *   Nothing.\r\n */\r\nfunction assertNonEmpty(part, name) {\r\n  if (!part) {\r\n    throw new Error('`' + name + '` cannot be empty')\r\n  }\r\n}\r\n\r\n/**\r\n * Assert `path` exists.\r\n *\r\n * @param {string | undefined} path\r\n *   Path.\r\n * @param {string} name\r\n *   Dependency name.\r\n * @returns {asserts path is string}\r\n *   Nothing.\r\n */\r\nfunction assertPath(path, name) {\r\n  if (!path) {\r\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\r\n  }\r\n}\r\n\r\n/**\r\n * Assert `value` is an `Uint8Array`.\r\n *\r\n * @param {unknown} value\r\n *   thing.\r\n * @returns {value is Uint8Array}\r\n *   Whether `value` is an `Uint8Array`.\r\n */\r\nfunction isUint8Array(value) {\r\n  return Boolean(\r\n    value &&\r\n      typeof value === 'object' &&\r\n      'byteLength' in value &&\r\n      'byteOffset' in value\r\n  )\r\n}\r\n", "export const CallableInstance =\r\n  /**\r\n   * @type {new <Parameters extends Array<unknown>, Result>(property: string | symbol) => (...parameters: Parameters) => Result}\r\n   */\r\n  (\r\n    /** @type {unknown} */\r\n    (\r\n      /**\r\n       * @this {Function}\r\n       * @param {string | symbol} property\r\n       * @returns {(...parameters: Array<unknown>) => unknown}\r\n       */\r\n      function (property) {\r\n        const self = this\r\n        const constr = self.constructor\r\n        const proto = /** @type {Record<string | symbol, Function>} */ (\r\n          // Prototypes do exist.\r\n          // type-coverage:ignore-next-line\r\n          constr.prototype\r\n        )\r\n        const value = proto[property]\r\n        /** @type {(...parameters: Array<unknown>) => unknown} */\r\n        const apply = function () {\r\n          return value.apply(apply, arguments)\r\n        }\r\n\r\n        Object.setPrototypeOf(apply, proto)\r\n\r\n        // Not needed for us in `unified`: we only call this on the `copy`\r\n        // function,\r\n        // and we don't need to add its fields (`length`, `name`)\r\n        // over.\r\n        // See also: GH-246.\r\n        // const names = Object.getOwnPropertyNames(value)\r\n        //\r\n        // for (const p of names) {\r\n        //   const descriptor = Object.getOwnPropertyDescriptor(value, p)\r\n        //   if (descriptor) Object.defineProperty(apply, p, descriptor)\r\n        // }\r\n\r\n        return apply\r\n      }\r\n    )\r\n  )\r\n"],
  "mappings": "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",
  "names": ["position", "start", "whitespace", "re", "parse", "name", "env", "createDebug", "disable", "debug", "self", "index", "extend", "search", "name", "index", "isArray", "isPlainObject", "setProperty", "getProperty", "name", "extend", "values", "name", "re", "space", "space", "definition", "space", "index", "values", "definition", "html", "svg", "stringify", "values", "point", "start", "position", "point", "index", "start", "cap", "create", "svg", "html", "jsx", "jsxs", "_", "point", "name", "index", "stringify", "styleToJs", "content", "code", "document", "self", "start", "code", "point", "index", "ok", "self", "code", "text", "self", "start", "code", "list", "index", "document", "flow", "string", "text", "document", "flow", "string", "text", "createDebug", "point", "code", "start", "list", "ok", "from", "index", "create", "content", "document", "text", "start", "code", "own", "link", "heading", "blockQuote", "codeText", "definition", "emphasis", "hardBreak", "html", "image", "listItem", "list", "paragraph", "strong", "thematicBreak", "compile", "index", "point", "start", "create", "data", "text", "string", "extension", "self", "index", "link", "html", "definition", "text", "definition", "paragraph", "index", "list", "index", "root", "start", "result", "search", "start", "code", "text", "thematicBreak", "html", "list", "root", "text", "thematicBreak", "index", "name", "toString", "index", "definition", "content", "listItem", "own", "emptyOptions", "handlers", "one", "values", "index", "code", "values", "index", "wrap", "extname", "start", "index", "code", "normalize", "index", "index", "field", "basename", "dirname", "assertPath", "extname", "name", "self", "own", "index", "extend", "self", "file", "tree", "compiler", "value", "parameters", "name", "isUint8Array", "error", "tree", "index"]
}
